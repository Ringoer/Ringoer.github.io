<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ringo&#39;s Coding Life</title>
  
  <subtitle>OI to ACM</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-11T07:02:42.028Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Ringoer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Welcome to No. 68 Floating Island</title>
    <link href="http://yoursite.com/uncategorized/mainpage/"/>
    <id>http://yoursite.com/uncategorized/mainpage/</id>
    <published>2332-12-31T16:00:00.000Z</published>
    <updated>2019-03-11T07:02:42.028Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><b><font size="6">Are You Going To Scarborough Fair ?</font></b></p><br><img src="http://pic.ringoer.com/id63819688.png" alt="id=63819688" title="id=63819688"><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;b&gt;&lt;font size=&quot;6&quot;&gt;Are You Going To Scarborough Fair ?&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;br&gt;&lt;img src=&quot;http://pic.ringoer.com/id63819688
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hexo唯一ID遍历器</title>
    <link href="http://yoursite.com/others/ckhyk5oi800fwm8u3wzlalvsx/"/>
    <id>http://yoursite.com/others/ckhyk5oi800fwm8u3wzlalvsx/</id>
    <published>2020-11-26T08:11:00.000Z</published>
    <updated>2020-11-27T15:27:40.392Z</updated>
    
    <content type="html"><![CDATA[<p>用 hexo 写博客，为了 URL 好看，显然要手动为每一篇文章都指定 ID，怎么防止重复呢？</p><a id="more"></a><p>可以用 python 代码实现</p><p>强语义的代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变当前工作目录，并获取目录下的所有文件</span></span><br><span class="line">os.chdir(<span class="string">'D:\hexo\source\_posts'</span>)</span><br><span class="line">arr=os.listdir()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取每个文件的内容，存数组</span></span><br><span class="line">arr=[open(file,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>).read() <span class="keyword">for</span> file <span class="keyword">in</span> arr]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取每个内容中的 ID，存数组</span></span><br><span class="line">arr=[text.split(<span class="string">'id: '</span>)[<span class="number">1</span>].split(<span class="string">'\n'</span>)[<span class="number">0</span>] <span class="keyword">for</span> text <span class="keyword">in</span> arr]</span><br><span class="line">arr.sort()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">  print(i)</span><br></pre></td></tr></table></figure><p>通过如上代码，一眼就可以看出哪里 ID 重复了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 hexo 写博客，为了 URL 好看，显然要手动为每一篇文章都指定 ID，怎么防止重复呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="others" scheme="http://yoursite.com/categories/others/"/>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>计算机网络</title>
    <link href="http://yoursite.com/knowledge/computer-network/"/>
    <id>http://yoursite.com/knowledge/computer-network/</id>
    <published>2020-11-25T13:31:00.000Z</published>
    <updated>2020-11-27T15:27:54.141Z</updated>
    
    <content type="html"><![CDATA[<p>本文简单介绍一些计算机网络相关的专业知识</p><a id="more"></a><p>众所周知，计算机网络最重要的概念是 OSI 七层模型</p><h1 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h1><p>自底向上，分为以下七层</p><ol><li>物理层，完成 bit 到载波之间的转换，处理物理介质接口</li><li>数据链路层，负责介质访问控制和逻辑链路控制</li><li>网络层，负责主机到主机之间的通信与路由寻址</li><li>传输层，负责进程间端到端通信和可靠传输</li><li>会话层，负责会话的建立、撤销与面向连接的口令认证等</li><li>表示层，负责信息的加密、解密、压缩、转换等</li><li>应用层，提供最通用的应用程序（电子邮件、web等），完成用户与软件的交互</li></ol><p>然后先介绍一下重要的协议们</p><ol><li>网络层，IP 协议</li><li>传输层，TCP 协议</li><li>应用层，HTTP 协议</li><li>介于网络层和传输层之间，SSL 协议</li></ol><h1 id="IP-协议"><a href="#IP-协议" class="headerlink" title="IP 协议"></a>IP 协议</h1><p>网络层负责路径确定与逻辑寻址</p><p>而路径，就是由 IP 地址提供的，通过点分十进制计数法确定 IPv4 地址</p><p>但是显然 IP 地址总数是有限的，怎么延长寿命呢？</p><p>1985 年起增加 “子网号字段”，IP 地址变为 网络号+子网号+主机号</p><p>其中，主机号全 0 代表网络，主机号全 1 代表广播</p><p>这样，网络数量就增加了，但还是不够用，于是又产生了 网络地址转换——NAT</p><p>根据网络的 ABC 类，分配不同的私有地址，私有地址是同一路由器内特有的</p><p>常见的民用 IP 地址是 C 类，私有地址就是 192.168.0.0/16， 16 指子网掩码</p><p>为了 IP 协议的正常运转，又产生了 差错报告机制——ICMP，我们知道的 ping 命令测试网络连接可达性，就是基于 ICMP 的</p><p>而且 ping 命令是应用层直接使用 网络层 ICMP 的，并没有经过传输层的 TCP 或 UDP</p><p>一个 ping 实例如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ping baidu.com</span><br><span class="line"></span><br><span class="line">正在 Ping baidu.com [220.181.38.148] 具有 32 字节的数据:</span><br><span class="line">来自 220.181.38.148 的回复: 字节=32 时间=49ms TTL=53</span><br><span class="line">来自 220.181.38.148 的回复: 字节=32 时间=46ms TTL=53</span><br><span class="line">来自 220.181.38.148 的回复: 字节=32 时间=47ms TTL=53</span><br><span class="line">来自 220.181.38.148 的回复: 字节=32 时间=47ms TTL=53</span><br><span class="line"></span><br><span class="line">220.181.38.148 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，</span><br><span class="line">往返行程的估计时间(以毫秒为单位):</span><br><span class="line">    最短 = 46ms，最长 = 49ms，平均 = 47ms</span><br></pre></td></tr></table></figure><h1 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h1><p>传输层有 TCP 协议和 UDP 协议，其中 TCP 协议负责端到端连接、可靠性和流量控制</p><p>TCP 的特点如下</p><ol><li>面向连接</li><li>点对点</li><li>可靠</li><li>全双工</li><li>字节流</li></ol><p>相对的 UDP 的特点如下</p><ol><li>无连接</li><li>尽力交付</li><li>面向报文</li><li>允许广播</li></ol><p>因为 TCP 有 UDP 所没有的最重要的机制 —— 三次握手、四次挥手，所以 TCP 传输会比 UDP 安全很多，也易于控制，但是也因此在连接上消耗了更多时间，传输速率不如 UDP 快</p><p>TCP 的主要机制如下，其特点全部依赖其机制</p><ul><li>应答机制、超时机制、重传机制、窗口机制</li><li>流量控制：滑动窗口机制</li><li>拥塞控制：慢开始、拥塞避免、快重传、快恢复、随机早期检测</li><li>连接的建立和解除：三次握手、四次挥手</li></ul><p>虽然实际的数据报交换还是网络层在负责，但传输层解决了网络层的主要问题：丢包、重复、乱序</p><p>为什么可以解决这些问题呢？因为网络通信本质上是两个进程间的通信，而不是主机之间的通信</p><p>通信中由 IP 地址唯一标识主机，由端口号唯一标识进程，所以可以通过 IP 地址+端口号的形式来进行进程间通信</p><p>而传输层又向上层隐藏了硬件拓扑、路由细节等，使得上层应用程序可以直接调用其接口，建立一条虚拟的端到端的通信信道</p><p>建立信道和解除的过程如下图</p><p><img src="https://pic.ringoer.com/三次握手.png" alt="三次握手"><img src="https://pic.ringoer.com/四次挥手.png" alt="四次挥手"></p><h1 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>万维网 WWW（World Wide Web）建立的原因，是一个美好的愿景：万物互联</p><p>万维网是分布式超媒体系统，是超文本系统的扩充</p><p>在万维网客户程序与万维网服务器程序之间进行交互所使用的就是超文本传输协议 HTTP，这是一个应用层协议，基于 TCP 进行可靠传输</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><p>万维网通过”链接”的方法能主动地按需获取信息，不同的信息通过 <strong>统一资源定位符 URL</strong> 来标识</p><p>URL 的格式如下</p><p><code>&lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt;</code></p><p>此处的协议可以是 http、ftp、file 等，但本文只介绍 http 协议相关内容</p><h2 id="协议版本"><a href="#协议版本" class="headerlink" title="协议版本"></a>协议版本</h2><p>HTTP 1.0 协议是无状态的，HTTP 本身也是无连接的，虽然使用了基于 TCP 的可靠传输，但是每次通过 TCP 传输完毕后，该 TCP 连接都会被关闭</p><p>作为改进，HTTP 1.1 协议使用持续连接，指在收到服务器响应后，连接仍会保持一段时间，同一个客户和该服务器之间可以继续使用这条连接进行通信</p><h2 id="域名系统"><a href="#域名系统" class="headerlink" title="域名系统"></a>域名系统</h2><p>URL 中的主机号可以是 IP 地址，或一个域名，或一个计算机地址标识符</p><p>域名系统 DNS（Domain Name System）提供了将人类可读符号映射到计算机地址的服务（计算机地址不止是 IP 地址）</p><p>域名与计算机地址之间的关系是多对一，即一个域名只能映射到一个计算机地址，但一个计算机地址可以被多个域名所映射</p><p>域名的结构为 <strong>层次树状结构</strong>，由标号序列组成，各部分之间用 点号 隔开</p><p>但是如何知道域名和计算机地址的映射关系？需要通过 DNS 服务器来进行解析</p><p>每个 DNS 服务器负责一个区，此时该 DNS 服务器称为 <strong>权限域名服务器</strong>，用来保存该区中所有主机的域名到 计算机地址 的映射</p><p>包括 权限域名服务器，DNS 服务器自顶向下共有以下类型</p><ol><li><p>根域名服务器</p><p>最重要的域名服务器。所有根域名服务器都知道所有顶级域名服务器的域名和 IP 地址</p><p>不论是哪一个本地域名服务器，只要这个本地域名服务器不能自己解析一个域名，就会首先求助根域名服务器</p></li><li><p>顶级域名服务器</p><p>负责管理在自己注册的所有二级域名</p><p>响应可能是域名解析结果，也可能是下一步应当询问的域名服务器地址</p></li><li><p>权限域名服务器</p><p>负责一个区的域名服务器</p><p>响应可能是域名解析结果，也可能是下一步应当询问的权限域名服务器地址</p></li><li><p>本地域名服务器，也称为默认域名服务器</p><p>一般是客户端主机上设置的首选 DNS 服务器，也称为 ISP DNS 服务器</p><p>当主机发出 DNS 查询请求时，该请求报文首先发送给本地域名服务器</p></li></ol><p>显然查询 DNS 的请求是要经过多级中转的。如何决定查询顺序呢？</p><p>有两个阶段</p><ol><li><p>递归查询：主机向本地域名服务器的查询</p><p>如果主机所询问的本地域名服务器不知道域名解析的结果，则本地域名服务器就以 DNS 客户的身份，向其他服务器继续发出查询请求报文</p></li><li><p>迭代查询：本地域名服务器向根域名服务器及其他域名服务器的查询</p><p>如果本地域名服务器所询问的根域名服务器不知道域名解析的结果，则告诉本地域名服务器下一个查询目标服务器的地址，由本地域名服务器继续提交请求</p></li></ol><p>示意图如下</p><p><img src="https://pic.ringoer.com/DNS查询.png" alt="DNS查询"></p><p>这是服务器上的 DNS 查询，但不是每次 DNS 查询都直接从本地域名服务器开始</p><p>DNS 查询流程按顺序一般如下</p><ol><li>浏览器缓存</li><li>操作系统缓存</li><li>路由器缓存</li><li>主机上的 hosts 文件</li><li>本地域名服务器…</li></ol><p>可以使用 <code>nslookup [addr]</code> 命令来解析目标域名</p><p>一个 nslookup 实例如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nslookup baidu.com</span><br><span class="line"></span><br><span class="line">服务器:  UnKnown</span><br><span class="line">Address:  192.168.1.1</span><br><span class="line"></span><br><span class="line">非权威应答:</span><br><span class="line">名称:    baidu.com</span><br><span class="line">Addresses:  220.181.38.148</span><br><span class="line">          39.156.69.79</span><br></pre></td></tr></table></figure><h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>此处特指软件意义上的端口，有别于交换机上的硬件端口</p><p>端口号一般是一个 16 为无符号整数，范围在 0 - 65536</p><p>一般 0 - 1023 号端口是服务保留端口，自己的项目最好不要启动在这些端口上，除非你知道自己在干什么</p><p>常用端口一般有 20、21、22、80、443 等</p><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><p>对于静态资源服务器，路径一般与服务器所在的磁盘目录一一对应</p><p>对于动态服务器，路径一般是个逻辑路径，用以标识资源</p><p>在动态服务器的路径，一般采用 RESTFUL API 设计，用 URI 标识资源，用 HTTP 动词描述动作</p><p>一般在路径的末尾都有一个斜杠，除非该路径指向一个具体的静态文件</p><h2 id="报文结构"><a href="#报文结构" class="headerlink" title="报文结构"></a>报文结构</h2><p>HTTP 有两类报文：请求报文（request）和响应报文（response）</p><p>由于 HTTP 是面向文本的，所以报文中每个字段都是 ASCII 码串，长度不确定</p><p>报文都分为开始行、首部行和实体主体，分别对应 Chrome 控制台中看到的 General、Headers 和 Payload</p><p>在请求报文中，开始行就是请求行</p><p>可以在本地命令行通过 <code>curl -v [url]</code> 查看报文信息</p><p>一个 curl 实例如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">curl -v baidu.com</span><br><span class="line"></span><br><span class="line">* Rebuilt URL to: baidu.com/</span><br><span class="line">*   Trying 220.181.38.148...</span><br><span class="line">* TCP_NODELAY <span class="built_in">set</span></span><br><span class="line">* Connected to baidu.com (220.181.38.148) port 80 (<span class="comment">#0)</span></span><br><span class="line">&gt; GET / HTTP/1.1</span><br><span class="line">&gt; Host: baidu.com</span><br><span class="line">&gt; User-Agent: curl/7.55.1</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt;</span><br><span class="line">&lt; HTTP/1.1 200 OK</span><br><span class="line">&lt; Date: Fri, 27 Nov 2020 04:02:06 GMT</span><br><span class="line">&lt; Server: Apache</span><br><span class="line">&lt; Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT</span><br><span class="line">&lt; ETag: <span class="string">"51-47cf7e6ee8400"</span></span><br><span class="line">&lt; Accept-Ranges: bytes</span><br><span class="line">&lt; Content-Length: 81</span><br><span class="line">&lt; Cache-Control: max-age=86400</span><br><span class="line">&lt; Expires: Sat, 28 Nov 2020 04:02:06 GMT</span><br><span class="line">&lt; Connection: Keep-Alive</span><br><span class="line">&lt; Content-Type: text/html</span><br><span class="line">&lt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"refresh"</span> content=<span class="string">"0;url=http://www.baidu.com/"</span>&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">* Connection <span class="comment">#0 to host baidu.com left intact</span></span><br></pre></td></tr></table></figure><h2 id="HTTP-动词"><a href="#HTTP-动词" class="headerlink" title="HTTP 动词"></a>HTTP 动词</h2><p>显然请求方法是很重要的。通常有如下请求方法</p><table><thead><tr><th>方法</th><th>意义</th></tr></thead><tbody><tr><td>OPTION</td><td>向服务器请求一些构成请求的关键选项，例如允许的方法</td></tr><tr><td>HEAD</td><td>向服务器询问，首部行中哪些头部是 required</td></tr><tr><td>GET</td><td>查</td></tr><tr><td>POST</td><td>增</td></tr><tr><td>PUT</td><td>改</td></tr><tr><td>PATCH</td><td>部分改</td></tr><tr><td>DELETE</td><td>删</td></tr><tr><td>TRACE</td><td>用于环回测试</td></tr><tr><td>CONNECT</td><td>用于代理服务器</td></tr></tbody></table><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><p>HTTP 状态码分为 5 大类</p><table><thead><tr><th>状态码</th><th>意义</th></tr></thead><tbody><tr><td>1xx</td><td>通知</td></tr><tr><td>2xx</td><td>成功</td></tr><tr><td>3xx</td><td>重定向</td></tr><tr><td>4xx</td><td>客户端出错</td></tr><tr><td>5xx</td><td>服务器出错</td></tr></tbody></table><p>常见的有 200、301、302、304、401、403、404、415、500、502 等</p><h1 id="SSL-协议"><a href="#SSL-协议" class="headerlink" title="SSL 协议"></a>SSL 协议</h1><p>SSL 只有一个重点，就是 RSA 加密，可以查看本文 <a href="https://ringoer.com/algorithm/rsa/" target="_blank" rel="noopener">图解非对称加密</a></p><p>接下来介绍一下物理层和数据链路层</p><p>待续</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文简单介绍一些计算机网络相关的专业知识&lt;/p&gt;
    
    </summary>
    
    
      <category term="knowledge" scheme="http://yoursite.com/categories/knowledge/"/>
    
    
      <category term="computer-network" scheme="http://yoursite.com/tags/computer-network/"/>
    
      <category term="knowledge" scheme="http://yoursite.com/tags/knowledge/"/>
    
  </entry>
  
  <entry>
    <title>CSS动画</title>
    <link href="http://yoursite.com/frontend/css-animation/"/>
    <id>http://yoursite.com/frontend/css-animation/</id>
    <published>2020-11-24T16:15:00.000Z</published>
    <updated>2020-11-26T08:02:19.053Z</updated>
    
    <content type="html"><![CDATA[<p>CSS 也具备原生的动画实现机制，可以在不使用或少使用 JS 的情况下做到动画的效果</p><a id="more"></a><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>CSS 动画是基于对盒模型的变形、变色等 2D变换 实现的</p><p>也就是说，其核心是 transform 属性</p><p>一般有三种方案</p><ol><li>定时器</li><li>transition 过渡</li><li>animation 动画</li></ol><p>显然动画是逐帧播放的，每一帧都依赖于浏览器渲染。于是先介绍一下浏览器渲染</p><h1 id="浏览器渲染"><a href="#浏览器渲染" class="headerlink" title="浏览器渲染"></a>浏览器渲染</h1><p>关于浏览器渲染的详细优化，可以查阅 <a href="https://developers.google.com/web/fundamentals/performance/rendering" target="_blank" rel="noopener">渲染性能</a></p><p>首先介绍一个关键词：像素管道</p><h2 id="像素管道"><a href="#像素管道" class="headerlink" title="像素管道"></a>像素管道</h2><p>如图，这就是像素管道，表示渲染的全过程</p><p><img src="https://pic.ringoer.com/css-animation-render-5.jpg" alt=""></p><ul><li><strong>JavaScript</strong>。一般来说，我们会使用 JavaScript 来实现一些视觉变化的效果。比如用 jQuery 的 <code>animate</code> 函数做一个动画、对一个数据集进行排序或者往页面里添加一些 DOM 元素等。当然，除了 JavaScript，还有其他一些常用方法也可以实现视觉变化效果，比如：CSS Animations、Transitions 和 Web Animation API。</li><li><strong>样式计算</strong>。此过程是根据匹配选择器（例如 <code>.headline</code> 或 <code>.nav &gt; .nav__item</code>）计算出哪些元素应用哪些 CSS 规则的过程。从中知道规则之后，将应用规则并计算每个元素的最终样式。</li><li><strong>布局</strong>。在知道对一个元素应用哪些规则之后，浏览器即可开始计算它要占据的空间大小及其在屏幕的位置。网页的布局模式意味着一个元素可能影响其他元素，例如 <code>&lt;body&gt;</code> 元素的宽度一般会影响其子元素的宽度以及树中各处的节点，因此对于浏览器来说，布局过程是经常发生的。</li><li><strong>绘制</strong>。绘制是填充像素的过程。它涉及绘出文本、颜色、图像、边框和阴影，基本上包括元素的每个可视部分。绘制一般是在多个表面（通常称为层）上完成的。</li><li><strong>合成</strong>。由于页面的各部分可能被绘制到多层，由此它们需要按正确顺序绘制到屏幕上，以便正确渲染页面。对于与另一元素重叠的元素来说，这点特别重要，因为一个错误可能使一个元素错误地出现在另一个元素的上层。</li></ul><p>并非每次渲染都会触发全部的 5 个过程，大致分为如下 3 种</p><ol><li><p>JS / CSS &gt; 样式 &gt; 布局 &gt; 绘制 &gt; 合成</p><p><img src="https://pic.ringoer.com/css-animation-render-5.jpg" alt=""></p><p>当修改了元素的几何属性时，会触发重新布局，所以 5 个过程都会执行</p></li><li><p>JS / CSS &gt; 样式 &gt; 绘制 &gt; 合成</p><p><img src="https://pic.ringoer.com/css-animation-render-4.jpg" alt=""></p><p>如果只是修改了背景图片、文字颜色等仅依赖绘制的属性，即不会影响布局，则浏览器会跳过布局，但仍将执行绘制</p></li><li><p>JS / CSS &gt; 样式 &gt; 合成</p><p><img src="https://pic.ringoer.com/css-animation-render-3.jpg" alt=""></p><p>如果更改的属性是一个既不需要布局也不需要绘制的属性，则浏览器将直接跳到合成</p><p>第 3 种情况的开销最小，最适合于应用生命周期中的高压力点，例如动画或滚动</p></li></ol><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>首次布局，称之为 布局（layout）</p><p>之后的修改布局，称之为 回流 或 重排（reflow）</p><p>重排，即元素的几何属性被修改，导致浏览器重新执行整个渲染流程</p><p>由上图情况 1 可得，重排必定引发重绘</p><h2 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h2><p>首次绘制，称之为 绘制（paint）</p><p>之后的修改表现，称之为 重绘（repaint）</p><p>重绘，即背景图片、文字颜色等仅依赖绘制的属性被修改，导致浏览器重新绘制所需的颜色等</p><p>由上图情况 1 和 2 可得，引发重绘的时候不一定发生重排</p><h2 id="合成"><a href="#合成" class="headerlink" title="合成"></a>合成</h2><p>已经算完了，只要同步到页面上就可以了，这就是合成，所以不能跳过</p><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>那怎么知道什么属性会不会引发重排或重绘呢？可以查看 <a href="https://csstriggers.com/" target="_blank" rel="noopener">CSS Triggers</a></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>Chrome 提供了工具，来帮助开发者确定什么时候发生了重绘</p><p>打开工具的流程如下</p><ol><li><p>F12 打开开发者工具</p></li><li><p>在 HTML 和 CSS 界面，按 ESC 打开 console 界面</p></li><li><p>按 console 界面左上角的更多，打开 Rendering 面板</p></li><li><p>勾选 Paint flashing，即可观察到浏览器在每次发生重绘时，重绘的部分发绿</p><p>设置如图</p><p><img src="https://pic.ringoer.com/css-animation-rendering.png" alt=""></p><p>也可以查看 Chrome 的文档 <a href="https://developers.google.com/web/fundamentals/performance/rendering/simplify-paint-complexity-and-reduce-paint-areas#%E4%BD%BF%E7%94%A8_chrome_devtools_%E5%BF%AB%E9%80%9F%E7%A1%AE%E5%AE%9A%E7%BB%98%E5%88%B6%E7%93%B6%E9%A2%88" target="_blank" rel="noopener">使用 Chrome DevTools 快速确定绘制瓶颈</a></p></li></ol><h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><p>可以通过定时器，为某个盒子设置定时变换</p><p>一般有三种定时器</p><ol><li>setTimeout</li><li>setInterval</li><li>requestAnimationFrame</li></ol><p>其中 1 和 2 的用法相同，类似如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    div.style.cssText=<span class="string">'transform: translate(100px,200px)'</span>;</span><br><span class="line">&#125;,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>setTimeout 和 setInterval 方法都会返回一个 long 整数，表示计时器 ID</p><p>可以使用 cancelTimeout(id) 或 cancelInterval(id) 来取消计时器</p><p>但是使用 setTimeout 的动画，不是统一管理动画帧，而是分别渲染的，所以会导致有时候这一帧还没渲染好，下一帧的请求又来了，会造成丢帧的问题</p><p>所以更建议使用 requestAnimationFrame 来管理动画</p><p>requestAnimationFrame 的方法原型是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.requestAnimationFrame(callback)</span><br></pre></td></tr></table></figure><p>要求传入一个回调函数，并在执行时向回调函数内传入一个 long 整数，表示时间戳</p><p>requestAnimationFrame 默认的执行间隔约 16.67 ms，约每秒 60 帧</p><p>可以在回调函数内通过时间戳判断是否应该准备渲染下一帧</p><p>与 setTimeout 同样的是，requestAnimationFrame 返回值也是一个 long 整数，表示计时器 ID</p><p>可以使用 cancelAnimationFrame(id) 来取消计时器</p><p>范例可以参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">MDN window.requestAnimationFrame</a> 或 <a href="https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution#%E4%BD%BF%E7%94%A8_requestanimationframe_%E6%9D%A5%E5%AE%9E%E7%8E%B0%E8%A7%86%E8%A7%89%E5%8F%98%E5%8C%96" target="_blank" rel="noopener">使用 requestAnimationFrame 来实现视觉变化</a></p><h1 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h1><p>第二种办法是使用 CSS transition 属性，令元素在两个状态之间过渡</p><p>一般用于制作悬浮等特效，呈现动画效果，而不是真正意义上的动画</p><p>查看 transition 的相关效果，可以访问 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition" target="_blank" rel="noopener">MDN transition</a></p><p>transition 一般有如下 4 个参数</p><ol><li><p>property name（required），指示监视的属性名，当该属性在指定两个状态之间发生变化的时候触发过渡效果</p><p>可以指定该属性取值为 all，表示监视该 css 选择器选中元素的所有属性</p></li><li><p>duration（required），指示过渡动画的播出时间</p></li><li><p>delay，指示过渡效果在触发时，先延迟 delay 时长，再开始播放过渡效果</p></li><li><p>timing function，指示过渡效果的变化速率曲线，默认是 ease，可以指定为 linear（线性）</p></li></ol><p>如上参数并排写，只需要用空格隔开</p><p>默认第一个出现的时间指示的是 duration，第二个才是 delay</p><p>当有多个 property 需要监视时，可以用逗号隔开参数语句</p><h1 id="animation"><a href="#animation" class="headerlink" title="animation"></a>animation</h1><p>第三种办法是使用 CSS animation 属性，令元素在若干个状态之间连续变化</p><p>与 transition 的区别是，transition 不能在没有触发条件的情况下播放，但 animation 不仅可以做到 transition 能做到的，还可以自动无限播放</p><p>查看 animation 的相关效果，可以访问 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/animation" target="_blank" rel="noopener">MDN animation</a></p><p>animation 一般有如下 8 个参数</p><ol><li>keyframe name（required），指示使用的动画帧定义</li><li>duration（required），指示动画的播出时间</li><li>delay，指示动画效果在触发时，先延迟 delay 时长，再开始播放动画效果</li><li>timing function，指示动画效果的变化速率曲线，默认是 ease，可以指定为 linear（线性）</li><li>iteration count，指示动画播出的次数，默认是 1，可以修改为 infinite</li><li>direction，指示动画播出的方向，默认是 normal，可以修改为 reverse 反向播放，或 alternate 表示来回播放</li><li>fill mode，指示动画播放结束时保留的帧，默认是 none，不保留任何帧，可以设置为 forwards 保留最后一帧，或 backwards 保留第一帧，或 both 在两个方向上扩展动画</li><li>play state，指示一个动画所处的状态，默认是 running，可以通过 JS 设置为 paused 来暂停动画，重新修改为 running 则会在暂停的位置继续播放</li></ol><p>显然，animation 属性规定了动画在播放时的参数，但还需要另外指定关键帧</p><p>在 transition 中是根据不同的动作触发，在 animation 中则是用 @keyframes 关键字定义</p><p>@keyframes 一般有如下两种写法</p><ol><li><p>from-to写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> slidein &#123;</span><br><span class="line">  <span class="selector-tag">from</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(0%); </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">to</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translateX</span>(100%);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让 animation 在起始和末尾的两个帧之间变化</p></li><li><p>百分比写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> identifier &#123;</span><br><span class="line">  0% &#123; <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; &#125;</span><br><span class="line">  30% &#123; <span class="attribute">top</span>: <span class="number">50px</span>; &#125;</span><br><span class="line">  50% &#123; <span class="attribute">top</span>: <span class="number">30px</span>; <span class="attribute">left</span>: <span class="number">20px</span>; &#125;</span><br><span class="line">  50% &#123; <span class="attribute">top</span>: <span class="number">10px</span>; &#125;</span><br><span class="line">  68%, 72% &#123; <span class="attribute">left</span>: <span class="number">50px</span>; &#125;</span><br><span class="line">  100% &#123; <span class="attribute">top</span>: <span class="number">100px</span>; <span class="attribute">left</span>: <span class="number">100%</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让动画在生命周期的不同节点呈现不同的效果</p><p>相同节点重复定义，会以最后一次定义为准，如第 4 和第 5 行，只有第 5 行会生效</p><p>相同效果可以用逗号隔开，如第 6 行</p></li></ol><p>以上，就是 CSS 动画相关的效果</p><p>关于优化等问题，需要配合 JS，此处就不描述了</p><p>谢谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS 也具备原生的动画实现机制，可以在不使用或少使用 JS 的情况下做到动画的效果&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="http://yoursite.com/categories/frontend/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>CSS布局</title>
    <link href="http://yoursite.com/frontend/css-layout/"/>
    <id>http://yoursite.com/frontend/css-layout/</id>
    <published>2020-11-23T16:15:00.000Z</published>
    <updated>2020-11-24T16:02:08.287Z</updated>
    
    <content type="html"><![CDATA[<p>现代网站都需要各种布局以保证页面展示效果，本文就说说布局</p><a id="more"></a><h1 id="布局类型"><a href="#布局类型" class="headerlink" title="布局类型"></a>布局类型</h1><h2 id="视觉类型"><a href="#视觉类型" class="headerlink" title="视觉类型"></a>视觉类型</h2><p>不同布局看起来的效果不一样</p><p>主要有 3 种</p><ol><li>两栏布局，很少单独使用了，一般用在给三栏布局的中间部分做两栏布局</li><li>三栏布局（多栏布局同三栏思路），如淘宝首页，两侧留空，中间保有内容</li><li>平均布局，如淘宝首页下方的 猜你喜欢，平均排列各种商品</li></ol><h2 id="技术类型"><a href="#技术类型" class="headerlink" title="技术类型"></a>技术类型</h2><p>可以选用不同的方案实现布局</p><p>主要有 4 种</p><ol><li>纯文档流布局</li><li>float 浮动布局</li><li>flex 弹性盒子布局</li><li>grid 网格布局</li></ol><p>本文以技术类型为轴，分别尝试实现 3 种视觉类型</p><p>本文中的两栏布局采用如下设计图</p><p><img src="https://pic.ringoer.com/css-layout-0.png" alt=""></p><p>如图，画得不太准，认为是方形就好了，同时为了展示效果，在代码中会放大 10 倍</p><p>三栏布局采用 <a href="https://www.taobao.com/" target="_blank" rel="noopener">淘宝首页</a> 作为示例</p><p>平均布局采用 <a href="https://www.bilibili.com/" target="_blank" rel="noopener">bilibili</a> 番剧区作为示例</p><h1 id="纯文档流"><a href="#纯文档流" class="headerlink" title="纯文档流"></a>纯文档流</h1><p>纯文档流布局，利用了文档流本身的特点——表现为块级的元素逐行排列，表现为内联的元素同行自左向右排列</p><h2 id="两栏布局"><a href="#两栏布局" class="headerlink" title="两栏布局"></a>两栏布局</h2><p>由图片可得，大致有如下结构的 HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"large"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用如下 CSS，即可完成两栏布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125; <span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/* 去除两列之间的空白 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span>&gt;<span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-class">.main</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125; <span class="comment">/* 令 class=main 下的子 div 和孙 div 都获得边框，便于观察 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block; <span class="comment">/* 使得左右两列并排 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 之后在左右盒子中分别逐行排列即可 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.large</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.middle</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.small</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/css-layout-1.png" alt=""></p><h2 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h2><p>显然只需要在 body 中放置 3 个块</p><p>于是可以推出如下 HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用如下 CSS，即可完成三栏布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125; <span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">/* 去除底部空白 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&gt;* &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125; <span class="comment">/* 使得三个块并排 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60vw</span>;</span><br><span class="line">&#125; <span class="comment">/* 使得 main 获得大小和边框，便于观察 */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/* 分别设定左右宽度 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20vw</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/css-layout-2.png" alt=""></p><p><img src="https://pic.ringoer.com/css-layout-3.png" alt=""></p><p>可见随着视口变小，中间部分也会自适应</p><h2 id="平均布局"><a href="#平均布局" class="headerlink" title="平均布局"></a>平均布局</h2><p>平均布局一般都设定了每个单位所占大小，所以一般分为占满全行和占不满两种</p><p>而占不满的话，在多行场合下末行又会很难看，所以一般都是占满全行</p><p>设每个块大小为 width = height = 200px，每行 4 个块，放在刚才的三栏布局的 main 元素中</p><p>那么显然，为了维持每行 4 个块，应该取消响应式</p><p>鉴于之前说过的 margin 的同行不合并特性，一般只会设置单方向（通常为 right）的 margin</p><p>设每两个块之间隔开的距离为 x，显然 4 <em> 200px + 3 </em> x = main.width - main.border.width * 2</p><p>设 x = 30px，则 main.width = 892px</p><p>可以推出如下 HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用以下 CSS，即可实现占满全行的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 去除底部空白 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使得三个块并排 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&gt;* &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使得 main 获得大小和边框，便于观察 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">892px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分别设定左右宽度 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>((100vw - 892px) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>((100vw - 892px) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.entity</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/css-layout-4.png" alt=""></p><p>发现惨了！怎么换行了！</p><p>从开发者工具可以看到，是因为每行最后一个 div 的右外边距超出容器了，所以被换行，这时候，我们需要添加如下 CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 去除底部空白 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使得三个块并排 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&gt;* &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使得 main 获得大小和边框，便于观察 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">892px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分别设定左右宽度 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>((100vw - 892px) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>((100vw - 892px) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.entity</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择第 4 个 entity div 并取消其右外边距 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.column</span>&gt;<span class="selector-class">.entity</span><span class="selector-pseudo">:nth-child(4)</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或选用对容器进行调整的 CSS，更高级，更受面试官喜爱</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 去除底部空白 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使得三个块并排 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&gt;* &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使得 main 获得大小和边框，便于观察 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">892px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分别设定左右宽度 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>((100vw - 892px) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>((100vw - 892px) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.entity</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 令行末的右外边距折返 30px */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.column</span> &#123;</span><br><span class="line">    <span class="attribute">margin-right</span>: -<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/css-layout-5.png" alt=""></p><p>但是现在纯文档流布局已经没人用了，除非你的网站需要在 IE 6 以下运行……</p><h1 id="float"><a href="#float" class="headerlink" title="float"></a>float</h1><p>通过 caniuse，我们知道对于 IE，float 可以运行在 IE 6 7 8 9 10 11 上，除非 6 以下才需要使用纯文档流布局</p><p>而 flex 在 IE 6 7 8 9 上都不能使用，10 和 11 的兼容性也不是完全兼容</p><p>所以，假如你还需要兼容 IE，最好使用 float 布局</p><h2 id="两栏布局-1"><a href="#两栏布局-1" class="headerlink" title="两栏布局"></a>两栏布局</h2><p>由图片可得，大致有如下结构的 HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main clearfix"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"large"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用如下 CSS，即可完成两栏布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 去除两列之间的空白 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span>&gt;<span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-class">.main</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 令 class=main 下的子 div 和孙 div 都获得边框，便于观察 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 令 left 和 right 都向左浮动 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 之后在左右盒子中分别逐行排列即可 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.large</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.middle</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.small</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用于清除浮动，否则会发现父元素的高度变成了 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图与纯文档流相同</p><p><img src="https://pic.ringoer.com/css-layout-1.png" alt=""></p><p>从 CSS 可见，如果同层级的两个元素都是向左浮动的话，则排列顺序按照其在文档中的出现顺序</p><p>当然也可以令右边盒子向右浮动，此时右边盒子会出现在父元素的最右边，具体位置取决于父元素宽度</p><p>在本例中，如果父元素宽度为 800px，则与向左浮动表现相同</p><h2 id="三栏布局-1"><a href="#三栏布局-1" class="headerlink" title="三栏布局"></a>三栏布局</h2><p>显然只需要在 body 中放置 3 个块</p><p>于是可以推出如下 HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用如下 CSS，即可完成三栏布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使得 main 获得大小和边框，便于观察 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid white;</span><br><span class="line">    <span class="comment">/* 若不设定边框，则会观察到左右空白的宽度都变为 0，但可以设置白色边框保持左边空白 */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="comment">/* 右边不需要设置边框，因为排列是从左向右的，除非 main 的 float = right */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">20vw</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用于清除浮动，否则会发现父元素的高度变成了 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图与纯文档流相同</p><p><img src="https://pic.ringoer.com/css-layout-2.png" alt=""></p><h2 id="平均布局-1"><a href="#平均布局-1" class="headerlink" title="平均布局"></a>平均布局</h2><p>float 实现平均布局的代码和效果，与纯文档流几乎一致，除了 <code>clearfix</code>，就只是把</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;</span><br></pre></td></tr></table></figure><p>换成了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">float</span>: <span class="selector-tag">left</span>;</span><br></pre></td></tr></table></figure><p>而已</p><p>关于右外边距溢出容器的处理，也与纯文档流一致</p><p>故此处不再给出示例</p><h1 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h1><p>通过 caniuse 可以发现，除了 IE 之外的所有浏览器最新版本均支持 flex，但 grid 布局尚未受到全面支持</p><p>所以当你不需要兼容 IE，但又不是只需要兼容最新的浏览器时，可以选择 flex 布局方案</p><p>附一个 flex 布局小游戏</p><p><a href="https://flexboxfroggy.com/#zh-cn" target="_blank" rel="noopener">FLEXBOX FROGGY</a></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool(%E8%AF%AD%E6%B3%95%E7%AF%87" target="_blank" rel="noopener">Flex 布局教程：语法篇</a>)</p><p>flex 有两个主要概念：容器（container）和项目（item）</p><p>一个容器中包含两条轴：主轴和交叉轴，交叉轴恒垂直于主轴。默认主轴是水平方向</p><p>一个容器中往往包含多个项目，项目沿主轴排列</p><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>容器上可以设置 6 个属性</p><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-content</li></ul><p>属性含义不解释了，本文不是教语法的，是教布局的，可以点击阮一峰博客学习语法</p><p>下同，不讲语法</p><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>项目上可以设置 6 个属性</p><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ul><h2 id="两栏布局-2"><a href="#两栏布局-2" class="headerlink" title="两栏布局"></a>两栏布局</h2><p>显然扭转主轴方向到竖直方向，更有利于排版</p><p>所以由图片可得，大致有如下结构的 HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"large"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用如下 CSS，即可完成两栏布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 令 class=main 下的子 div 和孙 div 都获得边框，便于观察 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span>&gt;<span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-class">.main</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 令主盒子成为弹性盒子容器，使得左右盒子沿默认主轴（水平方向）排列 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="comment">/* 令左右盒子都成为弹性盒子容器 */</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="comment">/* 更改主轴方向 */</span></span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 之后在左右盒子中分别设置大小即可 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.large</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.middle</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.small</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图与纯文档流相同</p><p><img src="https://pic.ringoer.com/css-layout-1.png" alt=""></p><h2 id="三栏布局-2"><a href="#三栏布局-2" class="headerlink" title="三栏布局"></a>三栏布局</h2><p>显然只需要在 body 中放置 3 个块</p><p>于是可以推出如下 HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用如下 CSS，即可完成三栏布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使得 body 成为弹性盒子容器，让三个区域都沿默认主轴（水平方向）排列 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使得 main 获得大小和边框，便于观察 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图与纯文档流相同</p><p><img src="https://pic.ringoer.com/css-layout-2.png" alt=""></p><p>代码明显比 float 简洁许多，所以是比 float 更好用的布局方案</p><h2 id="平均布局-2"><a href="#平均布局-2" class="headerlink" title="平均布局"></a>平均布局</h2><p>设每个块大小为 width = height = 200px，每行 4 个块，放在刚才的三栏布局的 main 元素中</p><p>可以推出如下 HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用以下 CSS，即可实现占满全行的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使得 body 成为弹性盒子容器，让三个区域都沿默认主轴（水平方向）排列 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使得 main 获得大小和边框，便于观察 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.column</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">15vw</span>;</span><br><span class="line">    <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.entity</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/css-layout-6.png" alt=""></p><p>发现，坏了，怎么最后一行隔开这么远</p><p>于是我们便不能使用 <code>justify-content</code> 来简单控制间距，必须使用 <code>margin-right</code> 来控制</p><p>计算结果沿用纯文档流布局的计算结果</p><p>于是 CSS 变更为如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 去除底部空白 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使得三个块并排 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>&gt;* &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使得 main 获得大小和边框，便于观察 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">892px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分别设定左右宽度 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>((100vw - 892px) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>((100vw - 892px) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 令行末的右外边距折返 30px */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.column</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">margin-right</span>: -<span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.entity</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/css-layout-7.png" alt=""></p><p>好了，使用负 margin，成功修复！</p><p>当然 nth-child 也可以，不过不建议</p><h1 id="grid"><a href="#grid" class="headerlink" title="grid"></a>grid</h1><p>通过 caniuse 可以发现，grid 布局尚未受到全面支持</p><p>所以当你只需要兼容最新的，甚至是未来的浏览器时，可以选择 grid 布局方案</p><p>附一个 grid 布局小游戏</p><p><a href="https://cssgridgarden.com/#zh-cn" target="_blank" rel="noopener">GRID GARDEN</a></p><h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><p><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html" target="_blank" rel="noopener">CSS Grid 网格布局教程</a></p><p>容器和项目的概念同 flex，但是 grid 没有主轴和交叉轴</p><p>如果说 flex 的精力集中在每个容器的主轴上，是一维操作，那 grid 布局就是二维操作</p><h3 id="容器-1"><a href="#容器-1" class="headerlink" title="容器"></a>容器</h3><p>容器上可以设置 7 种属性</p><ul><li><p>grid-template-columns/rows/areas</p></li><li><p>column/row-gap</p></li><li><p>gap</p></li><li><p>grid-auto-flow</p></li><li><p>justify/align/place-items</p></li><li><p>justify/align/place-content</p></li><li><p>grid-auto-columns/rows</p></li></ul><h3 id="项目-1"><a href="#项目-1" class="headerlink" title="项目"></a>项目</h3><p>项目上可以设置 3 种属性</p><ul><li>grid-column/row-start/end</li><li>grid-column/row/area</li><li>justify/align/place-self</li></ul><h2 id="两栏布局-3"><a href="#两栏布局-3" class="headerlink" title="两栏布局"></a>两栏布局</h2><p>由图片可得，大致有如下结构的 HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"large"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"small2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"middle3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用如下 CSS，即可完成两栏布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 令 class=main 下的子 div 和孙 div 都获得边框，便于观察 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span>&gt;<span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-class">.main</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 令主盒子成为 grid 容器 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">400px</span> <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(9, 100px);</span><br><span class="line">    <span class="attribute">grid-template-areas</span>: <span class="string">'large middle1'</span></span><br><span class="line">        <span class="string">'large middle1'</span></span><br><span class="line">        <span class="string">'large middle1'</span></span><br><span class="line">        <span class="string">'large middle2'</span></span><br><span class="line">        <span class="string">'large middle2'</span></span><br><span class="line">        <span class="string">'small1 middle2'</span></span><br><span class="line">        <span class="string">'small1 middle3'</span></span><br><span class="line">        <span class="string">'small2 middle3'</span></span><br><span class="line">        <span class="string">'small2 middle3'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.large</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: large;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.small1</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: small1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.small2</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: small2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.middle1</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: middle1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.middle2</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: middle2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.middle3</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: middle3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图与纯文档流相同</p><p><img src="https://pic.ringoer.com/css-layout-1.png" alt=""></p><p>语义化非常好，一看就知道布局长什么样</p><h2 id="三栏布局-3"><a href="#三栏布局-3" class="headerlink" title="三栏布局"></a>三栏布局</h2><p>显然只需要在 body 中放置 3 个块</p><p>于是可以推出如下 HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用如下 CSS，即可完成三栏布局</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 令 div 都获得边框，便于观察 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 令主盒子成为 grid 容器 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">3</span>fr <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">grid-template-areas</span>: <span class="string">'left center right'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如下</p><p><img src="https://pic.ringoer.com/css-layout-8.png" alt=""></p><p>这令人惊叹的高度语义化，比 flex 高到不知道哪去了</p><h2 id="平均布局-3"><a href="#平均布局-3" class="headerlink" title="平均布局"></a>平均布局</h2><p>设每个块大小为 width = height = 200px，每行 4 个块，放在刚才的三栏布局的 main 元素中</p><p>可以推出如下 HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"entity"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用以下 CSS，即可实现占满全行的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 令 div 都获得边框，便于观察 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 令主盒子成为 grid 容器 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">3</span>fr <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">grid-template-areas</span>: <span class="string">'left center right'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: center;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(4, 1fr);</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(auto-fill, 200px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/css-layout-9.png" alt=""></p><p>完美的自动占格子，不再有负 margin 的问题</p><p>即便需要间隔，也可以通过 gap 来实现</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* reset */</span></span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 令 div 都获得边框，便于观察 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 令主盒子成为 grid 容器 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">3</span>fr <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">grid-template-areas</span>: <span class="string">'left center right'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: center;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(4, 1fr);</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="built_in">repeat</span>(auto-fill, 200px);</span><br><span class="line">    <span class="attribute">column-gap</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">row-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">    <span class="attribute">grid-area</span>: right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/css-layout-10.png" alt=""></p><p>天不生我 grid 布局，万古如长夜！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现代网站都需要各种布局以保证页面展示效果，本文就说说布局&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="http://yoursite.com/categories/frontend/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>浏览器请求机制</title>
    <link href="http://yoursite.com/frontend/browser-request-mechanism/"/>
    <id>http://yoursite.com/frontend/browser-request-mechanism/</id>
    <published>2020-11-23T05:43:00.000Z</published>
    <updated>2020-11-27T15:27:59.610Z</updated>
    
    <content type="html"><![CDATA[<p>众所周知，前端的内容一般都是通过 HTTP 相关协议获取，并在浏览器上呈现的</p><a id="more"></a><p>要想深刻了解浏览器的请求机制，首先要有一定的 <a href="https://ringoer.com/knowledge/computer-network/" target="_blank" rel="noopener">计算机网络基础</a></p><h1 id="浏览器的请求流程"><a href="#浏览器的请求流程" class="headerlink" title="浏览器的请求流程"></a>浏览器的请求流程</h1><p>显然，我们要先了解一下，当我们访问一个网页时，浏览器都做了什么</p><p>浏览器执行了以下动作</p><ol><li>URL 解析，判断用户输入的是什么，自动组装请求</li><li>查看本地缓存，是否有已经缓存的该地址的资源，若未过期则直接取用，跳到处理 HTML 文档</li><li>DNS 查询，获得服务器地址</li><li>与服务器建立 TCP 连接，如果是 HTTPS 协议，还会有密钥交换</li><li>向服务器发送 HTTP 或 HTTPS 请求</li><li>服务器如果回复了一个永久重定向（301）或临时重定向（302），则浏览器需要向新的地址重新发送请求</li><li>服务器处理请求并响应，此时浏览器收到的响应状态码可能是 200 或 304</li><li>浏览器开始处理 HTML 文档，根据 HTML 文档生成 DOM 树和 CSSOM 树</li><li>合并两棵树，得到渲染树</li><li>根据渲染树，开始执行渲染五步骤</li></ol><p>总的来说，涉及以下知识点</p><ol><li>缓存机制</li><li>DNS 查询</li><li>TCP 连接</li><li>HTTP 与 HTTPS</li><li>页面渲染</li></ol><h1 id="缓存机制"><a href="#缓存机制" class="headerlink" title="缓存机制"></a>缓存机制</h1><p>显然网络请求是非常消耗时间的</p><p>有没有办法能减少网络请求呢？答案就是缓存</p><h2 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h2><p>首先要了解一下缓存保存在哪里，浏览器又是如何索引缓存的</p><p>按照访问顺序，缓存一般有如下 4 个存储位置</p><ol><li>Service Worker</li><li>Memory Cache</li><li>Disk Cache</li><li>Push Cache</li></ol><h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><p>Service Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能<br>使用 Service Worker 的话，传输协议必须为 HTTPS，因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全<br>Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的</p><h3 id="Memory-Cache"><a href="#Memory-Cache" class="headerlink" title="Memory Cache"></a>Memory Cache</h3><p>也就是内存缓存，包含一些小文件</p><p>但一旦关掉当前标签页，该标签页对应的内存缓存就被释放了</p><h3 id="Disk-Cache"><a href="#Disk-Cache" class="headerlink" title="Disk Cache"></a>Disk Cache</h3><p>硬盘缓存，显然比内存缓存要慢，但存储空间要大，且只有资源过期了才会释放资源</p><p>一般大文件会放到 Disk Cache 中，小文件放到 Memory Cache 中</p><p>但如果当前系统内存占用高，则会优先存进 Disk Cache</p><h3 id="Push-Cache"><a href="#Push-Cache" class="headerlink" title="Push Cache"></a>Push Cache</h3><p>是 HTTP 2 中的 <strong>服务端推送</strong> 产生的缓存，只在 session 中存在，且缓存时间也很短（在 Chrome 中约 5 分钟）</p><p>关于其优点，详见 HTTP 2 的特点描述</p><h2 id="缓存过程"><a href="#缓存过程" class="headerlink" title="缓存过程"></a>缓存过程</h2><p>浏览器会根据以下流程，确定缓存的处理方法</p><p>URL 解析后，是否含有目标地址的缓存？</p><ul><li><p>否</p><ul><li>向服务器发送请求</li><li>返回请求结果和缓存标识，将结果存入缓存</li></ul></li><li><p>是</p><p> 缓存是否过期？</p><p> 根据 Expires ( HTTP 1.0 ) 或 Cache-Control ( HTTP 1.1 ) 判断</p><ul><li>是（协商缓存机制）<ul><li>在头部添加字段 If-Modified-Since ( HTTP 1.0 ) 或 If-None-Match ( HTTP 1.1 ) ，然后向服务器发送请求</li><li>服务器根据字段值判断资源是否有更新，并响应给浏览器</li><li>资源是否更新？<ul><li>是，则连带 HTML 文档一同返回给浏览器，同时状态码置为 200，浏览器将请求结果存入缓存</li><li>否，返回状态码 304，读取并返回缓存</li></ul></li></ul></li><li>否（强缓存机制）<ul><li>读取并返回缓存</li></ul></li></ul></li></ul><p>缓存机制图示如下</p><p><img src="https://pic.ringoer.com/缓存机制.png" alt="缓存机制"></p><h2 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h2><p>缓存未过期，则不会向服务器发送请求，直接读取并返回缓存</p><p>该操作会在控制台产生一个假请求，返回状态码 200，并显示 from memory cache 或 from disk cache</p><p>由上图可见，有两个参数可以决定强缓存</p><ol><li>Expires</li><li>Cache-Control</li></ol><h3 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h3><p>是 HTTP 1 的产物</p><p>由服务端指定具体多久之后过期，关键字段名为 max-age，实际的 Expires = max-age + 服务器收到请求的时间</p><p>显然，Expires 是否过期，取决于与本地时间的对比结果，所以如果设置本地时间为超过 Expires 的值，则会直接造成 Expires 过期</p><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><p>是 HTTP 1.1 的产物</p><p>一般有以下字段</p><table><thead><tr><th>字段名</th><th>参考值</th><th>作用</th></tr></thead><tbody><tr><td>public</td><td>无</td><td>客户端和代理服务器均可以缓存该资源</td></tr><tr><td>private</td><td>无</td><td>只有客户端可以缓存该资源</td></tr><tr><td>max-age</td><td>30</td><td>缓存 30 秒后过期</td></tr><tr><td>s-maxage</td><td>30</td><td>覆盖 max-age，但只在代理服务器中生效</td></tr><tr><td>no-store</td><td>无</td><td>不缓存</td></tr><tr><td>no-cache</td><td>无</td><td>资源被缓存，但立即过期，下次请求会发起协商缓存认证</td></tr><tr><td>max-stale</td><td>30</td><td>30 秒内即使过期也使用该缓存</td></tr><tr><td>min-fresh</td><td>30</td><td>希望在 30 秒内获取最新的响应</td></tr></tbody></table><p>推荐的配置思路图如下</p><p><img src="https://pic.ringoer.com/Cache-Control推荐设置.png" alt=""></p><p>在使用 Cache-Control 的时候，有两种常见情况，其描述和对策如下</p><table><thead><tr><th>情况</th><th>对策</th><th>描述</th></tr></thead><tbody><tr><td>资源频繁更新</td><td>Cache-Control: no-cache</td><td>永不缓存，确保时效性</td></tr><tr><td>资源不常更新</td><td>Cache-Control: max-age=31536000</td><td>缓存一年</td></tr></tbody></table><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>由上文可知，Cache-Control 是更新版本的参数，也具有更强大的功能，所以当 Cache-Control 和 Expires 同时存在时，Cache-Control 优先级要高于 Expires</p><p>现在的 Expires，只是为了兼容不支持 HTTP 1.1 的环境罢了</p><h2 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h2><p>当强缓存查找不到未过期的合适缓存，但存在已过期的合适缓存时，浏览器会采用协商缓存策略</p><p>一般有两种情况</p><ol><li>协商缓存有效，服务器返回 304 Not Modified</li><li>协商缓存失效，服务器返回 200 和新的资源</li></ol><p>那么如何提交协商缓存请求呢？可以通过设置两组参数实现</p><h3 id="Last-Modified-和-If-Modified-Since"><a href="#Last-Modified-和-If-Modified-Since" class="headerlink" title="Last-Modified 和 If-Modified-Since"></a>Last-Modified 和 If-Modified-Since</h3><p>是 HTTP 1 提出的缓存控制参数</p><p>浏览器在第一次访问资源时，服务器可以在响应中加入请求头 Last-Modified，值是这个资源在服务器上的最后修改时间</p><p>浏览器下次强缓存命中失败，要请求这个资源时，发现这个已过期资源带有 Last-Modified 标识，则会在请求中带上 If-Modified-Since 的 header</p><p>服务器收到 If-Modified-Since 后，与服务器上的资源对比，如果 If-Modified-Since 的时间小于服务器上该资源的最后更新时间，则说明资源有更新，服务器返回 200 和新的资源文件，否则仅返回 304</p><p>但如果客户在本地打开缓存文件，即使没有修改，也依然会造成 Last-Modified 更新，此时会导致缓存失效</p><p>并且，Last-Modified 的精确度是秒，所以如果在小于秒的时间内修改了文件，Last-Modified 并不会更新，导致命中的文件不正确</p><p>所以，HTTP 1.1 提出了更加精确的验证参数，Etag 和 If-None-Match</p><h3 id="Etag-和-If-None-Match"><a href="#Etag-和-If-None-Match" class="headerlink" title="Etag 和 If-None-Match"></a>Etag 和 If-None-Match</h3><p>浏览器在第一次访问资源时，服务器可以在响应中加入请求头 Etag，值是这个资源在服务器上的唯一标识。只要文件发生变化，Etag 就会重新生成</p><p>如同 Last-Modified，浏览器在使用 Etag 进行协商缓存时，也会在请求中加入特殊的 header，此时这个 header 为 If-None-Match</p><p>如果 If-None-Match 与服务器上的文件标识符相同，则返回 304，否则返回 200 和新的资源文件</p><h3 id="对比-1"><a href="#对比-1" class="headerlink" title="对比"></a>对比</h3><p>显然 Etag 要比 Last-Modified 更精确，但精确的代价就是生成标识符的算法的复杂性增大</p><p>但大部分情况下，Etag 造成的性能损耗都可以忽略不计，所以当 Etag 和 Last-Modified 同时存在时，Etag 的优先级较高</p><h3 id="无缓存策略"><a href="#无缓存策略" class="headerlink" title="无缓存策略"></a>无缓存策略</h3><p>如果服务器什么缓存都没设置，难道就不缓存了吗？显然不是</p><p>此时浏览器会取响应报文中的 Date 来减去 Last-Modified，取得一个时间差值，然后取这个差值的 10% 作为缓存时间</p><h1 id="DNS-查询"><a href="#DNS-查询" class="headerlink" title="DNS 查询"></a>DNS 查询</h1><p>DNS 查询流程按顺序一般如下</p><ol><li>浏览器缓存</li><li>操作系统缓存</li><li>路由器缓存</li><li>主机上的 hosts 文件</li><li>本地域名服务器等域名服务器</li></ol><h1 id="TCP-连接"><a href="#TCP-连接" class="headerlink" title="TCP 连接"></a>TCP 连接</h1><p>流程中说到，浏览器与服务器之间会建立 TCP 连接来传输数据，那么显然具有至少一个 TCP 连接</p><p>那么自然产生了以下问题</p><ol><li>一个 TCP 连接能用多久？什么时候断开？</li><li>一个 TCP 连接可以承担几个 HTTP 请求的任务？</li><li>一个 TCP 连接能不能同时发送数个 HTTP 请求？</li><li>浏览器最多能对同一服务器建立几个 TCP 连接？</li></ol><h2 id="一个-TCP-连接能用多久"><a href="#一个-TCP-连接能用多久" class="headerlink" title="一个 TCP 连接能用多久"></a>一个 TCP 连接能用多久</h2><p>在 HTTP 1 中，服务器会在响应了一个 HTTP 请求后，立刻断开这个 TCP 连接</p><p>但如果要对该服务器连续发起多个请求，重复建立连接显然开销过大</p><p>于是开始有某些服务器，提出了不在 HTTP 标准中的头部字段 Connection，并通过设置 Connection: keep-alive 来保持当前请求使用的 TCP 连接不断开</p><p>因为 SSL 也是基于 TCP 的，所以此时 SSL 连接也不会断开，不需要重新交换密钥和验证</p><p>既然 Connection: keep-alive 这么好用，于是 HTTP 1.1 就将其加入了标准之中，并且默认保持 TCP 连接，除非手动在请求头中指定 Connection: close</p><h2 id="一个-TCP-连接可以承担几个-HTTP-请求的任务"><a href="#一个-TCP-连接可以承担几个-HTTP-请求的任务" class="headerlink" title="一个 TCP 连接可以承担几个 HTTP 请求的任务"></a>一个 TCP 连接可以承担几个 HTTP 请求的任务</h2><p>从上一个问题，显然可以看出，如果一个 TCP 连接不断开，是可以用来发送多个 HTTP 请求的，直到断开为止</p><h2 id="一个-TCP-连接能不能同时发送数个-HTTP-请求"><a href="#一个-TCP-连接能不能同时发送数个-HTTP-请求" class="headerlink" title="一个 TCP 连接能不能同时发送数个 HTTP 请求"></a>一个 TCP 连接能不能同时发送数个 HTTP 请求</h2><p>在 HTTP 1.1 中，一个 TCP 连接同时只能处理一个请求，不同请求不能同时使用同一个 TCP 连接</p><p>虽然标准中设计了一个参数 Pipelining 来试图解决这个问题，但是了解网络工作原理的人都知道，客户端按某个顺序发送的请求，服务器并不能按顺序接收（同一个请求的 IP 报文可以，详见 IP 数据报）</p><p>那就造成客户端发送请求后，接收到的响应不能和请求按发送时的顺序一一对应，那请求就完全错乱了</p><p>所以在 HTTP 1.x 的场合，浏览器没有合适的并发方案，只能通过保持连接或同时并行多个连接来提高效率</p><p>但是 HTTP 2 中引入了多路复用的概念，在应用层采取如同网络层的 IP 数据报一样的分段标号模式，此时同一个 TCP 连接就可以正常并发多个 HTTP 请求了</p><h2 id="浏览器最多能对同一服务器建立几个-TCP-连接"><a href="#浏览器最多能对同一服务器建立几个-TCP-连接" class="headerlink" title="浏览器最多能对同一服务器建立几个 TCP 连接"></a>浏览器最多能对同一服务器建立几个 TCP 连接</h2><p>依据浏览器不同，这个限制是不同的</p><p>对于 Chrome，最多允许对同一个 host 建立 6 个 TCP 连接</p><h1 id="HTTP-与-HTTPS"><a href="#HTTP-与-HTTPS" class="headerlink" title="HTTP 与 HTTPS"></a>HTTP 与 HTTPS</h1><p>HTTP 1.0 和 HTTP 1.1 在上文已经有提到一些了，除了缓存机制和 TCP 以外也没有什么太大的差别，所以着重讨论 HTTP 2.0 和 HTTPS</p><h2 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP 2.0"></a>HTTP 2.0</h2><p>HTTP 2.0 有如下特点</p><ol><li>二进制分帧</li><li>首部压缩</li><li>多路复用</li><li>服务端推送</li></ol><h3 id="二进制分帧"><a href="#二进制分帧" class="headerlink" title="二进制分帧"></a>二进制分帧</h3><p>我们知道数据链路层有以太网帧，网络层有 IP 报文分割，此处的二进制分帧设计思路正是基于前两者的特点而得来的</p><p>使用了二进制分帧后，每个 HTTP 报文都使用二进制格式传输数据，每个报文都由一个或多个帧组成</p><p>相比 HTTP 1.x 的文本格式传输，HTTP 2.0 的二进制格式解析效率更高</p><p>为了正常使用帧，HTTP 2.0 同时使用了流的概念</p><p>流是一个虚拟通道，可以承载双向消息，每个流都有一个唯一 ID</p><p>简单理解，流就是同一组请求和响应的组号</p><h3 id="首部压缩"><a href="#首部压缩" class="headerlink" title="首部压缩"></a>首部压缩</h3><p>显然每个请求之间都使用了大量的头部字段，且这些字段的值在浏览器和服务器之前是一致的</p><p>HTTP 2.0 则采用了”首部表”来缓存已经发送过的头部字段键值对，使得浏览器和服务器对于与缓存相同的字段，不需要重复在请求中发送，显著减小了请求报文的大小</p><p>该首部表在 HTTP 2.0 连接断开前始终存在，由使用双方共同更新</p><p>当产生未记录的键值对时，要么更新首部表中的记录值，要么追加到首部表的末端</p><h3 id="多路复用"><a href="#多路复用" class="headerlink" title="多路复用"></a>多路复用</h3><p>在 HTTP 2.0 中，相同域名下的所有通信都使用同一个连接完成，该连接可以并发任意数量的请求和响应，克服了 HTTP 1.x 中同一个连接不能并发请求的问题，消除了 TCP 连接多次建立以及浏览器同时维护多个 TCP 连接的开销</p><p>之所以可以做到这一点，是因为二进制分帧后，同一个流的每个帧都含有首部流标识，可以乱序发送，双方都可以根据首部流标识得到正确的消息</p><p>该设计思路的具体描述可以参考 IP 数据报的分割</p><h3 id="服务端推送"><a href="#服务端推送" class="headerlink" title="服务端推送"></a>服务端推送</h3><p>是 HTTP 2.0 最重要的特性</p><p>在 HTTP 1.x 中，如果浏览器没有发出请求，服务器是不能向浏览器发送数据的</p><p>但在 HTTP 2.0 中，服务器可以打开 PUSH 模式，当浏览器请求了一个资源后，服务器可以推送相关资源给浏览器</p><p>例如，有如下 HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"example.png"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果在 HTTP 1.x 中，浏览器需要发起 3 个请求，才可以得到整个页面的完整数据</p><p>但在 HTTP 2.0 中，如果服务器打开 了 PUSH 模式，浏览器只需要发送 1 个请求，申请取得 HTML 文档，服务器就会先返回 HTML 文档，然后根据 HTML 文档中的资源指向，向浏览器推送 css 文件和 png 文件，这样浏览器在后续要使用的时候，就发现已经收到了资源，不需要再发请求了</p><p>这样，只要 1 个请求，就完成了以前 3 个请求才能完成的事情，效率显然大大提高</p><p>既然服务器可以主动推送，客户端自然也可以选择是否接受</p><p>如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送RST_STREAM帧来拒收</p><p>主动推送也遵守同源策略，服务器不会随便推送第三方资源给客户端。</p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTPS 基于 SSL 协议，采用 RSA 算法，使得通信双方不需要直接发送私钥，就可以达成合意开始加密通信</p><p>具体流程如下</p><ol><li>浏览器向服务器发起 HTTPS 连接请求</li><li>服务器向浏览器发送公钥和根据自己的私钥与公钥联合加密的密文</li><li>浏览器收到公钥和密文，随机产生一个私钥，向服务器发送根据自己的私钥与公钥联合加密的密文</li><li>双方都根据公钥、自己的私钥和对方发送的密文进行计算，得到共同的密钥，通信建立</li><li>在之后的通信中，都使用这个计算出来的密钥进行加密通信</li></ol><p>算法原理概述可以参看 <a href="https://ringoer.com/algorithm/rsa/" target="_blank" rel="noopener">图解非对称加密</a></p><h1 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h1><p>首先是浏览器渲染 5 步图</p><p><img src="https://pic.ringoer.com/css-animation-render-5.jpg" alt=""></p><p>根据上图，可知浏览器渲染流程如下</p><h2 id="首次渲染"><a href="#首次渲染" class="headerlink" title="首次渲染"></a>首次渲染</h2><ol><li>解析 JS 脚本。该动作会导致阻塞，所以一般放在 HTML 文档最后</li><li>构建 DOM 树和 CSSOM 树</li><li>合并为渲染树，进行布局</li><li>布局完成后，根据渲染树进行绘制</li><li>绘制完成后交由 GPU 进行合成</li></ol><h2 id="后续渲染"><a href="#后续渲染" class="headerlink" title="后续渲染"></a>后续渲染</h2><ol><li>解析 JS 脚本</li><li>计算布局和样式更改</li><li>将布局和样式更改同步到渲染树上</li><li>根据渲染树重排、重绘</li><li>重绘完成后交由 GPU 进行合成</li></ol><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><p>浏览器渲染有如下几个特性</p><h3 id="容错机制"><a href="#容错机制" class="headerlink" title="容错机制"></a>容错机制</h3><p>我们在编码中从来没有见过浏览器报 HTML 和 CSS 的错，因为现代浏览器对 CSS 有强大的容错能力，会自动修复那些可以修复的 HTML 和 CSS 的语法错误，对于不能修复的则直接跳过不加解析</p><h3 id="页面生命周期"><a href="#页面生命周期" class="headerlink" title="页面生命周期"></a>页面生命周期</h3><p>HTML 页面生命周期中有以下事件</p><ol><li>DOMContentLoaded</li><li>load</li><li>beforeunload</li><li>unload</li></ol><p>触发时间点如下</p><table><thead><tr><th>事件</th><th>触发时点</th></tr></thead><tbody><tr><td>DOMContentLoaded</td><td>当 DOM 树构建完毕</td></tr><tr><td>load</td><td>当所有资源已经加载完毕</td></tr><tr><td>beforeunload</td><td>当用户正在离开页面，此时数据尚未清除</td></tr><tr><td>unload</td><td>当用户已经离开页面</td></tr></tbody></table><p>通常我们可以利用 beforeunload 事件来弹出一个对话框，用以询问用户是否确定离开</p><p>需要注意的是，当 DOMContentLoaded 事件发生时，async 和 defer 脚本可能尚未执行，其余文件也很有可能正在下载中，不要轻易访问它们</p><p>除了上述事件，我们也可以用 document.readyState 来获取页面当前的状态，并通过 readystatechange 事件来监听页面生命周期的变化</p><p>document.readyState 通常有 3 个值</p><ol><li>loading，页面正在加载中</li><li>interactive，页面解析完毕，触发时点与 DOMContentLoaded 相同，但执行时比 DOMContentLoaded 要早</li><li>complete，页面上所有资源都已经加载完毕，触发时点与 load 相同，但执行时比 load 要早</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.cnblogs.com/jin-zhe/p/11586327.html" target="_blank" rel="noopener">在浏览器输入URL回车之后发生了什么？（超详细版）</a></p><p><a href="https://www.jianshu.com/p/54cc04190252" target="_blank" rel="noopener">深入理解浏览器的缓存机制</a></p><p><a href="https://www.jianshu.com/p/aaba68b87416" target="_blank" rel="noopener">面试官问我：一个 TCP 连接可以发多少个 HTTP 请求？我竟然回答不上来…</a></p><p><a href="https://zhuanlan.zhihu.com/p/26559480" target="_blank" rel="noopener">一文读懂 HTTP/2 特性</a></p><p><a href="https://www.cnblogs.com/confach/p/10141273.html" target="_blank" rel="noopener">深入浅出：HTTP/2</a></p><p><a href="https://segmentfault.com/a/1190000011468675" target="_blank" rel="noopener">页面生命周期：DOMContentLoaded, load, beforeunload, unload</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;众所周知，前端的内容一般都是通过 HTTP 相关协议获取，并在浏览器上呈现的&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="http://yoursite.com/categories/frontend/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>CSS盒子要点简述</title>
    <link href="http://yoursite.com/frontend/css-box-summary/"/>
    <id>http://yoursite.com/frontend/css-box-summary/</id>
    <published>2020-11-23T05:42:00.000Z</published>
    <updated>2020-11-23T16:14:38.131Z</updated>
    
    <content type="html"><![CDATA[<p>CSS 的知识点太多了，本文只讲一些重要的、和盒子有关的知识点</p><a id="more"></a><h1 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h1><p>首先当然先介绍 CSS 最重要的概念：盒子模型</p><p>我们在网站上可以看到各种各样的元素，在页面上显示为一个方形的”盒子”</p><p><img src="https://pic.ringoer.com/css-summary-1.png" alt=""></p><p>用开发者工具一看，每个元素都带着各自的彩色边</p><p><img src="https://pic.ringoer.com/css-summary-2.png" alt=""></p><p>这个盒子，就是盒子模型</p><h2 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h2><p>从上图彩色部分可以看出，每个盒子都有 4 块彩色区域，分别是</p><ol><li>margin，外边距，表示盒子外部空出的空间</li><li>border，边框，表示盒子的界限</li><li>padding，内边距，表示盒子内部空出的空间，也即边框和内容的距离</li><li>content，内容</li></ol><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>知道了盒子模型的组成，就可以介绍一下盒子的类型</p><p>盒子模型有两种类型</p><ol><li>content-box（默认）</li><li>border-box</li></ol><p>我们知道，可以通过控制 width 和 height 属性来控制盒子的大小，那顾名思义</p><ol><li>在 content-box 中设置 width 就是设置内容区域的宽度，高度同理</li><li>在 border-box 中设置 width 就是设置内容+内边距+边框的宽度，高度同理。此处尺寸包含边框的尺寸大小</li></ol><p>所以在 content-box 中，width = content.width，总宽度自动计算</p><p>在 border-box 中，width = content.width + padding.width + border.width，内容宽度自动计算</p><p>那么怎么设置呢？可以通过</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br></pre></td></tr></table></figure><p>来切换成 border-box</p><h1 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h1><p>然后介绍一下 CSS 基本概念——文档流</p><p>观察开发者工具里的 HTML 文档，可以观察到类似如下情况</p><p><img src="https://pic.ringoer.com/css-summary-3.png" alt=""></p><p><img src="https://pic.ringoer.com/css-summary-4.png" alt=""></p><p>可见元素一般是从上到下、独占一行的，只有文字之类的内部元素才占同一行</p><p>而图片占的位置，又会影响后面标签页的位置</p><p>一般一个元素独占一行，且前面的布局会影响后面的布局，这样的就是文档流</p><p>要使元素脱离文档流，可以修改其 position 属性，或为其 float 属性赋值</p><p>那么哪些元素会独占一行呢？</p><h1 id="display"><a href="#display" class="headerlink" title="display"></a>display</h1><p>HTML 中有 div，表现为占据一行，也有 span，表现为在同一行显示。为什么会有这种区别呢？</p><p>答案就在 CSS 的 display 属性身上</p><p>display 一般有三种取值</p><ol><li>block</li><li>inline</li><li>inline-block</li></ol><p>默认值要看是什么标签，不同标签默认值不同</p><p>表现分别如下</p><table><thead><tr><th>display 取值</th><th>特性</th></tr></thead><tbody><tr><td>block</td><td>独占一行，高度自适应，可以设置宽高</td></tr><tr><td>inline</td><td>多个共用一行，高度自适应，宽度尽可能短，行末溢出则切断，不可设置宽高</td></tr><tr><td>inline-block</td><td>多个共用一行，高度自适应，宽度尽可能短，行末溢出不切断，其余同 block</td></tr></tbody></table><p>那么既然可以设置宽高，如果 block 中文本长度超出设定范围，怎么办呢</p><h1 id="overflow"><a href="#overflow" class="headerlink" title="overflow"></a>overflow</h1><p>可以使用 overflow 属性定义内容溢出的情况下父元素如何表现</p><p>overflow 一般有 5 种取值</p><ol><li>visible（默认）</li><li>hidden</li><li>scroll</li><li>auto</li><li>inherit</li></ol><p>表现分别如下</p><table><thead><tr><th>overflow 取值</th><th>特性</th></tr></thead><tbody><tr><td>visible</td><td>溢出部分恒可见</td></tr><tr><td>hidden</td><td>溢出部分恒不可见</td></tr><tr><td>scroll</td><td>不论是否溢出，均提供滚动条，当溢出时可以通过滚动条查看溢出内容</td></tr><tr><td>auto</td><td>仅当溢出时，会在溢出方向提供滚动条，可以通过滚动条查看溢出内容</td></tr><tr><td>inherit</td><td>继承父元素的 overflow 设置值</td></tr></tbody></table><p>显然 scroll 比较蠢，需要滚动条的时候用 auto 比较好</p><p>还可以通过 overflow-x 和 overflow-y 来分别设置 x 方向的溢出和 y 方向的溢出如何处理</p><p>注意，当设置了滚动条时，如果内容超出设定范围，虽然会提供滚动条以查看溢出内容，但其余内容只会显示在第一视角，不会自动填充到溢出范围</p><p>讲完盒子整体，来重点讲讲盒子里具体的内容</p><h1 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h1><p>一般用来放置文字，故而此处主要讲文字</p><p>文字常用属性如下</p><table><thead><tr><th>属性</th><th>用途</th></tr></thead><tbody><tr><td>font-family</td><td>设置字体</td></tr><tr><td>font-size</td><td>设置文字大小，可选单位 px、em、rem、%、vw、vh</td></tr><tr><td>color</td><td>设置文字颜色，可用单词、rgba、hsla、#十六进制色号</td></tr><tr><td>letter-spacing</td><td>字符间距</td></tr><tr><td>line-height</td><td>行高</td></tr><tr><td>text-align</td><td>常取值 center，文本居中</td></tr><tr><td>vertical-align</td><td>与同行元素对齐，指定对齐的基线<br>取决于当前字体下 x 的高度</td></tr><tr><td>white-space</td><td>指示空格和换行符的处理方式<br>常取值 nowrap，表示即使遇到空格和换行符，也不换行</td></tr></tbody></table><h1 id="padding"><a href="#padding" class="headerlink" title="padding"></a>padding</h1><p>是一个距离度量，表示自身 border 到自身内容区域之间的距离</p><p>可能的值：</p><ol><li>length（固定的px、pt、em等值</li><li>%（使用百分比边距，相对于最近的有设置宽度的父元素的宽度</li></ol><h1 id="border"><a href="#border" class="headerlink" title="border"></a>border</h1><p>常用属性如下</p><table><thead><tr><th>属性</th><th>用途</th></tr></thead><tbody><tr><td>border-style</td><td>必填，设置边框类型，常用 solid，共有 8 种</td></tr><tr><td>border-width</td><td>设置边框宽度，常用单位 px</td></tr><tr><td>border-color</td><td>设置边框颜色，可用单词、rgba、hsla、#十六进制色号</td></tr><tr><td>border-radius</td><td>设置边框弧度，可以填 4 个值，表示 4 个对角方向分别的弧度<br>常用单位 %、px</td></tr><tr><td>box-shadow</td><td>设置边框阴影，可以设置 x、y 方向的阴影距离，模糊情况与色号</td></tr><tr><td>border-image</td><td>设置用来填充 border 的图片</td></tr></tbody></table><h1 id="margin"><a href="#margin" class="headerlink" title="margin"></a>margin</h1><h2 id="margin-表现"><a href="#margin-表现" class="headerlink" title="margin 表现"></a>margin 表现</h2><p>是一个距离度量，用以清除周围元素区域</p><p>没有背景颜色，完全透明</p><p>可能的值：</p><ol><li>auto（依赖于浏览器</li><li>length（固定的px、pt、em等值</li><li>%（使用百分比边距，相对于最近的有设置宽度的父元素的宽度</li></ol><p>外边距的直观表现就是与相邻元素的距离会拉开，比如有如下 HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"first"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"second"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>且有如下 CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以观察到如图景象</p><p><img src="https://pic.ringoer.com/css-summary-5.png" alt=""></p><p>现在我们对第一个盒子加入 margin-left</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.first</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://pic.ringoer.com/css-summary-6.png" alt=""></p><p>就可以观察到第一个盒子向左，也就是 body 的左边框离开了 10 px，也就是向右移动了 10 px，连带着影响到第二个盒子也向右移动了 10 px（文档流）</p><p>如果对第二个盒子也加上 <code>margin-left: 10px;</code> ，那第二个盒子也会变得向第一个盒子离开了 10 px</p><p><img src="https://pic.ringoer.com/css-summary-7.png" alt=""></p><p>显然，margin 是决定相隔距离的</p><p>但是，margin 是会重叠的！！！！！！</p><h2 id="margin-重叠"><a href="#margin-重叠" class="headerlink" title="margin 重叠"></a>margin 重叠</h2><p>margin 重叠有一个前提：重叠的两个元素的 display 属性必须都是 block，不可以是 inline-block 或 inline</p><p>当满足前提时，会发生在如下情况下：</p><ol><li><p>不同行，但相邻的兄弟元素，上面元素的下外边距会和下面元素的上外边距重叠</p><p><img src="https://pic.ringoer.com/css-summary-8.png" alt=""></p></li><li><p>父元素中第一个子元素的上外边距会和父元素的上外边距重叠</p><p><img src="https://pic.ringoer.com/css-summary-9.png" alt=""></p><p><img src="https://pic.ringoer.com/css-summary-10.png" alt=""></p></li><li><p>父元素中最后一个子元素的下外边距会和父元素的下外边距重叠</p><p><img src="https://pic.ringoer.com/css-summary-11.png" alt=""></p><p><img src="https://pic.ringoer.com/css-summary-10.png" alt=""></p></li></ol><p>当满足以上条件，且 margin 被设置了值（而且不是 auto）时，margin 会发生重叠，重叠时：</p><ol><li>两个 margin 都是正数，保留较大值</li><li>一正一负，作差</li><li>两个均为负值，保留绝对值较大的值</li></ol><p>如果想要取消父子重叠，可以令父元素具有以下特征</p><ol><li>令父元素成为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">BFC 块级格式化上下文</a></li><li>父元素设置 border 或 padding</li><li>父元素和第一个或最后一个子元素之间用 inline 或 inline-block元素隔开</li></ol><p>很神奇吧，记得亲自尝试一下</p><p>什么，你问我为什么会这样？CSS 没有为什么（</p><h2 id="负-margin"><a href="#负-margin" class="headerlink" title="负 margin"></a>负 margin</h2><p>外边距还有一招神奇的招式，叫做负外边距，主要用来实现居中布局和平均布局，会在 <a href="https://ringoer.com/frontend/css-layout" target="_blank" rel="noopener">CSS 布局</a> 一文中介绍</p><p>我们知道可以用 background 属性为盒子设置背景色，那么看到这里可能有人会问，背景色会不会覆盖边框或者内容呢？</p><h1 id="盒子分层"><a href="#盒子分层" class="headerlink" title="盒子分层"></a>盒子分层</h1><p>一个盒子的分层自顶向下大致如下</p><ol><li>inline 和 inline-blcok 子元素</li><li>float 元素</li><li>block 子元素</li><li>border</li><li>background</li></ol><p>如何验证呢？通过调整对 border 的着色的透明度，就可以验证</p><p>那如何超越这个分层呢？可以使用 z-index 属性</p><h1 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h1><p>对于一个已经定位的盒子（即其 <code>position</code> 属性值不是 <code>static</code>，这里要注意的是 CSS 把元素看作盒子），<code>z-index</code> 属性指定：</p><ol><li>盒子在当前堆叠上下文中的堆叠层级。</li><li>盒子是否创建一个本地堆叠上下文。</li></ol><p>默认的 z-index 是 auto，符合上述分层模型</p><p>当 z-index 相同时，按照元素在文档流中的出现顺序决定元素的遮挡关系，后出现的遮挡先出现的</p><p>虽然 auto 的解析值是 0，但是直接令 z-index = 0 和令 z-index = auto，是不一样的</p><p>当你为某元素设置了一个不是 auto 的 z-index，世界就改变了</p><p>刚才在分层模型中说到</p><ol><li>内联子元素是在最高层</li><li>这里又提到默认的 z-index 是 auto</li></ol><p>那就可以推断出，最高层的内联子元素，在解析后 z-index = 0，那么它就会比 z-index 大于 0 的元素要低！！就会被这样的元素覆盖了！！</p><p>同理可以推断，z-index 小于 0 的元素，会被 background 覆盖，因为 background 的解析值也是 0</p><p>于是可以大致得出结论，z-index 数值大的会遮挡数值小的元素</p><p>但这也不是绝对的，两个元素是否满足 z-index 决定的遮挡关系，还要看其所在环境，这个环境叫做 层叠上下文</p><h1 id="层叠上下文"><a href="#层叠上下文" class="headerlink" title="层叠上下文"></a>层叠上下文</h1><p>层叠上下文是一个小世界，必须要同等级的小世界之间，才可以互相比较 z-index</p><p>设有如下的 HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"z-index: 1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"z-index: 3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"z-index: 2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>按说，z-index = 3 的 div 应当遮挡住 z-index = 2 的 div，但实际上并不是，因为 z-index = 3 的 div 与 z-index = 2 的 div 并不同级，他只能与 z-index = 1 的 div 中的其它元素进行比较</p><p>而因为 z-index = 1 的 div 恒低于 z-index = 2 的 div，所以 z-index = 3 的 div 也恒低于 z-index = 2 的 div</p><p>如果都没有父元素设置 z-index，那么他们共同的层叠上下文是 html 根元素</p><p>如何创建层叠上下文？请查询 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context" target="_blank" rel="noopener">层叠上下文</a></p><p>知道了一个盒子自己内部的事情，现在来了解一下文档流中盒子是怎么布局的</p><h1 id="position"><a href="#position" class="headerlink" title="position"></a>position</h1><p>顾名思义，影响盒子的位置</p><p>一般有 5 个取值</p><ol><li>static（默认，属于文档流</li><li>relative（属于文档流</li><li>absolute（脱离文档流</li><li>fixed（脱离文档流</li><li>sticky（看情况</li></ol><p>static 作为默认值，就不多介绍了，介绍一下其它的</p><h2 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h2><p>在文档流中所占的位置是默认位置，常作为 absolute 元素的父元素的属性</p><p>可以使用 left、right、top、bottom 等 4 个属性来调整自己相对于原本位置的偏移距离</p><h2 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h2><p>相对于最近的已定位父元素（不能是 static）进行定位</p><p>可以使用 left、right、top、bottom 等 4 个属性来调整自己相对于最近的已定位父元素的偏移距离</p><h2 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h2><p>在视口上绝对定位，不随窗口滚动而移动</p><p>可以使用 left、right、top、bottom 等 4 个属性来调整自己相对于视口的偏移距离</p><h2 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h2><p>粘性定位，超出视口前表现为 relative，超出后表现为 fixed</p><p>在变为 fixed 时，会粘在还是 relative 时最后的位置</p><p>如上，CSS 与盒子有关的常用部分就是这样了，谢谢观看</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS 的知识点太多了，本文只讲一些重要的、和盒子有关的知识点&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="http://yoursite.com/categories/frontend/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>HTML重要标签</title>
    <link href="http://yoursite.com/frontend/html-tags/"/>
    <id>http://yoursite.com/frontend/html-tags/</id>
    <published>2020-11-19T14:21:00.000Z</published>
    <updated>2020-11-19T15:59:52.924Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍一些前端常用且重要的标签</p><a id="more"></a><p>首先给出索引</p><ol><li><a href="#table">table</a></li><li><a href="#form">form</a></li><li><a href="#a">a</a></li><li><a href="#img">img</a></li><li><a href="#video">video</a></li><li><a href="#audio">audio</a></li><li><a href="#canvas">canvas</a></li><li><a href="#svg">svg</a></li></ol><h1 id="table"><a href="#table" class="headerlink" title="table"></a><span id="table">table</span></h1><p>table，表格标签，用于制表，包含以下子标签</p><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td>thead</td><td>表头</td></tr><tr><td>tbody</td><td>表体</td></tr><tr><td>tfoot</td><td>表脚</td></tr><tr><td>tr</td><td>行</td></tr><tr><td>th</td><td>表头子项</td></tr><tr><td>td</td><td>表体子项</td></tr></tbody></table><p>表格示例代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>时间<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>事件<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>7点<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>起床<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>8点<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>早饭<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>12点<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>午饭<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>13点<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>午休起床<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>17点<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>晚饭<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>23点<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>休息<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>总共24小时<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>总共6件事情<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是，此时你会发现表格十分之难看，间距很大，对齐也不正常</p><p>我们可以用三个常用的表格属性来调整</p><table><thead><tr><th>属性</th><th>含义</th><th>默认值</th><th>建议值</th></tr></thead><tbody><tr><td>table-layout</td><td>表格布局</td><td>auto（自动分配</td><td>fixed（如果有指定宽度则等分</td></tr><tr><td>border-collapse</td><td>边框隔离</td><td>separated（分隔</td><td>collapsed（合并</td></tr><tr><td>border-spacing</td><td>边框间距</td><td>0</td><td>0</td></tr></tbody></table><h1 id="form"><a href="#form" class="headerlink" title="form"></a><span id="form">form</span></h1><p>form，表单标签，常用于提交请求</p><p>主要功能全部体现在其属性上，故此处先讲属性</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>action</td><td>提交表单的地址，可以是相对路径或绝对路径，留空则为当前页面。提交后当前页面会刷新</td></tr><tr><td>method</td><td>可选 GET 或 POST，默认 GET，详见 HTTP 动词</td></tr><tr><td>target</td><td>常用 _blank，表示在新标签页打开，默认值为 _self，表示在当前页面打开。若有 iframe 嵌套，则还可以使用 _parent 或 _top 来控制打开位置</td></tr><tr><td>autocompete</td><td>可选 on 或 false，当值为 on 时会依据用户历史提供下拉填充选项，默认值取决于浏览器</td></tr></tbody></table><p>当表单提交时，触发其 onsubmit 事件，并将所有数据组织为 <code>[name]=[value]</code> 形式的 formdata，发送到 action 指定的地址</p><p>可以通过 js 拦截该 onsubmit 事件，提供一些诸如先验的操作</p><p>可用以下子标签作为 form 的子元素</p><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td>input[type=”text”]</td><td>单行文本框</td></tr><tr><td>input[type=”password”]</td><td>单行文本框，但不可直接看见</td></tr><tr><td>textarea</td><td>多行文本框</td></tr><tr><td>input[type=”submit”]</td><td>提交按钮，触发所在表单的 submit 事件</td></tr><tr><td>button</td><td>按钮，触发所在表单的 submit 事件</td></tr><tr><td>input[type=”radio”]</td><td>单选框</td></tr><tr><td>input[type=”checkbox”]</td><td>复选框</td></tr><tr><td>input[type=”file”]</td><td>用于选择文件</td></tr><tr><td>input[type=”email”]</td><td>用于输入邮箱</td></tr><tr><td>input[type=”tel”]</td><td>用于输入电话</td></tr><tr><td>input[type=”hidden”]</td><td>一个隐藏的输入框，用于为 js 脚本保存数据</td></tr><tr><td>select</td><td>下拉选框</td></tr><tr><td>option</td><td>下拉选框子项</td></tr><tr><td>label</td><td>为输入框添加描述</td></tr></tbody></table><h2 id="专有属性"><a href="#专有属性" class="headerlink" title="专有属性"></a>专有属性</h2><p>此处专有属性并非指字段名专有，而是指意义专有</p><table><thead><tr><th>标签</th><th>属性</th><th>是否取值</th><th>含义</th></tr></thead><tbody><tr><td>[all]</td><td>required</td><td>否</td><td>任意允许用户输入的标签，都可以使用该属性来强制要求用户输入，否则无法提交表单</td></tr><tr><td>[all]</td><td>autofocus</td><td>否</td><td>自动聚焦到该元素</td></tr><tr><td>[all]</td><td>disabled</td><td>否</td><td>令用户不能编辑该元素</td></tr><tr><td>input[type=”text”]、textarea</td><td>placeholder</td><td>是</td><td>指定当文本框为空时，显示的提示文本</td></tr><tr><td>input[type=”text”]、textarea</td><td>maxlength</td><td>是</td><td>指定文本框可以接受的最大文本长度</td></tr><tr><td>textarea</td><td>style&gt;resize</td><td>是</td><td>默认情况下可以拖动改变文本框大小，当该属性指定为 none 时不可改变大小</td></tr><tr><td>input[type=”radio”]</td><td>name</td><td>是</td><td>指定若干个 input 为同一组</td></tr><tr><td>input[type=”radio”]</td><td>checked</td><td>否</td><td>指定同一组 input 中的默认选择</td></tr><tr><td>input[type=”checkbox”]</td><td>name</td><td>是</td><td>指定若干个 input 为同一组</td></tr><tr><td>input[type=”checkbox”]</td><td>checked</td><td>否</td><td>指定同一组 input 中的默认选择</td></tr><tr><td>input[type=”file”]</td><td>multiple</td><td>否</td><td>令该文件输入框可以选择多个文件</td></tr><tr><td>button</td><td>type</td><td>是</td><td>在表单中若不指定，则为 submit，指定为其它值则不会触发提交</td></tr><tr><td>option</td><td>value</td><td>是</td><td>选项的实际值，该值区别于用户能看到的值，由 js 处理</td></tr></tbody></table><p>显然，input 元素的表现非常复杂，且主要负责输入，那么有以下 3 个主要事件来控制 input 的输入</p><table><thead><tr><th>事件</th><th>适合元素</th><th>触发时机</th></tr></thead><tbody><tr><td>onchange</td><td>input[type=”text”]、textarea</td><td>文本改变</td></tr><tr><td>onfocus</td><td>input[type=”text”]、textarea</td><td>获得焦点</td></tr><tr><td>onblur</td><td>input[type=”text”]、textarea</td><td>失去焦点</td></tr></tbody></table><p>在项目中一般不使用 form 直接提交数据，而使用 js 拦截提交事件，然后用 ajax 提交，故现在 form 标签更多仅作为一个表示而已</p><h1 id="a"><a href="#a" class="headerlink" title="a"></a><span id="a">a</span></h1><p>a，超链接标签，常用于跳转页面，没有专属的子标签</p><p>重要属性如下</p><table><thead><tr><th>属性</th><th>是否取值</th><th>含义</th></tr></thead><tbody><tr><td>href</td><td>是</td><td>指定超链接的地址，一般是<br>1. 网络上的路径，使用 http 或 https 协议，或不指定协议<br>2. 本站相对路径<br>3. 伪协议路径，一般是 javascript、mailto、tel 三种伪协议之一<br>4. 页内锚点，通过 #[id] 指定</td></tr><tr><td>target</td><td>是</td><td>常用 _blank，表示在新标签页打开，默认值为 _self，表示在当前页面打开。若有 iframe 嵌套，则还可以使用 _parent 或 _top 来控制打开位置，或直接指定为 iframe 的 name</td></tr><tr><td>download</td><td>否</td><td>此时 a 标签的动作不再是打开新页面，而是下载新页面</td></tr><tr><td>rel</td><td>是</td><td>当使用 target=”_blank” 时，要加上 rel=”noopener” 以防止钓鱼攻击</td></tr></tbody></table><p>也可以设置一个用于触发 JavaScript 方法，其余什么也不做的 a 标签</p><p>此处使用 javascript 伪协议，代码如下</p><p><code>&lt;a href=&quot;javascript:;&quot;&gt;点击我什么也没发生&lt;/a&gt;</code></p><h1 id="img"><a href="#img" class="headerlink" title="img"></a><span id="img">img</span></h1><p>img，图片标签，用于通过 GET 请求来引入图片，没有专属的子标签</p><p>重要属性如下</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>src</td><td>指定图片来源，可以是网络地址或相对路径，可以通过 js 改变指向</td></tr><tr><td>alt</td><td>指定当图片无法加载时的提示内容</td></tr><tr><td>width</td><td>指定图片的宽度，此时高度会根据比例调整</td></tr><tr><td>height</td><td>指定图片的高度，此时宽度会根据比例调整</td></tr><tr><td>style&gt;max-width</td><td>指定图片的最大宽度，当设为 100% 时，最大不会超过视口大小</td></tr></tbody></table><p>重要事件如下</p><table><thead><tr><th>事件</th><th>触发时机</th><th>用法</th></tr></thead><tbody><tr><td>onload</td><td>图片加载成功</td><td>统计图片访问量</td></tr><tr><td>onerror</td><td>图片加载失败</td><td>补救失败图片</td></tr></tbody></table><p>使用 img 标签，要遵循以下规则</p><ol><li>img 的大小应该不超过 300 kb，否则严重影响加载速度</li><li>永远不要在不合比例的情况下同时指定 height 和 width，否则图片将严重变形</li><li>最好只使用 width 来修改图片尺寸</li></ol><h1 id="video"><a href="#video" class="headerlink" title="video"></a><span id="video">video</span></h1><p>video，视频标签，用于引入视频</p><p>待更新</p><h1 id="audio"><a href="#audio" class="headerlink" title="audio"></a><span id="audio">audio</span></h1><p>audio，音频标签，用于引入音频</p><p>待更新</p><h1 id="canvas"><a href="#canvas" class="headerlink" title="canvas"></a><span id="canvas">canvas</span></h1><p>canvas</p><p>待更新</p><h1 id="svg"><a href="#svg" class="headerlink" title="svg"></a><span id="svg">svg</span></h1><p>svg</p><p>待更新</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍一些前端常用且重要的标签&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="http://yoursite.com/categories/frontend/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>HTML入门</title>
    <link href="http://yoursite.com/frontend/html-introduction/"/>
    <id>http://yoursite.com/frontend/html-introduction/</id>
    <published>2020-11-19T10:10:00.000Z</published>
    <updated>2020-11-19T14:59:58.163Z</updated>
    
    <content type="html"><![CDATA[<p>HTML入门</p><a id="more"></a><p>阅读本文，建议使用的编辑器为 VSCODE</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>HTML的英文全称是 Hyper Text Markup Language，即超文本标记语言</p><p>HTML是由Web的发明者 Tim Berners-Lee于1990年创立的一种标记语言</p><h1 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h1><p>首先来看看HTML板子长什么样子</p><p>打开 VSCODE，新建一个 html 文件，在其中打入一个英文的感叹号 <code>!</code>，会弹出一个选框，选择一个感叹号的选项。如果选了三个感叹号的选项，只会给出文档头</p><p>自动打板后效果如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是此时还不够完善，让我们先去改了默认的板子</p><h2 id="修改默认打板"><a href="#修改默认打板" class="headerlink" title="修改默认打板"></a>修改默认打板</h2><p>上面不够完善的部分，是 meta 标签中的 content 部分</p><p>先不要管起了什么作用，改完了再说</p><p>修改步骤如下</p><ol><li>打开 VSCODE 所在目录，进入 <code>./resources/app/extensions/emmet/dist/node</code> 目录</li><li>打开 <code>emmetNodeMain.js</code> 文件，搜索 <code>meta:vp</code></li><li>如无意外，会有两个设置项，两个引用项。确定两个设置项</li><li>设置项形如 <code>&quot;meta:vp&quot;:&quot;meta[name=viewport content=&#39;width=${1:device-width}, initial-scale=${2:1.0}&#39;]&quot;</code></li><li>改为 <code>&quot;meta:vp&quot;:&quot;meta[name=viewport content=&#39;width=${1:device-width}, initial-scale=${2:1.0}, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&#39;]&quot;</code></li></ol><p>改完后重新打板，效果如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="底板解释"><a href="#底板解释" class="headerlink" title="底板解释"></a>底板解释</h2><ol><li><p>第一行是文档声明，声明该文档为 html 文档</p><p>注意感叹号是英文感叹号，DOCTYPE 大写，html 小写</p></li><li><p>第二行是根元素，含有 lang 属性，用于指定文档语言</p></li><li><p>第三行是文档头，包含了表示元数据的 meta 标签和表示页面标题的 title 标签</p></li><li><p>文档头之后是文档体，用于书写页面正文</p></li><li><p>meta:vp 是什么？</p><p>是 meta 的默认配置，具体含义如下</p></li></ol><table><thead><tr><th>属性</th><th>取值</th><th>含义</th></tr></thead><tbody><tr><td>charset</td><td>UTF-8</td><td>指定页面使用 UTF-8 编码</td></tr><tr><td>name</td><td>viewport</td><td>指定根据视口大小的设置</td></tr><tr><td>content&gt;width</td><td>device-width</td><td>视口大小等于设备大小</td></tr><tr><td>content&gt;initial-scale</td><td>1.0</td><td>初始大小与视口同大</td></tr><tr><td>content&gt;minimum-scale</td><td>1.0</td><td>最小缩小比例与视口同大</td></tr><tr><td>content&gt;maximum-scale</td><td>1.0</td><td>最大放大比例与视口同大</td></tr><tr><td>content&gt;user-scalable</td><td>no</td><td>禁止用户手动放大页面</td></tr></tbody></table><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><h2 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h2><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td>html</td><td>根元素</td></tr><tr><td>head</td><td>文档头</td></tr><tr><td>body</td><td>文档体</td></tr><tr><td>title</td><td>页面标题</td></tr><tr><td>meta</td><td>元数据</td></tr><tr><td>link</td><td>链接外部资源</td></tr><tr><td>style</td><td>内部样式</td></tr><tr><td>script</td><td>内部脚本或链接到外部脚本</td></tr></tbody></table><h2 id="文章标签"><a href="#文章标签" class="headerlink" title="文章标签"></a>文章标签</h2><p>最早，HTML是用来在网上展示文章信息的，所以有了如下文章标签</p><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td>article</td><td>文章</td></tr><tr><td>section</td><td>章节</td></tr><tr><td>h[1…6]</td><td>标题</td></tr><tr><td>p</td><td>段落</td></tr><tr><td>header</td><td>头部</td></tr><tr><td>footer</td><td>脚部</td></tr><tr><td>main</td><td>主要内容</td></tr><tr><td>aside</td><td>分支内容</td></tr><tr><td>div</td><td>块</td></tr></tbody></table><h2 id="内容标签"><a href="#内容标签" class="headerlink" title="内容标签"></a>内容标签</h2><p>有了文章结构，自然还要写文章内容，于是又有了内容标签</p><p>但是有的标签相当重要，需要单独说明，故而会在下个章节给出</p><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td>ol</td><td>有序列表</td></tr><tr><td>ul</td><td>无序列表</td></tr><tr><td>li</td><td>列表项</td></tr><tr><td>dl</td><td>描述列表</td></tr><tr><td>dt</td><td>描述标题</td></tr><tr><td>dd</td><td>描述项</td></tr><tr><td>pre</td><td>预览</td></tr><tr><td>code</td><td>代码</td></tr><tr><td>q</td><td>引用（此项为内联元素</td></tr><tr><td>blockquote</td><td>引用（此项为块级元素</td></tr><tr><td>em</td><td>斜体（语气上强调</td></tr><tr><td>strong</td><td>粗体（实际上重要</td></tr><tr><td>hr</td><td>分隔线</td></tr><tr><td>br</td><td>换行符</td></tr></tbody></table><h2 id="重要标签"><a href="#重要标签" class="headerlink" title="重要标签"></a><span id="important">重要标签</span></h2><p>此处仅给出这些标签，具体的部分请点击超链接查看</p><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td><a href="https://ringoer.com/frontend/html-tags#table" target="_blank" rel="noopener">table</a></td><td>表格</td></tr><tr><td><a href="https://ringoer.com/frontend/html-tags#form" target="_blank" rel="noopener">form</a></td><td>表单</td></tr><tr><td><a href="https://ringoer.com/frontend/html-tags#a" target="_blank" rel="noopener">a</a></td><td>超链接</td></tr><tr><td><a href="https://ringoer.com/frontend/html-tags#img" target="_blank" rel="noopener">img</a></td><td>图片</td></tr><tr><td><a href="https://ringoer.com/frontend/html-tags#video" target="_blank" rel="noopener">video</a></td><td>视频</td></tr><tr><td><a href="https://ringoer.com/frontend/html-tags#audio" target="_blank" rel="noopener">audio</a></td><td>音频</td></tr><tr><td><a href="https://ringoer.com/frontend/html-tags#canvas" target="_blank" rel="noopener">canvas</a></td><td>画图</td></tr><tr><td><a href="https://ringoer.com/frontend/html-tags#svg" target="_blank" rel="noopener">svg</a></td><td>矢量图</td></tr></tbody></table><h2 id="其余标签"><a href="#其余标签" class="headerlink" title="其余标签"></a>其余标签</h2><p>其余标签并不是很重要，有兴趣的话可以 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5/HTML5_element_list" target="_blank" rel="noopener">点我查看</a></p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>刚才说到根元素有 lang 属性，用于指明文档语言</p><p>显然不同的标签有共通属性，也有专有属性</p><h2 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h2><table><thead><tr><th>属性名</th><th>是否取值</th><th>含义</th></tr></thead><tbody><tr><td>class</td><td>是</td><td>css 类</td></tr><tr><td>hidden</td><td>否</td><td>visible=hidden，此时有渲染，但无事件</td></tr><tr><td>id</td><td>是</td><td>声明全局唯一 id，但需要程序员手动控制</td></tr><tr><td>style</td><td>是</td><td>内联样式</td></tr><tr><td>tabindex</td><td>是</td><td>指定 tab 的顺序，使用正整数，越小越优先；=0则最后；=-1则不会被 tab 访问</td></tr><tr><td>title</td><td>是</td><td>指定所在元素的说明，在鼠标放置在该元素上时会显示浮窗</td></tr><tr><td>contenteditable</td><td>是</td><td>指定所在元素是否（true/false）可以被用户编辑</td></tr></tbody></table><h2 id="专有属性"><a href="#专有属性" class="headerlink" title="专有属性"></a>专有属性</h2><p>请前往 <a href="#important">重要标签</a> 查看，或查阅 MDN</p><p>谢谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML入门&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="http://yoursite.com/categories/frontend/"/>
    
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>图解非对称加密</title>
    <link href="http://yoursite.com/algorithm/rsa/"/>
    <id>http://yoursite.com/algorithm/rsa/</id>
    <published>2020-11-16T09:09:00.000Z</published>
    <updated>2020-11-16T11:24:29.268Z</updated>
    
    <content type="html"><![CDATA[<p>学习 HTTPS 必备的 RSA 算法的基础</p><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>所谓非对称加密，就是服务器和客户端，在不直接互通私钥的情况下，通过公钥和互相发送的密文，推出本次连接使用的密钥</p><p>非对称加密涉及的数学原理非常多，想了解的可以看 <a href="https://blog.csdn.net/wjiabin/article/details/85228078" target="_blank" rel="noopener">非对称加密算法–RSA加密原理</a></p><p>本文不解释数学原理，只讲解加密的具体流程</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>首先看下图，下图对流程作出了简单描述</p><p><img src="https://pic.ringoer.com/RSA%E5%9B%BE%E8%A7%A3.png" alt="RSA图解"></p><p>接下来开始具体描述</p><ol><li>设服务器有一组公钥 [k1,k2] 和一个取余公式 <code>p=&gt;k1**p%k2</code>，其中 k1、k2、p 均要求是质数</li><li>服务器收到了客户端的连接请求，将公钥发给客户端</li><li>服务器产生一个<strong>随机质数</strong> p，代入公钥求得密文 m1，发送给客户端</li><li>客户端也产生一个<strong>随机质数</strong> q，代入公钥求得密文 m2，发送给服务器</li><li>服务器和客户端各自使用自己收到的密文，取代公钥中的 k1，求得结果就是共同的密钥</li><li>往后的通信中，双方均使用该密钥，进行对称加密通信</li></ol><p>显然 k2 要尽可能大，才能尽可能减小碰撞</p><p>现在代入值计算一下是否正确</p><ol><li>设 k1=13，k2=31，p=23，q=19</li><li><code>m1 = 13**23%31 =24</code>，<code>m2 = 13**19%31 = 21</code></li><li><code>21**23%31 = 17</code>，<code>24**19%31 = 17</code></li><li>验证完毕</li></ol><p>感兴趣的朋友可以自行验证一下，面试的时候能答出上述流程就行了</p><p>至于数学原理，我不知道你能不能看懂，反正我看不懂，2333</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习 HTTPS 必备的 RSA 算法的基础&lt;/p&gt;
    
    </summary>
    
    
      <category term="algorithm" scheme="http://yoursite.com/categories/algorithm/"/>
    
    
      <category term="algorithm" scheme="http://yoursite.com/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Git远程操作</title>
    <link href="http://yoursite.com/programing/remoteGit/"/>
    <id>http://yoursite.com/programing/remoteGit/</id>
    <published>2020-11-16T07:54:00.000Z</published>
    <updated>2020-11-23T07:51:37.262Z</updated>
    
    <content type="html"><![CDATA[<p>有了本地操作，肯定还得保存到云端</p><a id="more"></a><h1 id="配置连接"><a href="#配置连接" class="headerlink" title="配置连接"></a>配置连接</h1><p>默认 <a href="https://ringoer.com/programing/localGit/" target="_blank" rel="noopener">本地操作</a> 中的配置已经完成了</p><p>以下命令全部都在 bash 中执行</p><h2 id="ssh-原理"><a href="#ssh-原理" class="headerlink" title="ssh 原理"></a>ssh 原理</h2><p>ssh 是基于非对称加密的 RSA 算法，<a href="https://ringoer.com/algorithm/rsa/" target="_blank" rel="noopener">算法流程请点我</a></p><p>通过 ssh 加密，使得本地和远程可以安全地通信</p><h2 id="生成-ssh-密钥"><a href="#生成-ssh-密钥" class="headerlink" title="生成 ssh 密钥"></a>生成 ssh 密钥</h2><p>执行命令 <code>ssh-keygen -t rsa -C ringoer@qq.com</code></p><p>此时会生成ssh密钥。命令中邮件地址替换为自己的</p><h2 id="查看密钥"><a href="#查看密钥" class="headerlink" title="查看密钥"></a>查看密钥</h2><p>执行命令 <code>cat ~/.ssh/id_rsa.pub</code></p><p>此时会在控制台显示一串密钥，复制下来</p><h2 id="设置密钥"><a href="#设置密钥" class="headerlink" title="设置密钥"></a>设置密钥</h2><p>打开 github，打开 settings，选择 SSH and GPG keys，选择 New SSH key</p><p>title 随便写，key 的文本则填写刚才复制出来的密钥，然后 add key</p><p>一台电脑只需要一个密钥</p><h2 id="测试配对"><a href="#测试配对" class="headerlink" title="测试配对"></a>测试配对</h2><p>执行命令 <code>ssh -T git@github.com</code></p><p>如遇询问 yes or no，请输入 yes 并继续</p><h2 id="设置目标仓库"><a href="#设置目标仓库" class="headerlink" title="设置目标仓库"></a>设置目标仓库</h2><p>在 github 上新建一个 repository，然后复制其 ssh 地址</p><p>ssh 地址一般形如 <a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:Ringoer/xxx.git`</p><p>注意不要复制到 HTTPS 地址</p><p>然后在本地执行命令 <code>git remote add origin git@github.com:Ringoer/xxx.git</code></p><p>执行后会在本地仓库创建一个名为 origin 的仓库，指向目标远程仓库</p><p>理论上可以随意命名这个仓库，不叫 origin 也可以，但是业界潜规则就是第一个仓库要叫 origin。如果以后新建了其它仓库，可以自己尝试叫别的名字</p><p>如果忘记自己配置了哪些远程仓库，可以通过命令 <code>git remote -v</code> 来查看在当前本地仓库配置的所有远程仓库及其别名</p><p>创建完成后，就可以直接通过 origin 操作远程仓库了</p><p>然后就又是我们熟悉的 CRUD 了</p><p>但是在 Git 远程操作中，略有些变化，大致如下表</p><table><thead><tr><th>动作</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td>push</td><td>推送本地仓库代码到远程仓库</td><td>会在远程仓库强制创建分支</td></tr><tr><td>pull</td><td>从远程仓库拉取指定分支的代码到本地</td><td>要求本地已有对应分支</td></tr><tr><td>clone</td><td>从远程仓库克隆指定分支的代码到本地</td><td>最好在空目录下克隆，否则会覆盖已有内容</td></tr></tbody></table><h1 id="push"><a href="#push" class="headerlink" title="push"></a>push</h1><p>通过命令 <code>git push</code> 可以上传本地仓库的代码到远程仓库</p><p>该命令有如下变体</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>git push -u origin master</td><td>推送本地仓库的 master 分支到远程仓库的 master 分支，并将该远程仓库设置为上传流（upstream）</td></tr><tr><td>git push</td><td>推送本地仓库所有修改到被设置为 upstream 的远程仓库</td></tr><tr><td>git push origin master</td><td>推送本地仓库的 master 分支到远程仓库的 master 分支</td></tr><tr><td>git push origin master:child</td><td>推送本地仓库的 master 分支到远程仓库的 child 分支，格式是 本地:远程</td></tr></tbody></table><h1 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h1><p>通过命令 <code>git clone</code> 可以拉取远程仓库代码到本地仓库</p><p>该命令有如下变体</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>git clone [git]</td><td>拉取指定 git 地址对应的仓库的所有分支代码，到新目录中，新目录与远程 repository 的名字相同</td></tr><tr><td>git clone [git] .</td><td>拉取指定 git 地址对应的仓库的所有分支代码，到当前目录中</td></tr><tr><td>git clone [git] [folderName]</td><td>拉取指定 git 地址对应的仓库的所有分支代码，到指定名字目录中，若该目录不存在会被新建，否则已有内容会被覆盖</td></tr></tbody></table><p>注意，执行 clone 之后不会自动进入新文件夹，需要手动进入</p><h1 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h1><p>通过命令 <code>git pull</code> 可以拉取远程仓库代码到本地仓库已有分支</p><p>该命令可能会产生冲突</p><p>该命令有如下变体</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>git pull</td><td>拉取 upstream 仓库的，与当前所在分支相同的分支的所有内容到本地</td></tr><tr><td>git pull origin master:child</td><td>拉取 origin 仓库的，master 分支的代码到本地 child 分支</td></tr></tbody></table><p>在该命令中如果想回避冲突，可以使用 <code>git stash</code> 和 <code>git stash pop</code> 组合命令</p><h1 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h1><h2 id="压栈"><a href="#压栈" class="headerlink" title="压栈"></a>压栈</h2><p>通过命令 <code>git stash</code> 可以将本地仓库已经标记但还未 commit 的文件隐藏进缓存栈中</p><p>此时执行 <code>git pull</code> 不会与缓存栈中文件作对比</p><p>可以多次执行命令 <code>git stash</code> 来不断压栈</p><h2 id="弹出"><a href="#弹出" class="headerlink" title="弹出"></a>弹出</h2><p>当 pull 完成后可以通过命令 <code>git stash pop</code> 来弹出栈顶内容</p><p>可以根据需要来弹出，但因为栈的特性，必然是只能按顺序弹出</p><p>该操作可能会引起冲突</p><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>可以通过命令 <code>git stash list</code> 来查看当前缓存栈中保存的内容</p><h2 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h2><p>可以通过命令 <code>git stash clear</code> 来清空缓存栈中所需内容</p><p>注意，该操作不可复原</p><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a><span id="other">其它</span></h1><h2 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h2><p>可以通过 <code>code ~/.bashrc</code> 命令，通过 vscode 打开 bash 配置文件</p><p>然后通过 alias 指令，指定缩写</p><p>如 <code>alias ga=&quot;git add&quot;</code> 来令缩写命令 ga 等效于 git add 命令</p><p>不止 git 命令，其它 bash 命令也可以通过这种方法设置缩写</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>可以通过 <code>git rebase</code> 命令来为 git log 指定排版</p><p>假设现在有三个版本，版本号如图</p><table><thead><tr><th>版本</th><th>版本号</th></tr></thead><tbody><tr><td>1</td><td>bikh345</td></tr><tr><td>2</td><td>12jop3i</td></tr><tr><td>3（最新）</td><td>u09dsf3</td></tr></tbody></table><p>现在想合并已有版本1和2，使得日志缩短，可以通过命令 <code>git rebase -i u09dsf3</code> 来告诉 git，我想对 u09dsf3 之前的版本进行修改</p><p>此时 git 会弹出默认编辑器，向你请求修改，同时会给出帮助，按帮助修改即可</p><p>修改完毕后，保存，关闭这个文件，git 就会开始处理你的修改</p><p>在处理完成之前，如果你反悔了，可以通过命令 <code>git rebase --abort</code> 来取消这次 rebase</p><p>如果又反悔了（什么人啊这是），可以通过命令 <code>git rebase --continue</code> 来继续这次 rebase</p><p>rebase 也有可能出错，看看日志解决即可</p><p>大概就这些</p><p>感谢饥人谷对 <a href="#other">其它</a> 部分的帮助</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有了本地操作，肯定还得保存到云端&lt;/p&gt;
    
    </summary>
    
    
      <category term="programing" scheme="http://yoursite.com/categories/programing/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="programing" scheme="http://yoursite.com/tags/programing/"/>
    
  </entry>
  
  <entry>
    <title>Git本地操作</title>
    <link href="http://yoursite.com/programing/localGit/"/>
    <id>http://yoursite.com/programing/localGit/</id>
    <published>2020-11-16T04:40:00.000Z</published>
    <updated>2020-11-16T07:54:14.971Z</updated>
    
    <content type="html"><![CDATA[<p>关于提交到 github 之前，在本地仓库的操作</p><a id="more"></a><p>在使用 Git 之前，要先配置一下本地的 Git Bash</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>一般来说，有如下6行配置，是建议运行的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name [yourName]</span><br><span class="line">git config --global user.email [yourEmail]</span><br><span class="line">git config --global push.default simple</span><br><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br><span class="line">git config --global core.editor <span class="string">"code --wait"</span></span><br><span class="line">git config --global core.autocrlf input</span><br></pre></td></tr></table></figure><h2 id="user"><a href="#user" class="headerlink" title="user"></a>user</h2><p>这两行是必须执行的，用于告诉 Git 你的个人信息</p><p>例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name Ringoer</span><br><span class="line">git config --global user.email ringoer@qq.com</span><br></pre></td></tr></table></figure><h2 id="push-default"><a href="#push-default" class="headerlink" title="push.default"></a>push.default</h2><p>这个参数有两个可取的值，具体如下</p><table><thead><tr><th>参数值</th><th>版本</th><th>行为</th></tr></thead><tbody><tr><td>matching</td><td>1.x 版本默认</td><td>上传本地所有分支</td></tr><tr><td>simple</td><td>2.x 版本默认</td><td>上传本地当前分支</td></tr></tbody></table><p>建议手动执行一下该命令，以免出现意外的上传</p><h2 id="core-quotepath"><a href="#core-quotepath" class="headerlink" title="core.quotepath"></a>core.quotepath</h2><p>用于配置是否开启路径转义，默认值是 true，表示中文路径名或文件名要自动转义为形如 <code>\xx\xx</code> 的类似 unicode 的形式</p><h2 id="core-editor"><a href="#core-editor" class="headerlink" title="core.editor"></a>core.editor</h2><p>用于指定当 Git 希望打开一个文本编辑器时，执行的命令行。默认值是 vi，表示启动 vim</p><h2 id="core-autocrlf"><a href="#core-autocrlf" class="headerlink" title="core.autocrlf"></a>core.autocrlf</h2><p>首先了解一下 CRLF、CR、LF 分别是什么</p><table><thead><tr><th>参数值</th><th>对应转义字符</th></tr></thead><tbody><tr><td>CRLF</td><td>\r\n</td></tr><tr><td>CR</td><td>\r</td></tr><tr><td>LF</td><td>\n</td></tr></tbody></table><p><code>core.autocrlf</code> 用于指定行结束符 LF 和 CRLF 之间的转换，具体如下</p><table><thead><tr><th>参数值</th><th>提交（commit）行为</th><th>签出（checkout）行为</th></tr></thead><tbody><tr><td>true（默认）</td><td>CRLF 转换为 LF</td><td>LF 转换为 CRLF</td></tr><tr><td>input</td><td>CRLF 转换为 LF</td><td>不转换</td></tr><tr><td>false</td><td>不转换</td><td>不转换</td></tr></tbody></table><p>鉴于 Windows 下的行结束符通常是 CRLF，Mac 和 Linux 下通常是 LF，所以最好是选择 input 参数值，以免产生跨平台协作问题</p><p>说到 Git 本地操作，那必然也是对某目标的 CRUD。是什么目标呢？是分支</p><h1 id="分支（Branch）"><a href="#分支（Branch）" class="headerlink" title="分支（Branch）"></a>分支（Branch）</h1><p>首先要了解什么是分支</p><p>每当我们想保存代码的时候，往往有很多文件，组成一个项目。这个项目此时此刻的所有状态，合称为一个<strong>版本</strong>，而这个项目的所有版本，都处于同一个<strong>分支</strong>之中</p><h1 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h1><p>一般有两种新增</p><ul><li>初始化本地仓库时，新增默认的分支</li><li>已有分支的情况下，新增新的分支</li></ul><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>首先通过 <code>cd</code> 命令进入项目所在目录，然后使用 <code>git init</code> 来完成本地仓库的初始化</p><p>初始化完成之后，会在该目录中产生一个 <code>.git</code> 文件夹，这个就是本地仓库</p><p>默认分支是 <code>master</code>，但由于 zzzq 等原因，现在默认分支改名叫 <code>main</code></p><p>初始化完成后，<code>.git</code> 目录下会有一个名为 <code>.gitignore</code> 的文本文档，里面用类正则表达式写法，指明了在提交操作中应该忽略哪些文件</p><h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><p>现在我们已经有一个 <code>master</code> 分支了，想要新增一个分支</p><p>可以使用 <code>git branch [branchName]</code> 命令来新增分支</p><p>假设新分支名为 <code>child</code>，那么命令就是 <code>git branch child</code>，此时就新建了一个名为 <code>child</code> 的新分支</p><p>注意该操作仅创建了分支，不会自动移动到新分支</p><h1 id="Retrieve"><a href="#Retrieve" class="headerlink" title="Retrieve"></a>Retrieve</h1><h2 id="查看所有分支情况"><a href="#查看所有分支情况" class="headerlink" title="查看所有分支情况"></a>查看所有分支情况</h2><p>可以使用 <code>git branch</code> 查看本地仓库中的所有分支名称</p><h2 id="查看当前分支情况"><a href="#查看当前分支情况" class="headerlink" title="查看当前分支情况"></a>查看当前分支情况</h2><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>可以通过 <code>git status</code> 命令查看当前分支的状态</p><p>通常会显示以下种内容</p><ol><li>还未执行 <a href="#add">标记</a> 的文件列表</li><li>已经执行 <a href="#add">标记</a> ，还未执行 <a href="#commit">提交</a>  的文件列表</li><li>存在 <a href="#conflict">冲突</a> 的文件列表</li></ol><p>可以通过 <code>-sb</code> 选项简化显示的内容（只显示文件列表）</p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>日志有两种，log 和 reflog，关于其差别请阅读 <a href="#reset">重置</a> 部分内容</p><p>每条日志都记录了一次提交，包括这次提交的版本号、理由等</p><p>可以通过 <code>git log</code> 命令查看当前分支的局部日志（不包括重置操作）</p><p>可以通过 <code>git reflog</code> 命令查看当前分支的所有日志（包括重置操作）</p><h1 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h1><p>要让增删有意义，那么自然是要进行符合我心意的修改了</p><p>此处的修改分支，是指修改本地仓库内保存的分支内容</p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a><span id="commit">提交</span></h2><p>初始化的分支，或是新建的分支，里面都是没有内容的。如何让它充实呢？</p><p>可以通过 <code>git commit</code> 命令让它充实。</p><p>但是仅仅是 <code>git commit</code> 来上传新版本的话，以后无法查询版本更新信息，所以我们需要 -m 和 -v 参数</p><h3 id="m"><a href="#m" class="headerlink" title="-m"></a>-m</h3><p><code>git commit -m [string]</code> 表示将 -m 选项后的字符串作为本次提交的理由（备注），使得后续可以查看该版本提交时的相关信息</p><p>但是 -m 因为是在命令行中直接给出，人在潜意识影响下会倾向于写短理由，不利于以后查询，所以有了 -v 选项</p><h3 id="v"><a href="#v" class="headerlink" title="-v"></a>-v</h3><p><code>git commit -v</code> 可以打开 Git 默认的文本编辑器（默认是 vim）来等待用户写入提交理由，直到用户在新打开的文件中写完理由并保存后才会继续提交</p><p>因为是在新文件中书写理由，视野比较开阔，会更容易写出更易阅读的理由，所以推荐手动上传时，使用 -v 选项，自动上传时才选择 -m 选项</p><p>但是 Git 怎么知道你要上传哪些内容呢？万一你只修改了部分文件，只想上传这一部分，怎么办呢</p><h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a><span id="add">标记</span></h2><p>可以通过 <code>git add [filename]</code> 命令来标记要提交的文件</p><p>可以用 <code>git add .</code> 来标记目录下的所有文件（注意点号）</p><p>此处的标记，指的是“将要同步到本地仓库当前分支的更新”，一般有三种情况</p><table><thead><tr><th>文件状态</th><th>释义</th><th>commit 后的行为</th></tr></thead><tbody><tr><td>New</td><td>新建</td><td>向本地仓库当前分支中 <strong>添加</strong> 该文件</td></tr><tr><td>Modified</td><td>更新</td><td><strong>修改</strong> 本地仓库当前分支中的对应文件</td></tr><tr><td>Deleted</td><td>删除</td><td>从本地仓库当前分支中 <strong>删除</strong> 该文件</td></tr></tbody></table><p>可见，虽然命令中采用的是 <code>add</code> 短语，但实际上表达的意思是“添加标记”，而不是单纯的“新增”</p><p>只有当文件被标记后，才可以在下一次 commit 操作中被提交到本地仓库</p><p>怎么办，代码写着写着，发现以前的某个版本更优秀，我想回去————</p><h2 id="重置"><a href="#重置" class="headerlink" title="重置"></a><span id="reset">重置</span></h2><p>可以通过 <code>git reset --hard [version]</code> 来切换版本</p><p>版本号可以打完整，也可以打前缀，一般选择7位前缀</p><p>查看版本号，可以通过 <code>git log</code> 或 <code>git reflog</code> 来查看，或前往 github 网站，通过可视化界面查看</p><p>假设现在是版本4，想切换到版本2，那么切换后，log 里只会保留如下内容（简单说法）</p><ol><li>commit 版本1</li><li>commit 版本2</li></ol><p>而 reflog 里会保留所有内容</p><ol><li>commit 版本1</li><li>commit 版本2</li><li>commit 版本3</li><li>commit 版本4</li><li>reset 版本2</li></ol><p>注意一旦切换版本，将会丢失当前所有修改，请确保备份</p><p>如果不想重置所有修改，也可以选择回滚部分事务</p><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><p>可以通过 <code>git revert [version]</code> 来回滚当前分支上的某次提交事务</p><p>可能产生 <a href="#conflict">冲突</a></p><h1 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h1><p>可以通过 <code>git branch -d [branchName]</code> 来删除指定分支</p><p>注意删除后该分支所以内容都会从本地消失，请确保已经备份</p><p>有很多操作会产生冲突，怎么办呢？</p><h1 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a><span id="conflict">冲突</span></h1><p>当发生冲突的时候，首先要找到冲突</p><p>前述的 <code>git status</code> 命令，就可以找到现在有冲突的文件</p><p>然后我们需要手动解决冲突</p><p>假设有文件 1.txt，里面的原内容是 <code>今天是2020年11月16日</code>，新内容是 <code>今天是1970年1月1日</code></p><p>当要将新内容同步到 1.txt 时，就会发生冲突</p><p>此时 1.txt 内容变更为类似如下模样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD(当前更改)</span><br><span class="line">今天是2020年11月16日</span><br><span class="line">=======</span><br><span class="line">今天是1970年1月1日</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; child(传入的更改)</span><br></pre></td></tr></table></figure><p>可见冲突的格式是以 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> 开头，以 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 结尾，以 <code>=======</code> 分隔</p><p>所以当我们打开一个可能有冲突的文件时，可以搜索 <code>=======</code> 来快速定位冲突在文件中的位置</p><p>此时我们怎么处理这个冲突呢？</p><p>可以选择性保留我们想要的字段，假设保留新内容，那么可以对 1.txt 作出如下操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; master(当前更改) 【删除该行】</span><br><span class="line">今天是2020年11月16日     【删除该行】</span><br><span class="line">=======                  【删除该行】</span><br><span class="line">今天是1970年1月1日</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; child(传入的更改)【删除该行】</span><br></pre></td></tr></table></figure><p>只保留我们需要的部分，其余部分删除</p><p>那刚才创建的新分支又有什么用呢？</p><h1 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h1><h2 id="检出"><a href="#检出" class="headerlink" title="检出"></a>检出</h2><p>可以通过 <code>git checkout [branchName]</code> 命令来改变 Git 当前所在的分支</p><p>该操作称之为 <strong>检出</strong></p><p>当执行该命令时，会将指定分支的最后一次提交的内容同步到当前目录下</p><p>该操作可能会产生冲突</p><p>若同步前的文件内容与将要同步下来的内容无冲突，则保留同步前的文件；若冲突，则需要先解决冲突，解决冲突后<strong>不需要</strong>再次检出</p><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p>可以通过 <code>git merge [branchName]</code> 命令来将目标分支的内容合并到当前分支下</p><p>该操作在完成后，会自动向本地仓库中提交合并的结果，且理由自动设定为 <code>Merge branch [branchName]</code>，表示此次提交是因为合并而产生的</p><p>该操作可能会产生冲突</p><p>当产生冲突时，需要按顺序完成以下步骤以完成合并流程</p><ol><li>解决冲突</li><li><code>git add [冲突的文件]</code></li><li><code>git commit</code>（不需要填写理由）</li></ol><p>如上，即是 Git 本地操作中最常用的部分内容</p><p>谢谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于提交到 github 之前，在本地仓库的操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="programing" scheme="http://yoursite.com/categories/programing/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="programing" scheme="http://yoursite.com/tags/programing/"/>
    
  </entry>
  
  <entry>
    <title>常用命令行合集</title>
    <link href="http://yoursite.com/programing/commandLine/"/>
    <id>http://yoursite.com/programing/commandLine/</id>
    <published>2020-11-13T10:49:00.000Z</published>
    <updated>2020-11-13T12:37:11.629Z</updated>
    
    <content type="html"><![CDATA[<p>20201113命令行总结</p><a id="more"></a><p>首先我们要打开命令行，应该使用 <code>git bash</code> 而不是 Windows cmd，因为命令行实际上就是 bash 脚本语言</p><p>关于安装命令行，可以参考 <a href="https://ringoer.com/others/MyWebsiteGuide/" target="_blank" rel="noopener">本站建站指导</a></p><p>命令行的默认目录一般是形如 <code>C:\Users\Ringoer</code> ，这里被称之为用户目录，可以缩写为英文波浪线 <code>~</code></p><p>然后我们可能要先切换目录到达目标目录</p><h1 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h1><p>要切换到根目录（盘符的上级目录）的话，非常容易，只需要 <code>cd /</code> 就行了，此处 <code>/</code> 表示系统根目录</p><p>切换盘符的话，也挺简单的，直接在命令行输入盘符+冒号即可。例如 <code>D:</code> 可以切换到 D 盘</p><p>切换目录使用命令 <code>cd</code> ，是 <code>change directory</code> 的缩写。使用方法一般有两种</p><ul><li>绝对目录</li><li>相对目录</li></ul><h2 id="绝对目录"><a href="#绝对目录" class="headerlink" title="绝对目录"></a>绝对目录</h2><p>一般指从盘符开始的目录描述，比如 <code>C:\Users\Ringoer</code> 就是一个标准的绝对目录</p><p>需要注意，上面说到用户目录缩写是 <code>~</code> ，所以 <code>~</code> 也是一个绝对目录</p><h2 id="相对目录"><a href="#相对目录" class="headerlink" title="相对目录"></a>相对目录</h2><p>相对目录的写法一般根据当前目录决定。</p><p>首先我们可以在命令行上看到自己当前所在的目录，也可以使用命令 <code>pwd</code> 来显示当前目录</p><p>然后，我们可以选择前往上一级目录，此时可以使用命令 <code>cd ..</code> ，注意一定是两个点表示上级目录，如果是一个点则表示当前目录</p><p>不知道要去哪个目录怎么办？没关系，可以使用命令 <code>ls</code> （注意是字母 L 的小写）来查看当前目录下的所有子目录或文件，然后 <code>cd 子目录名称</code> 或 <code>cd ./子目录名称</code> 即可进入目标子目录</p><p>说到命令行，那最大的用处，肯定是对文件 CRUD 啦</p><h1 id="Create-新增"><a href="#Create-新增" class="headerlink" title="Create-新增"></a>Create-新增</h1><p>创建一个新文件，一般有两种类型</p><ul><li>从零创建</li><li>从已有创建</li></ul><h2 id="从零创建"><a href="#从零创建" class="headerlink" title="从零创建"></a>从零创建</h2><p>一般使用 <code>touch [...filename]</code> 来创建文件</p><p>其中 <code>...</code> 是 spread 语法，表示不定长参数列表，下同</p><p>若目标文件不存在，则在当前目录创建这个文件</p><p>若目标文件已经存在，则更新最后更新时间</p><h2 id="从已有创建"><a href="#从已有创建" class="headerlink" title="从已有创建"></a>从已有创建</h2><p>一般使用 <code>cp [filename1] [filename2]</code> 来复制文件</p><p>将 文件1 的内容全数复制到 文件2 中</p><h2 id="文件夹"><a href="#文件夹" class="headerlink" title="文件夹"></a>文件夹</h2><p>文件夹也有如上两种情况，分别采用</p><ul><li><code>mkdir [...directoryName]</code></li><li><code>cp -r [directoryName1] [directoryName2]</code></li></ul><p>来创建文件夹</p><p>其中参数 -r 表示 递归地复制，概念与 js 中的深度拷贝相同</p><h1 id="Retrieve-查询"><a href="#Retrieve-查询" class="headerlink" title="Retrieve-查询"></a>Retrieve-查询</h1><p>一般有 4 种查询语句</p><table><thead><tr><th>语句</th><th>描述</th></tr></thead><tbody><tr><td>cat […filename]</td><td>全量查看文件</td></tr><tr><td>head -n [line] […filename]</td><td>查看文件前 n 行</td></tr><tr><td>tail -n [line] […filename]</td><td>查看文件后 n 行</td></tr><tr><td>less [filename]</td><td>分页查看文件</td></tr></tbody></table><h1 id="Update-修改"><a href="#Update-修改" class="headerlink" title="Update-修改"></a>Update-修改</h1><p>显然修改文件和文件夹是不一样的</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>查询中前三种语句，都是有确定的返回内容的，此时可以通过 <code>&gt; [filename]</code> 将返回内容导入到新的文件中。该命令会覆盖目标文件原有内容</p><p>例如，<code>cat 1.txt 2.txt &gt; 3.txt</code> ，将 1.txt 和 2.txt 的内容都全量导出，然后拼接在一起，之后保存到 3.txt 中</p><p>也可以通过 <code>&gt;&gt; [filename]</code> 将返回内容导入到新的文件中。该命令会将新内容拼接到目标文件原有内容末尾</p><p>例如，<code>cat 1.txt 2.txt &gt;&gt; 3.txt</code> ，将 1.txt 和 2.txt 的内容都全量导出，然后拼接在一起，之后拼接到 3.txt 的末尾</p><p>刚才说到”确定的返回内容”，就不得不说说回显命令 <code>echo [body]</code> ，用于将参数体的内容原封不动回显到标准输出中。显然，echo 命令也可以通过 <code>&gt; [filename]</code> 和 <code>&gt;&gt; [filename]</code> 重定向到文件中</p><p>echo 还可以输出 bash 脚本代码，实际上就是输出字符串，需要双引号</p><p>例如 <code>echo &quot;hello world&quot;</code> ，英文引号，懂得都懂</p><h2 id="文件夹-1"><a href="#文件夹-1" class="headerlink" title="文件夹"></a>文件夹</h2><p>修改文件夹是什么意思呢？对比修改文件是指修改其中保存的内容，那修改文件夹显然就是修改文件夹中保存的文件列表</p><p>我们可以通过 <code>mv [...filename] [directoryName]</code> 命令来将文件移动到目标文件夹中</p><p>其中文件可以指定不少于 1 的任意多个，但目标文件夹只能有一个</p><p>mv，实际上是 <code>move</code> 的缩写。</p><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><p>说到这里，肯定会有同学想问，如何重命名呢？这就需要我们刚刚说的 <code>mv</code> 命令了</p><p><code>mv [file1] [file2]</code> 可以实现将文件1重命名为文件2</p><p><code>mv [directory1] [directory2]</code> 可以实现将文件夹1重命名为文件夹2</p><p>如果文件2已经存在会怎么样呢？</p><p>那么文件1会改名为文件2，而文件2会被删除</p><h1 id="Delete-删除"><a href="#Delete-删除" class="headerlink" title="Delete-删除"></a>Delete-删除</h1><p>删除一个文件，一般使用 <code>rm [filename]</code> 来删除，其中 <code>rm</code> 是 <code>remove</code> 的缩写</p><p>如果删除目标是一个文件夹，一般使用 <code>rm -r [directoryName]</code> 来删除，其中参数 -r 同上</p><p>有时候要删除某个文件或文件夹的时候，会触发警告，此时可以通过 <code>-f</code> 来强制删除文件或 <code>-rf</code> 来强制删除文件夹，这也是 <code>rm -rf /</code> 删库跑路的来源。但此举非常不推荐，否则很容易就把重要文件删了导致系统崩溃</p><p>但是测试 CRUD 的时候，总是要重复运行很多代码，好烦啊，有没有方便的办法呢？</p><h1 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h1><p>显然我们在上面测试的时候，经常会重复运行代码，输入内容等等。比如下方代码就是一个可能的情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"Waiting..."</span> &gt; 1.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello world"</span> &gt;&gt; 1.txt</span><br><span class="line"></span><br><span class="line">cp 1.txt 2.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"success"</span> &gt;&gt; 2.txt</span><br><span class="line"></span><br><span class="line">cat 1.txt 2.txt &gt; 3.txt</span><br><span class="line"></span><br><span class="line">mkdir <span class="built_in">test</span></span><br><span class="line">mv 1.txt 2.txt 3.txt <span class="built_in">test</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">tail -n 4 3.txt &gt; 4.txt</span><br><span class="line"></span><br><span class="line">less 4.txt</span><br></pre></td></tr></table></figure><p>但是我们总不能每一次测试都手打一遍？所以我们要将它保存为一个单独的 bash 代码文件，称之为 bash 脚本，它一旦运行起来，就可以帮助我们运行设定好的代码。</p><p>假设我们把它保存为 <code>node.exe</code>，或者干脆不要 exe，直接叫做 <code>node</code> </p><p>实际上，对于系统来说，文件后缀是不是 exe 并不是很重要，只要是机器能读懂的语言，都是可执行文件</p><p>如果你不是 windows 系统，需要先执行 <code>chmod +x [filename]</code> 命令，来赋予文件执行的权能</p><p>然后一般有三种方法运行你的可执行文件。假设此处运行当前目录下的 <code>node</code>，它是一个删除了 exe 后缀的原 exe 文件</p><ol><li><code>./node</code>，其中单个 <code>.</code> 表示当前目录</li><li><code>sh node</code>，其中 <code>sh</code> 表示将其当作 bash 脚本启动</li><li><code>node</code></li></ol><p>第一种和第二种没有什么区别，主要是第三种</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>前面我们讲过可以通过 <code>ls</code> 查看当前目录下的文件列表，那系统怎么知道 ls 是什么命令呢？答案就在系统环境变量 PATH 中</p><p>因为 PATH 中登记了 ls 所在的目录，所以系统能找到 ls 的指向</p><p>那么答案就很明确了，我们可以把我们现在的运行目录也登记到 PATH 中，就可以通过 <code>node</code> 直接运行我们的可执行文件了</p><h2 id="命名冲突"><a href="#命名冲突" class="headerlink" title="命名冲突"></a>命名冲突</h2><p>但是大家电脑上都已经安装了 nodejs 了吧？这时如果直接在命令行中执行 <code>node</code> 命令，往往会启动了 nodejs 的 node.exe 。那怎么让我们的 node 文件更优先呢？</p><p>答案还是在 PATH 身上</p><p>刚才设置 PATH 的时候，可以注意到，PATH 列表右侧有”上移””下移”按钮，可以推测目录在 PATH 中的注册顺序是影响调用决策的重要条件。那么我们把我们的工作目录上移到比 nodejs 目录更上方的位置</p><p>此时如果你不是 windows 环境，应该可以看到命令行正常输出了你的 node 文件的内容了。但如果是 windows 环境……还有一个坑点，那就是 windows 环境在决策时 exe 后缀的文件优先级更高。那么把你的 node 文件改名为 node.exe，ok，大功告成！</p><p>好了，关于命令行，我暂且只有这些想说的，谢谢你看到这里，快回去自己动手试验一下吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;20201113命令行总结&lt;/p&gt;
    
    </summary>
    
    
      <category term="programing" scheme="http://yoursite.com/categories/programing/"/>
    
    
      <category term="commandLine" scheme="http://yoursite.com/tags/commandLine/"/>
    
  </entry>
  
  <entry>
    <title>配置HTTPS方案</title>
    <link href="http://yoursite.com/https/https/"/>
    <id>http://yoursite.com/https/https/</id>
    <published>2020-10-30T12:33:00.000Z</published>
    <updated>2020-11-13T08:40:31.544Z</updated>
    
    <content type="html"><![CDATA[<p>HTTPS配置方案</p><a id="more"></a><p>本文基于腾讯云的域名配置，以及七牛云CDN和自建CDN两种情况</p><h1 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h1><ol><li><p>打开腾讯云，找到SSL证书</p><p><img src="https://pic.ringoer.com/https-1.png" alt="SSL"></p></li><li><p>选择申请免费证书</p><p><img src="https://pic.ringoer.com/https-2.png" alt="申请免费证书"></p></li><li><p>填写要配置https的域名，最好是已经配置云解析的域名</p><p><img src="https://pic.ringoer.com/https-3.png" alt="填写信息"></p></li><li><p>等待10分钟左右，之后下载</p><p><img src="https://pic.ringoer.com/https-4.png" alt="下载"></p></li><li><p>下载完成，解压后，得到如图目录</p><p><img src="https://pic.ringoer.com/https-5.png" alt="下载"></p><p>其中Apache内容</p><p><img src="https://pic.ringoer.com/https-apache.png" alt="下载"></p><p>Nginx内容</p><p><img src="https://pic.ringoer.com/https-nginx.png" alt="下载"></p></li></ol><h1 id="七牛云CDN"><a href="#七牛云CDN" class="headerlink" title="七牛云CDN"></a>七牛云CDN</h1><ol><li>打开七牛云SSL证书服务</li></ol><p><img src="https://pic.ringoer.com/https-7.png" alt=""></p><ol start="2"><li><p>上传已有证书</p><p><img src="https://pic.ringoer.com/https-8.png" alt="下载"></p></li><li><p>打开下载好的证书的Apache文件夹，找到同名但后缀不同的两个文件，然后贴入文本框中</p><p><img src="https://pic.ringoer.com/https-9.png" alt="下载"></p></li><li><p>上传完毕后可在我的证书中看到，点击部署CDN</p><p><img src="https://pic.ringoer.com/https-10.png" alt="下载"></p></li><li><p>如果你的证书名称和域名一样，那么点击部署即可一键升级HTTPS，然后等待半小时，收到邮件即是升级成功</p><p><img src="https://pic.ringoer.com/https-11.png" alt="下载"></p></li></ol><h1 id="自建CDN"><a href="#自建CDN" class="headerlink" title="自建CDN"></a>自建CDN</h1><ol><li><p>打开Nginx文件夹，将crt和key都上传到服务器的nginx文件夹中</p><p><img src="https://pic.ringoer.com/https-6.png" alt="下载"></p></li><li><p>编辑default.conf文件为如下模样</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl; <span class="comment"># HTTPS的端口号就是443</span></span><br><span class="line">    <span class="attribute">server_name</span>  ali.ringoer.com; <span class="comment"># 你的域名，要与证书一致</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/host.access.log  main;</span><br><span class="line">    <span class="attribute">error_log</span>  /var/log/nginx/error.log  <span class="literal">error</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>  1_ali.ringoer.com_bundle.crt; <span class="comment"># 你的crt，与你上传的同名</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> 2_ali.ringoer.com.key; <span class="comment"># 你的key，与你上传的同名</span></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>; <span class="comment"># 这几条不变</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">try_files</span>   <span class="variable">$uri</span>  <span class="variable">$uri</span>/  /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置Dockerfile为如图，注意default.conf配置文件和证书不在同一个文件夹</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> nginx/default.conf /etc/nginx/conf.d/default.conf</span></span><br><span class="line"><span class="bash">COPY nginx/2_ali.ringoer.com.key /etc/nginx/2_ali.ringoer.com.key</span></span><br><span class="line"><span class="bash">COPY nginx/1_ali.ringoer.com_bundle.crt /etc/nginx/1_ali.ringoer.com_bundle.crt</span></span><br></pre></td></tr></table></figure></li><li><p>docker build创建镜像，然后用如下命令挂载目录再运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name static -p 443:443 -v /root/static/dist:/usr/share/nginx/html static</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTTPS配置方案&lt;/p&gt;
    
    </summary>
    
    
      <category term="https" scheme="http://yoursite.com/categories/https/"/>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="https" scheme="http://yoursite.com/tags/https/"/>
    
      <category term="nginx" scheme="http://yoursite.com/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下配置Mysql的办法</title>
    <link href="http://yoursite.com/mysql/mysql/"/>
    <id>http://yoursite.com/mysql/mysql/</id>
    <published>2020-10-07T08:02:00.000Z</published>
    <updated>2020-10-07T08:26:38.515Z</updated>
    
    <content type="html"><![CDATA[<p>不小心还原云主机又忘记备份sql，只好亲自重配一遍了</p><a id="more"></a><h1 id="卸载-mysql"><a href="#卸载-mysql" class="headerlink" title="卸载 mysql"></a>卸载 mysql</h1><p>要想顺利下载，首先要卸载旧版本。</p><ol><li><p>删除 mysql 的数据文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /var/lib/mysql/ -R</span><br></pre></td></tr></table></figure></li><li><p>删除 mysql 的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /etc/mysql/ -R</span><br></pre></td></tr></table></figure></li><li><p>自动卸载 mysql（包括server和client）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get autoremove mysql* --purge</span><br><span class="line"></span><br><span class="line">sudo apt-get remove apparmor</span><br></pre></td></tr></table></figure></li><li><p>检查 mysql 的依赖项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --list|grep mysql</span><br></pre></td></tr></table></figure></li><li><p>当 4 存在返回值时，使用 <code>sudo apt-get remove xxx</code> 依次卸载</p></li></ol><h1 id="安装-mysql"><a href="#安装-mysql" class="headerlink" title="安装 mysql"></a>安装 mysql</h1><ol><li><p>刷新 apt 存储库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装 mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure></li><li><p>初始化 mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure></li><li><p>一大堆配置，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1</span></span><br><span class="line">VALIDATE PASSWORD PLUGIN can be used to test passwords...</span><br><span class="line">Press y|Y for Yes, any other key for No: N</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">2</span></span><br><span class="line">Please set the password for root here...</span><br><span class="line">New password: (输入密码)</span><br><span class="line">Re-enter new password: (重复输入)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">3</span></span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them...</span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : N</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">4</span></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">'localhost'. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network...</span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : Y </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">5</span></span><br><span class="line">By default, MySQL comes with a database named 'test' that</span><br><span class="line">anyone can access...</span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : N </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">6</span></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : Y</span><br></pre></td></tr></table></figure><p>建议选择 N+密码+NYNY</p></li><li><p>检查服务状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysql.service</span><br></pre></td></tr></table></figure><p>如果显示绿色 active(running) 则成功</p></li></ol><h1 id="配置-mysql"><a href="#配置-mysql" class="headerlink" title="配置 mysql"></a>配置 mysql</h1><ol><li><p>前往服务器目录 <code>/etc/mysql/mysql.conf.d</code>，注释掉关于 <code>bind-address</code> 的配置</p></li><li><p>使用命令 <code>sudo mysql -u root -p</code> 进入 root 用户的用户界面</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql;</span><br></pre></td></tr></table></figure><p>选中 database mysql</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host=<span class="string">'%'</span> <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure><p>修改 root 的访问权限为 %，表示允许 root 用户的来自任意 ip 的访问</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">'pwd'</span>;</span><br></pre></td></tr></table></figure><p>对于 root 用户，不论任何来源的访问，均要求使用密码登录，密码为末尾字符串中设置的密码</p><p>此处不能使用 password() 函数来构造密码，最新版 mysql 不支持</p><p>此处不能使用 grant all privileges 来授予权限，最新版 mysql 不支持</p></li><li><p>4 和 5 的顺序不能颠倒</p></li></ol><p>好了，此时可以使用 navicat 远程登录 mysql 了</p><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><ol><li><p>远程连接服务器报错 2003，连接不上服务器 3306 端口</p><ul><li><p>查看服务器安全策略是否开放这个端口</p></li><li><p>查看上一节的 1</p></li></ul></li><li><p>远程连接服务器报错 1130</p><ul><li>查看上一节的 4</li></ul></li><li><p>远程连接服务器报错 1698</p><ul><li>查看上一节的 5</li></ul></li><li><p>远程连接服务器报错 1045</p><ul><li>不可以直接 update root 用户的密码，否则你直接设置的密码会被解密，然后发现和你输入的密码不一致</li></ul></li></ol><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnblogs.com/mjhblog/p/10499772.html" target="_blank" rel="noopener">Ubuntu16.04彻底卸载MySQL</a></p><p><a href="https://blog.csdn.net/weixx3/article/details/80782479" target="_blank" rel="noopener">Ubuntu18.04 安装MySQL</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不小心还原云主机又忘记备份sql，只好亲自重配一遍了&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
      <category term="server" scheme="http://yoursite.com/tags/server/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 学习提纲</title>
    <link href="http://yoursite.com/web/nodejs/"/>
    <id>http://yoursite.com/web/nodejs/</id>
    <published>2020-09-18T04:59:00.000Z</published>
    <updated>2020-11-24T07:41:50.876Z</updated>
    
    <content type="html"><![CDATA[<p>留给自己参考的Node.js学习提纲</p><a id="more"></a><p>目录：  </p><ol><li>HelloWorld</li><li>回调函数</li><li>事件循环</li><li>EventEmitter</li><li>模块系统</li><li>web 模块</li><li>express 框架</li><li>Restful API</li><li>MySQL</li><li>Buffer/Stream</li><li>全局对象</li><li>fs模块</li><li>util模块</li><li>其余常用模块</li></ol><h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>新建一个 server.js 文件，输入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送 HTTP 头部 </span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送响应数据 "Hello World"</span></span><br><span class="line">    response.end(<span class="string">'Hello World\n'</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终端打印如下信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8888/'</span>);</span><br></pre></td></tr></table></figure><p>然后在命令行使用 node 命令执行以上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><p>之后访问本地的 8888 端口，就可以看到我们的 HelloWorld 消息了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8888/</span><br></pre></td></tr></table></figure><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>从上面的代码中，我们可以看到，首先代码 require 了一个名为 http 的模块，用来提供 http 服务</p><p>之后使用 http.createServer 方法，传入了一个 function 作为回调方法，用来处理监听到的请求，之后在 8888 端口启动服务，监听该端口的请求。</p><p>在回调方法中可以看到，我们在响应中定义了响应头，其中响应的 http 状态码是200，内容类型是 text/plain，之后在响应中使用 end 方法写入数据并返回</p><h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><p>Node.js 异步编程的直接体现就是回调。</p><p>异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。</p><p>回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。</p><p>在之前学过的 ES6 Promise 中，大家一定深有体会。</p><p>回调函数一般作为函数的最后一个参数出现。</p><h2 id="阻塞代码（同步）"><a href="#阻塞代码（同步）" class="headerlink" title="阻塞代码（同步）"></a>阻塞代码（同步）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'input.txt'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行结束!"</span>);</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line">本站地址：ringoer.com</span><br><span class="line"></span><br><span class="line">程序执行结束!</span><br></pre></td></tr></table></figure><p>可见程序是强顺序执行的，不到读取完毕文件，不会继续执行。</p><h2 id="非阻塞代码（异步）"><a href="#非阻塞代码（异步）" class="headerlink" title="非阻塞代码（异步）"></a>非阻塞代码（异步）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'input.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行结束!"</span>);</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line">程序执行结束!</span><br><span class="line">本站地址：ringoer.com</span><br></pre></td></tr></table></figure><p>可见程序是先执行完当前任务，再在读取文件完成的时候打印文件内容的。</p><p>以上两个实例我们了解了阻塞与非阻塞调用的不同。</p><p>第一个实例在文件读取完后才执行程序， 第二个实例我们不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能。</p><p>因此，阻塞是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们就需要写在回调函数内。</p><p>为什么会先执行当前任务呢？我们将在下节介绍。</p><h1 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h1><p>众所周知，JavaScript 是单线程的，Node.js 也是单进程单线程应用程序，那么他是怎么提高运行效率的呢？</p><p>答案就是 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以效率相比普通的单线程大大提高。</p><h2 id="事件驱动程序"><a href="#事件驱动程序" class="headerlink" title="事件驱动程序"></a>事件驱动程序</h2><p>Node.js 使用事件驱动模型，每当 web server 接收到一个新的请求，触发了对应的事件，就会将请求放入事件队列中，然后继续按队列顺序处理。</p><p>这个模型非常高效可扩展性非常强，因为 web server 一直接受请求而不等待任何读写操作。（这也称之为非阻塞式IO或者事件驱动IO）</p><p>事件发生流程一般如下：</p><ol><li>将回调函数绑定到事件上</li><li>触发某个事件</li><li>将回调函数放入事件队列中</li><li>按队列顺序执行</li></ol><p>我们可以通过内置模块 events 来模拟这个事件的流程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br></pre></td></tr></table></figure><p>以下程序绑定事件处理程序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定事件及事件的处理程序</span></span><br><span class="line">eventEmitter.on(<span class="string">'eventName'</span>, eventHandler);</span><br></pre></td></tr></table></figure><p>我们可以通过程序触发事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line">eventEmitter.emit(<span class="string">'eventName'</span>);</span><br></pre></td></tr></table></figure><p>关于 events 模块，将在下一节详细介绍。</p><h1 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h1><p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。</p><p>Node.js 里面的许多对象都会分发事件：一个 net.Server 对象会在每次有新连接时触发一个事件， 一个 fs.readStream 对象会在文件被打开的时候触发一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。</p><h2 id="EventEmitter类"><a href="#EventEmitter类" class="headerlink" title="EventEmitter类"></a>EventEmitter类</h2><p>Node.js 内置模块中含有一个名为 events 的模块，该模块向外 exports 了一个 events 对象，该对象包含一个名为 EventEmitter 的类。我们可以通过 require 命令来引入它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br></pre></td></tr></table></figure><p>接下来我们来解析一下上篇提到的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建事件处理程序</span></span><br><span class="line"><span class="keyword">var</span> connectHandler = <span class="function"><span class="keyword">function</span> <span class="title">connected</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'连接成功。'</span>);</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// 触发 data_received 事件 </span></span><br><span class="line">   eventEmitter.emit(<span class="string">'data_received'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 绑定 connection 事件处理程序</span></span><br><span class="line">eventEmitter.on(<span class="string">'connection'</span>, connectHandler);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用匿名函数绑定 data_received 事件</span></span><br><span class="line">eventEmitter.on(<span class="string">'data_received'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'数据接收成功。'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置定时器在触发事件前</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'定时器执行成功。'</span>),<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 触发 connection 事件 </span></span><br><span class="line">eventEmitter.emit(<span class="string">'connection'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行完毕。"</span>);</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line">连接成功。</span><br><span class="line">数据接收成功。</span><br><span class="line">程序执行完毕。</span><br><span class="line">定时器执行成功。</span><br></pre></td></tr></table></figure><p>在上述代码中，我们创建了一个事件发生器，并通过 on 命令指定了两个事件及其回调，然后通过 emit 命令触发指定事件。</p><p>我们观察到，尽管先访问到了 setTimeout，但是其结果却在最后被打印，说明 eventEmitter 的执行逻辑与 setTimeout 并不相同。通过阅读源码，可知 eventEmitter 的执行方式类似于方法调用，此处暂略。</p><h2 id="on-和-emit"><a href="#on-和-emit" class="headerlink" title="on 和 emit"></a>on 和 emit</h2><p>上文代码中我们用到了 on 和 emit 两个命令。现在来看看他们的方法原型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">on(event,listener)</span><br><span class="line">event 要求为一个字符串，listener 要求为一个回调函数，表示在事件 event 的回调函数列表尾部插入 listener</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">emit(event,[data])</span><br><span class="line">event 要求为一个字符串，[data] 为可选项，表示触发事件 event，将按顺序执行 event 回调函数列表中的每个回调函数，并向每个函数中都传入 data</span><br></pre></td></tr></table></figure><p>这是 EventEmitter 两个最为重要的方法。</p><p>其余方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addListener(event, listener)</span><br><span class="line">为指定事件添加一个监听器到监听器数组的尾部。与on命令相同。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">once(event, listener)</span><br><span class="line">为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">removeListener(event, listener)</span><br><span class="line">移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。</span><br><span class="line"></span><br><span class="line">它接受两个参数，第一个是事件名称，第二个是回调函数名称。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">removeAllListeners([event])</span><br><span class="line">移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setMaxListeners(n)</span><br><span class="line">默认情况下， EventEmitters 如果你添加的监听器超过 <span class="number">10</span> 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listeners(event)</span><br><span class="line">返回指定事件的监听器数组。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listenerCount(event)</span><br><span class="line">返回指定事件的监听器数量。</span><br></pre></td></tr></table></figure><p>以上是 EventEmitter 的方法，可以设置自定义事件。</p><p>EventEmitter 还有内置的事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newListener</span><br><span class="line">该事件在添加新监听器时被触发。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">removeListener</span><br><span class="line">该事件在删除一个监听器时被触发。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error</span><br><span class="line">该事件在发生错误时被触发。若没有为该事件绑定监听器，则程序会直接出错退出。</span><br></pre></td></tr></table></figure><h2 id="同步调用"><a href="#同步调用" class="headerlink" title="同步调用"></a>同步调用</h2><p>上文说到，eventEmitter 的执行逻辑与 setTimeout 并不相同。那么具体是如何执行的呢？我们需要阅读 eventEmitter 的源码，或者自己手写一个。此处选择手写一个作为示例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 事件对象，存放订阅的名字和事件  如:  &#123; click: [ handle1, handle2 ]  &#125;</span></span><br><span class="line">    <span class="keyword">this</span>.events = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 订阅事件的方法</span></span><br><span class="line">  on(eventName, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.events[eventName]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.events[eventName] = [callback]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.events[eventName].push(callback)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 触发事件的方法</span></span><br><span class="line">  emit(eventName, ...rest) &#123;</span><br><span class="line">    <span class="keyword">this</span>.events[eventName] &amp;&amp;</span><br><span class="line">      <span class="keyword">this</span>.events[eventName].forEach(<span class="function"><span class="params">f</span> =&gt;</span> f.apply(<span class="keyword">this</span>, rest))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 移除订阅事件</span></span><br><span class="line">  remove(eventName, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.events[eventName]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.events[eventName] = <span class="keyword">this</span>.events[eventName].filter(<span class="function"><span class="params">f</span> =&gt;</span> f != callback)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 只执行一次订阅的事件，然后移除</span></span><br><span class="line">  once(eventName, callback) &#123;</span><br><span class="line">    <span class="comment">// 绑定的时fn, 执行的时候会触发fn函数</span></span><br><span class="line">    <span class="keyword">const</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      callback() <span class="comment">// fn函数中调用原有的callback</span></span><br><span class="line">      <span class="keyword">this</span>.remove(eventName, fn) <span class="comment">// 删除fn, 再次执行的时候之后执行一次</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.on(eventName, fn)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，eventEmitter 是以类似方法调用的方式传递触发信号的，然后又以数组顺序为基础来进行顺序执行，所以整体上是同步执行的，不是 setTimeout 一样的异步执行。</p><p>比起一般的方法调用， eventEmitter 胜在一个入口可以调用多个（同一数组内）的方法。</p><h1 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h1><p>模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。在模块系统的帮助下，Node.js的文件可以相互调用。</p><p>模块系统有两个重要动作：导入（require）和导出（exports）。</p><h2 id="require"><a href="#require" class="headerlink" title="require"></a>require</h2><p>我们可以通过 require 命令来引入一个模块，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="built_in">require</span>(<span class="string">'./hello'</span>);</span><br><span class="line">hello.world();</span><br></pre></td></tr></table></figure><p>在 require 之后，可以对这个模块做出哪些操作，则取决于这个模块 exports 了什么东西。</p><h2 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h2><p>对于任何一个模块，都可以通过操作内置对象 exports 来导出内容。</p><p>例如导出一个 function world，可以通过两种方案来实现。</p><ol><li><code>exports.world = function (){}</code> </li><li><code>module.exports = function (){}</code></li></ol><p>第一种方案，在 require 之后，主模块引入了一个来自从模块的对象，该对象包含一个名为 world 的方法。</p><p>第二种方案，在 require 之后，主模块只引入了一个方法，该方法的名字取决于主模块中所起的变量名。</p><p>一般不建议两种方案同时使用，因为阅读 require 源码可以发现，在 require 一个模块的时候，会先执行 exports.xxx 的赋值，最后才执行 module.exports 的赋值，这使得之前所做的赋值被完全覆盖了，只有最后的赋值才有效。</p><h2 id="模块分类"><a href="#模块分类" class="headerlink" title="模块分类"></a>模块分类</h2><p>之前的章节中，我们使用了 http 模块，event 模块等。事实上，JavaScript 有 4 种模块，分为原生模块和 3 种文件模块，通过在 require 命令中指定的字符串不同而导入。</p><ul><li>http、fs、path等，原生模块。</li><li>./mod或../mod，相对路径的文件模块。</li><li>/pathtomodule/mod，绝对路径的文件模块。</li><li>mod，非原生模块的文件模块。</li></ul><p>由于有多种模块，所以导入模块也有对应的优先级，如图。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/nodejs-require.jpg" alt="模块加载优先级"></p><h1 id="web-模块"><a href="#web-模块" class="headerlink" title="web 模块"></a>web 模块</h1><p>使用 Node.js 创建 web 客户端需要引入 http 模块。</p><p>我们可以用 Node.js 搭建一个 web 服务器与一个客户端。</p><p>服务器代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line">http.createServer( <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;  </span><br><span class="line">   <span class="comment">// 解析请求，包括文件名</span></span><br><span class="line">   <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 输出请求的文件名</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 从文件系统中读取请求的文件内容</span></span><br><span class="line">   fs.readFile(pathname.substr(<span class="number">1</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(err);</span><br><span class="line">         <span class="comment">// HTTP 状态码: 404 : NOT FOUND</span></span><br><span class="line">         <span class="comment">// Content Type: text/html</span></span><br><span class="line">         response.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;             </span><br><span class="line">         <span class="comment">// HTTP 状态码: 200 : OK</span></span><br><span class="line">         <span class="comment">// Content Type: text/html</span></span><br><span class="line">         response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);    </span><br><span class="line">         </span><br><span class="line">         <span class="comment">// 响应文件内容</span></span><br><span class="line">         response.write(data.toString());        </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//  发送响应数据</span></span><br><span class="line">      response.end();</span><br><span class="line">   &#125;);   </span><br><span class="line">&#125;).listen(<span class="number">8080</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 控制台会输出以下信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8080/'</span>);</span><br></pre></td></tr></table></figure><p>需要在服务器文件目录下创建一个 index.html 文件来配合。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>客户端代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 用于请求的选项</span></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">   host: <span class="string">'localhost'</span>,</span><br><span class="line">   port: <span class="string">'8080'</span>,</span><br><span class="line">   path: <span class="string">'/index.html'</span>  </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 处理响应的回调函数</span></span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">   <span class="comment">// 不断更新数据</span></span><br><span class="line">   <span class="keyword">var</span> body = <span class="string">''</span>;</span><br><span class="line">   response.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      body += data;</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line">   response.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 数据接收完成</span></span><br><span class="line">      <span class="built_in">console</span>.log(body);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向服务端发送请求</span></span><br><span class="line"><span class="keyword">var</span> req = http.request(options, callback);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure><h1 id="Express-框架"><a href="#Express-框架" class="headerlink" title="Express 框架"></a>Express 框架</h1><p>Express 是一个基于 Node.js 的 web 应用框架。</p><p>Express 框架的核心特性如下：</p><ul><li>可以设置中间件来响应 HTTP 请求。</li><li>定义了路由表用于执行不同的 HTTP 请求动作。</li><li>可以通过向模板传递参数来动态渲染 HTML 页面。</li></ul><p>express 可以通过 require(‘express’) 引入，暴露的是一个方法。使用例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置响应</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.sendFile(__dirname + <span class="string">'/index.html'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置静态资源目录</span></span><br><span class="line">app.use(<span class="string">'/static'</span>, express.static(<span class="string">'static'</span>));</span><br><span class="line"><span class="comment">// 设置 404 处理</span></span><br><span class="line">app.use(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.status(<span class="number">404</span>);</span><br><span class="line">  res.send(<span class="string">'你访问的页面不存在'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8888</span>, () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> host = server.address().address;</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"启动于 http://%s:%s"</span>, host, port);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>从上述代码中，可以看到 app 有两个关键方法：get 和 listen</p><ol><li>get(url, func(request, response))，表示使用 http get 请求访问，第一个参数是访问的路径（可以是一个正则表达式，或是 Rest 风格的 url 字符串，详见下章），第二个参数是这个事件发生时的回调。其中回调含有 2 个参数：request 和 response，分别表示这个 http 请求的请求包体和响应包体。</li><li>listen(port, func)，返回一个 app 实例，监听来自端口 port 的所有请求，并在服务成功启动后调用指定的回调函数。</li></ol><p>在 request 对象和 response 对象上，各自还有自己的对象方法。</p><p><strong>Request 对象</strong> - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p><ol><li>req.app：当callback为外部文件时，用req.app访问express的实例</li><li>req.baseUrl：获取路由当前安装的URL路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和IP地址</li><li>req.originalUrl：获取原始请求URL</li><li>req.params：获取路由的parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取URL的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型</li><li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li><li>req.get()：获取指定的HTTP请求头</li><li>req.is()：判断请求头Content-Type的MIME类型</li></ol><p><strong>Response 对象</strong> - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p><ol><li>res.app：同req.app一样</li><li>res.append()：追加指定HTTP头</li><li>res.set()在res.append()后将重置之前设置的头</li><li>res.cookie(name，value [，option])：设置Cookie</li><li>opition: domain / expires / httpOnly / maxAge / path / secure / signed</li><li>res.clearCookie()：清除Cookie</li><li>res.download()：传送指定路径的文件</li><li>res.get()：返回指定的HTTP头</li><li>res.json()：传送JSON响应</li><li>res.jsonp()：传送JSONP响应</li><li>res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</li><li>res.redirect()：设置响应的Location HTTP头，并且设置状态码302</li><li>res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</li><li>res.send()：传送HTTP响应</li><li>res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</li><li>res.set()：设置HTTP头，传入object可以一次设置多个头</li><li>res.status()：设置HTTP状态码</li><li>res.type()：设置Content-Type的MIME类型</li></ol><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>可以使用形如 <code>app.use(&#39;/public&#39;, express.static(&#39;public&#39;));</code> 的代码来设置静态文件路径。</p><p>该代码使用了 use 方法，该方法需要两个参数。</p><ol><li>url，表示 http 请求需要访问的路径</li><li>express.static(localpath)，其中 localpath 表示存放静态文件的文件夹的本地路径</li></ol><p>比如此时我在 public 文件夹下存放了一张图片，名为 hello.png，则我访问 <a href="http://localhost:port/public/hello.png" target="_blank" rel="noopener">http://localhost:port/public/hello.png</a> 时，页面上就会返回这张图片。</p><h1 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h1><p>Restful API 是用 http 动词描述动作，用 URL 定位资源的 API 设计风格。在 Express 框架中，我们可以使用 Restful 默认的 4 个动词来定义 app 监听。</p><ol><li>app.get(url, func(request, response))</li><li>app.post(url, func(request, response))</li><li>app.put(url, func(request, response))</li><li>app.delete(url, func(request, response))</li></ol><p>其中，绑定 url 时，要绑定指定的 id，可以使用形如 <code>/user/:id</code> 的 url，来访问路径上的动态参数。该写法在前端类似于 vue 的 router 绑定，在后端类似于 spring 的 @PathVariable</p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>Node.js 既然可以写后端，自然也可以连接 MySQL。容易想到，我们可以通过 require(‘mysql’) 来引入 mysql模块，不过需要先 npm install mysql</p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql  = <span class="built_in">require</span>(<span class="string">'mysql'</span>);  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;     </span><br><span class="line">  host     : <span class="string">'localhost'</span>,       </span><br><span class="line">  user     : <span class="string">'root'</span>,              </span><br><span class="line">  password : <span class="string">'123456'</span>,       </span><br><span class="line">  port: <span class="string">'3306'</span>,                   </span><br><span class="line">  database: <span class="string">'test'</span> </span><br><span class="line">&#125;); </span><br><span class="line"> </span><br><span class="line">connection.connect();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span>  addSql = <span class="string">'INSERT INTO websites(Id,name,url,alexa,country) VALUES(0,?,?,?,?)'</span>;</span><br><span class="line"><span class="keyword">var</span>  addSqlParams = [<span class="string">'菜鸟工具'</span>, <span class="string">'https://c.runoob.com'</span>,<span class="string">'23453'</span>, <span class="string">'CN'</span>];</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">connection.query(addSql,addSqlParams,<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'[INSERT ERROR] - '</span>,err.message);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">        &#125;        </span><br><span class="line"> </span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'--------------------------INSERT----------------------------'</span>);</span><br><span class="line">       <span class="comment">//console.log('INSERT ID:',result.insertId);        </span></span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'INSERT ID:'</span>,result);        </span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'-----------------------------------------------------------------\n\n'</span>);  </span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><p>通过向 createConnection 传入一个对象作为参数，来配置连接的必要参数。</p><p>之后可以通过 query 方法，来提交 sql 请求。query 方法包含 3 个参数。</p><p><code>query(sqlString, sqlParams, func(err, result))</code></p><p>在 sqlString 中，可以留若干个？作为占位符，？会按顺序匹配 sqlParams 中的参数。</p><p>sql 请求成功返回后，使用 func 作为回调函数。该回调函数含有 2 个参数，第一个是报错信息，第二个是 sql 执行结果。若没有出错，则 err 为空。</p><p>sql 请求的返回值与 spring mapper 类似，select、insert 返回具体数据，update、delete 返回的 result 对象中只包含一个 affectedRows 字段，表示影响的行数。</p><h1 id="Buffer-Stream"><a href="#Buffer-Stream" class="headerlink" title="Buffer/Stream"></a>Buffer/Stream</h1><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。</p><p>但在处理像 TCP 流或文件流时，必须使用到二进制数据。因此在 Node.js 中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。</p><p>Buffer 在使用时需要指定字符编码。支持的编码如下：</p><ol><li><strong>ascii</strong> - 仅支持 7 位 ASCII 数据。如果设置去掉高位的话，这种编码是非常快的。</li><li><strong>utf8</strong> - 多字节编码的 Unicode 字符。许多网页和其他文档格式都使用 UTF-8 。</li><li><strong>utf16le</strong> - 2 或 4 个字节，小字节序编码的 Unicode 字符。支持代理对（U+10000 至 U+10FFFF）。</li><li><strong>ucs2</strong> - <strong>utf16le</strong> 的别名。</li><li><strong>base64</strong> - Base64 编码。</li><li><strong>latin1</strong> - 一种把 <strong>Buffer</strong> 编码成一字节编码的字符串的方式。</li><li><strong>binary</strong> - <strong>latin1</strong> 的别名。</li><li><strong>hex</strong> - 将每个字节编码为两个十六进制字符。</li></ol><p>Buffer 具有类似数组的特性。重要的 API 如下。</p><h3 id="创建-Buffer"><a href="#创建-Buffer" class="headerlink" title="创建 Buffer"></a>创建 Buffer</h3><ol><li><p>Buffer.alloc(size[, fill[, encoding]])</p><p>返回一个指定大小的 Buffer 实例，如果没有设置 fill，则默认填满 0</p></li><li><p>Buffer.allocUnsafe(size)</p><p>返回一个指定大小的 Buffer 实例，但是它不会被初始化，所以它可能包含敏感的数据</p></li><li><p>Buffer.allocUnsafeSlow(size)</p></li><li><p>Buffer.from(array)</p><p>返回一个被 array 的值初始化的新的 Buffer 实例（传入的 array 的元素只能是数字，不然就会自动被 0 覆盖）</p></li><li><p>Buffer.from(arrayBuffer[, byteOffset[, length]])</p><p>返回一个新建的与给定的 ArrayBuffer 共享同一内存的 Buffer。</p></li><li><p>Buffer.from(buffer)</p><p>复制传入的 Buffer 实例的数据，并返回一个新的 Buffer 实例</p></li><li><p>Buffer.from(string[, encoding])</p><p>返回一个被 string 的值初始化的新的 Buffer 实例</p></li></ol><h3 id="写入-Buffer"><a href="#写入-Buffer" class="headerlink" title="写入 Buffer"></a>写入 Buffer</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.write(string[, offset[, length]][, encoding])</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>参数描述如下：</p><ul><li><strong>string</strong> - 写入缓冲区的字符串。</li><li><strong>offset</strong> - 缓冲区开始写入的索引值，默认为 0 。</li><li><strong>length</strong> - 写入的字节数，默认为 buffer.length</li><li><strong>encoding</strong> - 使用的编码。默认为 ‘utf8’ 。</li></ul><p>根据 encoding 的字符编码写入 string 到 buf 中的 offset 位置。 length 参数是写入的字节数。 如果 buf 没有足够的空间保存整个字符串，则只会写入 string 的一部分。 只部分解码的字符不会被写入。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">buf = Buffer.alloc(<span class="number">256</span>);</span><br><span class="line">len = buf.write(<span class="string">"www.runoob.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"写入字节数 : "</span>+  len);</span><br></pre></td></tr></table></figure><p>执行以上代码，输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$node main.js</span><br><span class="line">写入字节数 : 14</span><br></pre></td></tr></table></figure><p>其余与数组方法基本相同，详见 <a href="https://www.runoob.com/nodejs/nodejs-buffer.html" target="_blank" rel="noopener">Node.js Buffer(缓冲区) | 菜鸟教程</a></p><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><p>Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个 Stream，还有stdout（标准输出）。</p><p>Node.js，Stream 有四种流类型：</p><ul><li><strong>Readable</strong> - 可读操作。</li><li><strong>Writable</strong> - 可写操作。</li><li><strong>Duplex</strong> - 可读可写操作.</li><li><strong>Transform</strong> - 操作被写入数据，然后读出结果。</li></ul><p>所有的 Stream 对象都是 EventEmitter 的实例。常用的事件有：</p><ul><li><strong>data</strong> - 当有数据可读时触发。</li><li><strong>end</strong> - 没有更多的数据可读时触发。</li><li><strong>error</strong> - 在接收和写入过程中发生错误时触发。</li><li><strong>finish</strong> - 所有数据已被写入到底层系统时触发。</li></ul><p>主要有三种流：</p><ul><li><strong>写入流</strong></li><li><strong>管道流</strong></li><li><strong>链式流</strong></li></ul><p>详见 <a href="https://www.runoob.com/nodejs/nodejs-stream.html" target="_blank" rel="noopener">Node.js Stream(流) | 菜鸟教程</a></p><h1 id="11-14-章-待写"><a href="#11-14-章-待写" class="headerlink" title="11-14 章 待写"></a>11-14 章 待写</h1><p>待续……</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-tutorial.html</a></p><p><a href="https://blog.csdn.net/qq_39953537/article/details/102685328" target="_blank" rel="noopener">https://blog.csdn.net/qq_39953537/article/details/102685328</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;留给自己参考的Node.js学习提纲&lt;/p&gt;
    
    </summary>
    
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu下使用Docker部署的办法</title>
    <link href="http://yoursite.com/docker/docker/"/>
    <id>http://yoursite.com/docker/docker/</id>
    <published>2020-06-06T13:21:00.000Z</published>
    <updated>2020-06-06T14:05:03.559Z</updated>
    
    <content type="html"><![CDATA[<p>这年头不是全栈工程师，连中间件实验都做不了了<br><a id="more"></a></p><h1 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h1><table><thead><tr><th>docker 名词</th><th>java 名词</th></tr></thead><tbody><tr><td>镜像</td><td>类</td></tr><tr><td>容器</td><td>对象</td></tr><tr><td>由镜像构建容器</td><td>new 一个某类的实例</td></tr><tr><td>docker build</td><td>设计一个class</td></tr><tr><td>docker run</td><td>new</td></tr><tr><td>列出镜像列表</td><td>查看所有类</td></tr><tr><td>列出所有容器</td><td>查看所有已经实例化的对象</td></tr><tr><td>停止容器</td><td>使得这个对象停止功能</td></tr><tr><td>删除容器</td><td>使得这个对象被释放（delete）</td></tr></tbody></table><h1 id="ubuntu-安装-docker"><a href="#ubuntu-安装-docker" class="headerlink" title="ubuntu 安装 docker"></a>ubuntu 安装 docker</h1><p>参考链接：<a href="https://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">https://www.runoob.com/docker/ubuntu-docker-install.html</a></p><h2 id="预备"><a href="#预备" class="headerlink" title="预备"></a>预备</h2><p>先通过<code>docker version</code>查看本机上是否已经安装 docker，若是，则执行下述命令，卸载旧版本 docker</p><p><code>sudo apt-get remove docker docker-engine docker.io containerd runc</code></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="首次安装时，需要设置仓库"><a href="#首次安装时，需要设置仓库" class="headerlink" title="首次安装时，需要设置仓库"></a>首次安装时，需要设置仓库</h3><table><thead><tr><th>指令</th><th>用途</th></tr></thead><tbody><tr><td>sudo apt-get update</td><td>更新 apt 包索引</td></tr><tr><td>sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</td><td>安装 apt 依赖包，用于通过 HTTPS 来获取仓库</td></tr><tr><td>curl -fsSL <a href="https://download.docker.com/linux/ubuntu/gpg" target="_blank" rel="noopener">https://download.docker.com/linux/ubuntu/gpg</a> &#124; sudo apt-key add -</td><td>添加 Docker 的官方 GPG 密钥</td></tr><tr><td>sudo add-apt-repository “deb [arch=amd64] <a href="https://download.docker.com/linux/ubuntu" target="_blank" rel="noopener">https://download.docker.com/linux/ubuntu</a> $(lsb_release -cs) stable”</td><td>设置稳定版仓库</td></tr></tbody></table><h3 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h3><table><thead><tr><th>指令</th><th>用途</th></tr></thead><tbody><tr><td>sudo apt-get update</td><td>更新 apt 包索引</td></tr><tr><td>sudo apt-get install docker-ce docker-ce-cli containerd.io</td><td>安装最新版本的 Docker Engine-Community 和 containerd</td></tr><tr><td>docker version</td><td>检查 docker 版本，验证是否安装成功</td></tr></tbody></table><h1 id="ubuntu-使用-docker-部署jar"><a href="#ubuntu-使用-docker-部署jar" class="headerlink" title="ubuntu 使用 docker 部署jar"></a>ubuntu 使用 docker 部署jar</h1><p>参考链接：<a href="https://blog.csdn.net/weixin_42054155/article/details/90815393" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42054155/article/details/90815393</a></p><h2 id="构建-docker-镜像"><a href="#构建-docker-镜像" class="headerlink" title="构建 docker 镜像"></a>构建 docker 镜像</h2><ol><li><p>构造文件<code>Dockerfile</code>，这是一个无后缀文件</p><p>该文件内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line">MAINTAINER Ringoer</span><br><span class="line">ADD demo-0.0.1-SNAPSHOT.jar demo.jar</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;demo.jar&quot;]</span><br></pre></td></tr></table></figure><p>FROM 表示拉取一个 java 版本为 1.8 的 docker image（docker镜像）</p><p>MAINTAINER 表示作者声明，后接作者名字</p><p>ADD 向镜像中加入文件，第一个参数是要加入的文件名，第二个参数是文件的重命名，表示它在 docker 镜像中的名字</p><p>EXPOSE 表示该镜像对外暴露的端口号（与 java 项目的端口号要相同）</p><p>ENTRYPOINT 表示运行该镜像时执行的命令行参数，示例中给出的配置等效于执行命令<code>java -jar demo.jar</code></p></li><li><p>向服务器上传 jar 包和 Dockerfile 文件，这两个文件要在同一个目录下</p></li><li><p>连接服务器终端，cd 进入该目录</p></li><li><p>执行命令 <code>docker build -t demo .</code> 构建镜像，其中 demo 是镜像名称。记得别漏了最后的一个点</p></li></ol><h2 id="操作镜像"><a href="#操作镜像" class="headerlink" title="操作镜像"></a>操作镜像</h2><ol><li><p>运行容器</p><p><code>docker run -d --name demo1 -p 8080:8080 demo</code></p><p>docker run 部分是不可变的</p><p>-d 指示了 docker 容器后台运行</p><p>–name 部分指示了新运行的容器实例的名称</p><p>-p 部分指示了两个端口号，用冒号隔开。其中前一个端口号表示暴露在公网的 ip，后一个表示容器暴露的 ip</p><p>最后一个参数是镜像名称，此处表示使用名为 demo 的镜像构建容器，容器名为 demo1</p></li><li><p>其余命令</p></li></ol><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>docker pull [name]</td><td>根据名称获取镜像</td></tr><tr><td>docker images</td><td>查看所有镜像</td></tr><tr><td>docker rmi [name]</td><td>根据名称删除某个镜像</td></tr><tr><td>docker rmi $(docker images -q)</td><td>删除所有镜像</td></tr><tr><td>docker ps -a</td><td>查看所有容器</td></tr><tr><td>docker ps -aq</td><td>列出所有容器ID</td></tr><tr><td>docker stop [name]</td><td>根据名称停止某个容器</td></tr><tr><td>docker stop $(docker ps -aq)</td><td>停止所有容器</td></tr><tr><td>docker rm [name]</td><td>根据名称删除某个容器</td></tr><tr><td>docker rm $(docker ps -aq)</td><td>删除所有容器</td></tr></tbody></table><h1 id="docker-借助-nginx-部署-vue"><a href="#docker-借助-nginx-部署-vue" class="headerlink" title="docker 借助 nginx 部署 vue"></a>docker 借助 nginx 部署 vue</h1><p>参考链接：</p><p><a href="http://dockone.io/article/8834" target="_blank" rel="noopener">http://dockone.io/article/8834</a></p><p><a href="https://www.cnblogs.com/littleorange7/p/12838101.html" target="_blank" rel="noopener">https://www.cnblogs.com/littleorange7/p/12838101.html</a></p><ol><li><p>在服务器上使用命令 <code>docker pull nginx</code> 下载 nginx</p></li><li><p>在服务器上为 vue 项目新建一个文件夹（假设命名为 vue）</p></li><li><p>在本地使用命令 <code>npm run build</code> 打包 vue 项目，打包完成后会在项目目录下产生一个 dist 文件夹。将该文件夹上传到服务器</p></li><li><p>在本地编写 Dockerfile 文件</p><p>文件内容如下，照抄即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">COPY dist/ /usr/share/nginx/html/</span><br><span class="line">COPY nginx/default.conf /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><p>编写完毕后上传到服务器的 vue 文件夹</p></li><li><p>新建一个名为 nginx 的文件夹，在这个文件夹里新建一个名为 default.conf 的文件</p><p>文件内容如下</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       2222;</span><br><span class="line">    server_name  ali.ringoer.com;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line">    error_log  /var/log/nginx/error.log  error;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        #index  index.html index.htm;</span><br><span class="line">        try_files   $uri  $uri/  /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /api/ &#123;</span><br><span class="line">        proxy_pass   http://ali.ringoer.com:9527/;</span><br><span class="line">        proxy_redirect  off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的字段如下</p><table><thead><tr><th>字段名</th><th>用途</th></tr></thead><tbody><tr><td>listen</td><td>配置 nginx 的监听端口，要求与 vue 配置的端口号一致</td></tr><tr><td>server_name</td><td>前端访问的主机名，要求填写公网地址（域名或 ip）</td></tr><tr><td>index</td><td>指示项目主页。此处注释掉是作为对比，原因见下一条</td></tr><tr><td>try_files</td><td>使用 index 进行配置时，会导致在非项目主入口刷新时，报 404 错误。所以使用 try_files 进行配置，使得刷新可以触发设定好的拦截，跳转至登录界面。照抄即可，注意是 uri，不是 url</td></tr><tr><td>location /api/ {}</td><td>配置跨域请求，这里的 /api/ 与 vue 项目内部配置的 proxyTable 里所填前缀一致</td></tr><tr><td>proxy_pass</td><td>转发地址，与 vue 项目内部配置的 proxyTable 下的 target 所填内容一致。必须完整填写（包含 http 和斜杠），不然会报错</td></tr><tr><td>proxy_redirect</td><td>是否重定向，off 就行了</td></tr><tr><td>别的东西</td><td>都可以照抄</td></tr></tbody></table><p>   将 nginx 文件夹上传到服务器 vue 文件夹</p><ol start="6"><li>现在服务器 vue 文件夹中有2个文件夹和1个文件</li></ol><table><thead><tr><th>文件名</th><th>描述</th></tr></thead><tbody><tr><td>dist</td><td>vue 项目静态资源文件夹</td></tr><tr><td>nginx</td><td>nginx 配置文件夹</td></tr><tr><td>Dockerfile</td><td>docker 配置文件（不是文件夹）</td></tr></tbody></table><p>   其中 nginx 文件夹中还包含 default.conf 文件</p><p>   接下来过程与部署 jar 包一致</p><ol start="7"><li><p>部署命令顺序</p><p>通过 cd 命令进入服务器上 vue 文件夹后，按顺序执行下述命令</p><ol><li><p><code>docker build -t [name] .</code>，其中 [name] 是你所希望的镜像名称</p><p>末尾的一个点别漏了</p></li><li><p><code>docker run -d --name [name1] -p [port1]:[port2] [name2]</code>，其中</p></li></ol></li></ol><table><thead><tr><th>字段名</th><th>描述</th></tr></thead><tbody><tr><td>[name1]</td><td>你所希望的容器名称</td></tr><tr><td>[port1]</td><td>容器暴露在公网的端口号</td></tr><tr><td>[port2]</td><td>nginx 监听的端口号，也是 vue 项目配置的端口号</td></tr><tr><td>[name2]</td><td>1中命令设置的镜像名称</td></tr></tbody></table><p>现在，通过浏览器访问 [server_name]:[port1] 即可看到你的 vue 项目</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这年头不是全栈工程师，连中间件实验都做不了了&lt;br&gt;
    
    </summary>
    
    
      <category term="docker" scheme="http://yoursite.com/categories/docker/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
      <category term="linux" scheme="http://yoursite.com/tags/linux/"/>
    
      <category term="docker" scheme="http://yoursite.com/tags/docker/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu服务器上的部署办法</title>
    <link href="http://yoursite.com/J2EE/deploy-on-ubuntu/"/>
    <id>http://yoursite.com/J2EE/deploy-on-ubuntu/</id>
    <published>2020-06-03T15:23:00.000Z</published>
    <updated>2020-06-03T15:44:05.571Z</updated>
    
    <content type="html"><![CDATA[<p>今天紧急学习了一下部署jar包的方法，特此存档<br><a id="more"></a></p><p>部署的流程主要分为2步。  </p><ol><li>向服务器上传jar包</li><li>使用服务器终端启动jar包</li></ol><p>以下基于Windows10环境  </p><h1 id="向服务器上传jar包"><a href="#向服务器上传jar包" class="headerlink" title="向服务器上传jar包"></a>向服务器上传jar包</h1><ol><li>下载安装WinSCP<br> <a href="http://download.ringoer.com/WinSCP-5.17.6-Setup.exe" target="_blank" rel="noopener">点我下载</a></li><li>打开WinSCP，连接到服务器<br> 连接设置如下图，默认SFTP协议和22端口即可<br> 主机名填写服务器的ip地址<br> <img src="http://pic.ringoer.com/ubuntu部署.png" alt="ubuntu部署"></li><li>登录之后，如同在本机上一般，直接拖动本机jar包到服务器目录即可<br> 注意，最好给每个jar包单独一个存放目录</li></ol><h1 id="使用服务器终端启动jar包"><a href="#使用服务器终端启动jar包" class="headerlink" title="使用服务器终端启动jar包"></a>使用服务器终端启动jar包</h1><ol><li>随意找个位置，通过右键菜单启动Git Bash Here</li><li>输入命令<code>ssh root@ip</code><br> 其中ssh是命令名，root是服务器用户名，ip是服务器地址<br> 如ip为127.0.0.1，用户名为root，则连接命令为<code>ssh root@127.0.0.1</code></li><li>输入用户名对应的密码，成功进入服务器终端</li><li>首先使用ls查看当前所在目录下的所有文件名，找到自己存放jar包的目录的父目录<br> 然后不断cd进入下级目录，直到进入自己存放jar包的目录</li><li>输入命令<code>nohup java -jar filename.jar &amp;</code>即可启动jar包<br> 其中filename更改为你的jar包名称</li></ol><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ol><li>服务器所使用的java版本（一般是1.8）要与打包jar包时使用的版本一致</li><li>应时刻注意服务器资源使用情况，避免服务器宕机<br> 使用<code>free</code>命令可以查看内存使用情况<br> 使用<code>df -hl</code>命令可以查看磁盘使用情况</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天紧急学习了一下部署jar包的方法，特此存档&lt;br&gt;
    
    </summary>
    
    
      <category term="J2EE" scheme="http://yoursite.com/categories/J2EE/"/>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
      <category term="ubuntu" scheme="http://yoursite.com/tags/ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>Django建站初探</title>
    <link href="http://yoursite.com/python/django/"/>
    <id>http://yoursite.com/python/django/</id>
    <published>2020-04-04T13:43:00.000Z</published>
    <updated>2020-04-05T02:45:05.468Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 python 做爬虫或机器学习的时候，有时候需要浏览所得到的阶段性成果，这时候就需要一个前端。</p><a id="more"></a><p>本文所使用的示例代码：<a href="http://download.ringoer.com/django-sample.rar" target="_blank" rel="noopener">点我下载</a></p><p>环境：</p><ul><li>Windows10</li><li>VSCODE</li><li>python 3.7</li></ul><p>-为什么选择 django ？</p><p>-没有为什么，我高兴</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装-django"><a href="#安装-django" class="headerlink" title="安装 django"></a>安装 django</h2><p>在命令行中使用以下语句安装 django</p><p><code>pip install django</code></p><p>或使用国内镜像</p><p><code>pip install -i https://pypi.douban.com/simple django</code></p><p>安装后可以在命令行中启动 python 以查看 django 是否安装成功</p><p><img src="http://pic.ringoer.com/django-1-查看django版本号.png" alt="1-查看django版本号"></p><h2 id="创建一个-django-新项目"><a href="#创建一个-django-新项目" class="headerlink" title="创建一个 django 新项目"></a>创建一个 django 新项目</h2><ol><li><p>启动命令行，进入你想放置该项目的目录</p></li><li><p>使用以下语句创建工程</p><p><code>django-admin startproject [projectname]</code></p><p>其中 <code>[projectname]</code> 可以按需要修改为自己的项目名</p><p><img src="http://pic.ringoer.com/django-2-创建新项目.png" alt="2-创建新项目"></p></li><li><p>创建完成后，在命令行中进入该项目，输入以下语句启动测试页面</p><p><code>python manage.py runserver</code></p><p>如果启动成功，则可以访问以下网址查看测试页面</p><p><a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a></p><p>测试页面如图</p><p><img src="http://pic.ringoer.com/django-3-测试页面.png" alt="3-测试页面"></p></li><li><p>django 目录结构</p><p><img src="http://pic.ringoer.com/django-4-django目录结构.png" alt="4-django目录结构"></p><p>如上图，一个默认的 django 项目包含如下文件树：</p><p>——sample</p><p>————sample（项目控制组件，用于控制项目的公有配置）</p><p>——————<strong>pycache</strong>（提供默认配置文件，不需要更改）</p><p>————————<strong>init</strong>.cpython-37.pyc</p><p>————————settings.cpython-37.pyc</p><p>————————urls.cpython-37.pyc</p><p>————————wsgi.cpython-37.pyc</p><p>——————<strong>init</strong>.py（提供默认配置文件，不需要更改）</p><p>——————asgi.py（提供默认配置文件，不需要更改）</p><p>——————settings.py（项目主配置文件）</p><p>——————urls.py（项目访问路径配置文件）</p><p>——————wsgi.py（提供默认配置文件，不需要更改）</p><p>————db.sqlite3（项目自带简易数据库，不需要更改，在第一次启动项目后才会生成）</p><p>————manage.py（项目主启动类，不需要更改）</p></li></ol><p>   可见，我们只有3种办法修改我们的项目：</p><ol><li>修改settings.py</li><li>修改urls.py</li><li><p>添加新的目录</p><p>让我们先来认识一下项目控制组件下的2个配置文件</p></li></ol><h3 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h3><p>项目主配置文件，提供一些基本配置。</p><p>常用配置如下：</p><ol><li><p>BASE_DIR</p><p>指示项目的绝对位置</p><p>是项目所在的位置，不是项目控制组件所在的位置</p><p>会自动识别，不需修改</p></li><li><p>INSTALLED_APPS</p><p>创建了新的组件后，要在此处注册</p></li><li><p>ROOT_URLCONF</p><p>指示项目访问路径配置文件的位置</p><p>一般不需修改</p></li><li><p>TEMPLATES -&gt; DIRS</p><p>指示项目中引用的所有模板文件的绝对位置</p><p><span style="color:red">请在项目中适用如下配置</span></p><p>通常为了方便使用，都会在项目目录下新建文件夹 template，并对 TEMPLATES  属性作如下修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)], <span class="comment"># 唯一修改的语句</span></span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="keyword">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>STATIC_URL</p><p>指示项目中引用的所有静态文件的相对路径名</p><p>该属性可以含有如下子属性</p><ol><li><p>STATIC_ROOT</p><p>指示项目中引用的所有静态文件的绝对位置</p></li><li><p>STATICFILES_DIRS</p><p>指示静态文件目录下的其它目录的绝对位置</p></li></ol><p><span style="color:red">请在项目中适用如下配置</span></p><p>通常为了方便使用，都会在项目目录下新建文件夹 static，且 static 文件夹包含3个子文件夹，分别为 css、images、js</p><p>并对 STATIC_URL 属性作如下修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'static'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)</span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    (<span class="string">'css'</span>, os.path.join(STATIC_ROOT, <span class="string">'css'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)),</span><br><span class="line">    (<span class="string">'images'</span>, os.path.join(STATIC_ROOT, <span class="string">'images'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)),</span><br><span class="line">    (<span class="string">'js'</span>, os.path.join(STATIC_ROOT, <span class="string">'js'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><p>项目访问路径配置文件，用于控制访问路径。</p><p>一般只需修改 urlpatterns 属性。默认含有一条语句</p><p><code>path(&#39;admin/&#39;, admin.site.urls),</code></p><p>例如当添加一个名为 mytest 的新组件，且希望路径 /test 指向它时，可以向 urlpatterns 属性下添加如下语句</p><p><code>url(&#39;test/&#39;, include(&#39;mytest.urls&#39;)),</code></p><h1 id="创建子组件"><a href="#创建子组件" class="headerlink" title="创建子组件"></a>创建子组件</h1><p>在命令行中进入项目目录，执行以下语句</p><p><code>python manage.py startapp [appname]</code></p><p>其中 appname 即为你想新建的组件名</p><p>组件名不可以重名</p><p><img src="http://pic.ringoer.com/django-5-创建hello子组件.png" alt="5-创建hello子组件"></p><p>子组件 hello 的目录结构如下</p><p><img src="http://pic.ringoer.com/django-6-hello子组件的目录结构.png" alt="6-hello子组件的目录结构"></p><p>其中两个 <strong>init</strong>.py 文件是默认的配置文件，无需修改</p><h2 id="apps-py"><a href="#apps-py" class="headerlink" title="apps.py"></a>apps.py</h2><p>指示本组件的名称，保持默认即可</p><h2 id="tests-py"><a href="#tests-py" class="headerlink" title="tests.py"></a>tests.py</h2><p>为本组件创建测试</p><p>本教程不对此深入讨论</p><h2 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h2><p>在本文件中，程序员应该描述本组件包含的实体类的声明</p><p>横向对比来说，类似于 java 开发中的 domain 层</p><p>此处我们创建一个保存我们自己数据的 myData 类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myData</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  username = models.TextField()</span><br><span class="line">  description = models.TextField()</span><br><span class="line">  age = models.IntegerField()</span><br></pre></td></tr></table></figure><h2 id="admin-py"><a href="#admin-py" class="headerlink" title="admin.py"></a>admin.py</h2><p>默认情况下包含如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br></pre></td></tr></table></figure><p>需要根据子组件的 models 来添加代码</p><p>比如，我们在上文中，在 hello 子组件中创建了 myData 类，那就需要修改本文件代码为如下模样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> hello.models <span class="keyword">import</span> myData</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line">admin.site.register(myData)</span><br></pre></td></tr></table></figure><h2 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h2><p>用于组织本组件视图的文件，程序员应在其中写入对模板渲染时所需数据的预处理操作</p><p>本例中，我们将定义一个名为 helloworld 的方法来进行预处理</p><h2 id="应添加在子组件中的非默认文件"><a href="#应添加在子组件中的非默认文件" class="headerlink" title="应添加在子组件中的非默认文件"></a>应添加在子组件中的非默认文件</h2><h3 id="data-csv"><a href="#data-csv" class="headerlink" title="data.csv"></a>data.csv</h3><p>用于保存本组件所需数据的原始数据表。可以没有本项目</p><h3 id="dataimport-py"><a href="#dataimport-py" class="headerlink" title="dataimport.py"></a>dataimport.py</h3><p>用于指示如何向项目主目录下的 db.sqlite3 数据库中注入 data.csv</p><p>当不存在 data.csv 时，也不需有本文件</p><p>现在，为了方便示例，让我们创建 data.csv，并向其中插入如下数据</p><table><thead><tr><th>username</th><th>description</th><th>age</th></tr></thead><tbody><tr><td>ringoer</td><td>从忘恩之地吹来的风</td><td>21</td></tr><tr><td>myname</td><td>测试用说说</td><td>100</td></tr></tbody></table><p>并创建 dataimport.py，输入如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在自己脚本中使用django model</span></span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"></span><br><span class="line">sys.path.append(os.path.abspath(os.path.dirname(os.path.dirname(__file__))))</span><br><span class="line">os.environ[<span class="string">'DJANGO_SETTINGS_MODULE'</span>] = <span class="string">'sample.settings'</span>  <span class="comment"># 配置系统变量</span></span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line">django.setup()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hello.models <span class="keyword">import</span> myData <span class="comment"># 引入数据类型，与本组件的models中声明的类型相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从csv读取数据并存入models创建的表里</span></span><br><span class="line"><span class="comment"># 此处路径是相对于项目主目录的</span></span><br><span class="line">data_path = <span class="string">'hello/data.csv'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(data_path, encoding = <span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">   reader = csv.reader(f)</span><br><span class="line">   <span class="keyword">for</span> i, row <span class="keyword">in</span> enumerate(reader):</span><br><span class="line">      mydata = myData()</span><br><span class="line">      <span class="keyword">if</span> i&gt;<span class="number">0</span>:</span><br><span class="line">        mydata.username = row[<span class="number">0</span>]</span><br><span class="line">        mydata.description = row[<span class="number">1</span>]</span><br><span class="line">        mydata.age = int(row[<span class="number">2</span>])</span><br><span class="line">        mydata.save()</span><br></pre></td></tr></table></figure><p>为了正常指向该组件，需要配置</p><ol><li>该组件的 urls.py </li><li>项目控制组件中的 urls.py</li><li>项目控制组件中的 settings.py</li></ol><h3 id="hello-urls-py"><a href="#hello-urls-py" class="headerlink" title="hello/urls.py"></a>hello/urls.py</h3><p>用于指示本组件中的路由</p><p>但默认的代码使用的是 path 方法来指示路由，并不能正常工作，故本例中使用 url 方法来指示路由</p><p>本例中可以在该文件中写入如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.contrib.staticfiles.urls <span class="keyword">import</span> staticfiles_urlpatterns</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^hello/'</span>, include(<span class="string">'hello.urls'</span>)),</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br><span class="line">urlpatterns += staticfiles_urlpatterns()</span><br></pre></td></tr></table></figure><h3 id="sample-urls-py"><a href="#sample-urls-py" class="headerlink" title="sample/urls.py"></a>sample/urls.py</h3><p>如果我们希望通过 hello 路径来访问 hello 组件，可以向该文件中插入如下语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hello</span><br><span class="line">path(<span class="string">'hello/'</span>, hello.urls),</span><br></pre></td></tr></table></figure><p>则该文件变为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hello</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'hello/'</span>, hello.urls),</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后在项目控制组件的 settings.py 的 INSTALLED_APPS 属性中注册该组件，就可以正常路由了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'hello'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="创建页面文件并渲染"><a href="#创建页面文件并渲染" class="headerlink" title="创建页面文件并渲染"></a>创建页面文件并渲染</h1><p>只有路由没有页面，一样什么都显示不了，所以我们需要对组件内的 views.py 进行修改，使得其能渲染页面，并另外提供一个用于渲染的 html 模板</p><h2 id="views-py-1"><a href="#views-py-1" class="headerlink" title="views.py"></a>views.py</h2><p>默认情况下有如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br></pre></td></tr></table></figure><p>本文中提供如下代码作为例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> hello.models <span class="keyword">import</span> myData</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">helloworld</span><span class="params">(request)</span>:</span></span><br><span class="line">  myData_list = myData.objects.all()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 分页算法</span></span><br><span class="line">  perpage = <span class="number">10</span></span><br><span class="line">  maxPage = int((len(myData_list) - <span class="number">1</span>) / perpage + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  page = request.GET.get(<span class="string">'page'</span>)</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    page = int(page)</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    page = <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> page &gt; maxPage:</span><br><span class="line">    page = maxPage</span><br><span class="line">  <span class="keyword">elif</span> page &lt;= <span class="number">0</span>:</span><br><span class="line">    page = <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  minIndex = (page - <span class="number">1</span>) * perpage</span><br><span class="line">  maxIndex = page * perpage</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> maxIndex &gt; len(myData_list):</span><br><span class="line">    maxIndex = len(myData_list)</span><br><span class="line"></span><br><span class="line">  myData_list = myData_list[minIndex : maxIndex]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 提供给前端的内容</span></span><br><span class="line">  context = &#123;</span><br><span class="line">    <span class="string">'myData_list'</span>: myData_list, <span class="comment"># 渲染表格用的列表</span></span><br><span class="line">    <span class="string">'page'</span>: page, <span class="comment"># 页号</span></span><br><span class="line">    <span class="string">'message'</span>: <span class="string">'helloworld!'</span>, <span class="comment"># 传给前端的消息</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> render(request, <span class="string">'hello.html'</span>, context) <span class="comment"># 第二参数是目标html文件名称，该html须在templates文件夹下</span></span><br></pre></td></tr></table></figure><h2 id="hello-html"><a href="#hello-html" class="headerlink" title="hello.html"></a>hello.html</h2><p>需要注意的模板语法有两条</p><ol><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; 变量名 &#125;&#125;</span><br></pre></td></tr></table></figure><p>可以实现对变量取值</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for %&#125;</span><br><span class="line"></span><br><span class="line">（此处填写html语句）</span><br><span class="line"></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>可以实现循环渲染</p></li></ol><p>本例中的 html 代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">language</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;&amp;emsp;第&#123;&#123; page &#125;&#125;页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>username<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>description<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>age<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% for i in myData_list %&#125; </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; i.username &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; i.description &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; i.age &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="迁移数据"><a href="#迁移数据" class="headerlink" title="迁移数据"></a>迁移数据</h1><p>到这里，试图 runserver 的时候，却发现应用跑不起来了。这是为什么呢？</p><p>因为之前给 hello 组件准备的数据还没导入！</p><p>让我们导入数据吧</p><ol><li><p>执行语句 <code>python manage.py makemigrations</code> 创建迁移文件</p><p><img src="http://pic.ringoer.com/django-7-创建迁移文件.png" alt="7-创建迁移文件"></p></li><li><p>执行语句 <code>python manage.py migrate</code> 完成迁移文件的导入</p><p><img src="http://pic.ringoer.com/django-8-完成迁移文件的导入.png" alt="8-完成迁移文件的导入"></p></li><li><p>执行语句 <code>python hello/dataimport.py</code> 完成数据导入</p><p><img src="http://pic.ringoer.com/django-9-完成数据导入.png" alt="9-完成数据导入"></p><p>需要注意的是，当数据量很大时，由于 python 语言性质，会导致导入速度非常慢，请耐心等待</p></li></ol><h1 id="验收成果"><a href="#验收成果" class="headerlink" title="验收成果"></a>验收成果</h1><p>经过这么长的教程，终于可以验收成果了！</p><p><img src="http://pic.ringoer.com/django-10-验收成果.png" alt="10-验收成果"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>django 建站的步骤大致如下：</p><ol><li>初始化项目，配置静态资源</li><li>构建若干子组件</li><li>为子组件构建实体类、数据、页面与页面渲染、路由</li><li>在配置文件中注册组件</li><li>迁移数据，导入数据</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 python 做爬虫或机器学习的时候，有时候需要浏览所得到的阶段性成果，这时候就需要一个前端。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="django" scheme="http://yoursite.com/tags/django/"/>
    
  </entry>
  
  <entry>
    <title>mapper层配置</title>
    <link href="http://yoursite.com/J2EE/mapper/"/>
    <id>http://yoursite.com/J2EE/mapper/</id>
    <published>2020-01-02T12:12:00.000Z</published>
    <updated>2020-01-02T13:17:26.159Z</updated>
    
    <content type="html"><![CDATA[<p>和数据库直接联系的，重要的mapper层的配置。<br><a id="more"></a></p><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- druid 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 正常一定会有的 maven plugin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>mybatis-generator/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="application-yaml"><a href="#application-yaml" class="headerlink" title="application.yaml"></a>application.yaml</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">USER-SERVICE</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line">    <span class="comment"># 为了便于管理，将具体的 datasource 配置放在另一个文件中</span></span><br><span class="line">    <span class="comment"># 下方 active 属性名，设为dev，则spring会自动寻找和 application.yaml同一目录下的 application-dev.yaml</span></span><br><span class="line">    <span class="comment"># 也就是说，设为x，则会自动寻找application-x.yaml</span></span><br><span class="line">    <span class="comment"># 效果等同于将目标文件内的 datasource 配置直接写在当前文件中</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># domain对象的包</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">xmu.oomall.user.domain</span></span><br><span class="line">  <span class="comment"># mapper.xml所在的位置</span></span><br><span class="line">  <span class="comment"># 本项目的mapper放在 /resource/xmu.oomall.mapper 目录下</span></span><br><span class="line">  <span class="comment"># 如果配置时索引不到mapper，可能是前置名称有问题</span></span><br><span class="line">  <span class="comment"># 如该项目，mapper.xml所在的文件夹可以试试 /xmu.oomall.mapper 或者 /xmu/oomall/mapper</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:xmu.oomall.mapper/*.xml</span></span><br><span class="line"><span class="attr">  configuration:</span></span><br><span class="line">    <span class="comment"># 自动将SQL中查出来的带下划线的字段，转换为驼峰标志，再去匹配类中的属性</span></span><br><span class="line"><span class="attr">    mapUnderscoreToCamelCase:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="application-dev-yaml"><a href="#application-dev-yaml" class="headerlink" title="application-dev.yaml"></a>application-dev.yaml</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 目标数据库地址</span></span><br><span class="line">    <span class="comment"># jdbc开头，接数据库类型，接ip地址，接数据库名</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://106.14.83.157:3306/oomall</span></span><br><span class="line">    <span class="comment"># 登录数据库</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">ooadUser</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">ooad</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line">      <span class="comment"># 初始化时建立物理连接的个数</span></span><br><span class="line"><span class="attr">      initial-size:</span> <span class="number">3</span></span><br><span class="line">      <span class="comment"># 最小连接池数量</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">3</span></span><br><span class="line">      <span class="comment"># 最大连接池数量</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">10</span></span><br><span class="line">      <span class="comment"># 获取连接时最大等待时间</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">      filter:</span></span><br><span class="line"><span class="attr">        stat:</span></span><br><span class="line">          <span class="comment"># 是否开启慢sql查询监控</span></span><br><span class="line"><span class="attr">          log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># 慢SQL执行时间</span></span><br><span class="line"><span class="attr">          slow-sql-millis:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">      validation-query:</span> <span class="string">select</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>到这里，配置基本完成了，接下来开始写mapper</p><h1 id="UserMapper-java"><a href="#UserMapper-java" class="headerlink" title="UserMapper.java"></a>UserMapper.java</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xmu.oomall.user.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> xmu.oomall.user.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ringoer</span></span><br><span class="line"><span class="comment"> * 必须是接口类型</span></span><br><span class="line"><span class="comment"> * 必须有 <span class="doctag">@Mapper</span> 注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id返回用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id返回用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册一个用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改一个用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 修改影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">editUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回用户列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace中填写对应的mapper接口位置及名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"xmu.oomall.user.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sql语句之select--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id 填写在接口中对应的方法名 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- parameterType 填写传入参数的类型，类型名称与java类型相同 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType 填写返回参数的名称，类型名称与java类型相同，返回时会自动组装 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对于数据库保留字段，如 name ，不能直接查询，要使用 `` 包裹住才行（不是单引号） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对于传入参数，使用 #&#123;变量名&#125; 方式来取值，其中变量名与java中相同 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">            select id,</span><br><span class="line">                   password,</span><br><span class="line">                    `name`,</span><br><span class="line">                    gender,</span><br><span class="line">                    birthday,</span><br><span class="line">                    mobile,</span><br><span class="line">                    nickname,</span><br><span class="line">                    rebate,</span><br><span class="line">                    avatar,</span><br><span class="line">                    role_id,</span><br><span class="line">                    last_login_time,</span><br><span class="line">                    last_login_ip,</span><br><span class="line">                    user_level,</span><br><span class="line">                    wx_open_id,</span><br><span class="line">                    session_key,</span><br><span class="line">                    gmt_create,</span><br><span class="line">                    gmt_modified,</span><br><span class="line">                    is_deleted as beDeleted</span><br><span class="line">                    from `oomall_user` where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sql语句之select--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType 填写返回参数的名称，类型名称与java类型相同，返回时会自动组装 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对于返回类型是List的情况，resultType中只需要填List中的单体的类型即可 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如该方法返回值是 List&lt;User&gt; ，但 resultType 只需要填写 User --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUsers"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        select  id,</span><br><span class="line">                password,</span><br><span class="line">                `name`,</span><br><span class="line">                gender,</span><br><span class="line">                birthday,</span><br><span class="line">                mobile,</span><br><span class="line">                nickname,</span><br><span class="line">                rebate,</span><br><span class="line">                avatar,</span><br><span class="line">                role_id,</span><br><span class="line">                last_login_time,</span><br><span class="line">                last_login_ip,</span><br><span class="line">                user_level,</span><br><span class="line">                wx_open_id,</span><br><span class="line">                session_key,</span><br><span class="line">                gmt_create,</span><br><span class="line">                gmt_modified,</span><br><span class="line">                is_deleted as beDeleted</span><br><span class="line">        from `oomall_user`;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sql语句之select--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">            select id,</span><br><span class="line">                   password,</span><br><span class="line">                    `name`,</span><br><span class="line">                    gender,</span><br><span class="line">                    birthday,</span><br><span class="line">                    mobile,</span><br><span class="line">                    nickname,</span><br><span class="line">                    rebate,</span><br><span class="line">                    avatar,</span><br><span class="line">                    role_id,</span><br><span class="line">                    last_login_time,</span><br><span class="line">                    last_login_ip,</span><br><span class="line">                    user_level,</span><br><span class="line">                    wx_open_id,</span><br><span class="line">                    session_key,</span><br><span class="line">                    gmt_create,</span><br><span class="line">                    gmt_modified,</span><br><span class="line">                    is_deleted as beDeleted</span><br><span class="line">            from `oomall_user` where `name` = #&#123;name&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sql语句之insert--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id 填写在接口中对应的方法名 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- parameterType 填写传入参数的类型，类型名称与java类型相同 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- useGeneratedKeys 表示在数据库中插入时是否使用自增主键。需要与 keyProperty 配合使用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 无 resultType ，因为sql中insert方法一定返回此次更新影响的行数，即resultType一定是Integer --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- keyProperty 表示在数据库中的主键是哪个字段，字段名称与java中的相同。需要与 useGeneratedKeys 配合使用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果使用了 useGeneratedKeys 和 keyProperty ，则插入成功后jdbc会自动将生成的主键装配进传入的变量中，可以在java中直接获取 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对于传入参数，使用 #&#123;变量名&#125; 方式来取值，其中变量名与java中相同 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果传入参数类型是一个包含多个字段的类，则依然使用 #&#123;变量名&#125; 方式来取值，此时变量名直接与类中字段名相同，不需要再次声明类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        insert into `oomall_user`(</span><br><span class="line">            password,</span><br><span class="line">            `name`,</span><br><span class="line">            gender,</span><br><span class="line">            birthday,</span><br><span class="line">            mobile,</span><br><span class="line">            nickname,</span><br><span class="line">            rebate,</span><br><span class="line">            avatar,</span><br><span class="line">            role_id,</span><br><span class="line">            last_login_time,</span><br><span class="line">            last_login_ip,</span><br><span class="line">            user_level,</span><br><span class="line">            wx_open_id,</span><br><span class="line">            session_key,</span><br><span class="line">            gmt_create,</span><br><span class="line">            gmt_modified,</span><br><span class="line">            is_deleted)</span><br><span class="line">        values (</span><br><span class="line">            #&#123;password&#125;,</span><br><span class="line">            #&#123;name&#125;,</span><br><span class="line">            #&#123;gender&#125;,</span><br><span class="line">            #&#123;birthday&#125;,</span><br><span class="line">            #&#123;mobile&#125;,</span><br><span class="line">            #&#123;nickname&#125;,</span><br><span class="line">            #&#123;rebate&#125;,</span><br><span class="line">            #&#123;avatar&#125;,</span><br><span class="line">            #&#123;roleId&#125;,</span><br><span class="line">            #&#123;lastLoginTime&#125;,</span><br><span class="line">            #&#123;lastLoginIp&#125;,</span><br><span class="line">            #&#123;userLevel&#125;,</span><br><span class="line">            #&#123;wxOpenId&#125;,</span><br><span class="line">            #&#123;sessionKey&#125;,</span><br><span class="line">            #&#123;gmtCreate&#125;,</span><br><span class="line">            #&#123;gmtModified&#125;,</span><br><span class="line">            #&#123;beDeleted&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sql语句之update--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id 填写在接口中对应的方法名 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- parameterType 填写传入参数的类型，类型名称与java类型相同 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 无 resultType ，因为sql中update方法一定返回此次更新影响的行数，即resultType一定是Integer --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 本文章未提及delete操作，实际上delete操作的返回值也是行数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"editUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> &gt;</span></span><br><span class="line">        update `oomall_user`</span><br><span class="line">        set password=#&#123;password&#125;,</span><br><span class="line">            `name`=#&#123;name&#125;,</span><br><span class="line">            gender=#&#123;gender&#125;,</span><br><span class="line">            birthday=#&#123;birthday&#125;,</span><br><span class="line">            mobile=#&#123;mobile&#125;,</span><br><span class="line">            nickname=#&#123;nickname&#125;,</span><br><span class="line">            rebate=#&#123;rebate&#125;,</span><br><span class="line">            avatar=#&#123;avatar&#125;,</span><br><span class="line">            role_id=#&#123;roleId&#125;,</span><br><span class="line">            last_login_time=#&#123;lastLoginTime&#125;,</span><br><span class="line">            last_login_ip=#&#123;lastLoginIp&#125;,</span><br><span class="line">            user_level=#&#123;userLevel&#125;,</span><br><span class="line">            wx_open_id=#&#123;wxOpenId&#125;,</span><br><span class="line">            session_key=#&#123;sessionKey&#125;,</span><br><span class="line">            gmt_create=#&#123;gmtCreate&#125;,</span><br><span class="line">            gmt_modified=#&#123;gmtModified&#125;,</span><br><span class="line">            is_deleted=#&#123;beDeleted&#125;</span><br><span class="line">        where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="使用mapper"><a href="#使用mapper" class="headerlink" title="使用mapper"></a>使用mapper</h1><p>到这里，mapper的声明工作已经全部完成了，接下来需要在dao层调用mapper。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xmu.oomall.user.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> xmu.oomall.user.domain.User;</span><br><span class="line"><span class="keyword">import</span> xmu.oomall.user.mapper.UserMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ringoer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id返回用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Integer id)</span></span>&#123;<span class="keyword">return</span> userMapper.findUserById(id);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id返回用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByName</span><span class="params">(String name)</span></span>&#123;<span class="keyword">return</span> userMapper.findUserByName(name);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册一个用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;<span class="keyword">return</span> userMapper.addUser(user);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改一个用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">editUser</span><span class="params">(User user)</span></span>&#123;<span class="keyword">return</span> userMapper.editUser(user);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回用户列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用代码如上。</p><p>实际上只需要两行代码，就可以无缝使用mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br></pre></td></tr></table></figure><p>以上即为通过jdbc的java与数据库连接方式。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;和数据库直接联系的，重要的mapper层的配置。&lt;br&gt;
    
    </summary>
    
    
      <category term="J2EE" scheme="http://yoursite.com/categories/J2EE/"/>
    
    
      <category term="J2EE" scheme="http://yoursite.com/tags/J2EE/"/>
    
  </entry>
  
</feed>
