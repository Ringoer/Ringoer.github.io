<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ringo&#39;s Coding Life</title>
  
  <subtitle>OI to ACM</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ringoer.com/"/>
  <updated>2019-03-11T07:02:42.028Z</updated>
  <id>https://ringoer.com/</id>
  
  <author>
    <name>Ringoer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Welcome to No. 68 Floating Island</title>
    <link href="https://ringoer.com/uncategorized/mainpage/"/>
    <id>https://ringoer.com/uncategorized/mainpage/</id>
    <published>2332-12-31T16:00:00.000Z</published>
    <updated>2019-03-11T07:02:42.028Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><b><font size="6">Are You Going To Scarborough Fair ?</font></b></p><br><img src="http://pic.ringoer.com/id63819688.png" alt="id=63819688" title="id=63819688"><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;b&gt;&lt;font size=&quot;6&quot;&gt;Are You Going To Scarborough Fair ?&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;br&gt;&lt;img src=&quot;http://pic.ringoer.com/id63819688
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端-RN-组件</title>
    <link href="https://ringoer.com/frontend/ckt4kmw2k00k4rou3mj3qvmtl/"/>
    <id>https://ringoer.com/frontend/ckt4kmw2k00k4rou3mj3qvmtl/</id>
    <published>2021-09-02T05:18:00.000Z</published>
    <updated>2021-09-03T16:26:05.513Z</updated>
    
    <content type="html"><![CDATA[<p>布局那些属实没什么好说的嗷，直接写组件吧</p><p>当然你也可以选择用 antd</p><a id="more"></a><h1 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h1><p>超常用组件 Button（其实是原生的和 antd 的都太难用了）</p><p>思考作为 button，我们需要什么属性</p><p>显然有颜色定制、点击事件定制、样式定制、文本定制等 4 个主要需求</p><p>同时我自己有一个彩色和黑白转换的需求</p><p>那么容易得到以下类型定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ButtonProps &#123;</span><br><span class="line">  backgroundColor?: <span class="built_in">string</span>;</span><br><span class="line">  color?: <span class="built_in">string</span>;</span><br><span class="line">  plain?: <span class="built_in">boolean</span>;</span><br><span class="line">  onPress?: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  children: React.ReactElement | <span class="built_in">string</span>;</span><br><span class="line">  style?: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来写组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">const Button = (props: ButtonProps) =&gt; &#123;</span><br><span class="line">  const &#123;plain = false, onPress = () =&gt; &#123;&#125;, children, style = &#123;&#125;&#125; = props;</span><br><span class="line"></span><br><span class="line">  const &#123;</span><br><span class="line">    backgroundColor = plain ? &apos;white&apos; : &apos;#5cd1f0&apos;,</span><br><span class="line">    color = plain ? &apos;black&apos; : &apos;white&apos;,</span><br><span class="line">  &#125; = props;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;TouchableOpacity</span><br><span class="line">      style=&#123;&#123;...styles.buttonWrapper, ...style, backgroundColor&#125;&#125;</span><br><span class="line">      onPress=&#123;onPress&#125;&gt;</span><br><span class="line">      &lt;Text style=&#123;&#123;...styles.button, color&#125;&#125;&gt;&#123;children&#125;&lt;/Text&gt;</span><br><span class="line">    &lt;/TouchableOpacity&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>颜色我随便选的，看官请自便</p><p>先取除颜色外的值，并提供默认值，然后根据是否 <code>plain</code> 而取颜色，并设置不同的默认值</p><p>然后返回一个由 <code>TouchableOpacity</code> 构成的可点击组件，并注入样式和内容</p><p>最后写样式表</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.buttonWrapper</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ececec</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import Button from &apos;./src/component/Button&apos;</span><br><span class="line"></span><br><span class="line">export default () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">    &lt;View&gt;</span><br><span class="line">        &lt;Button onPress=&#123;() =&gt; &#123;console.log(&apos;hello world&apos;)&#125;&#125;&gt;点我&lt;/Button&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此处选用 <code>TouchableOpacity</code>，是因为我反复验证后，觉得这个表现最好</p><p>详情可以参考文档：<a href="https://reactnative.cn/docs/touchableopacity" target="_blank" rel="noopener">https://reactnative.cn/docs/touchableopacity</a></p><h1 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h1><p>对于 <code>Tabs</code> 组件，我们显然需要标签名、内容和 <code>onChange</code> 事件</p><p>所以容易得到如下类型定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> TabsProps &#123;</span><br><span class="line">  children: React.ReactElement[];</span><br><span class="line">  onChange?: <span class="function">(<span class="params">selected: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是我们如何在用户变更选择的时候，切换渲染的内容呢？</p><p>所以我们容易得到一个 <code>Tab</code> 组件，该组件要求用户传入 <code>name</code> 属性，然后根据 <code>name</code> 来选择内容；同时要求 <code>Tabs</code> 组件只接受 <code>Tab</code> 作为直接子级</p><p>那么容易得到 <code>Tab</code> 组件代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123;View&#125; from &apos;react-native&apos;;</span><br><span class="line"></span><br><span class="line">interface TabProps &#123;</span><br><span class="line">  name: string;</span><br><span class="line">  children?: React.ReactElement;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Tab = (props: TabProps) =&gt; &#123;</span><br><span class="line">  const &#123;children&#125; = props;</span><br><span class="line">  return &lt;View&gt;&#123;children&#125;&lt;/View&gt;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Tab;</span><br></pre></td></tr></table></figure><p>进而可以得到 <code>Tabs</code> 组件代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">const Tabs = (props: TabsProps) =&gt; &#123;</span><br><span class="line">  const &#123;children, onChange = () =&gt; &#123;&#125;&#125; = props;</span><br><span class="line">  const [titles, setTitles] = useState&lt;string[]&gt;([]);</span><br><span class="line">  const [selected, setSelected] = useState&lt;string&gt;(titles[0]);</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    const names: string[] = [];</span><br><span class="line">    for (const el of children) &#123;</span><br><span class="line">      if (el.type !== Tab || !(&apos;name&apos; in el.props)) &#123;</span><br><span class="line">        console.error(&apos;仅接受Tab标签作为Tabs的直接子级&apos;);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      if (names.includes(el.props.name)) &#123;</span><br><span class="line">        console.error(&apos;name 重复&apos;);</span><br><span class="line">        return;</span><br><span class="line">      &#125;</span><br><span class="line">      names.push(el.props.name);</span><br><span class="line">    &#125;</span><br><span class="line">    setTitles(names);</span><br><span class="line">    setSelected(names[0]);</span><br><span class="line">  &#125;, [children]);</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    if (selected) &#123;</span><br><span class="line">      onChange(selected);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [onChange, selected]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;View&gt;</span><br><span class="line">      &lt;View style=&#123;styles.tabs&#125;&gt;</span><br><span class="line">        &#123;titles.map(title =&gt; (</span><br><span class="line">          &lt;TouchableOpacity</span><br><span class="line">            key=&#123;title&#125;</span><br><span class="line">            style=&#123;styles.tab&#125;</span><br><span class="line">            onPress=&#123;() =&gt; setSelected(title)&#125;&gt;</span><br><span class="line">            &lt;Text&gt;&#123;title&#125;&lt;/Text&gt;</span><br><span class="line">            &lt;View style=&#123;&#123;...(title === selected ? styles.selected : &#123;&#125;)&#125;&#125; /&gt;</span><br><span class="line">          &lt;/TouchableOpacity&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">      &#123;children.find(el =&gt; el.props.name === selected)&#125;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过 <code>useEffect</code> 在初始化时检查直接子级是否符合要求</p><p>最后是样式表</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.tabs</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.tab</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.selected</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#5cd1f0</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Loading"><a href="#Loading" class="headerlink" title="Loading"></a>Loading</h1><p>要制作 Loading 动画，我们了解 rn 原生的动画机制</p><p>文档：<a href="https://reactnative.cn/docs/animated" target="_blank" rel="noopener">https://reactnative.cn/docs/animated</a></p><p>我们首先要从 <code>react-native</code> 中引入 <code>Animated</code> 和 <code>Easing</code></p><p>然后声明一个 value，用于在动画进程中作为变化值</p><p>类似于 css 原生动画中指示某个属性的变化，value 需要声明起点、终点和过度时间、过度函数</p><p>首先创建 value</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const value = useRef(new Animated.Value(0)).current;</span><br></pre></td></tr></table></figure><p>此处必须是通过 <code>useRef</code> 创建的一个引用，否则 value 就是常量，无法变化了</p><p>然后定义一个动画变化函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const startAnime = () =&gt; &#123;</span><br><span class="line">    value.setValue(0);</span><br><span class="line">    Animated.timing(value, &#123;</span><br><span class="line">      toValue: 1,</span><br><span class="line">      duration: 2000,</span><br><span class="line">      easing: Easing.linear,</span><br><span class="line">      useNativeDriver: true,</span><br><span class="line">    &#125;).start();</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>该函数声明了动画的起点：<code>setValue(0)</code>，以及动画的依赖</p><p><code>Animated.timing</code> 用于创建一个动画，第一个参数是依赖的值，第二个参数是 <code>options</code>，包括以下参数：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>toValue</td><td>动画变化值的终点值</td></tr><tr><td>duration</td><td>变化的时长，单位 ms</td></tr><tr><td>easing</td><td>动画的变化函数</td></tr><tr><td>useNativeDriver</td><td>是否启用原生动画</td></tr></tbody></table><p>如果使用原生动画，则 rn 会在动画开始前将动画信息发送到原生代码，从而使得动画在原生平台的<br>UI 线程上执行，js 就可以去执行其它任务了</p><p>如果不启用，则动画是 js 对每一帧的桥接</p><p>特别的，如果启用原生动画，则所有依赖相同动画值的动画都要启用原生动画</p><p>动画创建完成后，通过 <code>start</code> 方法启动动画，默认只执行一次。动画可以通过 <code>stop</code> 方法手动中断，并且其它中断也都是调用了 <code>stop</code> 方法</p><p><code>start</code> 方法可以接受一个函数作为参数，该函数接受一个包含 <code>finished</code> 属性的对象作为参数，表示动画结束后要执行的动作</p><p>当动画正常结束时，<code>finished</code> 会被置为 <code>true</code>，否则为 <code>false</code></p><p>我们可以通过该函数来实现动画的无限循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const startAnime = () =&gt; &#123;</span><br><span class="line">    value.setValue(0);</span><br><span class="line">    Animated.timing(value, &#123;</span><br><span class="line">      ...options</span><br><span class="line">    &#125;).start((&#123;finished&#125;) =&gt; &#123;startAnime()&#125;;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>到现在，我们已经创建了一个动画的变化，现在要渲染到视图上</p><p>我选用 <code>&lt;Icon name=&quot;loading&quot; size={100} /&gt;</code> 作为动画的内容，并且让其旋转</p><p>旋转功能通过 css 的 transform rotate 来实现</p><p>则有如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;Animated.View</span><br><span class="line">    style=&#123;&#123;</span><br><span class="line">        ...styles.loading,</span><br><span class="line">            transform: [</span><br><span class="line">                &#123;</span><br><span class="line">                    // 因为 typeof Animated.Value === &apos;object&apos;，所以必须要转换一次</span><br><span class="line">                    rotate: value.interpolate(&#123;</span><br><span class="line">                        inputRange: [0, 1],</span><br><span class="line">                        outputRange: [&apos;0deg&apos;, &apos;360deg&apos;],</span><br><span class="line">                    &#125;),</span><br><span class="line">                &#125;,</span><br><span class="line">            ],</span><br><span class="line">    &#125;&#125;&gt;</span><br><span class="line">    &lt;Icon name=&quot;loading&quot; size=&#123;100&#125; /&gt;</span><br><span class="line">&lt;/Animated.View&gt;</span><br></pre></td></tr></table></figure><p>首先，根据动画值来设定样式的代码，必须在 <code>Animated.View</code> 上才会生效</p><p>然后，<code>transform</code> 接受一个数组，每个数组单位为一个对象，该对象描述了 <code>transform</code> 要执行的动作</p><p>此处我通过 <code>interpolate</code> 方法，创建了一个映射，将 <code>value</code> 的值范围映射到一个带有单位的范围上，以满足 <code>rotate</code> 的参数要求</p><p><code>interpolate</code> 方法会自动识别单位，所以尽管写，它自己会适配</p><p>那么，一个旋转等待的动画就完成了</p><h1 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h1><p>rn 不支持直接嵌入 hmtl 片段，那我们总要想个办法支持一下</p><h2 id="react-native-render-html"><a href="#react-native-render-html" class="headerlink" title="react-native-render-html"></a>react-native-render-html</h2><p>推荐通过 <code>react-native-render-html</code> 来实现这个需求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-native-render-html</span><br></pre></td></tr></table></figure><p>然后引入该库的默认导出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import RenderHtml from &apos;react-native-render-html&apos;;</span><br></pre></td></tr></table></figure><p>该组件的使用方式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;RenderHtml source=&#123;&#123;html&#125;&#125; contentWidth=&#123;width&#125; /&gt;</span><br></pre></td></tr></table></figure><p>如果你不提供 <code>contentWidth</code> 属性，则会触发警告，所以一般是提供</p><p>此处使用的 <code>width</code> 一般推荐用如下方式取得</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123;useWindowDimensions&#125; from &apos;react-native&apos;;</span><br><span class="line"></span><br><span class="line">const &#123;width&#125; = useWindowDimensions();</span><br></pre></td></tr></table></figure><p>那么易得组件代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123;View, useWindowDimensions&#125; from &apos;react-native&apos;;</span><br><span class="line">import RenderHtml from &apos;react-native-render-html&apos;;</span><br><span class="line"></span><br><span class="line">import styles from &apos;./index.less&apos;;</span><br><span class="line"></span><br><span class="line">interface HtmlProps &#123;</span><br><span class="line">  html: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Html = (props: HtmlProps) =&gt; &#123;</span><br><span class="line">  const &#123;html&#125; = props;</span><br><span class="line">  const &#123;width&#125; = useWindowDimensions();</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;View style=&#123;styles.html&#125;&gt;</span><br><span class="line">      &lt;RenderHtml source=&#123;&#123;html&#125;&#125; contentWidth=&#123;width&#125; /&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Html;</span><br></pre></td></tr></table></figure><p>为了满足 <code>/forum/[id]</code> 的预览需求，易得样式表如下</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.html</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>唯一的缺点就是在 <code>RenderHtml</code> 内部引入 css 很麻烦，不过它已经是最好用的了，总不能用 WebView 吧</p><h2 id="WebView"><a href="#WebView" class="headerlink" title="WebView"></a>WebView</h2><p>说到 WebView，顺便介绍一下 WebView 的实现</p><p>通过 <code>react-native-webview</code> 来实现这个需求</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-native-webview</span><br></pre></td></tr></table></figure><p>然后引入该库的默认导出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import WebView from &apos;react-native-webview&apos;;</span><br></pre></td></tr></table></figure><p>该组件的使用方式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;View style=&#123;&#123;...styles.html, height&#125;&#125;&gt;</span><br><span class="line">    &lt;WebView</span><br><span class="line">        source=&#123;&#123;html&#125;&#125;</span><br><span class="line">        injectedJavaScript=&quot;window.ReactNativeWebView.postMessage(document.documentElement.scrollHeight)&quot;</span><br><span class="line">        onMessage=&#123;event =&gt; &#123;</span><br><span class="line">            setHeight(+event.nativeEvent.data);</span><br><span class="line">            onInit(+event.nativeEvent.data);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">&lt;/View&gt;</span><br></pre></td></tr></table></figure><p>通过 <code>injectedJavaScript</code> 以在 WebView 的内容初始化完成时，向父组件提交事件，可以类比于 html 的 iframe</p><p>通过 <code>onMessage</code> 来接收参数，并处理</p><p>同时，WebView 默认是 0 高度的，所以必须在初始化完成后，获取内部高度，然后设置到父组件上</p><p>也可以大量插入片段，并通过 <code>link</code> 来引入外源 css</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;View style=&#123;&#123;...styles.html, height&#125;&#125;&gt;</span><br><span class="line">    &lt;WebView</span><br><span class="line">        source=&#123;&#123;</span><br><span class="line">            html: `&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">&lt;link type=&quot;text/css&quot; rel=&quot;stylesheet&quot; href=&quot;https://webfiles.ringoer.com/github-markdown.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;article class=&quot;markdown-body&quot;&gt;</span><br><span class="line">$&#123;html&#125;</span><br><span class="line">&lt;/article&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;`,</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        injectedJavaScript=&quot;window.ReactNativeWebView.postMessage(document.documentElement.scrollHeight)&quot;</span><br><span class="line">        onMessage=&#123;event =&gt; &#123;</span><br><span class="line">            setHeight(+event.nativeEvent.data);</span><br><span class="line">            onInit(+event.nativeEvent.data);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">&lt;/View&gt;</span><br></pre></td></tr></table></figure><p>缺点是，当一个页面有大量 WebView 的时候，会重复引入很多次 <code>link</code> 内容，同时造成进程负担极重，无法正常卸载组件，导致应用崩溃闪退</p><p>所以我不建议用 WebView（</p><h1 id="Editor"><a href="#Editor" class="headerlink" title="Editor"></a>Editor</h1><p>caho 是有 markdown 编辑需求的，所以需要一个 markdown Editor</p><p>其实就是缝合怪（？</p><p>容易得到需求</p><ol><li>无权限禁用</li><li>标题</li><li>提交动作</li><li>默认值</li><li>最大长度限制</li><li>附加插入内容</li></ol><p>那么可得类型定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> EditorProps &#123;</span><br><span class="line">  disabled?: <span class="built_in">boolean</span>;</span><br><span class="line">  hasTitle?: <span class="built_in">boolean</span>;</span><br><span class="line">  onSubmit?: <span class="function">(<span class="params">text: <span class="built_in">string</span>, title: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  defaultValue?: <span class="built_in">string</span>;</span><br><span class="line">  wordsLimit?: <span class="built_in">number</span>;</span><br><span class="line">  insertValue?: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为标题不一定存在，所以提交动作的第一个值是正文，第二个才是标题</p><p>容易得到组件代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">const Editor = (props: EditorProps) =&gt; &#123;</span><br><span class="line">  const &#123;</span><br><span class="line">    disabled = false,</span><br><span class="line">    hasTitle = false,</span><br><span class="line">    onSubmit = () =&gt; &#123;&#125;,</span><br><span class="line">    defaultValue = &apos;&apos;,</span><br><span class="line">    wordsLimit = 4095,</span><br><span class="line">    insertValue,</span><br><span class="line">  &#125; = props;</span><br><span class="line">  const [title, setTitle] = useState(&apos;&apos;);</span><br><span class="line">  const [text, setText] = useState&lt;string&gt;(defaultValue);</span><br><span class="line"></span><br><span class="line">  useEffect(() =&gt; &#123;</span><br><span class="line">    if (insertValue) &#123;</span><br><span class="line">      setText(`$&#123;text&#125;$&#123;insertValue&#125;`);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [text, insertValue]);</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;View style=&#123;styles.editorWrapper&#125;&gt;</span><br><span class="line">      &lt;View style=&#123;styles.editor&#125;&gt;</span><br><span class="line">        &#123;hasTitle ? (</span><br><span class="line">          &lt;View style=&#123;styles.title&#125;&gt;</span><br><span class="line">            &lt;Text&gt;标题&lt;/Text&gt;</span><br><span class="line">            &lt;InputItem</span><br><span class="line">              style=&#123;styles.input&#125;</span><br><span class="line">              value=&#123;title&#125;</span><br><span class="line">              onChange=&#123;value =&gt; setTitle(value)&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/View&gt;</span><br><span class="line">        ) : undefined&#125;</span><br><span class="line">        &lt;View style=&#123;styles.description&#125;&gt;</span><br><span class="line">          &lt;Text&gt;正文&lt;/Text&gt;</span><br><span class="line">          &lt;Text style=&#123;styles.support&#125;&gt;支持Markdown文本&lt;/Text&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">        &lt;Tabs&gt;</span><br><span class="line">          &lt;Tab name=&quot;编辑&quot;&gt;</span><br><span class="line">            &lt;TextareaItem</span><br><span class="line">              style=&#123;styles.textarea&#125;</span><br><span class="line">              rows=&#123;8&#125;</span><br><span class="line">              count=&#123;wordsLimit&#125;</span><br><span class="line">              defaultValue=&#123;disabled ? &apos;&apos; : text&#125;</span><br><span class="line">              onChange=&#123;value =&gt; setText(value || &apos;&apos;)&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">          &lt;/Tab&gt;</span><br><span class="line">          &lt;Tab name=&quot;预览&quot;&gt;</span><br><span class="line">            &lt;Html html=&#123;marked(text)&#125; /&gt;</span><br><span class="line">          &lt;/Tab&gt;</span><br><span class="line">        &lt;/Tabs&gt;</span><br><span class="line">        &lt;View style=&#123;styles.actions&#125;&gt;</span><br><span class="line">          &lt;Button</span><br><span class="line">            plain</span><br><span class="line">            onPress=&#123;() =&gt; &#123;</span><br><span class="line">              Swal.confirm(</span><br><span class="line">                &apos;即将对每个换行进行扩增，每 1 个扩增为 2 个\n您确定要这样做吗？&apos;,</span><br><span class="line">              ).then(() =&gt; &#123;</span><br><span class="line">                const value = text.split(&apos;\n&apos;).join(&apos;\n\n&apos;);</span><br><span class="line">                setText(value);</span><br><span class="line">              &#125;);</span><br><span class="line">            &#125;&#125;&gt;</span><br><span class="line">            换行</span><br><span class="line">          &lt;/Button&gt;</span><br><span class="line">          &lt;Button</span><br><span class="line">            plain</span><br><span class="line">            onPress=&#123;() =&gt; &#123;</span><br><span class="line">              setText(&apos;&apos;);</span><br><span class="line">            &#125;&#125;&gt;</span><br><span class="line">            重置</span><br><span class="line">          &lt;/Button&gt;</span><br><span class="line">          &lt;Button</span><br><span class="line">            onPress=&#123;() =&gt; &#123;</span><br><span class="line">              if (disabled) &#123;</span><br><span class="line">                console.error(&apos;您在当前环境下没有权限进行编辑&apos;);</span><br><span class="line">                return;</span><br><span class="line">              &#125; else if (!(onSubmit instanceof Function)) &#123;</span><br><span class="line">                console.error(&apos;传入的提交函数非法&apos;);</span><br><span class="line">                return;</span><br><span class="line">              &#125; else if (text.length &gt; wordsLimit) &#123;</span><br><span class="line">                console.error(&apos;正文长度超出限制&apos;);</span><br><span class="line">                return;</span><br><span class="line">              &#125;</span><br><span class="line">              onSubmit(text, title);</span><br><span class="line">            &#125;&#125;&gt;</span><br><span class="line">            提交</span><br><span class="line">          &lt;/Button&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">      &lt;/View&gt;</span><br><span class="line">      &#123;disabled ? (</span><br><span class="line">        &lt;View style=&#123;styles.forbidden&#125;&gt;</span><br><span class="line">          &lt;Text&gt;您在当前环境下没有权限进行编辑&lt;/Text&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">      ) : undefined&#125;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>扩增功能是因为其实并不是所有用户都会写 markdown，而 markdown 在写错换行符的时候是很烦的，所以要方便普通用户</p><p>然后是 forbidden 功能，鉴于 rn 的所有组件都是 <code>box-sizing: content-box</code>，所以要修改层级以使得阻止视图完整覆盖编辑器</p><p>所以可得样式表</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.editor</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.input</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#acacac</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.description</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.support</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#acacac</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.actions</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.forbidden</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;布局那些属实没什么好说的嗷，直接写组件吧&lt;/p&gt;
&lt;p&gt;当然你也可以选择用 antd&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://ringoer.com/categories/frontend/"/>
    
    
      <category term="react native" scheme="https://ringoer.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>前端-RN-起步</title>
    <link href="https://ringoer.com/frontend/ckt4kmw2l00k5rou3mrcznf7m/"/>
    <id>https://ringoer.com/frontend/ckt4kmw2l00k5rou3mrcznf7m/</id>
    <published>2021-09-01T11:27:00.000Z</published>
    <updated>2021-09-03T16:26:54.666Z</updated>
    
    <content type="html"><![CDATA[<p>总是应该认识一些基本概念</p><a id="more"></a><h1 id="原生组件"><a href="#原生组件" class="headerlink" title="原生组件"></a>原生组件</h1><p>在 rn 中不可以使用 html 标签，只能使用 rn 提供的原生组件，或第三方提供的可以用于 rn 的组件</p><p>原生组件列表请参看官方链接：<a href="https://reactnative.cn/docs/components-and-apis" target="_blank" rel="noopener">https://reactnative.cn/docs/components-and-apis</a></p><p>主要有以下核心组件：</p><table><thead><tr><th>组件名</th><th>等效 html 标签</th><th>重要的特殊之处</th></tr></thead><tbody><tr><td>View</td><td>div</td><td>无点击事件</td></tr><tr><td>Text</td><td>span</td><td>所有直接文本必须包裹在 <code>&lt;Text&gt;</code> 之中，包括实体字符</td></tr><tr><td>Image</td><td>img</td><td>必须指明高度和宽度</td></tr><tr><td>ScrollView</td><td>-</td><td>ScrollView 不可以嵌套在另一个 ScrollView 中</td></tr><tr><td>TextInput</td><td>input</td><td>-</td></tr></tbody></table><h1 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h1><p>有了结构，自然要有样式</p><p>内联的样式可以直接通过组件的 <code>style</code> 属性进行书写，每个属性使用驼峰写法</p><p>注意每个标签可以具有的 <code>style</code> 是不一样的，比如 <code>color</code> 属性，无法设置在 <code>View</code> 组件上（因为 View 不能直接包含文本），只能设置在 <code>Text</code> 组件上</p><p>也可以使用内部样式，写法如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;StyleSheet&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">  container: &#123;</span><br><span class="line">    minHeight: <span class="string">'100%'</span>,</span><br><span class="line">    backgroundColor: <span class="string">'white'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  placeholder: &#123;</span><br><span class="line">    height: <span class="number">60</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>create 之后的 <code>styles</code> 实质上也还是一个对象，可以通过 <code>styles.container</code> 来使用样式，只不过通过 <code>StyleSheet.create</code> 来创建的话，会有自动代码补全</p><p>使用时，直接书写于组件的 <code>style</code> 属性中。注意，react 原本是写于 <code>className</code> 属性中，此处不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">    &lt;Text&gt;demo&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br></pre></td></tr></table></figure><p>也可以使用 spread 运算符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;View style=&#123;&#123;...styles.container, backgroundColor: &apos;black&apos;&#125;&#125;&gt;</span><br><span class="line">    &lt;Text&gt;demo&lt;/Text&gt;</span><br><span class="line">&lt;/View&gt;</span><br></pre></td></tr></table></figure><p>在上一章中我们引入了 less 支持，所以当然也可以写外部样式</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.less</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./index.less'</span></span><br></pre></td></tr></table></figure><p>之后用法与内部样式一样</p><h1 id="基本布局"><a href="#基本布局" class="headerlink" title="基本布局"></a>基本布局</h1><p>为了达到类似 caho 的移动端效果，我们需要页脚</p><p>则有如下组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123;SafeAreaView, ScrollView, View&#125; from &apos;react-native&apos;;</span><br><span class="line">const Layout = () =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;SafeAreaView style=&#123;styles.container&#125;&gt;</span><br><span class="line">            &lt;ScrollView&gt;</span><br><span class="line">                &lt;Component navigation=&#123;navigation&#125; /&gt;</span><br><span class="line">                &lt;View style=&#123;styles.placeholder&#125; /&gt;</span><br><span class="line">            &lt;/ScrollView&gt;</span><br><span class="line">            &lt;Footer navigation=&#123;navigation&#125; /&gt;</span><br><span class="line">        &lt;/SafeAreaView&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先使用 <code>SafeAreaView</code> 作为外层，以做到 ios 支持。详见 <a href="https://reactnative.cn/docs/safeareaview" target="_blank" rel="noopener">https://reactnative.cn/docs/safeareaview</a></p><p>然后使用 <code>ScrollView</code> 包裹主要视图，使得主视图组件可以上下滑动；同时，提供一个自定义的 <code>Footer</code> 组件作为页脚</p><p>注意，此处页脚必须写在 <code>ScrollView</code> 外部，才可以固定在视图下部，起到类似于 <code>positon: fixed;</code> 之效果</p><p>为什么要这样？因为 rn 的 style 不支持 <code>position: fixed;</code></p><p>如果写在 <code>ScrollView</code> 内部，就会造成必须滚动到页面最下方才可以看到页脚</p><p>同时，因为页脚现在类似 <code>fixed</code>，所以会遮挡掉 <code>ScrollView</code> 最末尾的部分，所以需要在 <code>ScrollView</code> 中放置一个等高的空组件来占位</p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>路由如何配置，是非常重要的一环，必须要了解</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>参考 <a href="https://caho.ringoer.com" target="_blank" rel="noopener">Caho</a>，我暂且设置了如下路由</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Route &#123;</span><br><span class="line">  path: <span class="built_in">string</span>;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">  component: React.ComponentType&lt;<span class="built_in">any</span>&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router: Route[] = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    title: <span class="string">'登录'</span>,</span><br><span class="line">    component: LoginScreen,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/forum'</span>,</span><br><span class="line">    title: <span class="string">'首页'</span>,</span><br><span class="line">    component: HomeScreen,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/forum/[id]'</span>,</span><br><span class="line">    title: <span class="string">'版块'</span>,</span><br><span class="line">    component: ForumIdScreen,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/forum/all'</span>,</span><br><span class="line">    title: <span class="string">'所有版块'</span>,</span><br><span class="line">    component: ForumScreen,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/topic/[id]'</span>,</span><br><span class="line">    title: <span class="string">'帖子'</span>,</span><br><span class="line">    component: TopicScreen,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/user/[id]'</span>,</span><br><span class="line">    title: <span class="string">'用户'</span>,</span><br><span class="line">    component: UserScreen,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/message'</span>,</span><br><span class="line">    title: <span class="string">'消息'</span>,</span><br><span class="line">    component: MessageScreen,</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>使用 <code>react-navigation</code> 来实现路由</p><p>文档地址：<a href="https://reactnavigation.org/docs/getting-started/" target="_blank" rel="noopener">https://reactnavigation.org/docs/getting-started/</a></p><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @react-navigation/native @react-navigation/native-stack react-native-screens react-native-safe-area-context</span><br></pre></td></tr></table></figure><p>然后打开 <code>App.tsx</code>，引入需要的组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123;NavigationContainer&#125; from &apos;@react-navigation/native&apos;;</span><br><span class="line">import &#123;createNativeStackNavigator&#125; from &apos;@react-navigation/native-stack&apos;;</span><br><span class="line"></span><br><span class="line">const Stack = createNativeStackNavigator();</span><br></pre></td></tr></table></figure><p><code>react-navigation</code> 要求我们通过 <code>NavigationContainer</code> 和 <code>Stack</code> 注册路由，之后才可以正常使用</p><p>注册写法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">import router from &apos;./router&apos;;</span><br><span class="line"></span><br><span class="line">const createScreen =</span><br><span class="line">  (Component: React.ComponentType&lt;any&gt;) =&gt;</span><br><span class="line">  (&#123;navigation&#125;: &#123;navigation: Navigation&#125;) =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;SafeAreaView style=&#123;styles.container&#125;&gt;</span><br><span class="line">        &lt;ScrollView&gt;</span><br><span class="line">          &lt;Component navigation=&#123;navigation&#125; /&gt;</span><br><span class="line">          &lt;View style=&#123;styles.placeholder&#125; /&gt;</span><br><span class="line">        &lt;/ScrollView&gt;</span><br><span class="line">        &lt;Footer navigation=&#123;navigation&#125; /&gt;</span><br><span class="line">      &lt;/SafeAreaView&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">const Router = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;NavigationContainer&gt;</span><br><span class="line">      &lt;Stack.Navigator initialRouteName=&quot;/forum&quot;&gt;</span><br><span class="line">        &#123;router.map(route =&gt; (</span><br><span class="line">          &lt;Stack.Screen</span><br><span class="line">            key=&#123;route.path&#125;</span><br><span class="line">            name=&#123;route.path&#125;</span><br><span class="line">            component=&#123;createScreen(route.component)&#125;</span><br><span class="line">            options=&#123;&#123;</span><br><span class="line">              title: route.title,</span><br><span class="line">              headerTitleAlign: &apos;center&apos;,</span><br><span class="line">              headerRight: () =&gt; &lt;Logout /&gt;,</span><br><span class="line">            &#125;&#125;</span><br><span class="line">          /&gt;</span><br><span class="line">        ))&#125;</span><br><span class="line">      &lt;/Stack.Navigator&gt;</span><br><span class="line">    &lt;/NavigationContainer&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先使用 <code>&lt;NavigationContainer&gt;</code> 创建 navigation 容器，然后使用 <code>&lt;Stack.Navigator&gt;</code> 创建路由栈，用于在不同路由之间往返，最后通过 <code>&lt;Stack.Screen&gt;</code> 声明每一个路由</p><p>对于每条路由，可以手写，也可以如上这般通过数组遍历来完成，但要注意，<code>&lt;Stack.Navigator&gt;</code> 只接受 <code>&lt;Stack.Screen&gt;</code> 作为直接子级</p><p>对于每个 Screen，必要参数有 <code>name</code> 和 <code>component</code>，用于指示其唯一标识符和要渲染的组件。上例中的 <code>key</code> 是因为数组方法 <code>map</code> 要求对每个组件传入 <code>key</code> 作为唯一标识符</p><p>此处的 <code>component</code> 使用了一个包装函数，来使得所有组件共用相同的布局，不需要各自引入页脚</p><p>此外，还可以传入 <code>options</code> 来指示路由的标题等内容。上例中传入了 <code>title</code> 作为标题，<code>headerTitleAlign</code> 作为标题的对齐方式，<code>headerRight</code> 作为附加在标题右侧的组件。该标题会渲染在每个页面的最上方，等效顶边栏</p><p>现在就完成路由的配置了，启动应用就会发现应用路由到了 <code>initialRouteName</code> 所指示的组件</p><p>如果没有指示 <code>initialRouteName</code>，则会路由到 <code>&lt;Stack.Screen&gt;</code> 列表中的第一个组件</p><h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><p>可是这样只能到达一个页面呀，该怎么前往其它页面呢</p><p>可以使用注入的 <code>navigation</code></p><p>对于通过路由到达的每个组件，其 <code>props</code> 中均会被注入一个 <code>navigation</code> 导航器，该导航器具有两个重要方法：</p><ol><li><code>navigate: (navigationName: NavigationName, payload?: any) =&gt; void;</code>，第一个参数是路由名 (name)，第二个参数可选，是通过路由传递的参数</li><li><code>getState: () =&gt; any;</code>，可以获得上层路由传递过来的参数，包含路由栈内全部的参数</li></ol><p>显然，这是归属于路由的功能，但是 <code>react-navigation</code> 不提供 <code>navigation</code> 的类型定义，所以我们可以在 <code>./src/router/index.ts</code> 中提供我们自己的类型定义</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> paths = [</span><br><span class="line">  <span class="string">'/login'</span>,</span><br><span class="line">  <span class="string">'/forum'</span>,</span><br><span class="line">  <span class="string">'/forum/[id]'</span>,</span><br><span class="line">  <span class="string">'/forum/all'</span>,</span><br><span class="line">  <span class="string">'/topic/[id]'</span>,</span><br><span class="line">  <span class="string">'/user/[id]'</span>,</span><br><span class="line">  <span class="string">'/message'</span>,</span><br><span class="line">] <span class="keyword">as</span> <span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">type</span> NavigationName = <span class="keyword">typeof</span> paths[<span class="built_in">number</span>];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> Navigation &#123;</span><br><span class="line">  navigate: <span class="function">(<span class="params">navigationName: NavigationName, payload?: <span class="built_in">any</span></span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  getState: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这样的定义，我们就可以在外部使用 <code>navigation</code> 的使用，声明其类型为 <code>Navigation</code>，并在其 <code>navigate</code> 方法中使用代码自动补全</p><p>然后，我们可以在任意的直接路由到达的组件中，获取 <code>navigation</code> 导航器，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// ./src/screen/user/index.tsx</span><br><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123;Text, View&#125; from &apos;react-native&apos;;</span><br><span class="line">import &#123;Navigation&#125; from &apos;../../router&apos;;</span><br><span class="line"></span><br><span class="line">export default (props: &#123;navigation: Navigation&#125;) =&gt; &#123;</span><br><span class="line">  const &#123;navigation&#125; = props;</span><br><span class="line">  const &#123;routes&#125; = navigation.getState();</span><br><span class="line">  const &#123;id&#125; = routes[routes.length - 1].params;</span><br><span class="line"></span><br><span class="line">  return (</span><br><span class="line">    &lt;View&gt;</span><br><span class="line">      &lt;Text&gt;&#123;id&#125;&lt;/Text&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>则从页脚跳转到 <code>/user/[id]</code> 的代码如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigation.navigate(<span class="string">'/user/[id]'</span>, &#123;id: userId&#125;)</span><br></pre></td></tr></table></figure><h1 id="页脚"><a href="#页脚" class="headerlink" title="页脚"></a>页脚</h1><p>刚才一直说页脚，它是怎么实现的呢？</p><p>其实就是在 <code>View</code> 里面放 <code>Icon</code>，2333</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123;View&#125; from &apos;react-native&apos;;</span><br><span class="line">import &#123;connect&#125; from &apos;react-redux&apos;;</span><br><span class="line"></span><br><span class="line">import Icon from &apos;../../iconfont&apos;;</span><br><span class="line">import &#123;User&#125; from &apos;../../interface&apos;;</span><br><span class="line">import &#123;Navigation&#125; from &apos;../../router&apos;;</span><br><span class="line"></span><br><span class="line">import styles from &apos;./index.less&apos;;</span><br><span class="line"></span><br><span class="line">const Footer = connect(</span><br><span class="line">  state =&gt; state,</span><br><span class="line">  dispatch =&gt; (&#123;dispatch&#125;),</span><br><span class="line">)((props: any) =&gt; &#123;</span><br><span class="line">  const &#123;navigation, user&#125;: &#123;navigation: Navigation; user: User&#125; = props;</span><br><span class="line">  return (</span><br><span class="line">    &lt;View style=&#123;styles.footer&#125;&gt;</span><br><span class="line">      &lt;Icon</span><br><span class="line">        name=&quot;home&quot;</span><br><span class="line">        style=&#123;styles.footerIcon&#125;</span><br><span class="line">        onPress=&#123;() =&gt; navigation.navigate(&apos;/forum&apos;)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;Icon</span><br><span class="line">        name=&quot;ring&quot;</span><br><span class="line">        style=&#123;styles.footerIcon&#125;</span><br><span class="line">        onPress=&#123;() =&gt; navigation.navigate(&apos;/message&apos;)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;Icon</span><br><span class="line">        name=&quot;person&quot;</span><br><span class="line">        style=&#123;styles.footerIcon&#125;</span><br><span class="line">        onPress=&#123;() =&gt; &#123;</span><br><span class="line">          if (user) &#123;</span><br><span class="line">            navigation.navigate(&apos;/user/[id]&apos;, &#123;id: user.id&#125;);</span><br><span class="line">          &#125; else &#123;</span><br><span class="line">            navigation.navigate(&apos;/login&apos;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">export default Footer;</span><br></pre></td></tr></table></figure><p>注意，此处使用了 <code>onPress</code> 属性，可以认为等效于在写 html 时的 <code>onClick</code> 属性，但是 <code>View</code> 上是没有该属性的，需要使用 <code>TouchableOpacity</code> 等可点击组件，但这是后面的内容了</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总是应该认识一些基本概念&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://ringoer.com/categories/frontend/"/>
    
    
      <category term="react native" scheme="https://ringoer.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>前端-RN-初始化</title>
    <link href="https://ringoer.com/frontend/ckt4kmw2s00karou3drwzrsoi/"/>
    <id>https://ringoer.com/frontend/ckt4kmw2s00karou3drwzrsoi/</id>
    <published>2021-09-01T11:17:00.000Z</published>
    <updated>2021-09-03T16:27:47.679Z</updated>
    
    <content type="html"><![CDATA[<p>来学习怎么使用 React Native 吧！</p><a id="more"></a><h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><p>项目按运行台分为 ios 和 android，其中 ios 只能在 macOS 上开发，所以对于 windows 玩家，只能玩玩 android 了（</p><ol><li><p>安装 Android Studio 并配置</p><p>请根据 <a href="https://reactnative.cn/docs/environment-setup" target="_blank" rel="noopener">官方文档</a> 进行该步骤</p></li><li><p>创建 rn 项目</p><ol><li><p>如果你之前全局安装过旧的 <code>react-native-cli</code> 命令行工具，请使用 <code>npm uninstall -g react-native-cli</code> 卸载掉它以避免一些冲突</p></li><li><p>在项目父目录，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx react-native init AwesomeProject</span><br></pre></td></tr></table></figure><p>以新建名为 <code>AwesomeProject</code> 的 rn 项目</p><p>也可以使用 <code>--template</code> 来使用一些社区提供的模板，例如带有<code>TypeScript</code>配置的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx react-native init AwesomeTSProject --template react-native-template-typescript</span><br></pre></td></tr></table></figure></li></ol></li><li><p>在 Android Studio 中打开项目下的 android 目录，然后通过 <code>Tools/AVD Manager</code> 选项，打开虚拟机页面</p><p>如果没有虚拟机，需要点击 <code>Create Virtual Device...</code>，创建新的虚拟设备，并在选择需要的设备类型后，在 <code>Recommended</code> 选项卡中选择 <strong>Q</strong> API Level 29 image，Target 选择 android 10.0</p></li><li><p>确保虚拟机已经启动后，在项目根目录运行命令提示符，然后 <code>yarn android</code> 即可启动 app</p></li></ol><p>注意，命令提示符会打开一个新的 node 命令窗口，在该窗口键入 <code>Ctrl+C</code> 需要连续两次才可退出，或键入 <code>R</code> 以重载应用</p><h1 id="基建"><a href="#基建" class="headerlink" title="基建"></a>基建</h1><p>RN默认是只有</p><ul><li>根目录<ul><li>android</li><li>ios</li><li>__tests__</li><li>比宇宙更重的 node_modules</li></ul></li></ul><p>这样几个文件夹的，其余文件比如 <code>App.tsx</code> 都是放在根目录下</p><p>那我们就要先按 react 编码习惯，给目录做个层级</p><p>于是新建一个 <code>src</code> 目录来放置我们的代码</p><p>我弄成了如下结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--root</span><br><span class="line">  --src</span><br><span class="line">    --component // 放置自定义组件</span><br><span class="line">    --iconfont // 为了使用 iconfont 的 svg</span><br><span class="line">    --interface // 类型定义</span><br><span class="line">    --router // 路由配置</span><br><span class="line">    --screen // 页面，等效于 umi 中的 pages</span><br><span class="line">    --store // redux</span><br><span class="line">    --util // 工具类，比如 Swal, request</span><br><span class="line">    App.tsx</span><br></pre></td></tr></table></figure><p>同时，rn 默认是：</p><ol><li>不支持 less</li><li>不能直接 use svg</li><li>不能直接使用 redux</li></ol><p>所以必须要先配置一下</p><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><p>使用 <code>react-native-less-transformer</code> 插件</p><p>github 地址：<a href="https://github.com/kristerkari/react-native-less-transformer" target="_blank" rel="noopener">https://github.com/kristerkari/react-native-less-transformer</a></p><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add --dev react-native-less-transformer less</span><br></pre></td></tr></table></figure><p>打开 <code>metro.config.js</code>，向其中的 <code>transformer</code>  加入 <code>babelTransformerPath: require.resolve(&quot;react-native-less-transformer&quot;)</code>，向<code>resolver</code> 加入 <code>&quot;less&quot;</code></p><p>文件大致变为如下模样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;getDefaultConfig&#125; = <span class="built_in">require</span>(<span class="string">'metro-config'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params"><span class="keyword">async</span> (</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    resolver: &#123;sourceExts&#125;,</span><br><span class="line">  &#125; = <span class="keyword">await</span> getDefaultConfig();</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    transformer: &#123;</span><br><span class="line">      experimentalImportSupport: <span class="literal">false</span>,</span><br><span class="line">      inlineRequires: <span class="literal">true</span>,</span><br><span class="line">      babelTransformerPath: <span class="built_in">require</span>.resolve(<span class="string">'react-native-less-transformer'</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">    resolver: &#123;</span><br><span class="line">      sourceExts: [...sourceExts, <span class="string">'less'</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>现在就可以在 tsx 文件中引入 less 文件了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./index.less'</span></span><br></pre></td></tr></table></figure><p>但是，还是不能做到像 umi 中的 less 一样的效果，具体来说，嵌套不能用了，我很难过（</p><p>不过可以装 vscode 插件 <code>CSS Modules</code> 来做到对 tsx 中的 style 引用的快速定位</p><h2 id="iconfont"><a href="#iconfont" class="headerlink" title="iconfont"></a>iconfont</h2><p>使用 <code>react-native-iconfont-cli</code> 插件来解决该问题</p><p>github 地址：<a href="https://github.com/iconfont-cli/react-native-iconfont-cli" target="_blank" rel="noopener">https://github.com/iconfont-cli/react-native-iconfont-cli</a></p><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-native-svg</span><br><span class="line">yarn add react-native-iconfont-cli --dev</span><br></pre></td></tr></table></figure><p>然后静态链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native link react-native-svg</span><br></pre></td></tr></table></figure><p>最后生成配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx iconfont-init</span><br></pre></td></tr></table></figure><p>此时项目根目录会生成一个 <code>iconfont.json</code> 的文件，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"symbol_url"</span>: <span class="string">"请参考README.md，复制官网提供的JS链接"</span>,</span><br><span class="line">    <span class="attr">"use_typescript"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"save_dir"</span>: <span class="string">"./src/iconfont"</span>,</span><br><span class="line">    <span class="attr">"trim_icon_prefix"</span>: <span class="string">"icon"</span>,</span><br><span class="line">    <span class="attr">"default_icon_size"</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">"local_svgs"</span>: <span class="string">"./localSvgs"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数意义如下</p><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td>symbol_url</td><td>iconfont 官网提供的 [symbol].js 的地址</td></tr><tr><td>use_typescript</td><td>如果使用 ts 开发，最好设置为 true，但即便是 false，也会提供 <code>.js</code> 和 <code>.d.ts</code> 两种文件，来提供支持</td></tr><tr><td>save_dir</td><td>存放图标文件的地址，每次生成组件之前，该文件夹都会被清空</td></tr><tr><td>trim_icon_prefix</td><td>去除统一前缀</td></tr><tr><td>default_icon_size</td><td>默认大小</td></tr><tr><td>local_svgs</td><td>本地 svg 的路径，如无可以填空字符串</td></tr></tbody></table><p>于是我的 <code>iconfont.json</code> 长这样</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"symbol_url"</span>: <span class="string">"https://at.alicdn.com/t/font_xxxxxx.js"</span>,</span><br><span class="line">    <span class="attr">"use_typescript"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"save_dir"</span>: <span class="string">"./src/iconfont"</span>,</span><br><span class="line">    <span class="attr">"trim_icon_prefix"</span>: <span class="string">"icon"</span>,</span><br><span class="line">    <span class="attr">"default_icon_size"</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="attr">"local_svgs"</span>: <span class="string">""</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置完成后，开始生成组件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx iconfont-rn</span><br></pre></td></tr></table></figure><p>组件生成后，可以通过如下办法使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import Icon from &apos;../src/iconfont&apos;;</span><br><span class="line"></span><br><span class="line">export const App = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;View&gt;</span><br><span class="line">      &lt;Icon name=&quot;alipay&quot; size=&#123;20&#125; /&gt;</span><br><span class="line">      &lt;Icon name=&quot;wechat&quot; /&gt;</span><br><span class="line">    &lt;/View&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过 <code>name</code> 来指定要使用的 icon，并可以通过 <code>size</code> 按需调整大小</p><p>当你在 iconfont 上选择了新图标后，要更新配置文件里的 <code>symbol_url</code> 并重新生成图标文件</p><h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><p>直接使用 <code>redux</code> 和 <code>react-redux</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add react-redux redux</span><br></pre></td></tr></table></figure><p>装完就可以用了</p><p>先在 <code>./src/store</code> 中创建 <code>index.ts</code></p><p>然后声明 <code>actions</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> actions = [<span class="string">'user/info'</span>] <span class="keyword">as</span> <span class="keyword">const</span>;<span class="keyword">type</span> ActionType = <span class="keyword">typeof</span> actions[<span class="built_in">number</span>];</span><br></pre></td></tr></table></figure><p>这样使得我们在使用 <code>ActionType</code> 可以使用自动代码补全</p><p>之后创建 <code>StateType</code> 用以描述 state</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StateType &#123;</span><br><span class="line">  user: User | <span class="literal">null</span> | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再创建 <code>reducer</code> 来进行数据更改的提交</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  state: StateType = &#123;user: <span class="literal">undefined</span>&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">  action: &#123;<span class="keyword">type</span>: ActionType; payload: <span class="built_in">any</span>&#125;,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'user/info'</span>: &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;...state, user: action.payload&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>reducer</code> 接受两个参数，分别是：</p><ol><li>state，表示 redux 当前的状态</li><li>action，是一个包含 <code>type</code> 和 <code>payload</code> 两个字段的对象，表示传入的操作</li></ol><p>然后我们通过 <code>switch</code> 来根据传入的不同 <code>type</code> 进行不同的操作</p><p>在 <code>reducer</code> 中直接 <code>return xxx</code> 将会覆盖现在的 state，所以记得先展开原有的 state</p><p>最后一步，创建 store 对象，并暴露给外部使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(reducer); <span class="comment">// import &#123;createStore&#125; from 'redux';</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>然后在 <code>App.tsx</code> 上使用 <code>&lt;Provider&gt;</code> 进行包装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Provider&#125; from &apos;react-redux&apos;;</span><br><span class="line">import store from &apos;./store&apos;;</span><br><span class="line"></span><br><span class="line">const App = () =&gt; &#123;</span><br><span class="line">  return (</span><br><span class="line">    &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">      &#123;// 你的内容&#125;</span><br><span class="line">    &lt;/Provider&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line">          </span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><p>现在可以在外部使用 <code>connect</code> 来连接数据了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123;View, Text&#125; from &apos;react-native&apos;;</span><br><span class="line">import &#123;connect&#125; from &apos;react-redux&apos;;</span><br><span class="line"></span><br><span class="line">export default connect(</span><br><span class="line">  state =&gt; state,</span><br><span class="line">  dispatch =&gt; (&#123;dispatch&#125;),</span><br><span class="line">)((props: any) =&gt; &#123;</span><br><span class="line">    const &#123;user&#125; = props;</span><br><span class="line">    return (</span><br><span class="line">        &lt;View&gt;</span><br><span class="line">        &lt;Text&gt;&#123;JSON.stringfy(user)&#125;&lt;/Text&gt;</span><br><span class="line">        &lt;/View&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>connect</code> 接收两个参数</p><ol><li>mapStateToProps，是一个函数，该函数接收 redux 的 state 作为参数，并返回一个对象，在向下传递时，会将该对象解构并赋值到组件的 <code>props</code> 上</li><li>mapDispatchToProps，也是一个函数，该函数接收 redux 提供的提交动作 <code>dispatch</code>作为参数，并该函数返回一个对象，在向下传递时，会将该对象解构并赋值到组件的 <code>props</code> 上</li></ol><p><code>connect</code> 执行完毕后悔返回一个新函数，新函数接收一个函数组件作为参数，并将上述返回值解构并赋值到组件的 <code>props</code> 上。同时，外部传入的组件原本的 <code>props</code> 也会保留</p><p>注意，直接引入 <code>store</code> 并使用其 <code>getState</code> 方法来获得 state 的话，实质上并没有订阅 state 的更新，所以 state 更新时并不会触发视图的重新渲染，因此建议在除 <code>&lt;Provider&gt;</code> 外的任何地方，均使用 <code>connect</code> 来完成 state 的订阅</p><h2 id="antd"><a href="#antd" class="headerlink" title="antd"></a>antd</h2><p>原生的 input 不好用，所以需要 antd</p><p>但也只有文本框用 antd 方便了（</p><p>文档：<a href="https://rn.mobile.ant.design/docs/react/introduce-cn" target="_blank" rel="noopener">https://rn.mobile.ant.design/docs/react/introduce-cn</a></p><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @ant-design/react-native</span><br></pre></td></tr></table></figure><p>链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native link @ant-design/icons-react-native</span><br></pre></td></tr></table></figure><p>按需加载</p><p>在项目根目录创建 <code>.babelrc</code> 文件，并写入如下内容</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    ["import", &#123; libraryName: "@ant-design/react-native" &#125;] // 与 Web 平台的区别是不需要设置 style</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就可以正常使用 antd 了</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来学习怎么使用 React Native 吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://ringoer.com/categories/frontend/"/>
    
    
      <category term="react native" scheme="https://ringoer.com/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>服务器迁移笔记</title>
    <link href="https://ringoer.com/programing/server-migration/"/>
    <id>https://ringoer.com/programing/server-migration/</id>
    <published>2021-04-26T10:50:00.000Z</published>
    <updated>2021-04-26T13:47:41.854Z</updated>
    
    <content type="html"><![CDATA[<p>小水管不够用了，新买了大水管</p><p>然后本社恐不想和人打交道，遂放弃腾讯云的自动迁移，而是手动迁移</p><a id="more"></a><hr><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>主要分为以下步骤</p><ol><li>基本环境配置</li><li>mysql 配置</li><li>redis 配置</li><li>域名解析配置</li><li>本来应该有 kafka 之类的消息队列配置，但是我现在还没用过，以后再说吧</li><li>serverless（没配，有朝一日再写</li></ol><h1 id="基本环境配置"><a href="#基本环境配置" class="headerlink" title="基本环境配置"></a>基本环境配置</h1><h2 id="安全组"><a href="#安全组" class="headerlink" title="安全组"></a>安全组</h2><p>默认是全开，这肯定不行，建议开以下端口</p><table><thead><tr><th>协议</th><th>端口</th><th>描述</th></tr></thead><tbody><tr><td>ICMP</td><td>-</td><td>支持 Ping 服务</td></tr><tr><td>ICMPv6</td><td>-</td><td>支持 Ping 服务</td></tr><tr><td>TCP</td><td>20</td><td>ftp 连接端口</td></tr><tr><td>TCP</td><td>21</td><td>ftp 数据端口</td></tr><tr><td>TCP</td><td>22</td><td>ssh 登录端口</td></tr><tr><td>TCP</td><td>80</td><td>网站默认端口</td></tr><tr><td>TCP</td><td>443</td><td>ssl 默认端口</td></tr><tr><td>TCP</td><td>3306</td><td>mysql 默认端口</td></tr><tr><td>TCP</td><td>3389</td><td>windows 登录端口</td></tr><tr><td>TCP</td><td>6379</td><td>redis 默认端口</td></tr><tr><td>TCP</td><td>（任意端口段）</td><td>自己的服务想用的端口</td></tr><tr><td>-</td><td>其余端口</td><td>均拒绝</td></tr></tbody></table><h2 id="root-账户"><a href="#root-账户" class="headerlink" title="root 账户"></a>root 账户</h2><p>总不能跟我说你愿意每次命令都打个 sudo 吧，你愿意我也不愿意</p><p>首先，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure><p>更改 root 用户的密码</p><p>然后修改文件 <code>/etc/ssh/sshd_config</code></p><p>在文件中找到这两行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LoginGraceTime 2m</span><br><span class="line">PermitRootLogin yes</span><br></pre></td></tr></table></figure><p>这两行本来有注释，把注释号删掉，然后把 <code>PermitRootLogin</code> 字段值改为 <code>yes</code> 就行</p><p>然后重启服务器，用 root 用户登录，就可以不用每个命令都打 sudo 了</p><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><p>都是依赖 docker 做容器隔离的，没有 docker 怎么行</p><p>ubuntu 安装直接运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></table></figure><p>即可</p><p>然后用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p>验证安装</p><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><p>我的系统是 ubuntu，千万千万不要用 linux 的方法，ubuntu 不完全一样</p><p>直接运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install mysql-server</span><br></pre></td></tr></table></figure><p>即可</p><p>然后进行配置</p><p>初始化配置：<code>mysql_secure_installation</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1</span></span><br><span class="line">VALIDATE PASSWORD PLUGIN can be used to <span class="built_in">test</span> passwords...</span><br><span class="line">Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No: N (选择N ,不会进行密码的强校验)</span><br><span class="line"></span><br><span class="line"><span class="comment">#2</span></span><br><span class="line">Please <span class="built_in">set</span> the password <span class="keyword">for</span> root here...</span><br><span class="line">New password: (输入密码)</span><br><span class="line">Re-enter new password: (重复输入)</span><br><span class="line"></span><br><span class="line"><span class="comment">#3</span></span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to <span class="built_in">log</span> into MySQL without having to have</span><br><span class="line">a user account created <span class="keyword">for</span> them...</span><br><span class="line">Remove anonymous users? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : N (选择N，不删除匿名用户)</span><br><span class="line"></span><br><span class="line"><span class="comment">#4</span></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line"><span class="string">'localhost'</span>. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network...</span><br><span class="line">Disallow root login remotely? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : N (选择N，允许root远程连接)</span><br><span class="line"></span><br><span class="line"><span class="comment">#5</span></span><br><span class="line">By default, MySQL comes with a database named <span class="string">'test'</span> that</span><br><span class="line">anyone can access...</span><br><span class="line">Remove <span class="built_in">test</span> database and access to it? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : N (选择N，不删除<span class="built_in">test</span>数据库)</span><br><span class="line"></span><br><span class="line"><span class="comment">#6</span></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line">Reload privilege tables now? (Press y|Y <span class="keyword">for</span> Yes, any other key <span class="keyword">for</span> No) : Y (选择Y，修改权限立即生效)</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「風の住む街~」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https://blog.csdn.net/weixin_38924500/article/details/106261971</span><br></pre></td></tr></table></figure><p>之后检查服务起了没有</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysql.service</span><br></pre></td></tr></table></figure><p>接下来，为了 navicat 可以连接上需要改绑定配置</p><p>进入目录 <code>/etc/mysql/mysql.conf.d</code>，打开文件 <code>mysqld.cnf</code></p><p>找到字段 <code>bind-address</code>，直接注释掉</p><p>然后通过终端进入 mysql</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>接下来查看 root 用户状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; select host,user,plugin from user;</span><br></pre></td></tr></table></figure><p>如果在 user=root 的行，host 字段值不为 <code>%</code>，plugin 字段值不为 <code>mysql_native_password</code>，那就需要修改配置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">'密码'</span>;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">'root'</span>@<span class="string">'localhost'</span> <span class="keyword">IDENTIFIED</span> <span class="keyword">BY</span> <span class="string">'密码'</span> <span class="keyword">PASSWORD</span> <span class="keyword">EXPIRE</span> <span class="keyword">NEVER</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> host = <span class="string">'%'</span> <span class="keyword">WHERE</span> <span class="keyword">user</span> = <span class="string">'root'</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> <span class="keyword">plugin</span>=<span class="string">'mysql_native_password'</span> <span class="keyword">WHERE</span> <span class="keyword">user</span>=<span class="string">'root'</span></span><br></pre></td></tr></table></figure><p>然后重启 mysql，就可以用 navicat 登录了</p><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><p>先安装一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install redis-server</span><br></pre></td></tr></table></figure><p>好了，安装完毕，通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><p>即可启动 redis 服务，然后通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>即可连接到 redis 服务</p><p>然后是改配置文件</p><p>和mysql 的 <code>bind-address</code> 差不多，redis 配置文件也有一个 <code>bind</code> 属性</p><p>打开 <code>/etc/redis/redis.conf</code>，找到 <code>bind 127.0.0.1 ::1</code>，然后注释掉这一行</p><p>然后执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server restart</span><br></pre></td></tr></table></figure><p>重启服务</p><p>接下来进入 redis，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config <span class="built_in">set</span> requirepass <span class="string">'密码'</span></span><br></pre></td></tr></table></figure><p>即可设置 redis 的密码，之后所有操作都要先用 <code>auth</code> 验证密码才行</p><h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h1><p>建议直接暂停解析</p><p>然后访问域名，确定域名解析真的已经停止了</p><p>然后修改解析值，再重新发布</p><p>就可以了</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小水管不够用了，新买了大水管&lt;/p&gt;
&lt;p&gt;然后本社恐不想和人打交道，遂放弃腾讯云的自动迁移，而是手动迁移&lt;/p&gt;
    
    </summary>
    
    
      <category term="programing" scheme="https://ringoer.com/categories/programing/"/>
    
    
  </entry>
  
  <entry>
    <title>在 umi 中使用 dva</title>
    <link href="https://ringoer.com/programing/umi-dva/"/>
    <id>https://ringoer.com/programing/umi-dva/</id>
    <published>2021-03-05T02:11:00.000Z</published>
    <updated>2021-04-26T10:51:57.956Z</updated>
    
    <content type="html"><![CDATA[<p>在 umi 中使用 dva 就像用 redux 一样</p><a id="more"></a><p>umi 是自带 dva 的，只需要先建一个名为 <code>src/models</code> 的文件夹方便统一管理，然后从 umi 库中取得 <code>getDvaApp</code> 函数</p><p>例如，现在有一个数据源，名为 <code>breadcrumb</code> 面包屑，保存面包屑组件的信息</p><h1 id="引入-dva"><a href="#引入-dva" class="headerlink" title="引入 dva"></a>引入 dva</h1><p>可以这样写 <code>store.ts</code>（可以任意命名，只是我喜欢叫 store）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// models/store.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; getDvaApp &#125; <span class="keyword">from</span> <span class="string">"umi"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = getDvaApp()</span><br><span class="line"></span><br><span class="line">app.model(<span class="built_in">require</span>(<span class="string">'./breadcrumb'</span>).default)</span><br></pre></td></tr></table></figure><p>使用 <code>app.model</code> 注册到全局数据源，注意要通过 <code>.default</code> 取得最终输出</p><h1 id="声明初始化"><a href="#声明初始化" class="headerlink" title="声明初始化"></a>声明初始化</h1><p>然后声明数据源的格式和内容</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// interfaces/Breadcrumb.ts</span></span><br><span class="line"><span class="keyword">interface</span> Breadcrumb &#123;</span><br><span class="line">  index: <span class="built_in">number</span>,</span><br><span class="line">  pathname: <span class="built_in">string</span>,</span><br><span class="line">  name: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// models/breadcrumb.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="keyword">namespace</span>: <span class="string">'breadcrumb'</span>,</span><br><span class="line">  state: [&#123; index: <span class="number">0</span>, pathname: <span class="string">'/'</span>, name: <span class="string">'首页'</span> &#125;],</span><br><span class="line">  reducers: &#123;</span><br><span class="line">    info(state: Breadcrumb[], &#123; payload &#125;: &#123; payload: Breadcrumb[] &#125;) &#123;</span><br><span class="line">      <span class="keyword">if</span> (state.length &lt; payload[<span class="number">0</span>].index) &#123;</span><br><span class="line">        <span class="keyword">return</span> state</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> state.slice(<span class="number">0</span>, payload[<span class="number">0</span>].index).concat([...payload]);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在这里我设计为一个数组，通过数组项来保存面包屑的信息，提交数据变更的时候也要提交数组格式</p><p>注意 <code>reducers</code> 中的起名，后续提交变更时，必须使用该起名</p><h1 id="注入组件"><a href="#注入组件" class="headerlink" title="注入组件"></a>注入组件</h1><p>例如我向 <code>/首页/[版块 id]</code> 这个路径的 <code>[id].tsx</code> 组件注入面包屑数据源</p><p>设该组件原本写法如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export default (props: any)=&gt;&#123;&#125;</span><br></pre></td></tr></table></figure><p>现在需要写作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; connect &#125; from &apos;umi&apos;</span><br><span class="line"></span><br><span class="line">export default connect(</span><br><span class="line">    (&#123; breadcrumb &#125;: &#123; breadcrumb: Breadcrumb[] &#125;) =&gt; (&#123; breadcrumb &#125;)</span><br><span class="line">)((props: any)=&gt;&#123;&#125;)</span><br></pre></td></tr></table></figure><p>如上，将数据源连接到组件上</p><p>可见，这个 <code>connent</code> 函数，类似于一个立即执行函数</p><p>这个立即执行函数要求传入两个参数，第二个是原组件，不赘述了；第一个是要注入的数据源函数，这个函数的传入参数是从全局数据源中获取的数据，返回值是包含该数据的一个对象</p><p>传入后，数据会实际绑定在 <code>props</code> 上，如本例可以通过 <code>props.breadcrumb</code> 访问到数据</p><p>同时，<code>props</code> 上也会绑定 <code>dispatch</code> 方法，可以通过该方法提交数据变更</p><p>注意，不论连接了多少数据，只要有连接数据，就会有 <code>dispatch</code> 函数</p><h1 id="提交变更"><a href="#提交变更" class="headerlink" title="提交变更"></a>提交变更</h1><p>如上例，提交变更的一个写法如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">props.dispatch(&#123;</span><br><span class="line">    <span class="keyword">type</span>: <span class="string">'breadcrumb/info'</span>, </span><br><span class="line">    payload: [&#123; index: <span class="number">0</span>, pathname: <span class="string">'/'</span>, name: <span class="string">'首页'</span> &#125;] ,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>要求提交一个对象，该对象包含至少两个字段</p><p>其一是 <code>type</code>，命名格式为 <code>[namespace]/[reducerName]</code>，具体要参考你的定义</p><p>其二是 <code>payload</code>（也可以是其它名称，取决于你的定义），包含你传入的数据</p><p>ok，umi 中使用 dva 的方法，就是这样了</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 umi 中使用 dva 就像用 redux 一样&lt;/p&gt;
    
    </summary>
    
    
      <category term="programing" scheme="https://ringoer.com/categories/programing/"/>
    
    
      <category term="umi" scheme="https://ringoer.com/tags/umi/"/>
    
      <category term="dva" scheme="https://ringoer.com/tags/dva/"/>
    
  </entry>
  
  <entry>
    <title>虚拟 DOM 和 DOM diff</title>
    <link href="https://ringoer.com/programing/virtual-dom/"/>
    <id>https://ringoer.com/programing/virtual-dom/</id>
    <published>2021-02-27T07:01:00.000Z</published>
    <updated>2021-03-14T14:36:09.113Z</updated>
    
    <content type="html"><![CDATA[<p>常常听说原生 DOM 操作比虚拟 DOM 操作慢，真的是这样吗？</p><a id="more"></a><hr><p>先说结论：原生 DOM 操作和虚拟 DOM 操作相比，单次的速度是差不多的，并不会慢。但是原生 DOM 操作只会忠实地执行程序写定的内容，而不会自动优化；而虚拟 DOM 往往内置一些算法，能压缩 DOM 操作的次数，所以最后看起来，就是虚拟 DOM 操作整体上要快于原生 DOM 操作</p><p>那为什么会这样呢？首先要了解一下虚拟 DOM 到底是什么</p><h1 id="虚拟-DOM-是什么"><a href="#虚拟-DOM-是什么" class="headerlink" title="虚拟 DOM 是什么"></a>虚拟 DOM 是什么</h1><p>众所周知，在控制台可以看到 DOM 树，但是总不能每次在内存中操作，都分析一次页面结构吧？肯定要想办法保存到内存中</p><p>那么，内存中的 DOM 树就是虚拟 DOM 树，每个结点就是虚拟 DOM 结点</p><h1 id="虚拟-DOM-的优点"><a href="#虚拟-DOM-的优点" class="headerlink" title="虚拟 DOM 的优点"></a>虚拟 DOM 的优点</h1><p>在反应变更到页面上之前，我们可以通过延缓操作，来使得计算和变更分离，使得变更操作更集中</p><p>然后就可以计算，这一部分的变更中，有哪些是重复的呢？重复的变更，合并为同一次，就可以减少变更量了</p><p>比如添加 n 个结点，原本操作是<code>for i in range(n): insert(node)</code>，现在是直接 <code>insert(node*n)</code>，显然复杂度从 <code>O(n)</code> 降低到了 <code>O(1)</code></p><p>同理，这一部分的 DOM 操作，涉及了多少结点呢？实际变更的结点，有没有指定的数量那么多？减少为需要的数量即可</p><p>比如变更 n 个结点数据，变 <code>[0,1,1,1,...1,0]</code> 为 <code>[1,1,1,...,1]</code>，显然只有首尾两个需要变更，如果中间全部变更，那成本也太大了，所以这里也是复杂度从 <code>O(n)</code> 降低到了 <code>O(1)</code></p><p>当然，实际的内部计算没有这么简单，只是举个简单例子，2333</p><p>除了上述两点外，大家都知道 js 是跨平台的，那么基于 js 的内存的 DOM 树，自然也是跨平台的，岂不美哉？</p><h1 id="虚拟-DOM-的缺点"><a href="#虚拟-DOM-的缺点" class="headerlink" title="虚拟 DOM 的缺点"></a>虚拟 DOM 的缺点</h1><p>有优点自然也有缺点</p><p>用 c++ 写过树的朋友都知道，在 build 的时候每个结点都要 <code>Node* p=new Node()</code> 然后挂载到父结点的 lchild 或者 rchild 上</p><p>同理，在 js 创建虚拟 DOM，一般分为 vue 式和 react 式两种</p><h2 id="vue-式"><a href="#vue-式" class="headerlink" title="vue 式"></a>vue 式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有在 render 函数中才能得到 h 函数</span></span><br><span class="line">h(<span class="string">'div'</span>, &#123;</span><br><span class="line">  class: 'red',</span><br><span class="line">  on: &#123;</span><br><span class="line">    click: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, [h(<span class="string">'span'</span>,&#123;&#125;,<span class="string">'span1'</span>), h(<span class="string">'span'</span>, &#123;&#125;, <span class="string">'span2'</span>])</span><br></pre></td></tr></table></figure><p>创建出来的结点结构如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vNode = &#123;</span><br><span class="line">  tag: <span class="string">"div"</span>, <span class="comment">// 标签名 or 组件名</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    class: "red", // 标签上的属性</span><br><span class="line">    on: &#123;</span><br><span class="line">      click: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125; <span class="comment">// 事件</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  children: [ <span class="comment">// 子元素们</span></span><br><span class="line">    &#123; <span class="attr">tag</span>: <span class="string">"span"</span>, ... &#125;,</span><br><span class="line">    &#123; <span class="attr">tag</span>: <span class="string">"span"</span>, ... &#125;</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="react-式"><a href="#react-式" class="headerlink" title="react 式"></a>react 式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">createElement(<span class="string">'div'</span>,&#123;<span class="attr">className</span>:<span class="string">'red'</span>,<span class="attr">onClick</span>:<span class="function"><span class="params">()</span>=&gt;</span> &#123;&#125;&#125;,[</span><br><span class="line">    createElement(<span class="string">'span'</span>, &#123;&#125;, <span class="string">'span1'</span>),</span><br><span class="line">    createElement(<span class="string">'span'</span>, &#123;&#125;, <span class="string">'span2'</span>)</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>创建出来的结点结构如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vNode = &#123;</span><br><span class="line">  key: <span class="literal">null</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    children: [  <span class="comment">// 子元素们</span></span><br><span class="line">       &#123; <span class="attr">type</span>: <span class="string">'span'</span>, ... &#125;, </span><br><span class="line">       &#123; <span class="attr">type</span>: <span class="string">'span'</span>, ... &#125;</span><br><span class="line">    ],</span><br><span class="line">    className: <span class="string">"red"</span> <span class="comment">// 标签上的属性</span></span><br><span class="line">    onClick: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125; <span class="comment">// 事件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ref: <span class="literal">null</span>,</span><br><span class="line">  type: <span class="string">"div"</span>, <span class="comment">// 标签名 or 组件名</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然创建很麻烦，但是我们还有 template 和 jsx！</p><h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><p>直接使用 XML 语法声明页面结构，然后通过 vue-loader 解析即可</p><h2 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">()=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=<span class="string">"red"</span> onClick=<span class="string">"&#123;()=&gt; &#123;&#125;&#125;"</span>&gt;</span><br><span class="line">            &lt;span&gt;span1&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">            &lt;span&gt;span2&lt;/</span>span&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>虽然简化了，但还是强依赖，且麻烦，不过总比不能创建好，2333</p><h1 id="DOM-diff-是什么"><a href="#DOM-diff-是什么" class="headerlink" title="DOM diff 是什么"></a>DOM diff 是什么</h1><p>直接使用新结点和旧结点，找到最近公共祖先，然后比对该子树，哪里发生了变更</p><p>比如在先序序列 ABCDEFG，中序序列 CBDAFEG 的二叉树上，删除 F 结点，并在 F 的根上插入 H 结点</p><p>对于计算机来说，它得到的新子树是 EGH(先) GEH(中) 的子树，与原子树 EFG(先) FEG(中) 对比，是将结点 F 修改为结点 G，将结点 G 修改为结点 H</p><p>所以，人类认为的一次删除和一次操作，在计算机的理解就是两次修改</p><p>然后再同步到原树上，变为先序序列 ABCDEGH，中序序列 CBDAGEH</p><h1 id="DOM-diff-的优点"><a href="#DOM-diff-的优点" class="headerlink" title="DOM diff 的优点"></a>DOM diff 的优点</h1><p>如上，可以不用遍历整棵树就快速算出新子树，且不需要全部替换树，只需要替换子树</p><h1 id="DOM-diff-的问题"><a href="#DOM-diff-的问题" class="headerlink" title="DOM diff 的问题"></a>DOM diff 的问题</h1><p>如上，计算机的理解和人类的理解不一样</p><p>如果上例中没有第二步插入，那么计算机会理解为</p><ol><li>变更结点 F 为结点 G</li><li>删除结点 G</li></ol><p>要注意这一点！！但其实效率还是比你直接操作真实 DOM 要高</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常常听说原生 DOM 操作比虚拟 DOM 操作慢，真的是这样吗？&lt;/p&gt;
    
    </summary>
    
    
      <category term="programing" scheme="https://ringoer.com/categories/programing/"/>
    
    
  </entry>
  
  <entry>
    <title>UI 框架-完工部署</title>
    <link href="https://ringoer.com/project/ui-framework-deploy/"/>
    <id>https://ringoer.com/project/ui-framework-deploy/</id>
    <published>2021-02-24T13:40:00.000Z</published>
    <updated>2021-02-24T13:58:59.348Z</updated>
    
    <content type="html"><![CDATA[<p>再好的制作，也要部署上去让别人看到才算数</p><p>不然面试官哪有时间慢慢看你代码，2333</p><a id="more"></a><hr><h1 id="生成文件位置"><a href="#生成文件位置" class="headerlink" title="生成文件位置"></a>生成文件位置</h1><p>首先要生成可部署文件</p><p>我们不希望生成的文件被 vite 随便乱扔，所以要先配置一下</p><p>打开 <code>vite.config.ts</code>，写入 <code>base</code> 和 <code>assetsDir</code> 字段</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    base: <span class="string">'/'</span>,<span class="comment">//指定打包后文件的默认引用路径</span></span><br><span class="line">    assetsDir: <span class="string">'assets'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，vite 会在生成的时候将生成的静态文件全部放入根目录下的 <code>dist/assets</code> 文件夹，且所有的相对路径都会被解读为 <code>/</code> 开头</p><p>此时 <code>vite.config.ts</code> 大致有如下模样</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-nocheck</span></span><br><span class="line"><span class="keyword">import</span> &#123; md &#125; <span class="keyword">from</span> <span class="string">"./plugins/md"</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> &#123; baseParse &#125; <span class="keyword">from</span> <span class="string">'@vue/compiler-core'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    base: <span class="string">'/'</span>,<span class="comment">//指定打包后文件的默认引用路径</span></span><br><span class="line">    assetsDir: <span class="string">'assets'</span>,</span><br><span class="line">    plugins: [md()],</span><br><span class="line">    vueCustomBlockTransforms: &#123;</span><br><span class="line">        example: <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; code, path &#125; = options</span><br><span class="line">            <span class="keyword">const</span> file = fs.readFileSync(path).toString()</span><br><span class="line">            <span class="keyword">const</span> parsed = baseParse(file).children.find(<span class="function"><span class="params">n</span> =&gt;</span> n.tag === <span class="string">'example'</span>)</span><br><span class="line">            <span class="keyword">const</span> title = parsed.children[<span class="number">0</span>].content</span><br><span class="line">            <span class="keyword">const</span> main = file.split(parsed.loc.source).join(<span class="string">''</span>).trim()</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`export default function (Component) &#123;</span></span><br><span class="line"><span class="string">Component.__sourceCode = <span class="subst">$&#123;JSON.stringify(main)</span></span></span><br><span class="line"><span class="string"><span class="subst">        &#125;</span></span></span><br><span class="line"><span class="string">Component.__sourceCodeTitle = <span class="subst">$&#123;JSON.stringify(title)&#125;</span></span></span><br><span class="line"><span class="string">&#125;`</span>.trim()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h1><p>根据你想要的部署环境而定</p><p>一般有自己配置的反向代理（如 nginx）或 github page 等</p><p>不管是哪种，部署前都要检查一下 <code>vite.config.ts</code> 和 <code>src/router.ts</code> 中的配置</p><h2 id="history-模式"><a href="#history-模式" class="headerlink" title="history 模式"></a>history 模式</h2><p>修改 <code>vite.config.ts</code> 中的 <code>base</code> 字段为 <code>&#39;/&#39;</code></p><p>修改 <code>src/router.ts</code> 中的 <code>history</code> 为 <code>createWebHistory</code>，即</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createWebHistory, createRouter &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">const</span> history = createWebHistory()</span><br></pre></td></tr></table></figure><h2 id="hash-模式"><a href="#hash-模式" class="headerlink" title="hash 模式"></a>hash 模式</h2><p>修改 <code>vite.config.ts</code> 中的 <code>base</code> 字段为 <code>&#39;./&#39;</code></p><p>修改 <code>src/router.ts</code> 中的 <code>history</code> 为 <code>createWebHashHistory</code>，即</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createWebHashHistory, createRouter &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">const</span> history = createWebHashHistory()</span><br></pre></td></tr></table></figure><h2 id="memory-模式"><a href="#memory-模式" class="headerlink" title="memory 模式"></a>memory 模式</h2><p>不推荐</p><h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>根目录下生成的 <code>dist</code> 目录，就是可以部署的目录了</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p>nginx 等反向代理服务器，可以使用 history 模式或 hash 模式</p><p>使用 history 模式的话，指定入口为 <code>index.html</code>，部署后访问部署路径即可</p><p>使用 hash 模式的话，可以指定入口，访问方式同 history 模式；也可以不指定入口，但是部署后访问部署路径时，必须要加上文件名 <code>index.html</code></p><h2 id="github-page"><a href="#github-page" class="headerlink" title="github page"></a>github page</h2><p>只能使用 hash 模式</p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>自己服务器快的话，反向代理不错，毕竟可以用 history 模式，url 好看一些</p><p>但是要部署 github page 的话，建议不要部署到 github，而是部署到 gitee，毕竟 github 在墙外，有时候访问不那么顺畅，而 gitee 是国内的，速度飞快</p><p>不过 github 会自动更新部署页，gitee 在重新提交代码后，要手动点击 page 设置中的更新，才会真正更新</p><h1 id="感言"><a href="#感言" class="headerlink" title="感言"></a>感言</h1><p>Laby UI 的制作过程，已经全部写完，放在本博客上了</p><p>还真是花了相当的时间，写代码容易，写博客难啊，2333</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;再好的制作，也要部署上去让别人看到才算数&lt;/p&gt;
&lt;p&gt;不然面试官哪有时间慢慢看你代码，2333&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-代码优化</title>
    <link href="https://ringoer.com/project/ui-framework-code-improve/"/>
    <id>https://ringoer.com/project/ui-framework-code-improve/</id>
    <published>2021-02-24T10:38:00.000Z</published>
    <updated>2021-02-24T13:49:08.792Z</updated>
    
    <content type="html"><![CDATA[<p>基本完工了，但是代码还是很丑，重复的地方过多</p><a id="more"></a><hr><h1 id="汇总全局设定"><a href="#汇总全局设定" class="headerlink" title="汇总全局设定"></a>汇总全局设定</h1><p>首先，先让我们建立一个全局设定文件，方便后续查阅、管理</p><p>出于个人爱好，我喜欢管这样的文件叫 <code>Global</code>，并且我决定放在 <code>src</code> 目录下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Global.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> components = &#123;</span><br><span class="line">    <span class="string">'Button'</span>: &#123;</span><br><span class="line">        name: <span class="string">'Button'</span>, title: <span class="string">'Button 按钮'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'Card'</span>: &#123;</span><br><span class="line">        name: <span class="string">'Card'</span>, title: <span class="string">'Card 卡片'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'Dialog'</span>: &#123;</span><br><span class="line">        name: <span class="string">'Dialog'</span>, title: <span class="string">'Dialog 对话框'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'Switch'</span>: &#123;</span><br><span class="line">        name: <span class="string">'Switch'</span>, title: <span class="string">'Switch 开关'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'Table'</span>: &#123;</span><br><span class="line">        name: <span class="string">'Table'</span>, title: <span class="string">'Table 表格'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'Tabs'</span>: &#123;</span><br><span class="line">        name: <span class="string">'Tabs'</span>, title: <span class="string">'Tabs 标签页'</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> guidances = &#123;</span><br><span class="line">    <span class="string">'introduction'</span>: &#123; path: <span class="string">"introduction"</span>, title: <span class="string">"介绍"</span> &#125;,</span><br><span class="line">    <span class="string">'install'</span>: &#123; path: <span class="string">"install"</span>, title: <span class="string">"安装"</span> &#125;,</span><br><span class="line">    <span class="string">'start'</span>: &#123; path: <span class="string">"start"</span>, title: <span class="string">"快速上手"</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该文件告诉了外部引用者，本项目的几个主要文档页的信息</p><h1 id="化简样例"><a href="#化简样例" class="headerlink" title="化简样例"></a>化简样例</h1><p>显然每个在 <code>src/component</code> 下的组件文档页都是引用 <code>./example</code> 下对应的例子</p><p>那么我们应该把引用收束到一起，再暴露给组件文档页</p><p>首先，新建 <code>src/component/contents</code> 文件夹，为每个组件新建对应的样例管理文件</p><p>显然，该文件需要包含</p><ol><li>所有的样例引入</li><li>该样例专属的参数列表</li></ol><p>例如为 Button 组件新建 <code>src/component/contents/Button.ts</code> 文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> LabyComponent1 <span class="keyword">from</span> <span class="string">"../example/Button/Button1.example.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> LabyComponent2 <span class="keyword">from</span> <span class="string">"../example/Button/Button2.example.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> LabyComponent3 <span class="keyword">from</span> <span class="string">"../example/Button/Button3.example.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> LabyComponent4 <span class="keyword">from</span> <span class="string">"../example/Button/Button4.example.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> LabyComponent5 <span class="keyword">from</span> <span class="string">"../example/Button/Button5.example.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> LabyComponent6 <span class="keyword">from</span> <span class="string">"../example/Button/Button6.example.vue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: [</span><br><span class="line">        LabyComponent1,</span><br><span class="line">        LabyComponent2,</span><br><span class="line">        LabyComponent3,</span><br><span class="line">        LabyComponent4,</span><br><span class="line">        LabyComponent5,</span><br><span class="line">        LabyComponent6,</span><br><span class="line">    ],</span><br><span class="line">    attributes: [</span><br><span class="line">        &#123; attr: <span class="string">'level'</span>, desp: <span class="string">'默认类型'</span>, <span class="keyword">type</span>: <span class="string">'string'</span>, values: <span class="string">'default / plain / primary / success / info / warning / danger'</span>, <span class="keyword">default</span>: <span class="string">'default'</span> &#125;,</span><br><span class="line">        &#123; attr: <span class="string">'disabled'</span>, desp: <span class="string">'是否禁用'</span>, <span class="keyword">type</span>: <span class="string">'boolean'</span>, values: <span class="string">'false / true'</span>, <span class="keyword">default</span>: <span class="string">'false'</span> &#125;,</span><br><span class="line">        &#123; attr: <span class="string">'theme'</span>, desp: <span class="string">'式样'</span>, <span class="keyword">type</span>: <span class="string">'string'</span>, values: <span class="string">'button / link / text'</span>, <span class="keyword">default</span>: <span class="string">'button'</span> &#125;,</span><br><span class="line">        &#123; attr: <span class="string">'loding'</span>, desp: <span class="string">'是否加载中'</span>, <span class="keyword">type</span>: <span class="string">'boolean'</span>, values: <span class="string">'false / true'</span>, <span class="keyword">default</span>: <span class="string">'false'</span> &#125;,</span><br><span class="line">        &#123; attr: <span class="string">'size'</span>, desp: <span class="string">'尺寸'</span>, <span class="keyword">type</span>: <span class="string">'string'</span>, values: <span class="string">'middle / small / large'</span>, <span class="keyword">default</span>: <span class="string">'middle'</span> &#125;,</span><br><span class="line">        &#123; attr: <span class="string">'color'</span>, desp: <span class="string">'颜色'</span>, <span class="keyword">type</span>: <span class="string">'string'</span>, values: <span class="string">'任意合法颜色值'</span>, <span class="keyword">default</span>: <span class="string">'#f3678e'</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我为 Button 创建了 6 个样例，所以有 6 条静态引入</p><p>注意，对 vue 文件的引入，只能在代码中静态引入，不可以像 md 一样动态引入，否则必须要先配置对 vue 文件的额外解析</p><p>然后在 Button 组件文档页中引入该 ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> LabyCard <span class="keyword">from</span> <span class="string">"../lib/Card.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> LabyTable <span class="keyword">from</span> <span class="string">"../lib/Table.vue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Example <span class="keyword">from</span> <span class="string">"./contents/Button"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        LabyCard,</span><br><span class="line">        LabyTable,</span><br><span class="line">    &#125;,</span><br><span class="line">    setup(props) &#123;</span><br><span class="line">        <span class="keyword">const</span> heads = [</span><br><span class="line">            &#123; name: <span class="string">"参数"</span>, identifier: <span class="string">"attr"</span> &#125;,</span><br><span class="line">            &#123; name: <span class="string">"含义"</span>, identifier: <span class="string">"desp"</span> &#125;,</span><br><span class="line">            &#123; name: <span class="string">"类型"</span>, identifier: <span class="string">"type"</span> &#125;,</span><br><span class="line">            &#123; name: <span class="string">"可选值"</span>, identifier: <span class="string">"values"</span> &#125;,</span><br><span class="line">            &#123; name: <span class="string">"默认值"</span>, identifier: <span class="string">"default"</span> &#125;,</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">const</span> keys = heads.map(<span class="function">(<span class="params">item: <span class="built_in">any</span></span>) =&gt;</span> item.identifier);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; components, attributes &#125; = Example;</span><br><span class="line">        <span class="keyword">const</span> visibility = ref(components.map(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">const</span> toggle = <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">            visibility.value[index] = !visibility.value[index];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            Prism,</span><br><span class="line">            heads,</span><br><span class="line">            keys,</span><br><span class="line">            components,</span><br><span class="line">            attributes,</span><br><span class="line">            visibility,</span><br><span class="line">            toggle,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改模板为 <code>v-for</code> 遍历</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Button 文档<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">"container"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">v-for</span>=<span class="string">"(&#123; ...component &#125;, index) in components"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">         &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">laby-card</span> <span class="attr">class</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; component.__sourceCodeTitle &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"component"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"markdown-body"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pre</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">v-if</span>=<span class="string">"visibility[index]"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">v-html</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                             Prism.highlight(</span></span></span><br><span class="line"><span class="tag"><span class="string">                             component.__sourceCode,</span></span></span><br><span class="line"><span class="tag"><span class="string">                             Prism.languages.html,</span></span></span><br><span class="line"><span class="tag"><span class="string">                             'html'</span></span></span><br><span class="line"><span class="tag"><span class="string">                             )</span></span></span><br><span class="line"><span class="tag"><span class="string">                             "</span></span></span><br><span class="line"><span class="tag">                     &gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"toggle"</span> @<span class="attr">click</span>=<span class="string">"toggle(index)"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">v-if</span>=<span class="string">"visibility[index]"</span>&gt;</span></span><br><span class="line">                    △</span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desp"</span>&gt;</span>隐藏代码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"open"</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">                    ▽</span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desp"</span>&gt;</span>显示代码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">laby-card</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">laby-table</span> <span class="attr">bordered</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span> <span class="attr">v-for</span>=<span class="string">"(head, index) in heads"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123; head.name &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(attribute, index) in attributes"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-for</span>=<span class="string">"key in keys"</span> <span class="attr">:key</span>=<span class="string">"key"</span> <span class="attr">v-html</span>=<span class="string">"attribute[key]"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">laby-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-17.png" alt="效果图"></p><h1 id="抽取公用显示"><a href="#抽取公用显示" class="headerlink" title="抽取公用显示"></a>抽取公用显示</h1><p>显然，每个组件文档页，都具有与 Button 组件文档页类似的结构</p><p>那么我们可以把这个结构抽取出来，然后按照需要进行引入</p><p>先抽取结构，我选择在 <code>src/views</code> 下新建 <code>Content.vue</code> 来承载这个结构</p><p>组件列表和参数表通过 <code>src/components/contents</code> 下的汇总来引入</p><p>引入后，根据字段名的不同，制作哈希表 <code>LabyMap</code></p><p>再要求用户传入参数 <code>props</code>，通过 <code>name</code> 来指定选择要显示哪个组件文档页，通过 <code>title</code> 来指示现在的组件文档页的标题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">// Content.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;div</span><br><span class="line">     class=&quot;container&quot;</span><br><span class="line">     v-for=&quot;(&#123; ...component &#125;, index) in components&quot;</span><br><span class="line">     :key=&quot;index&quot;</span><br><span class="line">     &gt;</span><br><span class="line">    &lt;laby-card class=&quot;example&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; component.__sourceCodeTitle &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;component :is=&quot;component&quot; /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;code class=&quot;markdown-body&quot;&gt;</span><br><span class="line">            &lt;pre</span><br><span class="line">                 v-if=&quot;visibility[index]&quot;</span><br><span class="line">                 v-html=&quot;</span><br><span class="line">                         Prism.highlight(</span><br><span class="line">                         component.__sourceCode,</span><br><span class="line">                         Prism.languages.html,</span><br><span class="line">                         &apos;html&apos;</span><br><span class="line">                         )</span><br><span class="line">                         &quot;</span><br><span class="line">                 &gt;&lt;/pre&gt;</span><br><span class="line">    &lt;/code&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button class=&quot;toggle&quot; @click=&quot;toggle(index)&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;close&quot; v-if=&quot;visibility[index]&quot;&gt;</span><br><span class="line">                △</span><br><span class="line">                &lt;span class=&quot;desp&quot;&gt;隐藏代码&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;open&quot; v-else&gt;</span><br><span class="line">                ▽</span><br><span class="line">                &lt;span class=&quot;desp&quot;&gt;显示代码&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;/laby-card&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;laby-table bordered&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th v-for=&quot;(head, index) in heads&quot; :key=&quot;index&quot;&gt;&#123;&#123; head.name &#125;&#125;&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr v-for=&quot;(attribute, index) in attributes&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;td v-for=&quot;key in keys&quot; :key=&quot;key&quot; v-html=&quot;attribute[key]&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">    &lt;/laby-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyButtons from &quot;../components/contents/Button&quot;;</span><br><span class="line">    import LabyCards from &quot;../components/contents/Card&quot;;</span><br><span class="line">    import LabyDialogs from &quot;../components/contents/Dialog&quot;;</span><br><span class="line">    import LabySwitchs from &quot;../components/contents/Switch&quot;;</span><br><span class="line">    import LabyTables from &quot;../components/contents/Table&quot;;</span><br><span class="line">    import LabyTabss from &quot;../components/contents/Tabs&quot;;</span><br><span class="line"></span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    import LabyCard from &quot;../lib/Card.vue&quot;;</span><br><span class="line">    import LabyTable from &quot;../lib/Table.vue&quot;;</span><br><span class="line">    import &quot;prismjs&quot;;</span><br><span class="line">    import &quot;prismjs/themes/prism.css&quot;;</span><br><span class="line"></span><br><span class="line">    const Prism = (window as any).Prism;</span><br><span class="line"></span><br><span class="line">    const LabyMap = &#123;</span><br><span class="line">        Button: LabyButtons,</span><br><span class="line">        Card: LabyCards,</span><br><span class="line">        Dialog: LabyDialogs,</span><br><span class="line">        Switch: LabySwitchs,</span><br><span class="line">        Table: LabyTables,</span><br><span class="line">        Tabs: LabyTabss,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">            name: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">                required: true,</span><br><span class="line">            &#125;,</span><br><span class="line">            title: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">                required: true,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            LabyCard,</span><br><span class="line">            LabyTable,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup(props) &#123;</span><br><span class="line">            const &#123; name, title &#125; = props;</span><br><span class="line">            const heads = [</span><br><span class="line">                &#123; name: &quot;参数&quot;, identifier: &quot;attr&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;含义&quot;, identifier: &quot;desp&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;类型&quot;, identifier: &quot;type&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;可选值&quot;, identifier: &quot;values&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;默认值&quot;, identifier: &quot;default&quot; &#125;,</span><br><span class="line">            ];</span><br><span class="line">            const keys = heads.map((item: any) =&gt; item.identifier);</span><br><span class="line"></span><br><span class="line">            const &#123; components, attributes &#125; = LabyMap[name];</span><br><span class="line">            const visibility = ref(components.map((item) =&gt; false));</span><br><span class="line">            const toggle = (index) =&gt; &#123;</span><br><span class="line">                visibility.value[index] = !visibility.value[index];</span><br><span class="line">            &#125;;</span><br><span class="line">            return &#123;</span><br><span class="line">                title,</span><br><span class="line">                Prism,</span><br><span class="line">                heads,</span><br><span class="line">                keys,</span><br><span class="line">                components,</span><br><span class="line">                attributes,</span><br><span class="line">                visibility,</span><br><span class="line">                toggle,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    $theme-color: #f3678e;</span><br><span class="line">    .container &#123;</span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            &gt; .example &gt; .toggle &gt; * &gt; .desp &#123;</span><br><span class="line">                display: inline;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &gt; .example &#123;</span><br><span class="line">            &gt; .toggle &#123;</span><br><span class="line">                display: block;</span><br><span class="line">                width: 100%;</span><br><span class="line">                height: 32px;</span><br><span class="line">                border: none;</span><br><span class="line">                transition: background-color 250ms;</span><br><span class="line">                outline: none;</span><br><span class="line">                &amp;:focus &#123;</span><br><span class="line">                    outline: none;</span><br><span class="line">                &#125;</span><br><span class="line">                background: white;</span><br><span class="line">                cursor: pointer;</span><br><span class="line">                &amp;:hover &#123;</span><br><span class="line">                    background: fade-out($theme-color, 0.95);</span><br><span class="line">                &#125;</span><br><span class="line">                &gt; * &gt; .desp &#123;</span><br><span class="line">                    display: none;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>同理可以抽取指南文档页的结构到 <code>src/views/Guidance.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// Guidance.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;article class=&quot;markdown-body&quot; v-html=&quot;md&quot;&gt;&lt;/article&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">            path: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">                required: true,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup(props) &#123;</span><br><span class="line">            const md = ref(null);</span><br><span class="line">            import(`../markdown/$&#123;props.path&#125;.md`).then(</span><br><span class="line">                (res) =&gt; (md.value = res.default)</span><br><span class="line">            );</span><br><span class="line">            return &#123; md &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后修改 <code>router.ts</code>，通过路由来传递参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createWebHistory, createRouter &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./views/Home.vue'</span></span><br><span class="line"><span class="keyword">import</span> Document <span class="keyword">from</span> <span class="string">'./views/Document.vue'</span></span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span> <span class="string">'./views/Content.vue'</span></span><br><span class="line"><span class="keyword">import</span> Guidance <span class="keyword">from</span> <span class="string">'./views/Guidance.vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; guidances, components &#125; <span class="keyword">from</span> <span class="string">'./Global'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> history = createWebHistory()</span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history,</span><br><span class="line">    routes: [</span><br><span class="line">        &#123; path: <span class="string">'/'</span>, component: Home &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/document'</span>, component: Document, children: [</span><br><span class="line">                &#123; path: <span class="string">''</span>, redirect: <span class="string">'/document/introduction'</span> &#125;,</span><br><span class="line">                &#123; path: <span class="string">'introduction'</span>, component: Guidance, props: guidances[<span class="string">'introduction'</span>] &#125;,</span><br><span class="line">                &#123; path: <span class="string">'install'</span>, component: Guidance, props: guidances[<span class="string">'install'</span>] &#125;,</span><br><span class="line">                &#123; path: <span class="string">'start'</span>, component: Guidance, props: guidances[<span class="string">'start'</span>] &#125;,</span><br><span class="line">                &#123; path: <span class="string">'button'</span>, component: Content, props: components[<span class="string">'Button'</span>] &#125;,</span><br><span class="line">                &#123; path: <span class="string">'card'</span>, component: Content, props: components[<span class="string">'Card'</span>] &#125;,</span><br><span class="line">                &#123; path: <span class="string">'dialog'</span>, component: Content, props: components[<span class="string">'Dialog'</span>] &#125;,</span><br><span class="line">                &#123; path: <span class="string">'switch'</span>, component: Content, props: components[<span class="string">'Switch'</span>] &#125;,</span><br><span class="line">                &#123; path: <span class="string">'table'</span>, component: Content, props: components[<span class="string">'Table'</span>] &#125;,</span><br><span class="line">                &#123; path: <span class="string">'tabs'</span>, component: Content, props: components[<span class="string">'Tabs'</span>] &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>现在，就可以删除 <code>src/component</code> 下，没有被引用的组件了</p><p>如无意外，现在该目录下，应该只有</p><ul><li>contents，文件夹</li><li>example，文件夹</li><li>Topnav.vue</li></ul><h1 id="精简-router"><a href="#精简-router" class="headerlink" title="精简 router"></a>精简 router</h1><p>这个 <code>router.ts</code> 看起来也还是很糟心，再优化一下吧</p><p>注意到重复的部分出现在 <code>children</code> 字段下，而该字段的值是个数组，每个数组项都是一个包含 3 个字段的对象</p><p>那么我们可以先定义这个对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.ts</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Route</span>(<span class="params">path, component, props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.path = path</span><br><span class="line">    <span class="keyword">this</span>.component = component</span><br><span class="line">    <span class="keyword">this</span>.props = props</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再观察指南的路由，和组件的路由，有如下规律</p><ol><li>指南的路由<ul><li>其 <code>path</code> 值集合，与 <code>Global.ts</code> 中的 <code>guidances</code> 对象的 <code>keys</code> 是一致的</li><li>其 <code>props</code> 中传入的键集合，与 <code>Global.ts</code> 中的 <code>guidances</code> 对象的 <code>keys</code> 是一致的</li></ul></li><li>组件的路由<ul><li>其 <code>path</code> 值集合，与 <code>Global.ts</code> 中的 <code>components</code> 对象的 <code>keys.toLowerCase</code> 是一致的</li><li>其 <code>props</code> 中传入的键集合，与 <code>Global.ts</code> 中的 <code>components</code> 对象的 <code>keys</code> 是一致的</li></ul></li></ol><p>那么容易得到指南路由的数组和组件路由的数组</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.ts</span></span><br><span class="line"><span class="keyword">const</span> guidancesRoutes = <span class="built_in">Object</span>.keys(guidances).map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Route(item, Guidance, guidances[item])</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> componentsRoutes = <span class="built_in">Object</span>.keys(components).map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Route(item.toLowerCase(), Content, components[item])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后在路由配置的 <code>children</code> 字段下，使用 spread 语法展开这两个数组即可</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.ts</span></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history,</span><br><span class="line">    routes: [</span><br><span class="line">        &#123; path: <span class="string">'/'</span>, component: Home &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/document'</span>, component: Document, children: [</span><br><span class="line">                &#123; path: <span class="string">''</span>, redirect: <span class="string">'/document/introduction'</span> &#125;,</span><br><span class="line">                ...guidancesRoutes,</span><br><span class="line">                ...componentsRoutes</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>好了，现在的代码，就几乎没有冗余，非常漂亮了</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本完工了，但是代码还是很丑，重复的地方过多&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-完善官网</title>
    <link href="https://ringoer.com/project/ui-framework-improve/"/>
    <id>https://ringoer.com/project/ui-framework-improve/</id>
    <published>2021-02-23T15:28:00.000Z</published>
    <updated>2021-02-24T09:54:40.169Z</updated>
    
    <content type="html"><![CDATA[<p>虽然现在官方文档基本快要完工了，但是也太难看了</p><p>让我们把它变得好看一些吧</p><a id="more"></a><hr><h1 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h1><p>如果用原生 html 慢慢写文档，也不太好控制排版了</p><p>我决定使用 md 来写文档</p><p>新建 <code>src/markdown</code> 目录，在里面新建 <code>install.md</code> 等三篇文档，然后写完整先</p><p>但是 vue 默认不支持 md，要想个办法让它支持</p><p>我们可以自己写一个插件，告诉 vue 如何识别 md 文件</p><p>这里直接给出插件代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugins/md.ts</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> marked <span class="keyword">from</span> <span class="string">'marked'</span></span><br><span class="line"><span class="keyword">const</span> mdToJs = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> content = <span class="built_in">JSON</span>.stringify(marked(str))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`export default <span class="subst">$&#123;content&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">md</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        configureServer: [</span><br><span class="line">            <span class="keyword">async</span> (&#123; app &#125;) =&gt; &#123;</span><br><span class="line">                app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ctx.path.endsWith(<span class="string">'.md'</span>)) &#123;</span><br><span class="line">                        ctx.type = <span class="string">'js'</span></span><br><span class="line">                        <span class="keyword">const</span> filePath = path.join(process.cwd(), ctx.path)</span><br><span class="line">                        ctx.body = mdToJs(fs.readFileSync(filePath).toString())</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">await</span> next()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        transforms: [&#123;</span><br><span class="line">            test: <span class="function"><span class="params">context</span> =&gt;</span> context.path.endsWith(<span class="string">'.md'</span>),</span><br><span class="line">            transform: <span class="function">(<span class="params">&#123; code &#125;</span>) =&gt;</span> mdToJs(code)</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以照抄，放在项目根目录下的 <code>plugins/md.ts</code> 就行</p><p>注意到，这个插件依赖 <code>marked</code> 这个 npm 库，记得先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install marked --save</span><br></pre></td></tr></table></figure><p>不然就会在试图 run 的时候一直报无法识别 md 文件的静态错误</p><p>然后也是在项目根目录下，新建文件 <code>vite.config.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; md &#125; <span class="keyword">from</span> <span class="string">"./plugins/md"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  plugins: [md()],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过在 vite 初始化的时候，导入额外的插件（我们自己写的 md 插件），来识别 markdown 文件</p><p>最后修改一下三篇文档的视图，以 <code>install.vue</code> 为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;article v-html=&quot;md&quot;&gt;&lt;/article&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        setup() &#123;</span><br><span class="line">            const md = ref(null);</span><br><span class="line">            import(&apos;../markdown/install.md&apos;).then((res) =&gt; (md.value = res.default));</span><br><span class="line">            return &#123; md &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>因为 vue 不能直接识别 md，所以不可以通过静态 import 来导入，只能通过动态 import</p><p>而动态 import 有以下两个特点</p><ol><li><p>是异步的，必须要使用有监听的对象，才能自动重渲染</p></li><li><p>取回的内容，根据 <code>export</code> 的字段而定</p><p>默认 <code>export default</code> 的情况下，就必须使用 <code>.default</code> 来取值才可以获得实际内容</p></li></ol><p>最后，使用 <code>v-html</code> 绑定到模板即可</p><h1 id="github-markdown-样式"><a href="#github-markdown-样式" class="headerlink" title="github markdown 样式"></a>github markdown 样式</h1><p>现在虽然正常引入 md 了，但是没有排版，还是丑</p><p>我们可以使用 <code>github-markdown-css</code> 这个库来获取样式表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install github-markdown-css --save</span><br></pre></td></tr></table></figure><p>安装完成后，在 <code>main.ts</code> 中引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'github-markdown-css'</span></span><br></pre></td></tr></table></figure><p>最后，找到放置文档的地方，赋予 <code>class=&quot;markdown-body&quot;</code> 即可适用 github markdown 样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">v-html</span>=<span class="string">"md"</span> <span class="attr">class</span>=<span class="string">"markdown-body"</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="多组样例"><a href="#多组样例" class="headerlink" title="多组样例"></a>多组样例</h1><p>一个 UI 库，每个组件不可能只有一个用例</p><p>所以我们要给每个组件都配多个用例，但是为了方便管理，不能写在一起</p><p>所以现在，新建 <code>src/components/examples</code>，然后把已有的几个组件样例都抽取为 <code>[componentName][index].example.vue</code>，再引入到文档页中</p><p>以 Button 为例，现在原本的 <code>src/components/Button.vue</code>，在原本之基础上新增了一个 <code>src/components/example/Button/Button1.example.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// src/components/example/Button/Button1.example.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;laby-button&gt;测试&lt;/laby-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyButton from &quot;../../../lib/Button.vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            LabyButton,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Button.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Button 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-card&gt;</span><br><span class="line">    &lt;Example /&gt;</span><br><span class="line">    &lt;/laby-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyCard from &quot;../lib/Card.vue&quot;;</span><br><span class="line"></span><br><span class="line">    import Example from &quot;./example/Button/Button1.example.vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Example,</span><br><span class="line">            LabyCard,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用我们制作好的 LabyCard 来充当容器</p><p>如上，把所有用例都拆分开</p><h1 id="展示代码"><a href="#展示代码" class="headerlink" title="展示代码"></a>展示代码</h1><p>好的 UI 库，不仅会给用户展示例，还会给出这个例子所使用的代码</p><p>可是怎么获得代码呢？</p><p>我们可以在 vite 初始化的时候做手脚——修改 <code>vite.config.ts</code> 即可</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="comment">// @ts-nocheck</span></span><br><span class="line"><span class="keyword">import</span> &#123; md &#125; <span class="keyword">from</span> <span class="string">"./plugins/md"</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> &#123; baseParse &#125; <span class="keyword">from</span> <span class="string">'@vue/compiler-core'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    plugins: [md()],</span><br><span class="line">    vueCustomBlockTransforms: &#123;</span><br><span class="line">        example: <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; code, path &#125; = options</span><br><span class="line">            <span class="keyword">const</span> file = fs.readFileSync(path).toString()</span><br><span class="line">            <span class="keyword">const</span> parsed = baseParse(file).children.find(<span class="function"><span class="params">n</span> =&gt;</span> n.tag === <span class="string">'example'</span>) <span class="comment">// 解析包含example标签的vue文件</span></span><br><span class="line">            <span class="keyword">const</span> title = parsed.children[<span class="number">0</span>].content</span><br><span class="line">            <span class="keyword">const</span> main = file.split(parsed.loc.source).join(<span class="string">''</span>).trim()</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`export default function (Component) &#123;</span></span><br><span class="line"><span class="string">Component.__sourceCode = <span class="subst">$&#123;JSON.stringify(main)</span></span></span><br><span class="line"><span class="string"><span class="subst">        &#125;</span></span></span><br><span class="line"><span class="string">Component.__sourceCodeTitle = <span class="subst">$&#123;JSON.stringify(title)&#125;</span></span></span><br><span class="line"><span class="string">&#125;`</span>.trim()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以使用如上代码，在 vite 初始化的时候，解析每个包含 <code>&lt;example&gt;</code> 标签的 vue 文件，将其 example 标签内的内容作为标题，其余部分作为源代码，附加到每个 vue 文件的 export 上</p><p>并且，因为我们不希望能被用户访问到，所以最好是使用双下划线开头的变量名，标识源代码和源代码之标题</p><p>注意，因为我们使用的是 typescript，在类型中可能不存在某字段的时候，会引发 ts 静态报错</p><p>可以通过 <code>// @ts-nocheck</code> 注释，来忽略静态报错</p><p>现在，我们就可以展示每个例子中的代码了</p><p>以 <code>src/component/Button.vue</code> 为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// src/component/Button.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Button 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-card&gt;</span><br><span class="line">    &lt;Example /&gt;</span><br><span class="line">    &lt;code&gt;</span><br><span class="line">        &lt;pre&gt;&#123;&#123; Example.__sourceCode &#125;&#125;&lt;/pre&gt;</span><br><span class="line">    &lt;/code&gt;</span><br><span class="line">    &lt;/laby-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyCard from &quot;../lib/Card.vue&quot;;</span><br><span class="line"></span><br><span class="line">    import Example from &quot;./example/Button/Button1.example.vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Example,</span><br><span class="line">            LabyCard,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            return &#123; Example &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>记得在 <code>setup</code> 中 return 一下，否则 component 和变量是不一样的，会访问到 undefined</p><p>然后，记得在 <code>src/component/example/Button/Button1.example.vue</code> 中，加入 example 标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">example</span>&gt;</span>基础用法<span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-12.png" alt="效果图"></p><p>然后再用上我们的 github 样式，变为这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// src/component/Button.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Button 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-card&gt;</span><br><span class="line">    &lt;Example /&gt;</span><br><span class="line">    &lt;code class=&quot;markdown-body&quot;&gt;</span><br><span class="line">        &lt;pre&gt;&#123;&#123; Example.__sourceCode &#125;&#125;&lt;/pre&gt;</span><br><span class="line">    &lt;/code&gt;</span><br><span class="line">    &lt;/laby-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyCard from &quot;../lib/Card.vue&quot;;</span><br><span class="line"></span><br><span class="line">    import Example from &quot;./example/Button/Button1.example.vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Example,</span><br><span class="line">            LabyCard,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            return &#123; Example &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-13.png" alt="效果图"></p><h1 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h1><p>但是代码黑乎乎的，还是丑</p><p>我们可以用 <code>prismjs</code> 库来获得代码高亮</p><p>先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install prismjs --save</span><br></pre></td></tr></table></figure><p>然后在需要使用的地方，分别引入 <code>prismjs</code> 和 <code>prismjs/themes/prism.css</code>，即可开始使用</p><p><code>prismjs</code>的工作原理，是构造一个对象，并绑定到 window 上，所以在模板中使用的时候，需要先获取 <code>window.Prism</code>，再在 <code>setup</code> 中 return 出去</p><p><code>Prism</code> 对象的一个用例如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Prism.highlight(</span><br><span class="line">    [sourceCode],</span><br><span class="line">    Prism.languages.html,</span><br><span class="line">    <span class="string">'html'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>该对象上提供一个名为 <code>highlight</code> 的方法，该方法要求传入 3 个参数，按顺序分别如下</p><ol><li>源代码</li><li>作为什么代码进行解析</li><li>作为什么代码进行显示（渲染）</li></ol><p>那么还是以 Button 为例，可得如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// src/component/Button.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Button 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-card&gt;</span><br><span class="line">    &lt;Example /&gt;</span><br><span class="line">    &lt;code class=&quot;markdown-body&quot;&gt;</span><br><span class="line">        &lt;pre</span><br><span class="line">             v-html=&quot;</span><br><span class="line">                     Prism.highlight(Example.__sourceCode, Prism.languages.html, &apos;html&apos;)</span><br><span class="line">                     &quot;</span><br><span class="line">             &gt;&lt;/pre&gt;</span><br><span class="line">    &lt;/code&gt;</span><br><span class="line">    &lt;/laby-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import &quot;prismjs&quot;;</span><br><span class="line">    import &quot;prismjs/themes/prism.css&quot;;</span><br><span class="line"></span><br><span class="line">    const Prism = (window as any).Prism;</span><br><span class="line"></span><br><span class="line">    import LabyCard from &quot;../lib/Card.vue&quot;;</span><br><span class="line"></span><br><span class="line">    import Example from &quot;./example/Button/Button1.example.vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Example,</span><br><span class="line">            LabyCard,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            return &#123; Example, Prism &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-14.png" alt="效果图"></p><p>照猫画虎，把每个例子都补上就行啦</p><h1 id="展开-收束代码"><a href="#展开-收束代码" class="headerlink" title="展开/收束代码"></a>展开/收束代码</h1><p>加个打开关闭的功能就可以了</p><p>以 Button 文档页为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Button 文档&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;laby-card class=&quot;example&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; Example.__sourceCodeTitle &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;Example /&gt;</span><br><span class="line">        &lt;code class=&quot;markdown-body&quot;&gt;</span><br><span class="line">            &lt;pre</span><br><span class="line">                 v-if=&quot;visibility&quot;</span><br><span class="line">                 v-html=&quot;</span><br><span class="line">                         Prism.highlight(Example.__sourceCode, Prism.languages.html, &apos;html&apos;)</span><br><span class="line">                         &quot;</span><br><span class="line">                 &gt;&lt;/pre&gt;</span><br><span class="line">    &lt;/code&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button class=&quot;toggle&quot; @click=&quot;toggle&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;close&quot; v-if=&quot;visibility&quot;&gt;</span><br><span class="line">                △</span><br><span class="line">                &lt;span class=&quot;desp&quot;&gt;隐藏代码&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;open&quot; v-else&gt;</span><br><span class="line">                ▽</span><br><span class="line">                &lt;span class=&quot;desp&quot;&gt;显示代码&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;/laby-card&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import &quot;prismjs&quot;;</span><br><span class="line">    import &quot;prismjs/themes/prism.css&quot;;</span><br><span class="line"></span><br><span class="line">    const Prism = (window as any).Prism;</span><br><span class="line"></span><br><span class="line">    import LabyCard from &quot;../lib/Card.vue&quot;;</span><br><span class="line"></span><br><span class="line">    import Example from &quot;./example/Button/Button1.example.vue&quot;;</span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Example,</span><br><span class="line">            LabyCard,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            const visibility = ref(false);</span><br><span class="line">            const toggle = (index) =&gt; &#123;</span><br><span class="line">                visibility.value = !visibility.value;</span><br><span class="line">            &#125;;</span><br><span class="line">            return &#123; Example, Prism, visibility, toggle &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>再补上 <code>显示代码</code> 这个功能的样式表就 ok 了</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$theme-color</span>: <span class="number">#f3678e</span>;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        &gt; <span class="selector-class">.example</span> &gt; <span class="selector-class">.toggle</span> &gt; * &gt; <span class="selector-class">.desp</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: inline;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.example</span> &#123;</span><br><span class="line">        &gt; <span class="selector-class">.toggle</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">            <span class="attribute">border</span>: none;</span><br><span class="line">            <span class="attribute">transition</span>: background-color <span class="number">250ms</span>;</span><br><span class="line">            <span class="attribute">outline</span>: none;</span><br><span class="line">            &amp;:focus &#123;</span><br><span class="line">                <span class="attribute">outline</span>: none;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attribute">background</span>: white;</span><br><span class="line">            <span class="attribute">cursor</span>: pointer;</span><br><span class="line">            &amp;:hover &#123;</span><br><span class="line">                <span class="attribute">background</span>: fade-out(<span class="variable">$theme-color</span>, <span class="number">0.95</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            &gt; * &gt; <span class="selector-class">.desp</span> &#123;</span><br><span class="line">                <span class="attribute">display</span>: none;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h1><p>用户光看样例，不知道参数代表什么含义，怎么可以</p><p>这里就可以用我们制作好的 Table 组件来展示样式表</p><p>引入 Table 组件，然后写好即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Button 文档&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;laby-card class=&quot;example&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; Example.__sourceCodeTitle &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;Example /&gt;</span><br><span class="line">        &lt;code class=&quot;markdown-body&quot;&gt;</span><br><span class="line">            &lt;pre</span><br><span class="line">                 v-if=&quot;visibility&quot;</span><br><span class="line">                 v-html=&quot;</span><br><span class="line">                         Prism.highlight(Example.__sourceCode, Prism.languages.html, &apos;html&apos;)</span><br><span class="line">                         &quot;</span><br><span class="line">                 &gt;&lt;/pre&gt;</span><br><span class="line">    &lt;/code&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button class=&quot;toggle&quot; @click=&quot;toggle&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;close&quot; v-if=&quot;visibility&quot;&gt;</span><br><span class="line">                △</span><br><span class="line">                &lt;span class=&quot;desp&quot;&gt;隐藏代码&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;open&quot; v-else&gt;</span><br><span class="line">                ▽</span><br><span class="line">                &lt;span class=&quot;desp&quot;&gt;显示代码&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;/laby-card&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;laby-table bordered&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th v-for=&quot;(head, index) in heads&quot; :key=&quot;index&quot;&gt;&#123;&#123; head.name &#125;&#125;&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr v-for=&quot;(attribute, index) in attributes&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;td v-for=&quot;key in keys&quot; :key=&quot;key&quot; v-html=&quot;attribute[key]&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">    &lt;/laby-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import &quot;prismjs&quot;;</span><br><span class="line">    import &quot;prismjs/themes/prism.css&quot;;</span><br><span class="line"></span><br><span class="line">    const Prism = (window as any).Prism;</span><br><span class="line"></span><br><span class="line">    import LabyCard from &quot;../lib/Card.vue&quot;;</span><br><span class="line">    import LabyTable from &quot;../lib/Table.vue&quot;;</span><br><span class="line"></span><br><span class="line">    import Example from &quot;./example/Button/Button1.example.vue&quot;;</span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Example,</span><br><span class="line">            LabyCard,</span><br><span class="line">            LabyTable,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            const visibility = ref(false);</span><br><span class="line">            const toggle = (index) =&gt; &#123;</span><br><span class="line">                visibility.value = !visibility.value;</span><br><span class="line">            &#125;;</span><br><span class="line">            const heads = [</span><br><span class="line">                &#123; name: &quot;参数&quot;, identifier: &quot;attr&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;含义&quot;, identifier: &quot;desp&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;类型&quot;, identifier: &quot;type&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;可选值&quot;, identifier: &quot;values&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;默认值&quot;, identifier: &quot;default&quot; &#125;,</span><br><span class="line">            ];</span><br><span class="line">            const keys = heads.map((item: any) =&gt; item.identifier);</span><br><span class="line">            const attributes = [</span><br><span class="line">                &#123;</span><br><span class="line">                    attr: &quot;level&quot;,</span><br><span class="line">                    desp: &quot;默认类型&quot;,</span><br><span class="line">                    type: &quot;string&quot;,</span><br><span class="line">                    values: &quot;default / plain / primary / success / info / warning / danger&quot;,</span><br><span class="line">                    default: &quot;default&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    attr: &quot;disabled&quot;,</span><br><span class="line">                    desp: &quot;是否禁用&quot;,</span><br><span class="line">                    type: &quot;boolean&quot;,</span><br><span class="line">                    values: &quot;false / true&quot;,</span><br><span class="line">                    default: &quot;false&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    attr: &quot;theme&quot;,</span><br><span class="line">                    desp: &quot;式样&quot;,</span><br><span class="line">                    type: &quot;string&quot;,</span><br><span class="line">                    values: &quot;button / link / text&quot;,</span><br><span class="line">                    default: &quot;button&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    attr: &quot;loding&quot;,</span><br><span class="line">                    desp: &quot;是否加载中&quot;,</span><br><span class="line">                    type: &quot;boolean&quot;,</span><br><span class="line">                    values: &quot;false / true&quot;,</span><br><span class="line">                    default: &quot;false&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    attr: &quot;size&quot;,</span><br><span class="line">                    desp: &quot;尺寸&quot;,</span><br><span class="line">                    type: &quot;string&quot;,</span><br><span class="line">                    values: &quot;middle / small / large&quot;,</span><br><span class="line">                    default: &quot;middle&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    attr: &quot;color&quot;,</span><br><span class="line">                    desp: &quot;颜色&quot;,</span><br><span class="line">                    type: &quot;string&quot;,</span><br><span class="line">                    values: &quot;任意合法颜色值&quot;,</span><br><span class="line">                    default: &quot;#f3678e&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">            ];</span><br><span class="line">            return &#123; Example, Prism, visibility, toggle, heads, keys, attributes &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    $theme-color: #f3678e;</span><br><span class="line">    .container &#123;</span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            &gt; .example &gt; .toggle &gt; * &gt; .desp &#123;</span><br><span class="line">                display: inline;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &gt; .example &#123;</span><br><span class="line">            &gt; .toggle &#123;</span><br><span class="line">                display: block;</span><br><span class="line">                width: 100%;</span><br><span class="line">                height: 32px;</span><br><span class="line">                border: none;</span><br><span class="line">                transition: background-color 250ms;</span><br><span class="line">                outline: none;</span><br><span class="line">                &amp;:focus &#123;</span><br><span class="line">                    outline: none;</span><br><span class="line">                &#125;</span><br><span class="line">                background: white;</span><br><span class="line">                cursor: pointer;</span><br><span class="line">                &amp;:hover &#123;</span><br><span class="line">                    background: fade-out($theme-color, 0.95);</span><br><span class="line">                &#125;</span><br><span class="line">                &gt; * &gt; .desp &#123;</span><br><span class="line">                    display: none;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-15.png" alt="效果图"></p><h1 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h1><p>因为用户使用你的库，不可能是从 <code>lib</code> 引用的，而是先 <code>npm install</code> 之后直接从 <code>node_modules</code> 引用，所以要像用户一样的使用，才可以尽可能发现用户使用中可能出现的 bug，提升用户体验</p><p>那么我们先要下载自己的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install laby-ui --save</span><br></pre></td></tr></table></figure><p>并在 <code>main.ts</code> 中引入样式表</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'laby-ui/lib/laby.css'</span></span><br></pre></td></tr></table></figure><p>然后修改每个例子中的引用</p><p>以 <code>Button1.example.vue</code> 为例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; LabyButton &#125; <span class="keyword">from</span> <span class="string">"laby-ui"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        LabyButton,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-16.png" alt="效果图"></p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然现在官方文档基本快要完工了，但是也太难看了&lt;/p&gt;
&lt;p&gt;让我们把它变得好看一些吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-打包发布</title>
    <link href="https://ringoer.com/project/ui-framework-rollup/"/>
    <id>https://ringoer.com/project/ui-framework-rollup/</id>
    <published>2021-02-23T12:09:00.000Z</published>
    <updated>2021-02-23T16:36:40.607Z</updated>
    
    <content type="html"><![CDATA[<p>组件库基本制作完成了，现在让我们发布它吧</p><a id="more"></a><hr><h1 id="整理组件库"><a href="#整理组件库" class="headerlink" title="整理组件库"></a>整理组件库</h1><h2 id="公用样式表"><a href="#公用样式表" class="headerlink" title="公用样式表"></a>公用样式表</h2><p>细心的朋友应该已经注意到了，前面我们在写组件的时候，css 类名都是 <code>laby-xxx</code> 这样的</p><p>所以我们可以用选择器来做到公用配置</p><p>在 <code>src/lib</code> 文件夹下，新建一个 scss 文件，或者 css 也行，2333</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[class^="laby-"]</span>,<span class="selector-attr">[class*=" laby-"]</span>* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: -apple-system, <span class="string">"Noto Sans"</span>, <span class="string">"Helvetica Neue"</span>, Helvetica,</span><br><span class="line">        <span class="string">"Nimbus Sans L"</span>, Arial, <span class="string">"Liberation Sans"</span>, <span class="string">"PingFang SC"</span>, <span class="string">"Hiragino Sans GB"</span>,</span><br><span class="line">        <span class="string">"Noto Sans CJK SC"</span>, <span class="string">"Source Han Sans SC"</span>, <span class="string">"Source Han Sans CN"</span>,</span><br><span class="line">        <span class="string">"Microsoft YaHei"</span>, <span class="string">"Wenquanyi Micro Hei"</span>, <span class="string">"WenQuanYi Zen Hei"</span>, <span class="string">"ST Heiti"</span>,</span><br><span class="line">        SimHei, <span class="string">"WenQuanYi Zen Hei Sharp"</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前缀改成你的项目标识就可以了</p><h2 id="统一入口"><a href="#统一入口" class="headerlink" title="统一入口"></a>统一入口</h2><p>我们还要告诉打包器，要暴露哪些内容</p><p>比如说创建一个 <code>index.ts</code>，然后汇总一下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> LabyButton <span class="keyword">from</span> <span class="string">'./Button.vue'</span></span><br><span class="line"><span class="keyword">import</span> LabyCard <span class="keyword">from</span> <span class="string">'./Card.vue'</span></span><br><span class="line"><span class="keyword">import</span> LabyDialog <span class="keyword">from</span> <span class="string">'./Dialog.vue'</span></span><br><span class="line"><span class="keyword">import</span> LabySwitch <span class="keyword">from</span> <span class="string">'./Switch.vue'</span></span><br><span class="line"><span class="keyword">import</span> LabyTable <span class="keyword">from</span> <span class="string">'./Table.vue'</span></span><br><span class="line"><span class="keyword">import</span> LabyTab <span class="keyword">from</span> <span class="string">'./Tab.vue'</span></span><br><span class="line"><span class="keyword">import</span> LabyTabs <span class="keyword">from</span> <span class="string">'./Tabs.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; LabyButton, LabyCard, LabyDialog, LabySwitch, LabyTable, LabyTab, LabyTabs, &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    install: <span class="function"><span class="params">Vue</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> components = [LabyButton, LabyCard, LabyDialog, LabySwitch, LabyTable, LabyTab, LabyTabs]</span><br><span class="line">        components.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            Vue.component(item.name, item)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，此处有一个 <code>install</code> 方法，因为用户有可能使用完整引入，此时必须提供一个 <code>install</code> 方法才可以完整引入</p><p>现在就可以使用下述方式完整引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> LabyUI <span class="keyword">from</span> <span class="string">'laby-ui-vue'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'laby-ui-vue/lib/laby.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line">app.use(LabyUI);</span><br><span class="line">app.mount(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure><p>然后上面另一句 <code>export</code> 是用于部分引入组件的，要想部分引入组件，必须在每个子组件中都定义 <code>install</code> 方法。一个示例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;laby-card&quot; :style=&quot;&#123; &apos;--color&apos;: color &#125;&quot;&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    declare const props: &#123;</span><br><span class="line">        color: string;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        install: function (Vue) &#123;</span><br><span class="line">            Vue.component(this.name, this);</span><br><span class="line">        &#125;,</span><br><span class="line">        name: &quot;LabyCard&quot;,</span><br><span class="line">        props: &#123;</span><br><span class="line">            color: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">                default: &quot;#fe9acf&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">    .laby-card &#123;</span><br><span class="line">        border-radius: 8px;</span><br><span class="line">        box-shadow: 0px 0px 10px 0px var(--color);</span><br><span class="line">        padding: 12px;</span><br><span class="line">        background: white;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>现在就可以使用下述方式部分引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LabyButton, LabyCard &#125; <span class="keyword">from</span> <span class="string">'laby-ui-vue'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'laby-ui-vue/lib/laby.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line">app.use(LabyButton);</span><br><span class="line">app.use(LabyCard);</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure><h1 id="注册-npm-账号"><a href="#注册-npm-账号" class="headerlink" title="注册 npm 账号"></a>注册 npm 账号</h1><p>显然是要发布到 npm</p><p>打开 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm 官网</a> 注册一个账号先</p><h1 id="配置-rollup-打包"><a href="#配置-rollup-打包" class="headerlink" title="配置 rollup 打包"></a>配置 rollup 打包</h1><p>vite 本身不能提供打包功能，需要我们手动配置</p><p>此处选用 rollup 进行打包</p><p>首先在项目根目录下新建文件 <code>rollup.config.js</code></p><p>各配置含义请参看注释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> esbuild <span class="keyword">from</span> <span class="string">'rollup-plugin-esbuild'</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">'rollup-plugin-vue'</span></span><br><span class="line"><span class="keyword">import</span> scss <span class="keyword">from</span> <span class="string">'rollup-plugin-scss'</span></span><br><span class="line"><span class="keyword">import</span> dartSass <span class="keyword">from</span> <span class="string">'sass'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; terser &#125; <span class="keyword">from</span> <span class="string">"rollup-plugin-terser"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input: <span class="string">'src/lib/index.ts'</span>, <span class="comment">// 主入口配置</span></span><br><span class="line">    output: [&#123;</span><br><span class="line">        globals: &#123;</span><br><span class="line">            vue: <span class="string">'Vue'</span>  <span class="comment">// 全局依赖</span></span><br><span class="line">        &#125;,</span><br><span class="line">        name: <span class="string">'Laby'</span>,  <span class="comment">// 项目名称</span></span><br><span class="line">        file: <span class="string">'lib/laby.js'</span>,  <span class="comment">// 输出文件名</span></span><br><span class="line">        format: <span class="string">'es'</span>,  <span class="comment">// 输出文件格式，使用 es module</span></span><br><span class="line">        plugins: [terser()]  <span class="comment">// 压缩文件大小</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        globals: &#123;</span><br><span class="line">            vue: <span class="string">'Vue'</span>  <span class="comment">// 全局依赖</span></span><br><span class="line">        &#125;,</span><br><span class="line">        name: <span class="string">'Laby'</span>,  <span class="comment">// 项目名称</span></span><br><span class="line">        file: <span class="string">'lib/laby.umd.js'</span>,  <span class="comment">// 输出文件名</span></span><br><span class="line">        format: <span class="string">'umd'</span>,  <span class="comment">// 输出文件格式，使用 umd</span></span><br><span class="line">        plugins: [terser()]  <span class="comment">// 压缩文件大小</span></span><br><span class="line">    &#125;,],</span><br><span class="line">    plugins: [</span><br><span class="line">        vue(&#123;</span><br><span class="line">            include: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        scss(&#123; <span class="attr">include</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">sass</span>: dartSass &#125;),</span><br><span class="line">        esbuild(&#123;</span><br><span class="line">            include: <span class="regexp">/\.[jt]s$/</span>,</span><br><span class="line">            minify: process.env.NODE_ENV === <span class="string">'production'</span>,</span><br><span class="line">            target: <span class="string">'es2015'</span>  <span class="comment">// 降格为 es6 语法</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，rollup 依赖至少 5 个包</p><ol><li>sass</li><li>rollup-plugin-esbuild</li><li>rollup-plugin-vue</li><li>rollup-plugin-scss</li><li>rollup-plugin-terser</li></ol><p>我们需要先下载它们</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install sass -D</span><br><span class="line">npm install rollup-plugin-esbuild -D</span><br><span class="line">npm install rollup-plugin-vue -D</span><br><span class="line">npm install rollup-plugin-scss -D</span><br><span class="line">npm install rollup-plugin-terser -D</span><br></pre></td></tr></table></figure><p>下载完后，请注意检查一下 <code>package.json</code>，看看上述依赖是不是都在 <code>devDependencies</code> 下，若不是，请移动到该字段下</p><h1 id="进行打包"><a href="#进行打包" class="headerlink" title="进行打包"></a>进行打包</h1><p>现在可以进行打包了</p><p>在项目根目录运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollup -c</span><br></pre></td></tr></table></figure><p>运行完毕后，会在项目根目录下看到一个新文件夹 <code>lib</code></p><p>里面应该有三个文件</p><ul><li>laby.css</li><li>laby.js</li><li>laby.umd.js</li></ul><h1 id="发布到-npm"><a href="#发布到-npm" class="headerlink" title="发布到 npm"></a>发布到 npm</h1><p>先回到项目根目录，然后打开 <code>package.json</code></p><p>向该文件中添加 <code>files</code> 和 <code>main</code> 字段，用于配置组件库的所在地和默认文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"laby-ui"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"files"</span>: [</span><br><span class="line">    <span class="string">"lib/*"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"lib/laby.js"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发布到 npm 时，发布的项目名取决于该配置中的 <code>name</code> 字段，发布的版本号取决于该配置中的 <code>version</code> 字段</p><p>注意，每次发布时，发布的新版本号不得低于该项目以前发布过的任意版本号</p><p>然后在项目根目录下运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><p>登录上你刚才在 npm 注册的账号</p><p>注意，此处必须使用 npm 源，taobao 源是不能登上 npm 账号的</p><p>然后运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>就可以发布包到 npm 了</p><p>如果你的包名已经被别人发布过，那么这一步会失败，回头修改你的包名吧</p><p>如果发布错了，可以删除这个包，但是要求是 72 小时内，这里不教了，反正是 unpublish</p><p>发布后可能会有延迟，等待 10 分钟左右应该就可以了</p><p>此时通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install laby-ui</span><br></pre></td></tr></table></figure><p>就可以下载到你新发布的包了</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;组件库基本制作完成了，现在让我们发布它吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-Card 组件</title>
    <link href="https://ringoer.com/project/ui-framework-card/"/>
    <id>https://ringoer.com/project/ui-framework-card/</id>
    <published>2021-02-23T10:40:00.000Z</published>
    <updated>2021-02-23T10:47:46.212Z</updated>
    
    <content type="html"><![CDATA[<p>最后，制作一下在展示的时候，用来区分各个用例的 <code>Card</code> 组件</p><a id="more"></a><hr><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>惯例先行需求分析</p><ol><li>应当允许用户自定义内容</li><li>可以自定义颜色</li></ol><p>那么可以整理出以下参数表格</p><table><thead><tr><th>参数</th><th>含义</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>color</td><td>颜色</td><td>string</td><td>任意合法颜色值</td><td>#fe9acf</td></tr></tbody></table><h1 id="骨架"><a href="#骨架" class="headerlink" title="骨架"></a>骨架</h1><p>容易得到如下骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-card"</span> <span class="attr">:style</span>=<span class="string">"&#123; '--color': color &#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>先 ts 声明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> props: &#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后在 <code>export default</code> 中，写入我们的参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"LabyCard"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        color: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"#fe9acf"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h1><p>然后补全样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.laby-card</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">0px</span> var(--color);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>引入文档页看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Card.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Card 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-card color=&quot;#999&quot;&gt;一些可能存在的卡片内容&lt;/laby-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyCard from &quot;../lib/Card.vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            LabyCard,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-11.png" alt="效果图"></p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最后，制作一下在展示的时候，用来区分各个用例的 &lt;code&gt;Card&lt;/code&gt; 组件&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-Tabs 组件</title>
    <link href="https://ringoer.com/project/ui-framework-tabs/"/>
    <id>https://ringoer.com/project/ui-framework-tabs/</id>
    <published>2021-02-23T10:08:00.000Z</published>
    <updated>2021-02-23T10:39:17.916Z</updated>
    
    <content type="html"><![CDATA[<p>大多数网站都有的标签页</p><a id="more"></a><hr><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>惯例先行需求分析</p><ol><li>可以选择标签页排列的方向</li><li>选中的标签页应当有下划线显示</li><li>切换选中时，下划线应当有动画效果</li><li>应当允许更换颜色</li></ol><p>那么可以整理出以下参数表格</p><table><thead><tr><th>参数</th><th>含义</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>direction</td><td>方向</td><td>string</td><td>row / column</td><td>row</td></tr><tr><td>selected</td><td>默认选中</td><td>string</td><td>子项的 name</td><td>必填</td></tr><tr><td>color</td><td>颜色</td><td>string</td><td>任意合法颜色值</td><td>#f3678e</td></tr></tbody></table><p>通过为子项设置 <code>name</code> 属性，来指定默认值</p><h1 id="骨架"><a href="#骨架" class="headerlink" title="骨架"></a>骨架</h1><h2 id="本体"><a href="#本体" class="headerlink" title="本体"></a>本体</h2><p>容易得到如下骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">"laby-tabs"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">:style</span>=<span class="string">"&#123; '--color': color &#125;"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">ref</span>=<span class="string">"container"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">:direction</span>=<span class="string">"direction"</span></span></span><br><span class="line"><span class="tag">         &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-tabs-titles"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">v-for</span>=<span class="string">"(title, index) in titles"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">"laby-tabs-title"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">:class</span>=<span class="string">"&#123; selected: names[index] === selected &#125;"</span></span></span><br><span class="line"><span class="tag">                    @<span class="attr">click</span>=<span class="string">"select(index)"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">:ref</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                          (el) =&gt; &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                          if (names[index] === selected) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                          selectedItem = el;</span></span></span><br><span class="line"><span class="tag"><span class="string">                          &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">                          &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">                          "</span></span></span><br><span class="line"><span class="tag">                    &gt;</span></span><br><span class="line">                &#123;&#123; title &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-tabs-indicator"</span> <span class="attr">ref</span>=<span class="string">"indicator"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-tabs-divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-tabs-content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"content"</span> <span class="attr">:key</span>=<span class="string">"selected"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用一个单独的 <code>div</code> 来充当下划线，并且使用一个新的 <code>component</code> 来显示用户输入的内容</p><p>那么既然标签页叫做 <code>Tabs</code>，那我们就新建一个 <code>Tab</code>，命名为标签，用来当做子组件吧</p><h2 id="子组件-Tab"><a href="#子组件-Tab" class="headerlink" title="子组件 Tab"></a>子组件 Tab</h2><p>容易得到骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显然只有一个参数，就是标题，所以有如下 script</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> props: &#123;</span><br><span class="line">    title: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"LabyTab"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"标签页"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>先 ts 声明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> props: &#123;</span><br><span class="line">    direction?: <span class="string">"row"</span> | <span class="string">"column"</span>;</span><br><span class="line">    selected: <span class="built_in">String</span>;</span><br><span class="line">    color: <span class="built_in">String</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> context: SetupContext;</span><br></pre></td></tr></table></figure><p>然后在 <code>export default</code> 中，写入我们的参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"LabyTabs"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        direction: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"row"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        selected: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            required: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        color: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"#f3678e"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再补全 <code>setup</code> 方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">if</span> (![<span class="string">"row"</span>, <span class="string">"column"</span>].includes(props.direction)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"错误的方向"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> container = ref&lt;HTMLDivElement&gt;(<span class="literal">null</span>); <span class="comment">// 获取容器</span></span><br><span class="line">    <span class="keyword">const</span> selectedItem = ref&lt;HTMLButtonElement&gt;(<span class="literal">null</span>); <span class="comment">// 获取选中项</span></span><br><span class="line">    <span class="keyword">const</span> indicator = ref&lt;HTMLDivElement&gt;(<span class="literal">null</span>); <span class="comment">// 获取下划线</span></span><br><span class="line">    <span class="keyword">const</span> slots = context.slots.default(); <span class="comment">// 通过上下文的slots属性，获得具体内容</span></span><br><span class="line">    slots.forEach(<span class="function">(<span class="params">slot</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (slot.type !== LabyTab) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"一级子标签必须是 LabyTab"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!slot.props) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"存在 LabyTab 属性列为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="string">"title"</span> <span class="keyword">in</span> slot.props)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"LabyTab 缺少属性 title"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="string">"name"</span> <span class="keyword">in</span> slot.props)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"LabyTab 缺少属性 name"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> titles = slots.map(<span class="function">(<span class="params">slot</span>) =&gt;</span> slot.props.title);</span><br><span class="line">    <span class="keyword">const</span> names = slots.map(<span class="function">(<span class="params">slot</span>) =&gt;</span> slot.props.name);</span><br><span class="line">    <span class="keyword">if</span> (!names.includes(props.selected)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"指定了不存在的 selected 值"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> content = computed(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">                             slots.find(<span class="function">(<span class="params">slot</span>) =&gt;</span> slot.props.name === props.selected)</span><br><span class="line">                            ); <span class="comment">// 设置当前显示的内容</span></span><br><span class="line">    onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        watchEffect(</span><br><span class="line">            () =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (props.direction === <span class="string">"row"</span>) &#123;</span><br><span class="line">                    <span class="keyword">const</span> &#123; height &#125; = selectedItem.value.getBoundingClientRect();</span><br><span class="line">                    indicator.value.style.top = height + <span class="string">"px"</span>;</span><br><span class="line">                    <span class="keyword">const</span> &#123; width &#125; = selectedItem.value.getBoundingClientRect();</span><br><span class="line">                    indicator.value.style.width = width + <span class="string">"px"</span>;</span><br><span class="line">                    <span class="keyword">const</span> left1 = container.value.getBoundingClientRect().left;</span><br><span class="line">                    <span class="keyword">const</span> left2 = selectedItem.value.getBoundingClientRect().left;</span><br><span class="line">                    <span class="keyword">const</span> left = left2 - left1;</span><br><span class="line">                    indicator.value.style.left = left + <span class="string">"px"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> &#123; height &#125; = selectedItem.value.getBoundingClientRect();</span><br><span class="line">                    indicator.value.style.height = height + <span class="string">"px"</span>;</span><br><span class="line">                    <span class="keyword">const</span> &#123; width &#125; = selectedItem.value.getBoundingClientRect();</span><br><span class="line">                    indicator.value.style.left = width + <span class="string">"px"</span>;</span><br><span class="line">                    <span class="keyword">const</span> top1 = container.value.getBoundingClientRect().top;</span><br><span class="line">                    <span class="keyword">const</span> top2 = selectedItem.value.getBoundingClientRect().top;</span><br><span class="line">                    <span class="keyword">const</span> top = top2 - top1;</span><br><span class="line">                    indicator.value.style.top = top + <span class="string">"px"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123; flush: <span class="string">"post"</span> &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;); <span class="comment">// 设置监听，用来修改下划线的位置</span></span><br><span class="line">    <span class="comment">// 注意watchEffect的第二个参数，默认是pre，会导致变化发生在渲染之前，导致下划线错位</span></span><br><span class="line">    <span class="keyword">const</span> select = <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">        context.emit(<span class="string">"update:selected"</span>, names[index]);</span><br><span class="line">    &#125;; <span class="comment">// 选择新的标签</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        container,</span><br><span class="line">        selectedItem,</span><br><span class="line">        indicator,</span><br><span class="line">        slots,</span><br><span class="line">        titles,</span><br><span class="line">        names,</span><br><span class="line">        content,</span><br><span class="line">        select,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，除了定义之外，还附加了很多验证，详情见注释</p><h1 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h1><p>然后补全样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$theme-color</span>: var(--color);</span><br><span class="line"><span class="selector-class">.laby-tabs</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    &amp;-titles &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;-<span class="selector-tag">title</span> &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">6px</span>;</span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        <span class="attribute">outline</span>: none;</span><br><span class="line">        <span class="attribute">background</span>: white;</span><br><span class="line">        &amp;:focus &#123;</span><br><span class="line">            <span class="attribute">outline</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="variable">$theme-color</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &amp;<span class="selector-class">.selected</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="variable">$theme-color</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;-indicator &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">transition</span>: all <span class="number">250ms</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">$theme-color</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;-divider &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid rgb(<span class="number">184</span>, <span class="number">184</span>, <span class="number">184</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;-<span class="attribute">content</span> &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">4px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-tabs</span><span class="selector-attr">[direction="column"]</span> &#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    &gt; <span class="selector-class">.laby-tabs-titles</span> &#123;</span><br><span class="line">        <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.laby-tabs-content</span> &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>引入文档页看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Tabs.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Tabs 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-tabs v-model:selected=&quot;selected&quot; direction=&quot;column&quot; color=&quot;blue&quot;&gt;</span><br><span class="line">    &lt;laby-tab title=&quot;标签页1&quot; name=&quot;first&quot;&gt; 我是第一页的内容 &lt;/laby-tab&gt;</span><br><span class="line">    &lt;laby-tab title=&quot;标签页2&quot; name=&quot;second&quot;&gt; 我是第二页的内容 &lt;/laby-tab&gt;</span><br><span class="line">    &lt;/laby-tabs&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyTab from &quot;../lib/Tab.vue&quot;;</span><br><span class="line">    import LabyTabs from &quot;../lib/Tabs.vue&quot;;</span><br><span class="line"></span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            LabyTab,</span><br><span class="line">            LabyTabs,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            const selected = ref(&quot;first&quot;);</span><br><span class="line">            return &#123; selected &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-10.png" alt="效果图"></p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大多数网站都有的标签页&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-Table 组件</title>
    <link href="https://ringoer.com/project/ui-framework-table/"/>
    <id>https://ringoer.com/project/ui-framework-table/</id>
    <published>2021-02-23T09:08:00.000Z</published>
    <updated>2021-02-23T10:39:29.328Z</updated>
    
    <content type="html"><![CDATA[<p>自定义表格也是非常香的</p><a id="more"></a><hr><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>惯例先行需求分析</p><ol><li>基于原生 <code>table</code> 标签的强语义</li><li>允许用户自定义表头、表体</li><li>可选是否具有边框</li></ol><p>那么可以整理出以下参数表格</p><table><thead><tr><th>参数</th><th>含义</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>heads</td><td>表头</td><td>Array</td><td>数组，每一项包含两个 string 字段：name、identifier</td><td>必填</td></tr><tr><td>datas</td><td>表数据</td><td>Array</td><td>数组，每一项包含与 heads 相同数量的 string 字段</td><td>必填</td></tr><tr><td>bordered</td><td>是否有边框</td><td>boolean</td><td>false / true</td><td>false</td></tr></tbody></table><h1 id="骨架"><a href="#骨架" class="headerlink" title="骨架"></a>骨架</h1><p>容易得到如下骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"laby-table"</span> <span class="attr">:bordered</span>=<span class="string">"bordered"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>让用户自己填写内容即可</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>先 ts 声明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> props: &#123;</span><br><span class="line">    bordered: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后在 <code>export default</code> 中，写入我们的参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"LabyTable"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        bordered: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h1><p>然后补全样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.laby-table</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="selector-tag">th</span>,</span><br><span class="line">    <span class="selector-tag">td</span> &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">tbody</span> &#123;</span><br><span class="line">        &gt; <span class="selector-tag">tr</span> &#123;</span><br><span class="line">            <span class="attribute">transition</span>: background-color <span class="number">250ms</span>;</span><br><span class="line">            &amp;:nth-child(even) &#123;</span><br><span class="line">                <span class="attribute">background</span>: rgb(<span class="number">247</span>, <span class="number">247</span>, <span class="number">247</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;:hover &#123;</span><br><span class="line">                <span class="attribute">background</span>: <span class="number">#ffeaf4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-table</span><span class="selector-attr">[bordered="true"]</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid rgb(<span class="number">235</span>, <span class="number">235</span>, <span class="number">235</span>);</span><br><span class="line">    <span class="selector-tag">tr</span>,</span><br><span class="line">    <span class="selector-tag">th</span>,</span><br><span class="line">    <span class="selector-tag">td</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid rgb(<span class="number">235</span>, <span class="number">235</span>, <span class="number">235</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，当设置属性 <code>bordered</code> 的时候，因为它不是 DOM 元素本有的属性，所以无论什么情况都会被添加，只不过值可能是 false</p><p>但是 <code>disabled</code> 属性就没有这个问题，它为 false 值时不会绑定到 DOM 元素上</p><p>所以，此处属性选择器要写 <code>[bordered=&quot;true&quot;]</code></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>引入文档页看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Dialog.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Table 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-table bordered&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th v-for=&quot;(head, index) in heads&quot; :key=&quot;index&quot;&gt;&#123;&#123; head.name &#125;&#125;&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;其余操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr v-for=&quot;(data, index) in datas&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;td v-for=&quot;key in keys&quot; :key=&quot;key&quot; v-html=&quot;data[key]&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;laby-button @click=&quot;del(index)&quot;&gt;删除&lt;/laby-button&gt;</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">    &lt;/laby-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyButton from &quot;../lib/Button.vue&quot;;</span><br><span class="line">    import LabyTable from &quot;../lib/Table.vue&quot;;</span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            LabyTable,</span><br><span class="line">            LabyButton,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            const heads = ref([</span><br><span class="line">                &#123; name: &quot;参数&quot;, identifier: &quot;attr&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;类型&quot;, identifier: &quot;type&quot; &#125;,</span><br><span class="line">            ]);</span><br><span class="line">            const keys = heads.value.map((item: any) =&gt; item.identifier);</span><br><span class="line">            const datas = ref([</span><br><span class="line">                &#123; attr: &quot;level&quot;, type: &quot;string&quot; &#125;,</span><br><span class="line">                &#123; attr: &quot;size&quot;, type: &quot;string&quot; &#125;,</span><br><span class="line">                &#123; attr: &quot;loading&quot;, type: &quot;boolean&quot; &#125;,</span><br><span class="line">            ]);</span><br><span class="line">            const del = (index) =&gt; &#123;</span><br><span class="line">                datas.value = datas.value.filter((item, i) =&gt; i != index);</span><br><span class="line">            &#125;;</span><br><span class="line">            return &#123; heads, keys, datas, del &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-9.png" alt="效果图"></p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自定义表格也是非常香的&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-Switch 组件</title>
    <link href="https://ringoer.com/project/ui-framework-switch/"/>
    <id>https://ringoer.com/project/ui-framework-switch/</id>
    <published>2021-02-23T08:06:00.000Z</published>
    <updated>2021-02-23T10:39:06.108Z</updated>
    
    <content type="html"><![CDATA[<p>很常用的开关组件</p><a id="more"></a><hr><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>惯例先行需求分析</p><ol><li>分为选中/未被选中，两种状态</li><li>可以通过点击变更选中状态</li><li>不同的选中状态有不同的颜色，且有滑块处于不同的端</li><li>可以指定不同的尺寸</li><li>可以自定义颜色</li><li>可以设置为禁用</li></ol><p>那么可以整理出以下参数表格</p><table><thead><tr><th>参数</th><th>含义</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>value</td><td>默认选择状态</td><td>boolean</td><td>false / true</td><td>false</td></tr><tr><td>size</td><td>尺寸</td><td>string</td><td>middle / small / large</td><td>middle</td></tr><tr><td>color</td><td>颜色</td><td>string</td><td>任意合法颜色值</td><td>#f3678e</td></tr><tr><td>disabled</td><td>是否禁用</td><td>boolean</td><td>false / true</td><td>false</td></tr></tbody></table><h1 id="骨架"><a href="#骨架" class="headerlink" title="骨架"></a>骨架</h1><p>因为具有和 <code>button</code> 标签一样的”点击”之功能，所以可以直接使用 <code>button</code> 标签来实现</p><p>然后用一个 <code>div</code> 来充当滑块</p><p>容易得到如下骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">"toggle"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"laby-swicth"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:class</span>=<span class="string">"&#123; active: value &#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:size</span>=<span class="string">"size"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:style</span>=<span class="string">"&#123; '--color': color &#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:disabled</span>=<span class="string">"disabled"</span></span></span><br><span class="line"><span class="tag">            &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>先 ts 声明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> props: &#123;</span><br><span class="line">    value: <span class="built_in">boolean</span>;</span><br><span class="line">    size?: <span class="string">"middle"</span> | <span class="string">"small"</span> | <span class="string">"large"</span>;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">    disabled: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> context: SetupContext;</span><br></pre></td></tr></table></figure><p>然后在 <code>export default</code> 中，写入我们的参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"LabySwitch"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        value: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        size: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"middle"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        color: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"#f3678e"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        disabled: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再补全 <code>setup</code> 方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> toggle = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        context.emit(<span class="string">"update:value"</span>, !props.value);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; toggle &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h1><p>然后补全样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> layout(<span class="variable">$r</span>, <span class="variable">$d</span>) &#123;</span><br><span class="line">    <span class="variable">$r2</span>: <span class="variable">$r</span> - <span class="variable">$d</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#adadad</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">transition</span>: background-color <span class="number">250ms</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    :focus &#123;</span><br><span class="line">        <span class="attribute">outline</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">background</span>: white;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">transition</span>: left <span class="number">250ms</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="variable">$r2</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="variable">$r2</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="variable">$d</span>/<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="variable">$d</span>/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">$r</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$r</span> * <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="variable">$r</span> / <span class="number">2</span>;</span><br><span class="line">    &amp;<span class="selector-class">.active</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: var(--color);</span><br><span class="line">        &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">left</span>: calc(<span class="number">100%</span> - #&#123;<span class="variable">$r2</span>&#125; - #&#123;<span class="variable">$d</span>/<span class="number">2</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$r</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="variable">$d</span>: <span class="number">4px</span>;</span><br><span class="line"><span class="selector-class">.laby-swicth</span><span class="selector-attr">[size="small"]</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$r</span>, <span class="variable">$d</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-swicth</span><span class="selector-attr">[size="middle"]</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$r</span> * 1.5, <span class="variable">$d</span> * 1.5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-swicth</span><span class="selector-attr">[size="large"]</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$r</span> * 2, <span class="variable">$d</span> * 2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-swicth</span><span class="selector-attr">[disabled]</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>引入文档页看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Switch.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;Switch 文档&lt;/div&gt;</span><br><span class="line">  &lt;laby-switch v-model:value=&quot;isActive&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import LabySwitch from &quot;../lib/Switch.vue&quot;;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    LabySwitch,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const isActive = ref(false);</span><br><span class="line">    return &#123; isActive &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-8.png" alt="效果图"></p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很常用的开关组件&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-Dialog 组件</title>
    <link href="https://ringoer.com/project/ui-framework-dialog/"/>
    <id>https://ringoer.com/project/ui-framework-dialog/</id>
    <published>2021-02-23T07:07:00.000Z</published>
    <updated>2021-02-23T10:38:49.184Z</updated>
    
    <content type="html"><![CDATA[<p>做好了 Button，知道有遮罩层这么一回事，就可以做 Dialog 组件了</p><a id="more"></a><hr><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>惯例先行需求分析</p><ol><li>默认是不可见的，在用户触发某个动作后变为可见</li><li>自带白板卡片，分为上中下三个区域，分别放置标题、内容、操作</li><li>有两个基本操作：确定、取消</li><li>卡片后应放置淡黑色遮罩层，遮住原本网页内容</li><li>可以自定义是否允许取消</li><li>右上角提供小叉叉来允许关闭</li><li>允许通过点击遮罩层来关闭</li></ol><p>那么可以整理出以下参数表格</p><table><thead><tr><th>参数</th><th>含义</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>visible</td><td>是否可见</td><td>boolean</td><td>false / true</td><td>false</td></tr><tr><td>title</td><td>标题</td><td>string</td><td>任意字符串</td><td>必填</td></tr><tr><td>ok</td><td>确定回调</td><td>()=&gt;boolean</td><td>返回 boolean 的函数</td><td>()=&gt;true</td></tr><tr><td>cancel</td><td>取消回调</td><td>()=&gt;boolean</td><td>返回 boolean 的函数</td><td>()=&gt;true</td></tr></tbody></table><p>第 3 条，可以通过设置返回值为 true 来允许事件发生，反之不允许</p><p>第 5 条，可以通过设置返回 false 来取消事件</p><p>第 6/7 条，直接与取消功能共用函数即可</p><h1 id="骨架"><a href="#骨架" class="headerlink" title="骨架"></a>骨架</h1><p>可以复用已经制作好的 <code>Button</code> 组件</p><p>容易得到如下骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"visible"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-dialog-overlay"</span> @<span class="attr">click</span>=<span class="string">"close"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-dialog"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"laby-dialog-header"</span>&gt;</span></span><br><span class="line">                &#123;&#123; title &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"laby-dialog-close"</span> @<span class="attr">click</span>=<span class="string">"close"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-dialog-divider"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"laby-dialog-main"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-dialog-divider"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"laby-dialog-footer"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">laby-button</span> <span class="attr">level</span>=<span class="string">"plain"</span> @<span class="attr">click</span>=<span class="string">"close"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">laby-button</span>&gt;</span></span><br><span class="line">                &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                <span class="tag">&lt;<span class="name">laby-button</span> @<span class="attr">click</span>=<span class="string">"task"</span> <span class="attr">:loading</span>=<span class="string">"loading"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">laby-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是我们一般不希望对话框弹窗在 DOM 树上的位置是非常下级的元素的子元素，而希望是 <code>body</code> 的直接子元素，那么我们可以使用 vue3 的 <code>teleport</code> 组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"visible"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-dialog-overlay"</span> @<span class="attr">click</span>=<span class="string">"close"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-dialog"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"laby-dialog-header"</span>&gt;</span></span><br><span class="line">                    &#123;&#123; title &#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"laby-dialog-close"</span> @<span class="attr">click</span>=<span class="string">"close"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-dialog-divider"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"laby-dialog-main"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-dialog-divider"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"laby-dialog-footer"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">laby-button</span> <span class="attr">level</span>=<span class="string">"plain"</span> @<span class="attr">click</span>=<span class="string">"close"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">laby-button</span>&gt;</span></span><br><span class="line">                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">laby-button</span> @<span class="attr">click</span>=<span class="string">"task"</span> <span class="attr">:loading</span>=<span class="string">"loading"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">laby-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，在渲染时，<code>teleport</code> 内部的内容就会出现在 <code>body</code> 的子级</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>先 ts 声明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> props: &#123;</span><br><span class="line">  visible: <span class="built_in">boolean</span>;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">  ok: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line">  cancel: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> context: SetupContext;</span><br></pre></td></tr></table></figure><p>然后在 <code>export default</code> 中，写入我们的参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"LabyDialog"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        visible: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        title: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            required: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        ok: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Function</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        cancel: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Function</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        LabyButton,</span><br><span class="line">    &#125;,</span><br><span class="line">    setup()&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再补全 <code>setup</code> 方法，此处选用 Promise 制造提交等待响应的感觉</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> loading = ref(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">const</span> close = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (loading.value) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(props.cancel());</span><br><span class="line">        &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (result !== <span class="literal">false</span>) &#123;</span><br><span class="line">                context.emit(<span class="string">"update:visible"</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> task = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            loading.value = <span class="literal">true</span>;</span><br><span class="line">            resolve(props.ok());</span><br><span class="line">        &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (result === <span class="literal">true</span>) &#123;</span><br><span class="line">                loading.value = <span class="literal">false</span>;</span><br><span class="line">                context.emit(<span class="string">"update:visible"</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; loading, close, task &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h1><p>然后补全样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.laby-dialog-overlay</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: fade-out(<span class="variable">$color</span>: <span class="number">#000000</span>, <span class="variable">$amount</span>: <span class="number">0.7</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-dialog</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    &gt; * &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.laby-dialog-divider</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ffb5dc</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.laby-dialog-header</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">        &gt; <span class="selector-class">.laby-dialog-close</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">display</span>: inline-block;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">cursor</span>: pointer;</span><br><span class="line">            &amp;::before,</span><br><span class="line">            &amp;::after &#123;</span><br><span class="line">                <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">                <span class="attribute">position</span>: absolute;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">                <span class="attribute">background</span>: black;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">                <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">                <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;::before &#123;</span><br><span class="line">                <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>) rotate(-<span class="number">45deg</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;::after &#123;</span><br><span class="line">                <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>) rotate(<span class="number">45deg</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.laby-dialog-main</span> &#123;</span><br><span class="line">        <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">background</span>: white;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.laby-dialog-footer</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>引入文档页看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Dialog.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Dialog 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-button @click=&quot;visible = true&quot;&gt;打开对话框&lt;/laby-button&gt;</span><br><span class="line">&lt;laby-dialog v-model:visible=&quot;visible&quot; title=&quot;标题&quot; :ok=&quot;ok&quot; :cancel=&quot;cancel&quot;&gt;</span><br><span class="line">    &lt;span&gt; 内容 &lt;/span&gt;</span><br><span class="line">    &lt;/laby-dialog&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyButton from &quot;../lib/Button.vue&quot;;</span><br><span class="line">    import LabyDialog from &quot;../lib/Dialog.vue&quot;;</span><br><span class="line"></span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            LabyButton,</span><br><span class="line">            LabyDialog,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            const visible = ref(false);</span><br><span class="line">            const ok = () =&gt; &#123;</span><br><span class="line">                return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        console.log(&quot;ok&quot;);</span><br><span class="line">                        resolve(true);</span><br><span class="line">                    &#125;, 1000);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;;</span><br><span class="line">            const cancel = () =&gt; &#123;</span><br><span class="line">                console.log(&quot;cancel&quot;);</span><br><span class="line">            &#125;;</span><br><span class="line">            return &#123; visible, ok, cancel &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-7.png" alt="效果图"></p><h1 id="一行代码打开"><a href="#一行代码打开" class="headerlink" title="一行代码打开"></a>一行代码打开</h1><p>有时候还会想，能不能不用组件式，直接用函数生成一个呢</p><p>其实是可以的，只要使用 vue3 提供的 <code>createApp</code> 和 <code>h</code> 函数就可以做到了</p><p>此处只给出一个示例，不多介绍</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createDialog.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp, h &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> LabyDialog <span class="keyword">from</span> <span class="string">'./Dialog.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createDialog = <span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; title, content, ok, cancel &#125; = options</span><br><span class="line">    <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div)</span><br><span class="line">    <span class="keyword">const</span> close = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        app.unmount(div)</span><br><span class="line">        div.remove()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">return</span> h(LabyDialog, &#123;</span><br><span class="line">                visible: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">'onUpdate:visible'</span>: <span class="function"><span class="params">newVisible</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (newVisible === <span class="literal">false</span>) &#123;</span><br><span class="line">                        close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                title,</span><br><span class="line">                ok, cancel</span><br><span class="line">            &#125;, &#123; <span class="keyword">default</span>() &#123; <span class="keyword">return</span> content &#125; &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    app.mount(div)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要的地方使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createDialog&#125; <span class="keyword">from</span> <span class="string">'./createDialog.ts'</span></span><br></pre></td></tr></table></figure><p>引入即可</p><p>该函数要求传入一个 <code>options</code> 对象，该对象包含 <code>title, content, ok, cancel</code> 等 4 个部分，<code>content</code> 指代组件式中的插槽，其余含义见需求分析</p><p>然后使用 <code>h</code> 函数渲染新 app 中的内容，并作为参数传入 <code>createApp</code> 函数用以创建新的 app，最后挂载到 DOM 树上即可</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做好了 Button，知道有遮罩层这么一回事，就可以做 Dialog 组件了&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-Button 组件</title>
    <link href="https://ringoer.com/project/ui-framework-button/"/>
    <id>https://ringoer.com/project/ui-framework-button/</id>
    <published>2021-02-21T15:05:00.000Z</published>
    <updated>2021-02-24T09:48:17.067Z</updated>
    
    <content type="html"><![CDATA[<p>官网做好了，现在开始做核心组件吧！</p><a id="more"></a><hr><p>先创建一个 <code>src/lib</code> 文件夹，用来存放所有的组件</p><p>然后创建 <code>Button.vue</code>，开始制作 Button 吧！</p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>惯例先行需求分析</p><ol><li>多种类基础 Button，包含警告、成功、危险等</li><li>允许设置 Button 为禁用状态</li><li>不止有传统 Button，还可以有文字或链接形式</li><li>当处于加载中，Button 应当显示</li><li>有不同的尺寸可供选择</li><li>应当允许更换颜色</li><li>当鼠标放置于 Button 上、鼠标按下未松开、处于加载中等状态时，应当变更背景色</li><li>允许用户自定义 Button 上显示的文本</li></ol><p>那么可以整理出以下参数表格</p><table><thead><tr><th>参数</th><th>含义</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>level</td><td>默认类型</td><td>string</td><td>default / plain / primary / success / info / warning / danger</td><td>default</td></tr><tr><td>disabled</td><td>是否禁用</td><td>boolean</td><td>false / true</td><td>false</td></tr><tr><td>theme</td><td>式样</td><td>string</td><td>button / link / text</td><td>button</td></tr><tr><td>loding</td><td>是否加载中</td><td>boolean</td><td>false / true</td><td>false</td></tr><tr><td>size</td><td>尺寸</td><td>string</td><td>middle / small / large</td><td>middle</td></tr><tr><td>color</td><td>颜色</td><td>string</td><td>任意合法颜色值</td><td>#f3678e</td></tr></tbody></table><p>第 7 条，可以通过设置一个遮罩层来实现，只要遮罩层变色，背景色也等效变色</p><p>第 8 条，可以通过插槽实现，注意 vue3 不建议使用具名插槽</p><h1 id="骨架"><a href="#骨架" class="headerlink" title="骨架"></a>骨架</h1><p>容易得到如下骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"laby-button"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:theme</span>=<span class="string">"theme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:level</span>=<span class="string">"level"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:size</span>=<span class="string">"size"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:style</span>=<span class="string">"&#123; '--color': color &#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:disabled</span>=<span class="string">"disabled"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:loading</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-button-mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"laby-button-loadingIndicator"</span> <span class="attr">v-if</span>=<span class="string">"loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先，本质应当是一个 button 元素</p><p>在此基础上，将参数列表中整理出来的每个参数，都使用 <code>v-bind</code> 绑定到 button 上</p><p>注意，此处绑定 color，必须是如上例一样，绑定到 <code>--color</code> 属性上，才可以在 css 中使用 css3 语法 <code>var()</code> 读取，在 css 小节会再解释，此处略</p><p>之后，在 button 内</p><ol><li>放置一个遮罩层，用于变色</li><li>放置一个”加载中”的动画，用于在加载中状态下显示</li><li>放置一个默认插槽，用于传递用户自定义的文本</li></ol><p>然后为上述元素配置各自的 class 名称，骨架就完成了</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>显然，参数列表中整理出来的内容，一定来自引用该组件的地方的传入</p><p>先根据参数列表，写好 ts 声明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> props: &#123;</span><br><span class="line">  theme?: <span class="string">"button"</span> | <span class="string">"link"</span> | <span class="string">"text"</span>;</span><br><span class="line">  level?:</span><br><span class="line">    | <span class="string">"default"</span></span><br><span class="line">    | <span class="string">"plain"</span></span><br><span class="line">    | <span class="string">"primary"</span></span><br><span class="line">    | <span class="string">"success"</span></span><br><span class="line">    | <span class="string">"info"</span></span><br><span class="line">    | <span class="string">"warning"</span></span><br><span class="line">    | <span class="string">"danger"</span>;</span><br><span class="line">  size?: <span class="string">"middle"</span> | <span class="string">"small"</span> | <span class="string">"large"</span>;</span><br><span class="line">  color: <span class="built_in">string</span>;</span><br><span class="line">  disabled: <span class="built_in">boolean</span>;</span><br><span class="line">  loading: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后在 <code>export default</code> 中，写入我们的参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"LabyButton"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        theme: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"button"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        level: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"default"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        size: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"middle"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        color: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"#f3678e"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        disabled: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        loading: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ok，组件功能也完成了</p><p>什么？你说属性绑定完成了，事件绑定怎么办？？</p><p>那个不用担心，在外部传递到组件的事件，在组件只有唯一根元素的情况下，是会自动绑定到根元素上面的，所以现在这样基本就完成了</p><h1 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h1><p>然后补全样式表</p><p>注意，UI 库的样式表一般不要加 <code>scoped</code> 修饰符，为了尽可能减少对用户样式表的影响，方便用户 DIY</p><p>建议直接打字抄一遍吧，一边抄一边理解比较好</p><p>特别注意，button 元素会有默认黑色外边框，不属于 border，必须通过 <code>outline: none;</code> 才能消除</p><p>然后，我们使用 css3 的 <code>var()</code> 语法，取得我们通过 js 绑定到 style 上的 <code>--color</code> 属性</p><p>为什么是 <code>--color</code> 而不是 <code>color</code> ？因为 <code>var()</code> 语法要求这个参数必须是 <code>--</code> 开头，才可以正常访问到</p><p>对于遮罩层，采用淡出到白色即可实现，原理此处不解释了</p><p>最后，对于多种不同的 button，可以使用 scss 提供的 <code>mixin / include</code> 语法来实现 </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$theme-color</span>: var(--color);</span><br><span class="line"><span class="variable">$base-mask</span>: fade-out(<span class="number">#fff</span>, <span class="number">0.7</span>);</span><br><span class="line"><span class="variable">$active-mask</span>: fade-out(<span class="number">#fff</span>, <span class="number">0.5</span>);</span><br><span class="line"><span class="variable">$h</span>: <span class="number">32px</span>;</span><br><span class="line"><span class="variable">$radius</span>: <span class="number">4px</span>;</span><br><span class="line"></span><br><span class="line">@keyframes laby-spin &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: rotate(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: rotate(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">transition</span>: background-color <span class="number">250ms</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    :focus &#123;</span><br><span class="line">        <span class="attribute">outline</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.laby-button-mask</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="variable">$base-mask</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-attr">[loading="true"]</span>,</span><br><span class="line">    &amp;<span class="selector-attr">[disabled]</span> &#123;</span><br><span class="line">        <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">        &gt; <span class="selector-class">.laby-button-mask</span> &#123;</span><br><span class="line">            <span class="attribute">pointer-events</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.laby-button-loadingIndicator</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">14px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">4px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">        <span class="attribute">border-style</span>: solid;</span><br><span class="line">        <span class="attribute">border-width</span>: <span class="number">2px</span>;</span><br><span class="line">        <span class="attribute">animation</span>: laby-spin <span class="number">1s</span> infinite linear;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> layout(<span class="variable">$color</span>) &#123;</span><br><span class="line">    <span class="variable">$loading-color</span>: fade-out(black, <span class="number">0.7</span>);</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">$color</span>;</span><br><span class="line"></span><br><span class="line">    &amp;:active &#123;</span><br><span class="line">        &gt; <span class="selector-class">.laby-button-mask</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="variable">$active-mask</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.laby-button-loadingIndicator</span> &#123;</span><br><span class="line">        <span class="attribute">border-color</span>: <span class="variable">$loading-color</span> <span class="variable">$loading-color</span> <span class="variable">$loading-color</span> transparent;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-attr">[loading="true"]</span>,</span><br><span class="line">    &amp;<span class="selector-attr">[disabled]</span> &#123;</span><br><span class="line">        &gt; <span class="selector-class">.laby-button-mask</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="variable">$base-mask</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[theme="button"]</span> &#123;</span><br><span class="line">    <span class="variable">$color</span>: <span class="variable">$theme-color</span>;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span>:not(<span class="selector-attr">[theme="button"]</span>) &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$theme-color</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[theme="link"]</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[level="plain"]</span> &#123;</span><br><span class="line">    <span class="variable">$base-color</span>: <span class="variable">$theme-color</span>;</span><br><span class="line">    @<span class="keyword">include</span> layout(white);</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid rgb(<span class="number">187</span>, <span class="number">187</span>, <span class="number">187</span>);</span><br><span class="line"></span><br><span class="line">    &amp;:not(<span class="selector-attr">[loading="true"]</span>):not(<span class="selector-attr">[disabled]</span>) &#123;</span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">$base-color</span>;</span><br><span class="line">            <span class="attribute">color</span>: <span class="variable">$base-color</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[level="primary"]</span> &#123;</span><br><span class="line">    <span class="variable">$color</span>: <span class="number">#29adfa</span>;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[level="success"]</span> &#123;</span><br><span class="line">    <span class="variable">$color</span>: rgb(<span class="number">103</span>, <span class="number">194</span>, <span class="number">58</span>);</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[level="info"]</span> &#123;</span><br><span class="line">    <span class="variable">$color</span>: <span class="number">#808080</span>;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[level="warning"]</span> &#123;</span><br><span class="line">    <span class="variable">$color</span>: rgb(<span class="number">230</span>, <span class="number">162</span>, <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[level="danger"]</span> &#123;</span><br><span class="line">    <span class="variable">$color</span>: rgb(<span class="number">245</span>, <span class="number">108</span>, <span class="number">108</span>);</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[size="large"]</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">14px</span> <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[size="small"]</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，button 组件就完成了</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>引入文档页看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Button.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Button 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-button&gt;测试&lt;/laby-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyButton from &quot;../lib/Button.vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            LabyButton,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-6.png" alt="效果图"></p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官网做好了，现在开始做核心组件吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-文档页</title>
    <link href="https://ringoer.com/project/ui-framework-document/"/>
    <id>https://ringoer.com/project/ui-framework-document/</id>
    <published>2021-02-21T12:02:00.000Z</published>
    <updated>2021-02-21T14:14:59.798Z</updated>
    
    <content type="html"><![CDATA[<p>首页做好了，文档页不能光秃秃的啊</p><a id="more"></a><hr><h1 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h1><p>先想想我们需要文档页通向哪些地方</p><p>这里直接给出我的设计</p><table><thead><tr><th>所属</th><th>子标题</th><th>跳转路径</th><th>文件名(*.vue)</th></tr></thead><tbody><tr><td>指南</td><td>介绍</td><td>/document/introduction</td><td>Introduction</td></tr><tr><td>指南</td><td>安装</td><td>/document/install</td><td>Install</td></tr><tr><td>指南</td><td>快速上手</td><td>/document/start</td><td>Start</td></tr><tr><td>组件</td><td>Button</td><td>/document/button</td><td>Button</td></tr><tr><td>组件</td><td>Dialog</td><td>/document/dialog</td><td>Dialog</td></tr><tr><td>组件</td><td>Switch</td><td>/document/switch</td><td>Switch</td></tr><tr><td>组件</td><td>Tabs</td><td>/document/tabs</td><td>Tabs</td></tr></tbody></table><p>大致就做如上的子内容</p><p>然后在 <code>src/components</code> 目录下新建需要的文件们，此处举例 <code>Introduction.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;介绍&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>再配置 <code>router.ts</code> 以路由</p><p>此处使用嵌套路由</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createWebHistory, createRouter &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./views/Home.vue'</span></span><br><span class="line"><span class="keyword">import</span> Document <span class="keyword">from</span> <span class="string">'./views/Document.vue'</span></span><br><span class="line"><span class="keyword">import</span> Introduction <span class="keyword">from</span> <span class="string">'./components/Introduction.vue'</span></span><br><span class="line"><span class="keyword">import</span> Install <span class="keyword">from</span> <span class="string">'./components/Install.vue'</span></span><br><span class="line"><span class="keyword">import</span> Start <span class="keyword">from</span> <span class="string">'./components/Start.vue'</span></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">'./components/Button.vue'</span></span><br><span class="line"><span class="keyword">import</span> Dialog <span class="keyword">from</span> <span class="string">'./components/Dialog.vue'</span></span><br><span class="line"><span class="keyword">import</span> Switch <span class="keyword">from</span> <span class="string">'./components/Switch.vue'</span></span><br><span class="line"><span class="keyword">import</span> Tabs <span class="keyword">from</span> <span class="string">'./components/Tabs.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> history = createWebHistory()</span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: <span class="string">'/'</span>, component: Home &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/document'</span>, component: Document, children: [</span><br><span class="line">        &#123; path: <span class="string">''</span>, redirect: <span class="string">'/document/introduction'</span> &#125;, <span class="comment">// 默认进入介绍页面</span></span><br><span class="line">        &#123; path: <span class="string">'introduction'</span>, component: Introduction &#125;,</span><br><span class="line">        &#123; path: <span class="string">'install'</span>, component: Install &#125;,</span><br><span class="line">        &#123; path: <span class="string">'start'</span>, component: Start &#125;,</span><br><span class="line">        &#123; path: <span class="string">'button'</span>, component: Button &#125;,</span><br><span class="line">        &#123; path: <span class="string">'dialog'</span>, component: Dialog &#125;,</span><br><span class="line">        &#123; path: <span class="string">'switch'</span>, component: Switch &#125;,</span><br><span class="line">        &#123; path: <span class="string">'tabs'</span>, component: Tabs &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h1 id="骨架"><a href="#骨架" class="headerlink" title="骨架"></a>骨架</h1><p>然后搭个骨架吧</p><p>已知文档页要显示</p><ol><li>顶边栏</li><li>菜单</li><li>内容区域</li></ol><p>容易得到如下骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Topnav</span> <span class="attr">class</span>=<span class="string">"nav"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside-list"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>指南<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document/introduction"</span>&gt;</span>介绍<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document/introduction"</span>&gt;</span>安装<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document/introduction"</span>&gt;</span>快速上手<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside-list"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document/button"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document/dialog"</span>&gt;</span>Dialog<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document/switch"</span>&gt;</span>Switch<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document/tabs"</span>&gt;</span>Tabs<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"main-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">:key</span>=<span class="string">"$route.fullPath"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后加上基本的布局样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.layout</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    &gt; <span class="selector-class">.nav</span> &#123;</span><br><span class="line">        <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.content</span> &#123;</span><br><span class="line">        <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">padding-top</span>: <span class="number">90px</span>;</span><br><span class="line">        <span class="attribute">padding-left</span>: <span class="number">210px</span>;</span><br><span class="line">        @<span class="keyword">media</span> (max-width: 500px) &#123;</span><br><span class="line">            <span class="attribute">padding-left</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h1><p>重复代码不少，可以优化一下</p><p>先在 script 中声明数组</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> componentsList = [<span class="string">"Button"</span>, <span class="string">"Dialog"</span>, <span class="string">"Switch"</span>, <span class="string">"Tabs"</span>];</span><br><span class="line">    <span class="keyword">const</span> guidancesList = [</span><br><span class="line">        &#123; path: <span class="string">"introduction"</span>, title: <span class="string">"介绍"</span> &#125;,</span><br><span class="line">        &#123; path: <span class="string">"install"</span>, title: <span class="string">"安装"</span> &#125;,</span><br><span class="line">        &#123; path: <span class="string">"start"</span>, title: <span class="string">"快速上手"</span> &#125;,</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        componentsList,</span><br><span class="line">        guidancesList,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在模板中引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>指南<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(guidance, index) in guidancesList"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/document/' + guidance.path"</span>&gt;</span></span><br><span class="line">                    &#123;&#123; guidance.title &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(component, index) in componentsList"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/document/' + component.toLowerCase()"</span>&gt;</span></span><br><span class="line">                    &#123;&#123; component &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后补全样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$base-color</span>: <span class="number">#fe9acf</span>;</span><br><span class="line"><span class="variable">$aside-index</span>: <span class="number">10</span>;</span><br><span class="line"><span class="variable">$active-color</span>: linear-gradient(</span><br><span class="line">    <span class="number">90deg</span>,</span><br><span class="line">    rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>) <span class="number">0%</span>,</span><br><span class="line">    rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>) <span class="number">97%</span>,</span><br><span class="line">    <span class="variable">$base-color</span> <span class="number">97%</span>,</span><br><span class="line">    <span class="variable">$base-color</span> <span class="number">100%</span></span><br><span class="line">);</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    &gt; <span class="selector-tag">aside</span> &#123;</span><br><span class="line">        <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">16px</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding-top</span>: <span class="number">90px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="variable">$aside-index</span>;</span><br><span class="line">        &gt; <span class="selector-class">.aside-list</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">12px</span> <span class="number">0</span>;</span><br><span class="line">            &gt; <span class="selector-tag">h2</span> &#123;</span><br><span class="line">                <span class="attribute">margin-bottom</span>: <span class="number">4px</span>;</span><br><span class="line">                <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">16px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &gt; <span class="selector-tag">ol</span> &#123;</span><br><span class="line">                &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">                    &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">                        <span class="attribute">display</span>: block;</span><br><span class="line">                        <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">32px</span>;</span><br><span class="line">                        <span class="attribute">text-decoration</span>: none;</span><br><span class="line">                        <span class="attribute">transition</span>: background-color <span class="number">100ms</span>;</span><br><span class="line">                        &amp;:hover &#123;</span><br><span class="line">                            <span class="attribute">color</span>: <span class="variable">$base-color</span>;</span><br><span class="line">                            <span class="attribute">background</span>: <span class="variable">$active-color</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="selector-class">.router-link-active</span> &#123;</span><br><span class="line">                        <span class="attribute">color</span>: <span class="variable">$base-color</span>;</span><br><span class="line">                        <span class="attribute">background</span>: <span class="variable">$active-color</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> (max-width: 500px) &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#fdd1e8</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">height</span>: auto;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就可以做到移动的时候会浮光的侧边栏了</p><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-5.png" alt="效果图"></p><h1 id="内容区"><a href="#内容区" class="headerlink" title="内容区"></a>内容区</h1><p>先填充一下文档，然后用 border 法调整文本位置</p><p>得到如下调整</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &gt; main &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">    @<span class="keyword">media</span> (max-width: 500px) &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果就不贴了，反正只是 padding 的调整</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>在文档页，还应当可以控制顶边栏上的”弹出菜单”按键的是否可见</p><p>显然默认是允许在文档页显示的，所以在模板中调整 <code>Topnav</code> 为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Topnav</span> <span class="attr">toggleMenuButtonVisible</span> <span class="attr">class</span>=<span class="string">"nav"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>然后获得对菜单的引用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aside = ref&lt;HTMLDivElement&gt;(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">v-if</span>=<span class="string">"menuVisible"</span> <span class="attr">ref</span>=<span class="string">"aside"</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再读取 <code>App.vue</code> 提供的 <code>menuVisible</code>，并实现隐藏菜单的方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> menuVisible = inject&lt;Ref&lt;<span class="built_in">boolean</span>&gt;&gt;(<span class="string">"menuVisible"</span>);</span><br><span class="line"><span class="keyword">const</span> hideMenu = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> target: Node = event.target;</span><br><span class="line">    <span class="keyword">if</span> (!(target <span class="keyword">instanceof</span> HTMLAnchorElement)) &#123;</span><br><span class="line">        <span class="keyword">while</span> (target.parentNode &amp;&amp; target.parentNode !== <span class="built_in">document</span>.body) &#123;</span><br><span class="line">            target = target.parentNode;</span><br><span class="line">            <span class="keyword">if</span> (target === aside.value) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.documentElement.clientWidth &lt;= <span class="number">500</span>) &#123;</span><br><span class="line">        menuVisible.value = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以有如下 <code>script</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Topnav <span class="keyword">from</span> <span class="string">"../components/Topnav.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; inject, ref, Ref &#125; <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Topnav,</span><br><span class="line">    &#125;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        <span class="keyword">const</span> componentsList = [<span class="string">"Button"</span>, <span class="string">"Dialog"</span>, <span class="string">"Switch"</span>, <span class="string">"Tabs"</span>];</span><br><span class="line">        <span class="keyword">const</span> guidancesList = [</span><br><span class="line">            &#123; path: <span class="string">"introduction"</span>, title: <span class="string">"介绍"</span> &#125;,</span><br><span class="line">            &#123; path: <span class="string">"install"</span>, title: <span class="string">"安装"</span> &#125;,</span><br><span class="line">            &#123; path: <span class="string">"start"</span>, title: <span class="string">"快速上手"</span> &#125;,</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">const</span> aside = ref&lt;HTMLDivElement&gt;(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">const</span> menuVisible = inject&lt;Ref&lt;<span class="built_in">boolean</span>&gt;&gt;(<span class="string">"menuVisible"</span>);</span><br><span class="line">        <span class="keyword">const</span> hideMenu = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> target: Node = event.target;</span><br><span class="line">            <span class="keyword">if</span> (!(target <span class="keyword">instanceof</span> HTMLAnchorElement)) &#123;</span><br><span class="line">                <span class="keyword">while</span> (target.parentNode &amp;&amp; target.parentNode !== <span class="built_in">document</span>.body) &#123;</span><br><span class="line">                    target = target.parentNode;</span><br><span class="line">                    <span class="keyword">if</span> (target === aside.value) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">document</span>.documentElement.clientWidth &lt;= <span class="number">500</span>) &#123;</span><br><span class="line">                menuVisible.value = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            componentsList,</span><br><span class="line">            guidancesList,</span><br><span class="line">            aside,</span><br><span class="line">            menuVisible,</span><br><span class="line">            hideMenu,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>取得关闭方法后，通过事件委托，将方法挂载到 <code>div.content</code> 上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span> @<span class="attr">click</span>=<span class="string">"hideMenu"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>即可实现点击空白处也可以关闭弹出菜单了</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首页做好了，文档页不能光秃秃的啊&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-首页</title>
    <link href="https://ringoer.com/project/ui-framework-home/"/>
    <id>https://ringoer.com/project/ui-framework-home/</id>
    <published>2021-02-21T11:57:00.000Z</published>
    <updated>2021-02-21T12:34:11.874Z</updated>
    
    <content type="html"><![CDATA[<p>顶边栏完成了，现在先把首页做好</p><a id="more"></a><hr><p>让我们先新建一个 <code>src/views</code> 文件夹，用来存放官网的主要视图</p><p>然后在该文件夹下新建两个 vue 文件，作为我们的视图</p><ul><li><code>Home.vue</code>，首页</li><li><code>Document.vue</code>，文档页</li></ul><p>再配置一下 <code>router.ts</code> 来实现跳转</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createWebHistory, createRouter &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./views/Home.vue'</span></span><br><span class="line"><span class="keyword">import</span> Document <span class="keyword">from</span> <span class="string">'./views/Document.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> history = createWebHistory()</span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: <span class="string">'/'</span>, component: Home &#125;,</span><br><span class="line">    &#123; path: <span class="string">'/document'</span>, component: Document &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h1 id="骨架"><a href="#骨架" class="headerlink" title="骨架"></a>骨架</h1><p>先搭建一下首页的骨架</p><p>已知首页要显示</p><ol><li>顶边栏</li><li>极光背景<ul><li>两个跳转链接</li></ul></li><li>三点特性</li></ol><p>首先是极光背景，非常简单，用渐变色+转向当作背景色就可以了</p><p>然后三点特性，显然是无序列表</p><p>那么可以得到如下骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Topnav</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/Ringoer/laby-ui"</span>&gt;</span> Github <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document"</span>&gt;</span> 文档页 <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"features"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>特性1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>特性2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>特性3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h1><p>然后在 script 中引入顶边栏</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Topnav <span class="keyword">from</span> <span class="string">"../components/Topnav.vue"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Topnav,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后制作一下极光的样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: white;</span><br><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: linear-gradient(</span><br><span class="line">    <span class="number">145deg</span>,</span><br><span class="line">    rgb(<span class="number">254</span>, <span class="number">242</span>, <span class="number">246</span>) <span class="number">0%</span>,</span><br><span class="line">    rgb(<span class="number">252</span>, <span class="number">208</span>, <span class="number">215</span>) <span class="number">30%</span>,</span><br><span class="line">    rgb(<span class="number">243</span>, <span class="number">140</span>, <span class="number">159</span>) <span class="number">70%</span>,</span><br><span class="line">    rgb(<span class="number">243</span>, <span class="number">103</span>, <span class="number">142</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">clip-path</span>: ellipse(<span class="number">80%</span> <span class="number">60%</span> at <span class="number">50%</span> <span class="number">40%</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  &gt; * &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">12px</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &gt; <span class="selector-class">.actions</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">8px</span>;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">24px</span>;</span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        <span class="attribute">text-decoration</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下，得到了如下的效果</p><p><img src="https://pic.ringoer.com/laby-ui-2.png" alt="效果图"></p><h1 id="改进首页"><a href="#改进首页" class="headerlink" title="改进首页"></a>改进首页</h1><p>那显然，特性应该单独占据一行，并且在宽度足够的时候横向排列</p><p>两个链接也最好横向排列，而且最好各自有点介绍</p><p>那么先修改模板</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Topnav</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Laby UI<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Ringoer 的练习用 UI 框架<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"actions"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/Ringoer/laby-ui"</span>&gt;</span> Github <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document"</span>&gt;</span> 文档页 <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"features"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>基于 Vue 3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>使用了 Vue 3 全新特性<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>基于 TypeScript<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>源代码采用 TypeScript 书写<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>具有亲和力的代码<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>新手也能轻松阅读的源代码<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后补全样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$theme-color</span>: <span class="number">#fe9acf</span>;</span><br><span class="line"><span class="variable">$border-radius</span>: <span class="number">4px</span>;</span><br><span class="line"><span class="variable">$color</span>: white;</span><br><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: linear-gradient(</span><br><span class="line">    <span class="number">145deg</span>,</span><br><span class="line">    rgb(<span class="number">254</span>, <span class="number">242</span>, <span class="number">246</span>) <span class="number">0%</span>,</span><br><span class="line">    rgb(<span class="number">252</span>, <span class="number">208</span>, <span class="number">215</span>) <span class="number">30%</span>,</span><br><span class="line">    rgb(<span class="number">243</span>, <span class="number">140</span>, <span class="number">159</span>) <span class="number">70%</span>,</span><br><span class="line">    rgb(<span class="number">243</span>, <span class="number">103</span>, <span class="number">142</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">clip-path</span>: ellipse(<span class="number">80%</span> <span class="number">60%</span> at <span class="number">50%</span> <span class="number">40%</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  &gt; * &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">12px</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &gt; <span class="selector-class">.actions</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">8px</span>;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">24px</span>;</span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        <span class="attribute">text-decoration</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.features</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">64px</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">16px</span>;</span><br><span class="line">  @<span class="keyword">media</span> (min-width: 800px) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    &gt; <span class="selector-tag">ul</span> &#123;</span><br><span class="line">      &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  @<span class="keyword">media</span> (min-width: 1200px) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    &gt; <span class="selector-tag">ul</span> &#123;</span><br><span class="line">      &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">33.3333%</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  @<span class="keyword">media</span> (max-width: 800px) &#123;</span><br><span class="line">    &gt; <span class="selector-tag">ul</span> &#123;</span><br><span class="line">      <span class="attribute">flex-direction</span>: column;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &gt; <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">16px</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">display</span>: grid;</span><br><span class="line">      <span class="attribute">justify-content</span>: center;</span><br><span class="line">      <span class="attribute">align-content</span>: space-between;</span><br><span class="line">      grid-template-areas:</span><br><span class="line">        <span class="string">"icon title"</span></span><br><span class="line">        <span class="string">"icon text"</span>;</span><br><span class="line">      grid-template-<span class="attribute">columns</span>: <span class="number">80px</span> auto;</span><br><span class="line">      grid-template-rows: <span class="number">1</span>fr auto;</span><br><span class="line">      &gt; <span class="selector-tag">h3</span> &#123;</span><br><span class="line">        grid-<span class="selector-tag">area</span>: title;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">        grid-<span class="selector-tag">area</span>: text;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到如下效果</p><p><img src="https://pic.ringoer.com/laby-ui-3.png" alt="效果图"></p><h1 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h1><p>特性也太光秃秃了，加个 svg</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"features"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#icon-Vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>基于 Vue 3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>使用了 Vue 3 全新特性<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#icon-ts"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>基于 TypeScript<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>源代码采用 TypeScript 书写<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#icon-cloud"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>具有亲和力的代码<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>新手也能轻松阅读的源代码<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后补全 <code>.features &gt; ul &gt; li &gt; svg</code> 的样式表，就可以了</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; svg &#123;</span><br><span class="line">    grid-<span class="selector-tag">area</span>: icon;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">64px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">64px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，再为两个跳转入口贴个图</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"actions"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/Ringoer/laby-ui"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">             <span class="attr">src</span>=<span class="string">"../assets/github.png"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">alt</span>=<span class="string">"Github"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">style</span>=<span class="string">"transform: rotateY(180deg)"</span></span></span><br><span class="line"><span class="tag">             /&gt;</span></span><br><span class="line">        Github</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../assets/goto.png"</span> <span class="attr">alt</span>=<span class="string">"开始"</span> /&gt;</span></span><br><span class="line">        开始</span><br><span class="line">    <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>补个样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.banner</span>&#123;</span><br><span class="line">    &gt; <span class="selector-class">.actions</span>&#123;</span><br><span class="line">        <span class="selector-tag">a</span>&#123;</span><br><span class="line">            &gt; <span class="selector-tag">img</span>&#123;</span><br><span class="line">                <span class="attribute">display</span>: block;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-4.png" alt="效果图"></p><p>这不是还挺好看的2333</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;顶边栏完成了，现在先把首页做好&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-顶边栏</title>
    <link href="https://ringoer.com/project/ui-framework-topnav/"/>
    <id>https://ringoer.com/project/ui-framework-topnav/</id>
    <published>2021-02-20T12:04:00.000Z</published>
    <updated>2021-02-21T12:18:54.152Z</updated>
    
    <content type="html"><![CDATA[<p>显然顶边栏比较好做，且首页和文档页都需要它，那让我们先做好顶边栏</p><a id="more"></a><hr><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>首先，在 <code>components</code> 文件夹下，新建一个 vue 组件，就叫 <code>Topnav.vue</code> 吧，然后打板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>建议使用 scss 书写所有 css，下略</p><p>以后所有 vue 组件，无特殊说明的话，均沿用此初始化模板，下略</p><h1 id="页面结构"><a href="#页面结构" class="headerlink" title="页面结构"></a>页面结构</h1><p>分析顶边栏的结构，显然，有以下成分</p><table><thead><tr><th>成分</th><th>位置</th><th>默认</th><th>小于 500px</th></tr></thead><tbody><tr><td>首页跳转入口</td><td>左侧</td><td>可见</td><td>居中</td></tr><tr><td>文档页跳转入口</td><td>右侧</td><td>可见</td><td>不可见</td></tr><tr><td>展开菜单按键</td><td>左侧</td><td>不可见</td><td>可见</td></tr></tbody></table><p>容易得到以下页面结构</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"topnav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">            首页</span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document"</span>&gt;</span></span><br><span class="line">            文档页</span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">            菜单</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是，未来有可能变更需求，在右侧出现不只一个文档页跳转入口，所以应该做一个列表，以备未来扩展</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"topnav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span></span><br><span class="line">            首页</span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document"</span>&gt;</span></span><br><span class="line">                    文档页</span><br><span class="line">                <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toggleMenu"</span>&gt;</span></span><br><span class="line">            菜单</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>先分析需要的控制元素</p><p>显然，顶边栏中的弹出菜单按键，可以在引入它的组件中，被设置是否可见，那么应当有一个 Boolean 类型的变量来控制可见</p><p>且需要提供一个方法，控制菜单本体是否可见</p><p>但是，现在又犯难了——菜单本体是属于文档页的，而不是属于顶边栏的。如何跨组件控制呢？</p><p>回顾需求分析可得，通过弹出菜单按键，以及视口宽度，共同控制菜单是否可见</p><p>其中，视口宽度显然是一个全局属性，那么理应在 <code>App.vue</code> 中控制</p><p>于是我们在 <code>App.vue</code> 中定义其是否可见，并通过 <code>provide/inject</code> API 暴露给子组件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue script</span></span><br><span class="line"><span class="keyword">import</span> &#123; provide, ref &#125; <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"App"</span>,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        <span class="keyword">const</span> width = ref(<span class="built_in">document</span>.documentElement.clientWidth);</span><br><span class="line">        <span class="keyword">const</span> menuVisible = ref(width.value &gt; <span class="number">500</span> ? <span class="literal">true</span> : <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">window</span>.onresize = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            width.value = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">            <span class="keyword">if</span> (width.value &gt; <span class="number">500</span>) &#123;</span><br><span class="line">                menuVisible.value = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                menuVisible.value = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        provide(<span class="string">"menuVisible"</span>, menuVisible);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>初始化时根据视口宽度决定顶边栏的弹出菜单按键是否可见，并监听视口大小变化，根据视口宽度自动更新控制变量</p><p>然后编写 <code>Topnav.vue</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Topnav.vue script</span></span><br><span class="line"><span class="keyword">import</span> &#123; inject, Ref &#125; <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">        toggleMenuButtonVisible: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        <span class="keyword">const</span> menuVisible = inject&lt;Ref&lt;<span class="built_in">boolean</span>&gt;&gt;(<span class="string">"menuVisible"</span>);</span><br><span class="line">        <span class="keyword">const</span> toggleMenu = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            menuVisible.value = !menuVisible.value;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            toggleMenu,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意，此处的 <code>inject</code> 需要注明变量的类型。因为 <code>menuVisible</code> 声明的时候是 <code>ref(true|false)</code>，所以其类型为 <code>Ref&lt;boolean&gt;</code></p><p>将暴露出的变量引回模板，同时再贴个图美化一下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"topnav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../assets/logo.png"</span> <span class="attr">alt</span>=<span class="string">"首页"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../assets/document.png"</span> <span class="attr">alt</span>=<span class="string">"文档"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-if</span>=<span class="string">"toggleMenuButtonVisible"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">"toggleAside"</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">click</span>=<span class="string">"toggleMenu"</span></span></span><br><span class="line"><span class="tag">                &gt;</span></span><br><span class="line">            菜单</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h1><p>此处为了美观，选用线性渐变来做到下边一条分割线的效果</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: <span class="number">#fe9acf</span>;</span><br><span class="line"><span class="selector-class">.topnav</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">background</span>: linear-gradient(</span><br><span class="line">    <span class="number">180deg</span>,</span><br><span class="line">    rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>) <span class="number">0%</span>,</span><br><span class="line">    rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>) <span class="number">97%</span>,</span><br><span class="line">    <span class="number">#ffb5dc</span> <span class="number">97%</span>,</span><br><span class="line">    <span class="number">#ffb5dc</span> <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  &gt; <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">6em</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    &gt; svg &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &gt; <span class="selector-class">.menu</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">    &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">      &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">        &gt; svg &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">32px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &gt; <span class="selector-class">.toggleAside</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: translateY(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br><span class="line">  @<span class="keyword">media</span> (max-width: 500px) &#123;</span><br><span class="line">    &gt; <span class="selector-class">.menu</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.logo</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.toggleAside</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入 <code>App.vue</code> 看看效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;Topnav /&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; provide, ref &#125; from &quot;vue&quot;;</span><br><span class="line">import Topnav from &quot;./components/Topnav.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Topnav,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const width = ref(document.documentElement.clientWidth);</span><br><span class="line">    const menuVisible = ref(width.value &gt; 500 ? true : false);</span><br><span class="line">    window.onresize = () =&gt; &#123;</span><br><span class="line">      width.value = document.documentElement.clientWidth;</span><br><span class="line">      if (width.value &gt; 500) &#123;</span><br><span class="line">        menuVisible.value = true;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        menuVisible.value = false;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    provide(&quot;menuVisible&quot;, menuVisible);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">$max-width: 1200px;</span><br><span class="line">.app &#123;</span><br><span class="line">  max-width: $max-width;</span><br><span class="line">  margin-left: calc(50vw - 600px);</span><br><span class="line">  position: relative;</span><br><span class="line">  @media (max-width: $max-width) &#123;</span><br><span class="line">    margin-left: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="https://pic.ringoer.com/laby-ui-1.png" alt="效果图"></p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;显然顶边栏比较好做，且首页和文档页都需要它，那让我们先做好顶边栏&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
</feed>
