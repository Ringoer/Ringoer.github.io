<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ringo&#39;s Coding Life</title>
  
  <subtitle>OI to ACM</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ringoer.com/"/>
  <updated>2019-03-11T07:02:42.028Z</updated>
  <id>https://ringoer.com/</id>
  
  <author>
    <name>Ringoer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Welcome to No. 68 Floating Island</title>
    <link href="https://ringoer.com/uncategorized/mainpage/"/>
    <id>https://ringoer.com/uncategorized/mainpage/</id>
    <published>2332-12-31T16:00:00.000Z</published>
    <updated>2019-03-11T07:02:42.028Z</updated>
    
    <content type="html"><![CDATA[<p></p><p align="center"><b><font size="6">Are You Going To Scarborough Fair ?</font></b></p><br><img src="http://pic.ringoer.com/id63819688.png" alt="id=63819688" title="id=63819688"><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;p align=&quot;center&quot;&gt;&lt;b&gt;&lt;font size=&quot;6&quot;&gt;Are You Going To Scarborough Fair ?&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;&lt;br&gt;&lt;img src=&quot;http://pic.ringoer.com/id63819688
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>虚拟 DOM 和 DOM diff</title>
    <link href="https://ringoer.com/programing/virtual-dom/"/>
    <id>https://ringoer.com/programing/virtual-dom/</id>
    <published>2021-02-27T07:01:00.000Z</published>
    <updated>2021-03-14T14:36:09.113Z</updated>
    
    <content type="html"><![CDATA[<p>常常听说原生 DOM 操作比虚拟 DOM 操作慢，真的是这样吗？</p><a id="more"></a><hr><p>先说结论：原生 DOM 操作和虚拟 DOM 操作相比，单次的速度是差不多的，并不会慢。但是原生 DOM 操作只会忠实地执行程序写定的内容，而不会自动优化；而虚拟 DOM 往往内置一些算法，能压缩 DOM 操作的次数，所以最后看起来，就是虚拟 DOM 操作整体上要快于原生 DOM 操作</p><p>那为什么会这样呢？首先要了解一下虚拟 DOM 到底是什么</p><h1 id="虚拟-DOM-是什么"><a href="#虚拟-DOM-是什么" class="headerlink" title="虚拟 DOM 是什么"></a>虚拟 DOM 是什么</h1><p>众所周知，在控制台可以看到 DOM 树，但是总不能每次在内存中操作，都分析一次页面结构吧？肯定要想办法保存到内存中</p><p>那么，内存中的 DOM 树就是虚拟 DOM 树，每个结点就是虚拟 DOM 结点</p><h1 id="虚拟-DOM-的优点"><a href="#虚拟-DOM-的优点" class="headerlink" title="虚拟 DOM 的优点"></a>虚拟 DOM 的优点</h1><p>在反应变更到页面上之前，我们可以通过延缓操作，来使得计算和变更分离，使得变更操作更集中</p><p>然后就可以计算，这一部分的变更中，有哪些是重复的呢？重复的变更，合并为同一次，就可以减少变更量了</p><p>比如添加 n 个结点，原本操作是<code>for i in range(n): insert(node)</code>，现在是直接 <code>insert(node*n)</code>，显然复杂度从 <code>O(n)</code> 降低到了 <code>O(1)</code></p><p>同理，这一部分的 DOM 操作，涉及了多少结点呢？实际变更的结点，有没有指定的数量那么多？减少为需要的数量即可</p><p>比如变更 n 个结点数据，变 <code>[0,1,1,1,...1,0]</code> 为 <code>[1,1,1,...,1]</code>，显然只有首尾两个需要变更，如果中间全部变更，那成本也太大了，所以这里也是复杂度从 <code>O(n)</code> 降低到了 <code>O(1)</code></p><p>当然，实际的内部计算没有这么简单，只是举个简单例子，2333</p><p>除了上述两点外，大家都知道 js 是跨平台的，那么基于 js 的内存的 DOM 树，自然也是跨平台的，岂不美哉？</p><h1 id="虚拟-DOM-的缺点"><a href="#虚拟-DOM-的缺点" class="headerlink" title="虚拟 DOM 的缺点"></a>虚拟 DOM 的缺点</h1><p>有优点自然也有缺点</p><p>用 c++ 写过树的朋友都知道，在 build 的时候每个结点都要 <code>Node* p=new Node()</code> 然后挂载到父结点的 lchild 或者 rchild 上</p><p>同理，在 js 创建虚拟 DOM，一般分为 vue 式和 react 式两种</p><h2 id="vue-式"><a href="#vue-式" class="headerlink" title="vue 式"></a>vue 式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只有在 render 函数中才能得到 h 函数</span></span><br><span class="line">h(<span class="string">'div'</span>, &#123;</span><br><span class="line">  class: 'red',</span><br><span class="line">  on: &#123;</span><br><span class="line">    click: <span class="function"><span class="params">()</span> =&gt;</span> &#123; &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;, [h(<span class="string">'span'</span>,&#123;&#125;,<span class="string">'span1'</span>), h(<span class="string">'span'</span>, &#123;&#125;, <span class="string">'span2'</span>])</span><br></pre></td></tr></table></figure><p>创建出来的结点结构如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vNode = &#123;</span><br><span class="line">  tag: <span class="string">"div"</span>, <span class="comment">// 标签名 or 组件名</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    class: "red", // 标签上的属性</span><br><span class="line">    on: &#123;</span><br><span class="line">      click: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125; <span class="comment">// 事件</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  children: [ <span class="comment">// 子元素们</span></span><br><span class="line">    &#123; <span class="attr">tag</span>: <span class="string">"span"</span>, ... &#125;,</span><br><span class="line">    &#123; <span class="attr">tag</span>: <span class="string">"span"</span>, ... &#125;</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="react-式"><a href="#react-式" class="headerlink" title="react 式"></a>react 式</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">createElement(<span class="string">'div'</span>,&#123;<span class="attr">className</span>:<span class="string">'red'</span>,<span class="attr">onClick</span>:<span class="function"><span class="params">()</span>=&gt;</span> &#123;&#125;&#125;,[</span><br><span class="line">    createElement(<span class="string">'span'</span>, &#123;&#125;, <span class="string">'span1'</span>),</span><br><span class="line">    createElement(<span class="string">'span'</span>, &#123;&#125;, <span class="string">'span2'</span>)</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>创建出来的结点结构如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vNode = &#123;</span><br><span class="line">  key: <span class="literal">null</span>,</span><br><span class="line">  props: &#123;</span><br><span class="line">    children: [  <span class="comment">// 子元素们</span></span><br><span class="line">       &#123; <span class="attr">type</span>: <span class="string">'span'</span>, ... &#125;, </span><br><span class="line">       &#123; <span class="attr">type</span>: <span class="string">'span'</span>, ... &#125;</span><br><span class="line">    ],</span><br><span class="line">    className: <span class="string">"red"</span> <span class="comment">// 标签上的属性</span></span><br><span class="line">    onClick: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125; <span class="comment">// 事件</span></span><br><span class="line">  &#125;,</span><br><span class="line">  ref: <span class="literal">null</span>,</span><br><span class="line">  type: <span class="string">"div"</span>, <span class="comment">// 标签名 or 组件名</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然创建很麻烦，但是我们还有 template 和 jsx！</p><h2 id="template"><a href="#template" class="headerlink" title="template"></a>template</h2><p>直接使用 XML 语法声明页面结构，然后通过 vue-loader 解析即可</p><h2 id="jsx"><a href="#jsx" class="headerlink" title="jsx"></a>jsx</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">()=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=<span class="string">"red"</span> onClick=<span class="string">"&#123;()=&gt; &#123;&#125;&#125;"</span>&gt;</span><br><span class="line">            &lt;span&gt;span1&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">            &lt;span&gt;span2&lt;/</span>span&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>虽然简化了，但还是强依赖，且麻烦，不过总比不能创建好，2333</p><h1 id="DOM-diff-是什么"><a href="#DOM-diff-是什么" class="headerlink" title="DOM diff 是什么"></a>DOM diff 是什么</h1><p>直接使用新结点和旧结点，找到最近公共祖先，然后比对该子树，哪里发生了变更</p><p>比如在先序序列 ABCDEFG，中序序列 CBDAFEG 的二叉树上，删除 F 结点，并在 F 的根上插入 H 结点</p><p>对于计算机来说，它得到的新子树是 EGH(先) GEH(中) 的子树，与原子树 EFG(先) FEG(中) 对比，是将结点 F 修改为结点 G，将结点 G 修改为结点 H</p><p>所以，人类认为的一次删除和一次操作，在计算机的理解就是两次修改</p><p>然后再同步到原树上，变为先序序列 ABCDEGH，中序序列 CBDAGEH</p><h1 id="DOM-diff-的优点"><a href="#DOM-diff-的优点" class="headerlink" title="DOM diff 的优点"></a>DOM diff 的优点</h1><p>如上，可以不用遍历整棵树就快速算出新子树，且不需要全部替换树，只需要替换子树</p><h1 id="DOM-diff-的问题"><a href="#DOM-diff-的问题" class="headerlink" title="DOM diff 的问题"></a>DOM diff 的问题</h1><p>如上，计算机的理解和人类的理解不一样</p><p>如果上例中没有第二步插入，那么计算机会理解为</p><ol><li>变更结点 F 为结点 G</li><li>删除结点 G</li></ol><p>要注意这一点！！但其实效率还是比你直接操作真实 DOM 要高</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常常听说原生 DOM 操作比虚拟 DOM 操作慢，真的是这样吗？&lt;/p&gt;
    
    </summary>
    
    
      <category term="programing" scheme="https://ringoer.com/categories/programing/"/>
    
    
  </entry>
  
  <entry>
    <title>UI 框架-完工部署</title>
    <link href="https://ringoer.com/project/ui-framework-deploy/"/>
    <id>https://ringoer.com/project/ui-framework-deploy/</id>
    <published>2021-02-24T13:40:00.000Z</published>
    <updated>2021-02-24T13:58:59.348Z</updated>
    
    <content type="html"><![CDATA[<p>再好的制作，也要部署上去让别人看到才算数</p><p>不然面试官哪有时间慢慢看你代码，2333</p><a id="more"></a><hr><h1 id="生成文件位置"><a href="#生成文件位置" class="headerlink" title="生成文件位置"></a>生成文件位置</h1><p>首先要生成可部署文件</p><p>我们不希望生成的文件被 vite 随便乱扔，所以要先配置一下</p><p>打开 <code>vite.config.ts</code>，写入 <code>base</code> 和 <code>assetsDir</code> 字段</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    base: <span class="string">'/'</span>,<span class="comment">//指定打包后文件的默认引用路径</span></span><br><span class="line">    assetsDir: <span class="string">'assets'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，vite 会在生成的时候将生成的静态文件全部放入根目录下的 <code>dist/assets</code> 文件夹，且所有的相对路径都会被解读为 <code>/</code> 开头</p><p>此时 <code>vite.config.ts</code> 大致有如下模样</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @ts-nocheck</span></span><br><span class="line"><span class="keyword">import</span> &#123; md &#125; <span class="keyword">from</span> <span class="string">"./plugins/md"</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> &#123; baseParse &#125; <span class="keyword">from</span> <span class="string">'@vue/compiler-core'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    base: <span class="string">'/'</span>,<span class="comment">//指定打包后文件的默认引用路径</span></span><br><span class="line">    assetsDir: <span class="string">'assets'</span>,</span><br><span class="line">    plugins: [md()],</span><br><span class="line">    vueCustomBlockTransforms: &#123;</span><br><span class="line">        example: <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; code, path &#125; = options</span><br><span class="line">            <span class="keyword">const</span> file = fs.readFileSync(path).toString()</span><br><span class="line">            <span class="keyword">const</span> parsed = baseParse(file).children.find(<span class="function"><span class="params">n</span> =&gt;</span> n.tag === <span class="string">'example'</span>)</span><br><span class="line">            <span class="keyword">const</span> title = parsed.children[<span class="number">0</span>].content</span><br><span class="line">            <span class="keyword">const</span> main = file.split(parsed.loc.source).join(<span class="string">''</span>).trim()</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`export default function (Component) &#123;</span></span><br><span class="line"><span class="string">Component.__sourceCode = <span class="subst">$&#123;JSON.stringify(main)</span></span></span><br><span class="line"><span class="string"><span class="subst">        &#125;</span></span></span><br><span class="line"><span class="string">Component.__sourceCodeTitle = <span class="subst">$&#123;JSON.stringify(title)&#125;</span></span></span><br><span class="line"><span class="string">&#125;`</span>.trim()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h1><p>根据你想要的部署环境而定</p><p>一般有自己配置的反向代理（如 nginx）或 github page 等</p><p>不管是哪种，部署前都要检查一下 <code>vite.config.ts</code> 和 <code>src/router.ts</code> 中的配置</p><h2 id="history-模式"><a href="#history-模式" class="headerlink" title="history 模式"></a>history 模式</h2><p>修改 <code>vite.config.ts</code> 中的 <code>base</code> 字段为 <code>&#39;/&#39;</code></p><p>修改 <code>src/router.ts</code> 中的 <code>history</code> 为 <code>createWebHistory</code>，即</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createWebHistory, createRouter &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">const</span> history = createWebHistory()</span><br></pre></td></tr></table></figure><h2 id="hash-模式"><a href="#hash-模式" class="headerlink" title="hash 模式"></a>hash 模式</h2><p>修改 <code>vite.config.ts</code> 中的 <code>base</code> 字段为 <code>&#39;./&#39;</code></p><p>修改 <code>src/router.ts</code> 中的 <code>history</code> 为 <code>createWebHashHistory</code>，即</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createWebHashHistory, createRouter &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">const</span> history = createWebHashHistory()</span><br></pre></td></tr></table></figure><h2 id="memory-模式"><a href="#memory-模式" class="headerlink" title="memory 模式"></a>memory 模式</h2><p>不推荐</p><h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>根目录下生成的 <code>dist</code> 目录，就是可以部署的目录了</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h2><p>nginx 等反向代理服务器，可以使用 history 模式或 hash 模式</p><p>使用 history 模式的话，指定入口为 <code>index.html</code>，部署后访问部署路径即可</p><p>使用 hash 模式的话，可以指定入口，访问方式同 history 模式；也可以不指定入口，但是部署后访问部署路径时，必须要加上文件名 <code>index.html</code></p><h2 id="github-page"><a href="#github-page" class="headerlink" title="github page"></a>github page</h2><p>只能使用 hash 模式</p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>自己服务器快的话，反向代理不错，毕竟可以用 history 模式，url 好看一些</p><p>但是要部署 github page 的话，建议不要部署到 github，而是部署到 gitee，毕竟 github 在墙外，有时候访问不那么顺畅，而 gitee 是国内的，速度飞快</p><p>不过 github 会自动更新部署页，gitee 在重新提交代码后，要手动点击 page 设置中的更新，才会真正更新</p><h1 id="感言"><a href="#感言" class="headerlink" title="感言"></a>感言</h1><p>Laby UI 的制作过程，已经全部写完，放在本博客上了</p><p>还真是花了相当的时间，写代码容易，写博客难啊，2333</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;再好的制作，也要部署上去让别人看到才算数&lt;/p&gt;
&lt;p&gt;不然面试官哪有时间慢慢看你代码，2333&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-代码优化</title>
    <link href="https://ringoer.com/project/ui-framework-code-improve/"/>
    <id>https://ringoer.com/project/ui-framework-code-improve/</id>
    <published>2021-02-24T10:38:00.000Z</published>
    <updated>2021-02-24T13:49:08.792Z</updated>
    
    <content type="html"><![CDATA[<p>基本完工了，但是代码还是很丑，重复的地方过多</p><a id="more"></a><hr><h1 id="汇总全局设定"><a href="#汇总全局设定" class="headerlink" title="汇总全局设定"></a>汇总全局设定</h1><p>首先，先让我们建立一个全局设定文件，方便后续查阅、管理</p><p>出于个人爱好，我喜欢管这样的文件叫 <code>Global</code>，并且我决定放在 <code>src</code> 目录下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Global.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> components = &#123;</span><br><span class="line">    <span class="string">'Button'</span>: &#123;</span><br><span class="line">        name: <span class="string">'Button'</span>, title: <span class="string">'Button 按钮'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'Card'</span>: &#123;</span><br><span class="line">        name: <span class="string">'Card'</span>, title: <span class="string">'Card 卡片'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'Dialog'</span>: &#123;</span><br><span class="line">        name: <span class="string">'Dialog'</span>, title: <span class="string">'Dialog 对话框'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'Switch'</span>: &#123;</span><br><span class="line">        name: <span class="string">'Switch'</span>, title: <span class="string">'Switch 开关'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'Table'</span>: &#123;</span><br><span class="line">        name: <span class="string">'Table'</span>, title: <span class="string">'Table 表格'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'Tabs'</span>: &#123;</span><br><span class="line">        name: <span class="string">'Tabs'</span>, title: <span class="string">'Tabs 标签页'</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> guidances = &#123;</span><br><span class="line">    <span class="string">'introduction'</span>: &#123; path: <span class="string">"introduction"</span>, title: <span class="string">"介绍"</span> &#125;,</span><br><span class="line">    <span class="string">'install'</span>: &#123; path: <span class="string">"install"</span>, title: <span class="string">"安装"</span> &#125;,</span><br><span class="line">    <span class="string">'start'</span>: &#123; path: <span class="string">"start"</span>, title: <span class="string">"快速上手"</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该文件告诉了外部引用者，本项目的几个主要文档页的信息</p><h1 id="化简样例"><a href="#化简样例" class="headerlink" title="化简样例"></a>化简样例</h1><p>显然每个在 <code>src/component</code> 下的组件文档页都是引用 <code>./example</code> 下对应的例子</p><p>那么我们应该把引用收束到一起，再暴露给组件文档页</p><p>首先，新建 <code>src/component/contents</code> 文件夹，为每个组件新建对应的样例管理文件</p><p>显然，该文件需要包含</p><ol><li>所有的样例引入</li><li>该样例专属的参数列表</li></ol><p>例如为 Button 组件新建 <code>src/component/contents/Button.ts</code> 文件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> LabyComponent1 <span class="keyword">from</span> <span class="string">"../example/Button/Button1.example.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> LabyComponent2 <span class="keyword">from</span> <span class="string">"../example/Button/Button2.example.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> LabyComponent3 <span class="keyword">from</span> <span class="string">"../example/Button/Button3.example.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> LabyComponent4 <span class="keyword">from</span> <span class="string">"../example/Button/Button4.example.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> LabyComponent5 <span class="keyword">from</span> <span class="string">"../example/Button/Button5.example.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> LabyComponent6 <span class="keyword">from</span> <span class="string">"../example/Button/Button6.example.vue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: [</span><br><span class="line">        LabyComponent1,</span><br><span class="line">        LabyComponent2,</span><br><span class="line">        LabyComponent3,</span><br><span class="line">        LabyComponent4,</span><br><span class="line">        LabyComponent5,</span><br><span class="line">        LabyComponent6,</span><br><span class="line">    ],</span><br><span class="line">    attributes: [</span><br><span class="line">        &#123; attr: <span class="string">'level'</span>, desp: <span class="string">'默认类型'</span>, <span class="keyword">type</span>: <span class="string">'string'</span>, values: <span class="string">'default / plain / primary / success / info / warning / danger'</span>, <span class="keyword">default</span>: <span class="string">'default'</span> &#125;,</span><br><span class="line">        &#123; attr: <span class="string">'disabled'</span>, desp: <span class="string">'是否禁用'</span>, <span class="keyword">type</span>: <span class="string">'boolean'</span>, values: <span class="string">'false / true'</span>, <span class="keyword">default</span>: <span class="string">'false'</span> &#125;,</span><br><span class="line">        &#123; attr: <span class="string">'theme'</span>, desp: <span class="string">'式样'</span>, <span class="keyword">type</span>: <span class="string">'string'</span>, values: <span class="string">'button / link / text'</span>, <span class="keyword">default</span>: <span class="string">'button'</span> &#125;,</span><br><span class="line">        &#123; attr: <span class="string">'loding'</span>, desp: <span class="string">'是否加载中'</span>, <span class="keyword">type</span>: <span class="string">'boolean'</span>, values: <span class="string">'false / true'</span>, <span class="keyword">default</span>: <span class="string">'false'</span> &#125;,</span><br><span class="line">        &#123; attr: <span class="string">'size'</span>, desp: <span class="string">'尺寸'</span>, <span class="keyword">type</span>: <span class="string">'string'</span>, values: <span class="string">'middle / small / large'</span>, <span class="keyword">default</span>: <span class="string">'middle'</span> &#125;,</span><br><span class="line">        &#123; attr: <span class="string">'color'</span>, desp: <span class="string">'颜色'</span>, <span class="keyword">type</span>: <span class="string">'string'</span>, values: <span class="string">'任意合法颜色值'</span>, <span class="keyword">default</span>: <span class="string">'#f3678e'</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我为 Button 创建了 6 个样例，所以有 6 条静态引入</p><p>注意，对 vue 文件的引入，只能在代码中静态引入，不可以像 md 一样动态引入，否则必须要先配置对 vue 文件的额外解析</p><p>然后在 Button 组件文档页中引入该 ts</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> LabyCard <span class="keyword">from</span> <span class="string">"../lib/Card.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> LabyTable <span class="keyword">from</span> <span class="string">"../lib/Table.vue"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Example <span class="keyword">from</span> <span class="string">"./contents/Button"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        LabyCard,</span><br><span class="line">        LabyTable,</span><br><span class="line">    &#125;,</span><br><span class="line">    setup(props) &#123;</span><br><span class="line">        <span class="keyword">const</span> heads = [</span><br><span class="line">            &#123; name: <span class="string">"参数"</span>, identifier: <span class="string">"attr"</span> &#125;,</span><br><span class="line">            &#123; name: <span class="string">"含义"</span>, identifier: <span class="string">"desp"</span> &#125;,</span><br><span class="line">            &#123; name: <span class="string">"类型"</span>, identifier: <span class="string">"type"</span> &#125;,</span><br><span class="line">            &#123; name: <span class="string">"可选值"</span>, identifier: <span class="string">"values"</span> &#125;,</span><br><span class="line">            &#123; name: <span class="string">"默认值"</span>, identifier: <span class="string">"default"</span> &#125;,</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">const</span> keys = heads.map(<span class="function">(<span class="params">item: <span class="built_in">any</span></span>) =&gt;</span> item.identifier);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; components, attributes &#125; = Example;</span><br><span class="line">        <span class="keyword">const</span> visibility = ref(components.map(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="literal">false</span>));</span><br><span class="line">        <span class="keyword">const</span> toggle = <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">            visibility.value[index] = !visibility.value[index];</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            Prism,</span><br><span class="line">            heads,</span><br><span class="line">            keys,</span><br><span class="line">            components,</span><br><span class="line">            attributes,</span><br><span class="line">            visibility,</span><br><span class="line">            toggle,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>修改模板为 <code>v-for</code> 遍历</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>Button 文档<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">"container"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">v-for</span>=<span class="string">"(&#123; ...component &#125;, index) in components"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">         &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">laby-card</span> <span class="attr">class</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; component.__sourceCodeTitle &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"component"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">code</span> <span class="attr">class</span>=<span class="string">"markdown-body"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">pre</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">v-if</span>=<span class="string">"visibility[index]"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">v-html</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                             Prism.highlight(</span></span></span><br><span class="line"><span class="tag"><span class="string">                             component.__sourceCode,</span></span></span><br><span class="line"><span class="tag"><span class="string">                             Prism.languages.html,</span></span></span><br><span class="line"><span class="tag"><span class="string">                             'html'</span></span></span><br><span class="line"><span class="tag"><span class="string">                             )</span></span></span><br><span class="line"><span class="tag"><span class="string">                             "</span></span></span><br><span class="line"><span class="tag">                     &gt;</span><span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"toggle"</span> @<span class="attr">click</span>=<span class="string">"toggle(index)"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">v-if</span>=<span class="string">"visibility[index]"</span>&gt;</span></span><br><span class="line">                    △</span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desp"</span>&gt;</span>隐藏代码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"open"</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">                    ▽</span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desp"</span>&gt;</span>显示代码<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">laby-card</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">laby-table</span> <span class="attr">bordered</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span> <span class="attr">v-for</span>=<span class="string">"(head, index) in heads"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123; head.name &#125;&#125;<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"(attribute, index) in attributes"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-for</span>=<span class="string">"key in keys"</span> <span class="attr">:key</span>=<span class="string">"key"</span> <span class="attr">v-html</span>=<span class="string">"attribute[key]"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">laby-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-17.png" alt="效果图"></p><h1 id="抽取公用显示"><a href="#抽取公用显示" class="headerlink" title="抽取公用显示"></a>抽取公用显示</h1><p>显然，每个组件文档页，都具有与 Button 组件文档页类似的结构</p><p>那么我们可以把这个结构抽取出来，然后按照需要进行引入</p><p>先抽取结构，我选择在 <code>src/views</code> 下新建 <code>Content.vue</code> 来承载这个结构</p><p>组件列表和参数表通过 <code>src/components/contents</code> 下的汇总来引入</p><p>引入后，根据字段名的不同，制作哈希表 <code>LabyMap</code></p><p>再要求用户传入参数 <code>props</code>，通过 <code>name</code> 来指定选择要显示哪个组件文档页，通过 <code>title</code> 来指示现在的组件文档页的标题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line">// Content.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;br /&gt;</span><br><span class="line">&lt;div</span><br><span class="line">     class=&quot;container&quot;</span><br><span class="line">     v-for=&quot;(&#123; ...component &#125;, index) in components&quot;</span><br><span class="line">     :key=&quot;index&quot;</span><br><span class="line">     &gt;</span><br><span class="line">    &lt;laby-card class=&quot;example&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; component.__sourceCodeTitle &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;component :is=&quot;component&quot; /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;code class=&quot;markdown-body&quot;&gt;</span><br><span class="line">            &lt;pre</span><br><span class="line">                 v-if=&quot;visibility[index]&quot;</span><br><span class="line">                 v-html=&quot;</span><br><span class="line">                         Prism.highlight(</span><br><span class="line">                         component.__sourceCode,</span><br><span class="line">                         Prism.languages.html,</span><br><span class="line">                         &apos;html&apos;</span><br><span class="line">                         )</span><br><span class="line">                         &quot;</span><br><span class="line">                 &gt;&lt;/pre&gt;</span><br><span class="line">    &lt;/code&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button class=&quot;toggle&quot; @click=&quot;toggle(index)&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;close&quot; v-if=&quot;visibility[index]&quot;&gt;</span><br><span class="line">                △</span><br><span class="line">                &lt;span class=&quot;desp&quot;&gt;隐藏代码&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;open&quot; v-else&gt;</span><br><span class="line">                ▽</span><br><span class="line">                &lt;span class=&quot;desp&quot;&gt;显示代码&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;/laby-card&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;laby-table bordered&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th v-for=&quot;(head, index) in heads&quot; :key=&quot;index&quot;&gt;&#123;&#123; head.name &#125;&#125;&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr v-for=&quot;(attribute, index) in attributes&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;td v-for=&quot;key in keys&quot; :key=&quot;key&quot; v-html=&quot;attribute[key]&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">    &lt;/laby-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyButtons from &quot;../components/contents/Button&quot;;</span><br><span class="line">    import LabyCards from &quot;../components/contents/Card&quot;;</span><br><span class="line">    import LabyDialogs from &quot;../components/contents/Dialog&quot;;</span><br><span class="line">    import LabySwitchs from &quot;../components/contents/Switch&quot;;</span><br><span class="line">    import LabyTables from &quot;../components/contents/Table&quot;;</span><br><span class="line">    import LabyTabss from &quot;../components/contents/Tabs&quot;;</span><br><span class="line"></span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    import LabyCard from &quot;../lib/Card.vue&quot;;</span><br><span class="line">    import LabyTable from &quot;../lib/Table.vue&quot;;</span><br><span class="line">    import &quot;prismjs&quot;;</span><br><span class="line">    import &quot;prismjs/themes/prism.css&quot;;</span><br><span class="line"></span><br><span class="line">    const Prism = (window as any).Prism;</span><br><span class="line"></span><br><span class="line">    const LabyMap = &#123;</span><br><span class="line">        Button: LabyButtons,</span><br><span class="line">        Card: LabyCards,</span><br><span class="line">        Dialog: LabyDialogs,</span><br><span class="line">        Switch: LabySwitchs,</span><br><span class="line">        Table: LabyTables,</span><br><span class="line">        Tabs: LabyTabss,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">            name: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">                required: true,</span><br><span class="line">            &#125;,</span><br><span class="line">            title: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">                required: true,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        components: &#123;</span><br><span class="line">            LabyCard,</span><br><span class="line">            LabyTable,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup(props) &#123;</span><br><span class="line">            const &#123; name, title &#125; = props;</span><br><span class="line">            const heads = [</span><br><span class="line">                &#123; name: &quot;参数&quot;, identifier: &quot;attr&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;含义&quot;, identifier: &quot;desp&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;类型&quot;, identifier: &quot;type&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;可选值&quot;, identifier: &quot;values&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;默认值&quot;, identifier: &quot;default&quot; &#125;,</span><br><span class="line">            ];</span><br><span class="line">            const keys = heads.map((item: any) =&gt; item.identifier);</span><br><span class="line"></span><br><span class="line">            const &#123; components, attributes &#125; = LabyMap[name];</span><br><span class="line">            const visibility = ref(components.map((item) =&gt; false));</span><br><span class="line">            const toggle = (index) =&gt; &#123;</span><br><span class="line">                visibility.value[index] = !visibility.value[index];</span><br><span class="line">            &#125;;</span><br><span class="line">            return &#123;</span><br><span class="line">                title,</span><br><span class="line">                Prism,</span><br><span class="line">                heads,</span><br><span class="line">                keys,</span><br><span class="line">                components,</span><br><span class="line">                attributes,</span><br><span class="line">                visibility,</span><br><span class="line">                toggle,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    $theme-color: #f3678e;</span><br><span class="line">    .container &#123;</span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            &gt; .example &gt; .toggle &gt; * &gt; .desp &#123;</span><br><span class="line">                display: inline;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &gt; .example &#123;</span><br><span class="line">            &gt; .toggle &#123;</span><br><span class="line">                display: block;</span><br><span class="line">                width: 100%;</span><br><span class="line">                height: 32px;</span><br><span class="line">                border: none;</span><br><span class="line">                transition: background-color 250ms;</span><br><span class="line">                outline: none;</span><br><span class="line">                &amp;:focus &#123;</span><br><span class="line">                    outline: none;</span><br><span class="line">                &#125;</span><br><span class="line">                background: white;</span><br><span class="line">                cursor: pointer;</span><br><span class="line">                &amp;:hover &#123;</span><br><span class="line">                    background: fade-out($theme-color, 0.95);</span><br><span class="line">                &#125;</span><br><span class="line">                &gt; * &gt; .desp &#123;</span><br><span class="line">                    display: none;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>同理可以抽取指南文档页的结构到 <code>src/views/Guidance.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// Guidance.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;article class=&quot;markdown-body&quot; v-html=&quot;md&quot;&gt;&lt;/article&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        props: &#123;</span><br><span class="line">            path: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">                required: true,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup(props) &#123;</span><br><span class="line">            const md = ref(null);</span><br><span class="line">            import(`../markdown/$&#123;props.path&#125;.md`).then(</span><br><span class="line">                (res) =&gt; (md.value = res.default)</span><br><span class="line">            );</span><br><span class="line">            return &#123; md &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后修改 <code>router.ts</code>，通过路由来传递参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createWebHistory, createRouter &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./views/Home.vue'</span></span><br><span class="line"><span class="keyword">import</span> Document <span class="keyword">from</span> <span class="string">'./views/Document.vue'</span></span><br><span class="line"><span class="keyword">import</span> Content <span class="keyword">from</span> <span class="string">'./views/Content.vue'</span></span><br><span class="line"><span class="keyword">import</span> Guidance <span class="keyword">from</span> <span class="string">'./views/Guidance.vue'</span></span><br><span class="line"><span class="keyword">import</span> &#123; guidances, components &#125; <span class="keyword">from</span> <span class="string">'./Global'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> history = createWebHistory()</span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history,</span><br><span class="line">    routes: [</span><br><span class="line">        &#123; path: <span class="string">'/'</span>, component: Home &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/document'</span>, component: Document, children: [</span><br><span class="line">                &#123; path: <span class="string">''</span>, redirect: <span class="string">'/document/introduction'</span> &#125;,</span><br><span class="line">                &#123; path: <span class="string">'introduction'</span>, component: Guidance, props: guidances[<span class="string">'introduction'</span>] &#125;,</span><br><span class="line">                &#123; path: <span class="string">'install'</span>, component: Guidance, props: guidances[<span class="string">'install'</span>] &#125;,</span><br><span class="line">                &#123; path: <span class="string">'start'</span>, component: Guidance, props: guidances[<span class="string">'start'</span>] &#125;,</span><br><span class="line">                &#123; path: <span class="string">'button'</span>, component: Content, props: components[<span class="string">'Button'</span>] &#125;,</span><br><span class="line">                &#123; path: <span class="string">'card'</span>, component: Content, props: components[<span class="string">'Card'</span>] &#125;,</span><br><span class="line">                &#123; path: <span class="string">'dialog'</span>, component: Content, props: components[<span class="string">'Dialog'</span>] &#125;,</span><br><span class="line">                &#123; path: <span class="string">'switch'</span>, component: Content, props: components[<span class="string">'Switch'</span>] &#125;,</span><br><span class="line">                &#123; path: <span class="string">'table'</span>, component: Content, props: components[<span class="string">'Table'</span>] &#125;,</span><br><span class="line">                &#123; path: <span class="string">'tabs'</span>, component: Content, props: components[<span class="string">'Tabs'</span>] &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>现在，就可以删除 <code>src/component</code> 下，没有被引用的组件了</p><p>如无意外，现在该目录下，应该只有</p><ul><li>contents，文件夹</li><li>example，文件夹</li><li>Topnav.vue</li></ul><h1 id="精简-router"><a href="#精简-router" class="headerlink" title="精简 router"></a>精简 router</h1><p>这个 <code>router.ts</code> 看起来也还是很糟心，再优化一下吧</p><p>注意到重复的部分出现在 <code>children</code> 字段下，而该字段的值是个数组，每个数组项都是一个包含 3 个字段的对象</p><p>那么我们可以先定义这个对象</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.ts</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Route</span>(<span class="params">path, component, props</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.path = path</span><br><span class="line">    <span class="keyword">this</span>.component = component</span><br><span class="line">    <span class="keyword">this</span>.props = props</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再观察指南的路由，和组件的路由，有如下规律</p><ol><li>指南的路由<ul><li>其 <code>path</code> 值集合，与 <code>Global.ts</code> 中的 <code>guidances</code> 对象的 <code>keys</code> 是一致的</li><li>其 <code>props</code> 中传入的键集合，与 <code>Global.ts</code> 中的 <code>guidances</code> 对象的 <code>keys</code> 是一致的</li></ul></li><li>组件的路由<ul><li>其 <code>path</code> 值集合，与 <code>Global.ts</code> 中的 <code>components</code> 对象的 <code>keys.toLowerCase</code> 是一致的</li><li>其 <code>props</code> 中传入的键集合，与 <code>Global.ts</code> 中的 <code>components</code> 对象的 <code>keys</code> 是一致的</li></ul></li></ol><p>那么容易得到指南路由的数组和组件路由的数组</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.ts</span></span><br><span class="line"><span class="keyword">const</span> guidancesRoutes = <span class="built_in">Object</span>.keys(guidances).map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Route(item, Guidance, guidances[item])</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> componentsRoutes = <span class="built_in">Object</span>.keys(components).map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Route(item.toLowerCase(), Content, components[item])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后在路由配置的 <code>children</code> 字段下，使用 spread 语法展开这两个数组即可</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.ts</span></span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history,</span><br><span class="line">    routes: [</span><br><span class="line">        &#123; path: <span class="string">'/'</span>, component: Home &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/document'</span>, component: Document, children: [</span><br><span class="line">                &#123; path: <span class="string">''</span>, redirect: <span class="string">'/document/introduction'</span> &#125;,</span><br><span class="line">                ...guidancesRoutes,</span><br><span class="line">                ...componentsRoutes</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>好了，现在的代码，就几乎没有冗余，非常漂亮了</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本完工了，但是代码还是很丑，重复的地方过多&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-完善官网</title>
    <link href="https://ringoer.com/project/ui-framework-improve/"/>
    <id>https://ringoer.com/project/ui-framework-improve/</id>
    <published>2021-02-23T15:28:00.000Z</published>
    <updated>2021-02-24T09:54:40.169Z</updated>
    
    <content type="html"><![CDATA[<p>虽然现在官方文档基本快要完工了，但是也太难看了</p><p>让我们把它变得好看一些吧</p><a id="more"></a><hr><h1 id="markdown"><a href="#markdown" class="headerlink" title="markdown"></a>markdown</h1><p>如果用原生 html 慢慢写文档，也不太好控制排版了</p><p>我决定使用 md 来写文档</p><p>新建 <code>src/markdown</code> 目录，在里面新建 <code>install.md</code> 等三篇文档，然后写完整先</p><p>但是 vue 默认不支持 md，要想个办法让它支持</p><p>我们可以自己写一个插件，告诉 vue 如何识别 md 文件</p><p>这里直接给出插件代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// plugins/md.ts</span></span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span></span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> marked <span class="keyword">from</span> <span class="string">'marked'</span></span><br><span class="line"><span class="keyword">const</span> mdToJs = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> content = <span class="built_in">JSON</span>.stringify(marked(str))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`export default <span class="subst">$&#123;content&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">md</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        configureServer: [</span><br><span class="line">            <span class="keyword">async</span> (&#123; app &#125;) =&gt; &#123;</span><br><span class="line">                app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (ctx.path.endsWith(<span class="string">'.md'</span>)) &#123;</span><br><span class="line">                        ctx.type = <span class="string">'js'</span></span><br><span class="line">                        <span class="keyword">const</span> filePath = path.join(process.cwd(), ctx.path)</span><br><span class="line">                        ctx.body = mdToJs(fs.readFileSync(filePath).toString())</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">await</span> next()</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">        ],</span><br><span class="line">        transforms: [&#123;</span><br><span class="line">            test: <span class="function"><span class="params">context</span> =&gt;</span> context.path.endsWith(<span class="string">'.md'</span>),</span><br><span class="line">            transform: <span class="function">(<span class="params">&#123; code &#125;</span>) =&gt;</span> mdToJs(code)</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以照抄，放在项目根目录下的 <code>plugins/md.ts</code> 就行</p><p>注意到，这个插件依赖 <code>marked</code> 这个 npm 库，记得先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install marked --save</span><br></pre></td></tr></table></figure><p>不然就会在试图 run 的时候一直报无法识别 md 文件的静态错误</p><p>然后也是在项目根目录下，新建文件 <code>vite.config.ts</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; md &#125; <span class="keyword">from</span> <span class="string">"./plugins/md"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  plugins: [md()],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>通过在 vite 初始化的时候，导入额外的插件（我们自己写的 md 插件），来识别 markdown 文件</p><p>最后修改一下三篇文档的视图，以 <code>install.vue</code> 为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;article v-html=&quot;md&quot;&gt;&lt;/article&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        setup() &#123;</span><br><span class="line">            const md = ref(null);</span><br><span class="line">            import(&apos;../markdown/install.md&apos;).then((res) =&gt; (md.value = res.default));</span><br><span class="line">            return &#123; md &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>因为 vue 不能直接识别 md，所以不可以通过静态 import 来导入，只能通过动态 import</p><p>而动态 import 有以下两个特点</p><ol><li><p>是异步的，必须要使用有监听的对象，才能自动重渲染</p></li><li><p>取回的内容，根据 <code>export</code> 的字段而定</p><p>默认 <code>export default</code> 的情况下，就必须使用 <code>.default</code> 来取值才可以获得实际内容</p></li></ol><p>最后，使用 <code>v-html</code> 绑定到模板即可</p><h1 id="github-markdown-样式"><a href="#github-markdown-样式" class="headerlink" title="github markdown 样式"></a>github markdown 样式</h1><p>现在虽然正常引入 md 了，但是没有排版，还是丑</p><p>我们可以使用 <code>github-markdown-css</code> 这个库来获取样式表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install github-markdown-css --save</span><br></pre></td></tr></table></figure><p>安装完成后，在 <code>main.ts</code> 中引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'github-markdown-css'</span></span><br></pre></td></tr></table></figure><p>最后，找到放置文档的地方，赋予 <code>class=&quot;markdown-body&quot;</code> 即可适用 github markdown 样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">v-html</span>=<span class="string">"md"</span> <span class="attr">class</span>=<span class="string">"markdown-body"</span>&gt;</span><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="多组样例"><a href="#多组样例" class="headerlink" title="多组样例"></a>多组样例</h1><p>一个 UI 库，每个组件不可能只有一个用例</p><p>所以我们要给每个组件都配多个用例，但是为了方便管理，不能写在一起</p><p>所以现在，新建 <code>src/components/examples</code>，然后把已有的几个组件样例都抽取为 <code>[componentName][index].example.vue</code>，再引入到文档页中</p><p>以 Button 为例，现在原本的 <code>src/components/Button.vue</code>，在原本之基础上新增了一个 <code>src/components/example/Button/Button1.example.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// src/components/example/Button/Button1.example.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;laby-button&gt;测试&lt;/laby-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyButton from &quot;../../../lib/Button.vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            LabyButton,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Button.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Button 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-card&gt;</span><br><span class="line">    &lt;Example /&gt;</span><br><span class="line">    &lt;/laby-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyCard from &quot;../lib/Card.vue&quot;;</span><br><span class="line"></span><br><span class="line">    import Example from &quot;./example/Button/Button1.example.vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Example,</span><br><span class="line">            LabyCard,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用我们制作好的 LabyCard 来充当容器</p><p>如上，把所有用例都拆分开</p><h1 id="展示代码"><a href="#展示代码" class="headerlink" title="展示代码"></a>展示代码</h1><p>好的 UI 库，不仅会给用户展示例，还会给出这个例子所使用的代码</p><p>可是怎么获得代码呢？</p><p>我们可以在 vite 初始化的时候做手脚——修改 <code>vite.config.ts</code> 即可</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="comment">// @ts-nocheck</span></span><br><span class="line"><span class="keyword">import</span> &#123; md &#125; <span class="keyword">from</span> <span class="string">"./plugins/md"</span>;</span><br><span class="line"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"><span class="keyword">import</span> &#123; baseParse &#125; <span class="keyword">from</span> <span class="string">'@vue/compiler-core'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    plugins: [md()],</span><br><span class="line">    vueCustomBlockTransforms: &#123;</span><br><span class="line">        example: <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; code, path &#125; = options</span><br><span class="line">            <span class="keyword">const</span> file = fs.readFileSync(path).toString()</span><br><span class="line">            <span class="keyword">const</span> parsed = baseParse(file).children.find(<span class="function"><span class="params">n</span> =&gt;</span> n.tag === <span class="string">'example'</span>) <span class="comment">// 解析包含example标签的vue文件</span></span><br><span class="line">            <span class="keyword">const</span> title = parsed.children[<span class="number">0</span>].content</span><br><span class="line">            <span class="keyword">const</span> main = file.split(parsed.loc.source).join(<span class="string">''</span>).trim()</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`export default function (Component) &#123;</span></span><br><span class="line"><span class="string">Component.__sourceCode = <span class="subst">$&#123;JSON.stringify(main)</span></span></span><br><span class="line"><span class="string"><span class="subst">        &#125;</span></span></span><br><span class="line"><span class="string">Component.__sourceCodeTitle = <span class="subst">$&#123;JSON.stringify(title)&#125;</span></span></span><br><span class="line"><span class="string">&#125;`</span>.trim()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以使用如上代码，在 vite 初始化的时候，解析每个包含 <code>&lt;example&gt;</code> 标签的 vue 文件，将其 example 标签内的内容作为标题，其余部分作为源代码，附加到每个 vue 文件的 export 上</p><p>并且，因为我们不希望能被用户访问到，所以最好是使用双下划线开头的变量名，标识源代码和源代码之标题</p><p>注意，因为我们使用的是 typescript，在类型中可能不存在某字段的时候，会引发 ts 静态报错</p><p>可以通过 <code>// @ts-nocheck</code> 注释，来忽略静态报错</p><p>现在，我们就可以展示每个例子中的代码了</p><p>以 <code>src/component/Button.vue</code> 为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// src/component/Button.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Button 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-card&gt;</span><br><span class="line">    &lt;Example /&gt;</span><br><span class="line">    &lt;code&gt;</span><br><span class="line">        &lt;pre&gt;&#123;&#123; Example.__sourceCode &#125;&#125;&lt;/pre&gt;</span><br><span class="line">    &lt;/code&gt;</span><br><span class="line">    &lt;/laby-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyCard from &quot;../lib/Card.vue&quot;;</span><br><span class="line"></span><br><span class="line">    import Example from &quot;./example/Button/Button1.example.vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Example,</span><br><span class="line">            LabyCard,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            return &#123; Example &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>记得在 <code>setup</code> 中 return 一下，否则 component 和变量是不一样的，会访问到 undefined</p><p>然后，记得在 <code>src/component/example/Button/Button1.example.vue</code> 中，加入 example 标签</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">example</span>&gt;</span>基础用法<span class="tag">&lt;/<span class="name">example</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-12.png" alt="效果图"></p><p>然后再用上我们的 github 样式，变为这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// src/component/Button.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Button 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-card&gt;</span><br><span class="line">    &lt;Example /&gt;</span><br><span class="line">    &lt;code class=&quot;markdown-body&quot;&gt;</span><br><span class="line">        &lt;pre&gt;&#123;&#123; Example.__sourceCode &#125;&#125;&lt;/pre&gt;</span><br><span class="line">    &lt;/code&gt;</span><br><span class="line">    &lt;/laby-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyCard from &quot;../lib/Card.vue&quot;;</span><br><span class="line"></span><br><span class="line">    import Example from &quot;./example/Button/Button1.example.vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Example,</span><br><span class="line">            LabyCard,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            return &#123; Example &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-13.png" alt="效果图"></p><h1 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h1><p>但是代码黑乎乎的，还是丑</p><p>我们可以用 <code>prismjs</code> 库来获得代码高亮</p><p>先安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install prismjs --save</span><br></pre></td></tr></table></figure><p>然后在需要使用的地方，分别引入 <code>prismjs</code> 和 <code>prismjs/themes/prism.css</code>，即可开始使用</p><p><code>prismjs</code>的工作原理，是构造一个对象，并绑定到 window 上，所以在模板中使用的时候，需要先获取 <code>window.Prism</code>，再在 <code>setup</code> 中 return 出去</p><p><code>Prism</code> 对象的一个用例如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Prism.highlight(</span><br><span class="line">    [sourceCode],</span><br><span class="line">    Prism.languages.html,</span><br><span class="line">    <span class="string">'html'</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>该对象上提供一个名为 <code>highlight</code> 的方法，该方法要求传入 3 个参数，按顺序分别如下</p><ol><li>源代码</li><li>作为什么代码进行解析</li><li>作为什么代码进行显示（渲染）</li></ol><p>那么还是以 Button 为例，可得如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">// src/component/Button.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Button 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-card&gt;</span><br><span class="line">    &lt;Example /&gt;</span><br><span class="line">    &lt;code class=&quot;markdown-body&quot;&gt;</span><br><span class="line">        &lt;pre</span><br><span class="line">             v-html=&quot;</span><br><span class="line">                     Prism.highlight(Example.__sourceCode, Prism.languages.html, &apos;html&apos;)</span><br><span class="line">                     &quot;</span><br><span class="line">             &gt;&lt;/pre&gt;</span><br><span class="line">    &lt;/code&gt;</span><br><span class="line">    &lt;/laby-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import &quot;prismjs&quot;;</span><br><span class="line">    import &quot;prismjs/themes/prism.css&quot;;</span><br><span class="line"></span><br><span class="line">    const Prism = (window as any).Prism;</span><br><span class="line"></span><br><span class="line">    import LabyCard from &quot;../lib/Card.vue&quot;;</span><br><span class="line"></span><br><span class="line">    import Example from &quot;./example/Button/Button1.example.vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Example,</span><br><span class="line">            LabyCard,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            return &#123; Example, Prism &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-14.png" alt="效果图"></p><p>照猫画虎，把每个例子都补上就行啦</p><h1 id="展开-收束代码"><a href="#展开-收束代码" class="headerlink" title="展开/收束代码"></a>展开/收束代码</h1><p>加个打开关闭的功能就可以了</p><p>以 Button 文档页为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Button 文档&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;laby-card class=&quot;example&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; Example.__sourceCodeTitle &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;Example /&gt;</span><br><span class="line">        &lt;code class=&quot;markdown-body&quot;&gt;</span><br><span class="line">            &lt;pre</span><br><span class="line">                 v-if=&quot;visibility&quot;</span><br><span class="line">                 v-html=&quot;</span><br><span class="line">                         Prism.highlight(Example.__sourceCode, Prism.languages.html, &apos;html&apos;)</span><br><span class="line">                         &quot;</span><br><span class="line">                 &gt;&lt;/pre&gt;</span><br><span class="line">    &lt;/code&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button class=&quot;toggle&quot; @click=&quot;toggle&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;close&quot; v-if=&quot;visibility&quot;&gt;</span><br><span class="line">                △</span><br><span class="line">                &lt;span class=&quot;desp&quot;&gt;隐藏代码&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;open&quot; v-else&gt;</span><br><span class="line">                ▽</span><br><span class="line">                &lt;span class=&quot;desp&quot;&gt;显示代码&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;/laby-card&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import &quot;prismjs&quot;;</span><br><span class="line">    import &quot;prismjs/themes/prism.css&quot;;</span><br><span class="line"></span><br><span class="line">    const Prism = (window as any).Prism;</span><br><span class="line"></span><br><span class="line">    import LabyCard from &quot;../lib/Card.vue&quot;;</span><br><span class="line"></span><br><span class="line">    import Example from &quot;./example/Button/Button1.example.vue&quot;;</span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Example,</span><br><span class="line">            LabyCard,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            const visibility = ref(false);</span><br><span class="line">            const toggle = (index) =&gt; &#123;</span><br><span class="line">                visibility.value = !visibility.value;</span><br><span class="line">            &#125;;</span><br><span class="line">            return &#123; Example, Prism, visibility, toggle &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>再补上 <code>显示代码</code> 这个功能的样式表就 ok 了</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$theme-color</span>: <span class="number">#f3678e</span>;</span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        &gt; <span class="selector-class">.example</span> &gt; <span class="selector-class">.toggle</span> &gt; * &gt; <span class="selector-class">.desp</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: inline;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.example</span> &#123;</span><br><span class="line">        &gt; <span class="selector-class">.toggle</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">            <span class="attribute">border</span>: none;</span><br><span class="line">            <span class="attribute">transition</span>: background-color <span class="number">250ms</span>;</span><br><span class="line">            <span class="attribute">outline</span>: none;</span><br><span class="line">            &amp;:focus &#123;</span><br><span class="line">                <span class="attribute">outline</span>: none;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attribute">background</span>: white;</span><br><span class="line">            <span class="attribute">cursor</span>: pointer;</span><br><span class="line">            &amp;:hover &#123;</span><br><span class="line">                <span class="attribute">background</span>: fade-out(<span class="variable">$theme-color</span>, <span class="number">0.95</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            &gt; * &gt; <span class="selector-class">.desp</span> &#123;</span><br><span class="line">                <span class="attribute">display</span>: none;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h1><p>用户光看样例，不知道参数代表什么含义，怎么可以</p><p>这里就可以用我们制作好的 Table 组件来展示样式表</p><p>引入 Table 组件，然后写好即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Button 文档&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;laby-card class=&quot;example&quot;&gt;</span><br><span class="line">        &lt;h2&gt;&#123;&#123; Example.__sourceCodeTitle &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;Example /&gt;</span><br><span class="line">        &lt;code class=&quot;markdown-body&quot;&gt;</span><br><span class="line">            &lt;pre</span><br><span class="line">                 v-if=&quot;visibility&quot;</span><br><span class="line">                 v-html=&quot;</span><br><span class="line">                         Prism.highlight(Example.__sourceCode, Prism.languages.html, &apos;html&apos;)</span><br><span class="line">                         &quot;</span><br><span class="line">                 &gt;&lt;/pre&gt;</span><br><span class="line">    &lt;/code&gt;</span><br><span class="line"></span><br><span class="line">        &lt;button class=&quot;toggle&quot; @click=&quot;toggle&quot;&gt;</span><br><span class="line">            &lt;span class=&quot;close&quot; v-if=&quot;visibility&quot;&gt;</span><br><span class="line">                △</span><br><span class="line">                &lt;span class=&quot;desp&quot;&gt;隐藏代码&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">            &lt;span class=&quot;open&quot; v-else&gt;</span><br><span class="line">                ▽</span><br><span class="line">                &lt;span class=&quot;desp&quot;&gt;显示代码&lt;/span&gt;</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;/laby-card&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;laby-table bordered&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th v-for=&quot;(head, index) in heads&quot; :key=&quot;index&quot;&gt;&#123;&#123; head.name &#125;&#125;&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr v-for=&quot;(attribute, index) in attributes&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;td v-for=&quot;key in keys&quot; :key=&quot;key&quot; v-html=&quot;attribute[key]&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">    &lt;/laby-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import &quot;prismjs&quot;;</span><br><span class="line">    import &quot;prismjs/themes/prism.css&quot;;</span><br><span class="line"></span><br><span class="line">    const Prism = (window as any).Prism;</span><br><span class="line"></span><br><span class="line">    import LabyCard from &quot;../lib/Card.vue&quot;;</span><br><span class="line">    import LabyTable from &quot;../lib/Table.vue&quot;;</span><br><span class="line"></span><br><span class="line">    import Example from &quot;./example/Button/Button1.example.vue&quot;;</span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            Example,</span><br><span class="line">            LabyCard,</span><br><span class="line">            LabyTable,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            const visibility = ref(false);</span><br><span class="line">            const toggle = (index) =&gt; &#123;</span><br><span class="line">                visibility.value = !visibility.value;</span><br><span class="line">            &#125;;</span><br><span class="line">            const heads = [</span><br><span class="line">                &#123; name: &quot;参数&quot;, identifier: &quot;attr&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;含义&quot;, identifier: &quot;desp&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;类型&quot;, identifier: &quot;type&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;可选值&quot;, identifier: &quot;values&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;默认值&quot;, identifier: &quot;default&quot; &#125;,</span><br><span class="line">            ];</span><br><span class="line">            const keys = heads.map((item: any) =&gt; item.identifier);</span><br><span class="line">            const attributes = [</span><br><span class="line">                &#123;</span><br><span class="line">                    attr: &quot;level&quot;,</span><br><span class="line">                    desp: &quot;默认类型&quot;,</span><br><span class="line">                    type: &quot;string&quot;,</span><br><span class="line">                    values: &quot;default / plain / primary / success / info / warning / danger&quot;,</span><br><span class="line">                    default: &quot;default&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    attr: &quot;disabled&quot;,</span><br><span class="line">                    desp: &quot;是否禁用&quot;,</span><br><span class="line">                    type: &quot;boolean&quot;,</span><br><span class="line">                    values: &quot;false / true&quot;,</span><br><span class="line">                    default: &quot;false&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    attr: &quot;theme&quot;,</span><br><span class="line">                    desp: &quot;式样&quot;,</span><br><span class="line">                    type: &quot;string&quot;,</span><br><span class="line">                    values: &quot;button / link / text&quot;,</span><br><span class="line">                    default: &quot;button&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    attr: &quot;loding&quot;,</span><br><span class="line">                    desp: &quot;是否加载中&quot;,</span><br><span class="line">                    type: &quot;boolean&quot;,</span><br><span class="line">                    values: &quot;false / true&quot;,</span><br><span class="line">                    default: &quot;false&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    attr: &quot;size&quot;,</span><br><span class="line">                    desp: &quot;尺寸&quot;,</span><br><span class="line">                    type: &quot;string&quot;,</span><br><span class="line">                    values: &quot;middle / small / large&quot;,</span><br><span class="line">                    default: &quot;middle&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    attr: &quot;color&quot;,</span><br><span class="line">                    desp: &quot;颜色&quot;,</span><br><span class="line">                    type: &quot;string&quot;,</span><br><span class="line">                    values: &quot;任意合法颜色值&quot;,</span><br><span class="line">                    default: &quot;#f3678e&quot;,</span><br><span class="line">                &#125;,</span><br><span class="line">            ];</span><br><span class="line">            return &#123; Example, Prism, visibility, toggle, heads, keys, attributes &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    $theme-color: #f3678e;</span><br><span class="line">    .container &#123;</span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            &gt; .example &gt; .toggle &gt; * &gt; .desp &#123;</span><br><span class="line">                display: inline;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &gt; .example &#123;</span><br><span class="line">            &gt; .toggle &#123;</span><br><span class="line">                display: block;</span><br><span class="line">                width: 100%;</span><br><span class="line">                height: 32px;</span><br><span class="line">                border: none;</span><br><span class="line">                transition: background-color 250ms;</span><br><span class="line">                outline: none;</span><br><span class="line">                &amp;:focus &#123;</span><br><span class="line">                    outline: none;</span><br><span class="line">                &#125;</span><br><span class="line">                background: white;</span><br><span class="line">                cursor: pointer;</span><br><span class="line">                &amp;:hover &#123;</span><br><span class="line">                    background: fade-out($theme-color, 0.95);</span><br><span class="line">                &#125;</span><br><span class="line">                &gt; * &gt; .desp &#123;</span><br><span class="line">                    display: none;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-15.png" alt="效果图"></p><h1 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h1><p>因为用户使用你的库，不可能是从 <code>lib</code> 引用的，而是先 <code>npm install</code> 之后直接从 <code>node_modules</code> 引用，所以要像用户一样的使用，才可以尽可能发现用户使用中可能出现的 bug，提升用户体验</p><p>那么我们先要下载自己的库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install laby-ui --save</span><br></pre></td></tr></table></figure><p>并在 <code>main.ts</code> 中引入样式表</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'laby-ui/lib/laby.css'</span></span><br></pre></td></tr></table></figure><p>然后修改每个例子中的引用</p><p>以 <code>Button1.example.vue</code> 为例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; LabyButton &#125; <span class="keyword">from</span> <span class="string">"laby-ui"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        LabyButton,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-16.png" alt="效果图"></p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;虽然现在官方文档基本快要完工了，但是也太难看了&lt;/p&gt;
&lt;p&gt;让我们把它变得好看一些吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-打包发布</title>
    <link href="https://ringoer.com/project/ui-framework-rollup/"/>
    <id>https://ringoer.com/project/ui-framework-rollup/</id>
    <published>2021-02-23T12:09:00.000Z</published>
    <updated>2021-02-23T16:36:40.607Z</updated>
    
    <content type="html"><![CDATA[<p>组件库基本制作完成了，现在让我们发布它吧</p><a id="more"></a><hr><h1 id="整理组件库"><a href="#整理组件库" class="headerlink" title="整理组件库"></a>整理组件库</h1><h2 id="公用样式表"><a href="#公用样式表" class="headerlink" title="公用样式表"></a>公用样式表</h2><p>细心的朋友应该已经注意到了，前面我们在写组件的时候，css 类名都是 <code>laby-xxx</code> 这样的</p><p>所以我们可以用选择器来做到公用配置</p><p>在 <code>src/lib</code> 文件夹下，新建一个 scss 文件，或者 css 也行，2333</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-attr">[class^="laby-"]</span>,<span class="selector-attr">[class*=" laby-"]</span>* &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: -apple-system, <span class="string">"Noto Sans"</span>, <span class="string">"Helvetica Neue"</span>, Helvetica,</span><br><span class="line">        <span class="string">"Nimbus Sans L"</span>, Arial, <span class="string">"Liberation Sans"</span>, <span class="string">"PingFang SC"</span>, <span class="string">"Hiragino Sans GB"</span>,</span><br><span class="line">        <span class="string">"Noto Sans CJK SC"</span>, <span class="string">"Source Han Sans SC"</span>, <span class="string">"Source Han Sans CN"</span>,</span><br><span class="line">        <span class="string">"Microsoft YaHei"</span>, <span class="string">"Wenquanyi Micro Hei"</span>, <span class="string">"WenQuanYi Zen Hei"</span>, <span class="string">"ST Heiti"</span>,</span><br><span class="line">        SimHei, <span class="string">"WenQuanYi Zen Hei Sharp"</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前缀改成你的项目标识就可以了</p><h2 id="统一入口"><a href="#统一入口" class="headerlink" title="统一入口"></a>统一入口</h2><p>我们还要告诉打包器，要暴露哪些内容</p><p>比如说创建一个 <code>index.ts</code>，然后汇总一下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> LabyButton <span class="keyword">from</span> <span class="string">'./Button.vue'</span></span><br><span class="line"><span class="keyword">import</span> LabyCard <span class="keyword">from</span> <span class="string">'./Card.vue'</span></span><br><span class="line"><span class="keyword">import</span> LabyDialog <span class="keyword">from</span> <span class="string">'./Dialog.vue'</span></span><br><span class="line"><span class="keyword">import</span> LabySwitch <span class="keyword">from</span> <span class="string">'./Switch.vue'</span></span><br><span class="line"><span class="keyword">import</span> LabyTable <span class="keyword">from</span> <span class="string">'./Table.vue'</span></span><br><span class="line"><span class="keyword">import</span> LabyTab <span class="keyword">from</span> <span class="string">'./Tab.vue'</span></span><br><span class="line"><span class="keyword">import</span> LabyTabs <span class="keyword">from</span> <span class="string">'./Tabs.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; LabyButton, LabyCard, LabyDialog, LabySwitch, LabyTable, LabyTab, LabyTabs, &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    install: <span class="function"><span class="params">Vue</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> components = [LabyButton, LabyCard, LabyDialog, LabySwitch, LabyTable, LabyTab, LabyTabs]</span><br><span class="line">        components.forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            Vue.component(item.name, item)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，此处有一个 <code>install</code> 方法，因为用户有可能使用完整引入，此时必须提供一个 <code>install</code> 方法才可以完整引入</p><p>现在就可以使用下述方式完整引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> LabyUI <span class="keyword">from</span> <span class="string">'laby-ui-vue'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'laby-ui-vue/lib/laby.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line">app.use(LabyUI);</span><br><span class="line">app.mount(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure><p>然后上面另一句 <code>export</code> 是用于部分引入组件的，要想部分引入组件，必须在每个子组件中都定义 <code>install</code> 方法。一个示例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;laby-card&quot; :style=&quot;&#123; &apos;--color&apos;: color &#125;&quot;&gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    declare const props: &#123;</span><br><span class="line">        color: string;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        install: function (Vue) &#123;</span><br><span class="line">            Vue.component(this.name, this);</span><br><span class="line">        &#125;,</span><br><span class="line">        name: &quot;LabyCard&quot;,</span><br><span class="line">        props: &#123;</span><br><span class="line">            color: &#123;</span><br><span class="line">                type: String,</span><br><span class="line">                default: &quot;#fe9acf&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot;&gt;</span><br><span class="line">    .laby-card &#123;</span><br><span class="line">        border-radius: 8px;</span><br><span class="line">        box-shadow: 0px 0px 10px 0px var(--color);</span><br><span class="line">        padding: 12px;</span><br><span class="line">        background: white;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>现在就可以使用下述方式部分引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; LabyButton, LabyCard &#125; <span class="keyword">from</span> <span class="string">'laby-ui-vue'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'laby-ui-vue/lib/laby.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = createApp(App);</span><br><span class="line"></span><br><span class="line">app.use(LabyButton);</span><br><span class="line">app.use(LabyCard);</span><br><span class="line"></span><br><span class="line">app.mount(<span class="string">'#app'</span>);</span><br></pre></td></tr></table></figure><h1 id="注册-npm-账号"><a href="#注册-npm-账号" class="headerlink" title="注册 npm 账号"></a>注册 npm 账号</h1><p>显然是要发布到 npm</p><p>打开 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm 官网</a> 注册一个账号先</p><h1 id="配置-rollup-打包"><a href="#配置-rollup-打包" class="headerlink" title="配置 rollup 打包"></a>配置 rollup 打包</h1><p>vite 本身不能提供打包功能，需要我们手动配置</p><p>此处选用 rollup 进行打包</p><p>首先在项目根目录下新建文件 <code>rollup.config.js</code></p><p>各配置含义请参看注释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rollup.config.js</span></span><br><span class="line"><span class="keyword">import</span> esbuild <span class="keyword">from</span> <span class="string">'rollup-plugin-esbuild'</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">'rollup-plugin-vue'</span></span><br><span class="line"><span class="keyword">import</span> scss <span class="keyword">from</span> <span class="string">'rollup-plugin-scss'</span></span><br><span class="line"><span class="keyword">import</span> dartSass <span class="keyword">from</span> <span class="string">'sass'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; terser &#125; <span class="keyword">from</span> <span class="string">"rollup-plugin-terser"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    input: <span class="string">'src/lib/index.ts'</span>, <span class="comment">// 主入口配置</span></span><br><span class="line">    output: [&#123;</span><br><span class="line">        globals: &#123;</span><br><span class="line">            vue: <span class="string">'Vue'</span>  <span class="comment">// 全局依赖</span></span><br><span class="line">        &#125;,</span><br><span class="line">        name: <span class="string">'Laby'</span>,  <span class="comment">// 项目名称</span></span><br><span class="line">        file: <span class="string">'lib/laby.js'</span>,  <span class="comment">// 输出文件名</span></span><br><span class="line">        format: <span class="string">'es'</span>,  <span class="comment">// 输出文件格式，使用 es module</span></span><br><span class="line">        plugins: [terser()]  <span class="comment">// 压缩文件大小</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        globals: &#123;</span><br><span class="line">            vue: <span class="string">'Vue'</span>  <span class="comment">// 全局依赖</span></span><br><span class="line">        &#125;,</span><br><span class="line">        name: <span class="string">'Laby'</span>,  <span class="comment">// 项目名称</span></span><br><span class="line">        file: <span class="string">'lib/laby.umd.js'</span>,  <span class="comment">// 输出文件名</span></span><br><span class="line">        format: <span class="string">'umd'</span>,  <span class="comment">// 输出文件格式，使用 umd</span></span><br><span class="line">        plugins: [terser()]  <span class="comment">// 压缩文件大小</span></span><br><span class="line">    &#125;,],</span><br><span class="line">    plugins: [</span><br><span class="line">        vue(&#123;</span><br><span class="line">            include: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">        scss(&#123; <span class="attr">include</span>: <span class="regexp">/\.scss$/</span>, <span class="attr">sass</span>: dartSass &#125;),</span><br><span class="line">        esbuild(&#123;</span><br><span class="line">            include: <span class="regexp">/\.[jt]s$/</span>,</span><br><span class="line">            minify: process.env.NODE_ENV === <span class="string">'production'</span>,</span><br><span class="line">            target: <span class="string">'es2015'</span>  <span class="comment">// 降格为 es6 语法</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，rollup 依赖至少 5 个包</p><ol><li>sass</li><li>rollup-plugin-esbuild</li><li>rollup-plugin-vue</li><li>rollup-plugin-scss</li><li>rollup-plugin-terser</li></ol><p>我们需要先下载它们</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install sass -D</span><br><span class="line">npm install rollup-plugin-esbuild -D</span><br><span class="line">npm install rollup-plugin-vue -D</span><br><span class="line">npm install rollup-plugin-scss -D</span><br><span class="line">npm install rollup-plugin-terser -D</span><br></pre></td></tr></table></figure><p>下载完后，请注意检查一下 <code>package.json</code>，看看上述依赖是不是都在 <code>devDependencies</code> 下，若不是，请移动到该字段下</p><h1 id="进行打包"><a href="#进行打包" class="headerlink" title="进行打包"></a>进行打包</h1><p>现在可以进行打包了</p><p>在项目根目录运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rollup -c</span><br></pre></td></tr></table></figure><p>运行完毕后，会在项目根目录下看到一个新文件夹 <code>lib</code></p><p>里面应该有三个文件</p><ul><li>laby.css</li><li>laby.js</li><li>laby.umd.js</li></ul><h1 id="发布到-npm"><a href="#发布到-npm" class="headerlink" title="发布到 npm"></a>发布到 npm</h1><p>先回到项目根目录，然后打开 <code>package.json</code></p><p>向该文件中添加 <code>files</code> 和 <code>main</code> 字段，用于配置组件库的所在地和默认文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"laby-ui"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.0"</span>,</span><br><span class="line">  <span class="attr">"files"</span>: [</span><br><span class="line">    <span class="string">"lib/*"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"lib/laby.js"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发布到 npm 时，发布的项目名取决于该配置中的 <code>name</code> 字段，发布的版本号取决于该配置中的 <code>version</code> 字段</p><p>注意，每次发布时，发布的新版本号不得低于该项目以前发布过的任意版本号</p><p>然后在项目根目录下运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><p>登录上你刚才在 npm 注册的账号</p><p>注意，此处必须使用 npm 源，taobao 源是不能登上 npm 账号的</p><p>然后运行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>就可以发布包到 npm 了</p><p>如果你的包名已经被别人发布过，那么这一步会失败，回头修改你的包名吧</p><p>如果发布错了，可以删除这个包，但是要求是 72 小时内，这里不教了，反正是 unpublish</p><p>发布后可能会有延迟，等待 10 分钟左右应该就可以了</p><p>此时通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install laby-ui</span><br></pre></td></tr></table></figure><p>就可以下载到你新发布的包了</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;组件库基本制作完成了，现在让我们发布它吧&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-Card 组件</title>
    <link href="https://ringoer.com/project/ui-framework-card/"/>
    <id>https://ringoer.com/project/ui-framework-card/</id>
    <published>2021-02-23T10:40:00.000Z</published>
    <updated>2021-02-23T10:47:46.212Z</updated>
    
    <content type="html"><![CDATA[<p>最后，制作一下在展示的时候，用来区分各个用例的 <code>Card</code> 组件</p><a id="more"></a><hr><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>惯例先行需求分析</p><ol><li>应当允许用户自定义内容</li><li>可以自定义颜色</li></ol><p>那么可以整理出以下参数表格</p><table><thead><tr><th>参数</th><th>含义</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>color</td><td>颜色</td><td>string</td><td>任意合法颜色值</td><td>#fe9acf</td></tr></tbody></table><h1 id="骨架"><a href="#骨架" class="headerlink" title="骨架"></a>骨架</h1><p>容易得到如下骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-card"</span> <span class="attr">:style</span>=<span class="string">"&#123; '--color': color &#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>先 ts 声明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> props: &#123;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后在 <code>export default</code> 中，写入我们的参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"LabyCard"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        color: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"#fe9acf"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h1><p>然后补全样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.laby-card</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">0px</span> var(--color);</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>引入文档页看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Card.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Card 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-card color=&quot;#999&quot;&gt;一些可能存在的卡片内容&lt;/laby-card&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyCard from &quot;../lib/Card.vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            LabyCard,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-11.png" alt="效果图"></p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最后，制作一下在展示的时候，用来区分各个用例的 &lt;code&gt;Card&lt;/code&gt; 组件&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-Tabs 组件</title>
    <link href="https://ringoer.com/project/ui-framework-tabs/"/>
    <id>https://ringoer.com/project/ui-framework-tabs/</id>
    <published>2021-02-23T10:08:00.000Z</published>
    <updated>2021-02-23T10:39:17.916Z</updated>
    
    <content type="html"><![CDATA[<p>大多数网站都有的标签页</p><a id="more"></a><hr><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>惯例先行需求分析</p><ol><li>可以选择标签页排列的方向</li><li>选中的标签页应当有下划线显示</li><li>切换选中时，下划线应当有动画效果</li><li>应当允许更换颜色</li></ol><p>那么可以整理出以下参数表格</p><table><thead><tr><th>参数</th><th>含义</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>direction</td><td>方向</td><td>string</td><td>row / column</td><td>row</td></tr><tr><td>selected</td><td>默认选中</td><td>string</td><td>子项的 name</td><td>必填</td></tr><tr><td>color</td><td>颜色</td><td>string</td><td>任意合法颜色值</td><td>#f3678e</td></tr></tbody></table><p>通过为子项设置 <code>name</code> 属性，来指定默认值</p><h1 id="骨架"><a href="#骨架" class="headerlink" title="骨架"></a>骨架</h1><h2 id="本体"><a href="#本体" class="headerlink" title="本体"></a>本体</h2><p>容易得到如下骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">"laby-tabs"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">:style</span>=<span class="string">"&#123; '--color': color &#125;"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">ref</span>=<span class="string">"container"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">:direction</span>=<span class="string">"direction"</span></span></span><br><span class="line"><span class="tag">         &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-tabs-titles"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">v-for</span>=<span class="string">"(title, index) in titles"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">class</span>=<span class="string">"laby-tabs-title"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">:class</span>=<span class="string">"&#123; selected: names[index] === selected &#125;"</span></span></span><br><span class="line"><span class="tag">                    @<span class="attr">click</span>=<span class="string">"select(index)"</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">:ref</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">                          (el) =&gt; &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                          if (names[index] === selected) &#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">                          selectedItem = el;</span></span></span><br><span class="line"><span class="tag"><span class="string">                          &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">                          &#125;</span></span></span><br><span class="line"><span class="tag"><span class="string">                          "</span></span></span><br><span class="line"><span class="tag">                    &gt;</span></span><br><span class="line">                &#123;&#123; title &#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-tabs-indicator"</span> <span class="attr">ref</span>=<span class="string">"indicator"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-tabs-divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-tabs-content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"content"</span> <span class="attr">:key</span>=<span class="string">"selected"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用一个单独的 <code>div</code> 来充当下划线，并且使用一个新的 <code>component</code> 来显示用户输入的内容</p><p>那么既然标签页叫做 <code>Tabs</code>，那我们就新建一个 <code>Tab</code>，命名为标签，用来当做子组件吧</p><h2 id="子组件-Tab"><a href="#子组件-Tab" class="headerlink" title="子组件 Tab"></a>子组件 Tab</h2><p>容易得到骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显然只有一个参数，就是标题，所以有如下 script</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> props: &#123;</span><br><span class="line">    title: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"LabyTab"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        title: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"标签页"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>先 ts 声明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> props: &#123;</span><br><span class="line">    direction?: <span class="string">"row"</span> | <span class="string">"column"</span>;</span><br><span class="line">    selected: <span class="built_in">String</span>;</span><br><span class="line">    color: <span class="built_in">String</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> context: SetupContext;</span><br></pre></td></tr></table></figure><p>然后在 <code>export default</code> 中，写入我们的参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"LabyTabs"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        direction: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"row"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        selected: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            required: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        color: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"#f3678e"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再补全 <code>setup</code> 方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">if</span> (![<span class="string">"row"</span>, <span class="string">"column"</span>].includes(props.direction)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"错误的方向"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> container = ref&lt;HTMLDivElement&gt;(<span class="literal">null</span>); <span class="comment">// 获取容器</span></span><br><span class="line">    <span class="keyword">const</span> selectedItem = ref&lt;HTMLButtonElement&gt;(<span class="literal">null</span>); <span class="comment">// 获取选中项</span></span><br><span class="line">    <span class="keyword">const</span> indicator = ref&lt;HTMLDivElement&gt;(<span class="literal">null</span>); <span class="comment">// 获取下划线</span></span><br><span class="line">    <span class="keyword">const</span> slots = context.slots.default(); <span class="comment">// 通过上下文的slots属性，获得具体内容</span></span><br><span class="line">    slots.forEach(<span class="function">(<span class="params">slot</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (slot.type !== LabyTab) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"一级子标签必须是 LabyTab"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!slot.props) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"存在 LabyTab 属性列为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="string">"title"</span> <span class="keyword">in</span> slot.props)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"LabyTab 缺少属性 title"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="string">"name"</span> <span class="keyword">in</span> slot.props)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"LabyTab 缺少属性 name"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> titles = slots.map(<span class="function">(<span class="params">slot</span>) =&gt;</span> slot.props.title);</span><br><span class="line">    <span class="keyword">const</span> names = slots.map(<span class="function">(<span class="params">slot</span>) =&gt;</span> slot.props.name);</span><br><span class="line">    <span class="keyword">if</span> (!names.includes(props.selected)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"指定了不存在的 selected 值"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> content = computed(<span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">                             slots.find(<span class="function">(<span class="params">slot</span>) =&gt;</span> slot.props.name === props.selected)</span><br><span class="line">                            ); <span class="comment">// 设置当前显示的内容</span></span><br><span class="line">    onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        watchEffect(</span><br><span class="line">            () =&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (props.direction === <span class="string">"row"</span>) &#123;</span><br><span class="line">                    <span class="keyword">const</span> &#123; height &#125; = selectedItem.value.getBoundingClientRect();</span><br><span class="line">                    indicator.value.style.top = height + <span class="string">"px"</span>;</span><br><span class="line">                    <span class="keyword">const</span> &#123; width &#125; = selectedItem.value.getBoundingClientRect();</span><br><span class="line">                    indicator.value.style.width = width + <span class="string">"px"</span>;</span><br><span class="line">                    <span class="keyword">const</span> left1 = container.value.getBoundingClientRect().left;</span><br><span class="line">                    <span class="keyword">const</span> left2 = selectedItem.value.getBoundingClientRect().left;</span><br><span class="line">                    <span class="keyword">const</span> left = left2 - left1;</span><br><span class="line">                    indicator.value.style.left = left + <span class="string">"px"</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> &#123; height &#125; = selectedItem.value.getBoundingClientRect();</span><br><span class="line">                    indicator.value.style.height = height + <span class="string">"px"</span>;</span><br><span class="line">                    <span class="keyword">const</span> &#123; width &#125; = selectedItem.value.getBoundingClientRect();</span><br><span class="line">                    indicator.value.style.left = width + <span class="string">"px"</span>;</span><br><span class="line">                    <span class="keyword">const</span> top1 = container.value.getBoundingClientRect().top;</span><br><span class="line">                    <span class="keyword">const</span> top2 = selectedItem.value.getBoundingClientRect().top;</span><br><span class="line">                    <span class="keyword">const</span> top = top2 - top1;</span><br><span class="line">                    indicator.value.style.top = top + <span class="string">"px"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123; flush: <span class="string">"post"</span> &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;); <span class="comment">// 设置监听，用来修改下划线的位置</span></span><br><span class="line">    <span class="comment">// 注意watchEffect的第二个参数，默认是pre，会导致变化发生在渲染之前，导致下划线错位</span></span><br><span class="line">    <span class="keyword">const</span> select = <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">        context.emit(<span class="string">"update:selected"</span>, names[index]);</span><br><span class="line">    &#125;; <span class="comment">// 选择新的标签</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        container,</span><br><span class="line">        selectedItem,</span><br><span class="line">        indicator,</span><br><span class="line">        slots,</span><br><span class="line">        titles,</span><br><span class="line">        names,</span><br><span class="line">        content,</span><br><span class="line">        select,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，除了定义之外，还附加了很多验证，详情见注释</p><h1 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h1><p>然后补全样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$theme-color</span>: var(--color);</span><br><span class="line"><span class="selector-class">.laby-tabs</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    &amp;-titles &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;-<span class="selector-tag">title</span> &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">6px</span>;</span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        <span class="attribute">cursor</span>: pointer;</span><br><span class="line">        <span class="attribute">outline</span>: none;</span><br><span class="line">        <span class="attribute">background</span>: white;</span><br><span class="line">        &amp;:focus &#123;</span><br><span class="line">            <span class="attribute">outline</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="variable">$theme-color</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &amp;<span class="selector-class">.selected</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="variable">$theme-color</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;-indicator &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">transition</span>: all <span class="number">250ms</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">$theme-color</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;-divider &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid rgb(<span class="number">184</span>, <span class="number">184</span>, <span class="number">184</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;-<span class="attribute">content</span> &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">4px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-tabs</span><span class="selector-attr">[direction="column"]</span> &#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    &gt; <span class="selector-class">.laby-tabs-titles</span> &#123;</span><br><span class="line">        <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.laby-tabs-content</span> &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>引入文档页看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Tabs.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Tabs 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-tabs v-model:selected=&quot;selected&quot; direction=&quot;column&quot; color=&quot;blue&quot;&gt;</span><br><span class="line">    &lt;laby-tab title=&quot;标签页1&quot; name=&quot;first&quot;&gt; 我是第一页的内容 &lt;/laby-tab&gt;</span><br><span class="line">    &lt;laby-tab title=&quot;标签页2&quot; name=&quot;second&quot;&gt; 我是第二页的内容 &lt;/laby-tab&gt;</span><br><span class="line">    &lt;/laby-tabs&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyTab from &quot;../lib/Tab.vue&quot;;</span><br><span class="line">    import LabyTabs from &quot;../lib/Tabs.vue&quot;;</span><br><span class="line"></span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            LabyTab,</span><br><span class="line">            LabyTabs,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            const selected = ref(&quot;first&quot;);</span><br><span class="line">            return &#123; selected &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-10.png" alt="效果图"></p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大多数网站都有的标签页&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-Table 组件</title>
    <link href="https://ringoer.com/project/ui-framework-table/"/>
    <id>https://ringoer.com/project/ui-framework-table/</id>
    <published>2021-02-23T09:08:00.000Z</published>
    <updated>2021-02-23T10:39:29.328Z</updated>
    
    <content type="html"><![CDATA[<p>自定义表格也是非常香的</p><a id="more"></a><hr><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>惯例先行需求分析</p><ol><li>基于原生 <code>table</code> 标签的强语义</li><li>允许用户自定义表头、表体</li><li>可选是否具有边框</li></ol><p>那么可以整理出以下参数表格</p><table><thead><tr><th>参数</th><th>含义</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>heads</td><td>表头</td><td>Array</td><td>数组，每一项包含两个 string 字段：name、identifier</td><td>必填</td></tr><tr><td>datas</td><td>表数据</td><td>Array</td><td>数组，每一项包含与 heads 相同数量的 string 字段</td><td>必填</td></tr><tr><td>bordered</td><td>是否有边框</td><td>boolean</td><td>false / true</td><td>false</td></tr></tbody></table><h1 id="骨架"><a href="#骨架" class="headerlink" title="骨架"></a>骨架</h1><p>容易得到如下骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"laby-table"</span> <span class="attr">:bordered</span>=<span class="string">"bordered"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>让用户自己填写内容即可</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>先 ts 声明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> props: &#123;</span><br><span class="line">    bordered: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后在 <code>export default</code> 中，写入我们的参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"LabyTable"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        bordered: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h1><p>然后补全样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.laby-table</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: left;</span><br><span class="line">    <span class="attribute">border-spacing</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="selector-tag">th</span>,</span><br><span class="line">    <span class="selector-tag">td</span> &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">12px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">tbody</span> &#123;</span><br><span class="line">        &gt; <span class="selector-tag">tr</span> &#123;</span><br><span class="line">            <span class="attribute">transition</span>: background-color <span class="number">250ms</span>;</span><br><span class="line">            &amp;:nth-child(even) &#123;</span><br><span class="line">                <span class="attribute">background</span>: rgb(<span class="number">247</span>, <span class="number">247</span>, <span class="number">247</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;:hover &#123;</span><br><span class="line">                <span class="attribute">background</span>: <span class="number">#ffeaf4</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-table</span><span class="selector-attr">[bordered="true"]</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid rgb(<span class="number">235</span>, <span class="number">235</span>, <span class="number">235</span>);</span><br><span class="line">    <span class="selector-tag">tr</span>,</span><br><span class="line">    <span class="selector-tag">th</span>,</span><br><span class="line">    <span class="selector-tag">td</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid rgb(<span class="number">235</span>, <span class="number">235</span>, <span class="number">235</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，当设置属性 <code>bordered</code> 的时候，因为它不是 DOM 元素本有的属性，所以无论什么情况都会被添加，只不过值可能是 false</p><p>但是 <code>disabled</code> 属性就没有这个问题，它为 false 值时不会绑定到 DOM 元素上</p><p>所以，此处属性选择器要写 <code>[bordered=&quot;true&quot;]</code></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>引入文档页看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Dialog.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Table 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-table bordered&gt;</span><br><span class="line">    &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th v-for=&quot;(head, index) in heads&quot; :key=&quot;index&quot;&gt;&#123;&#123; head.name &#125;&#125;&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;其余操作&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/thead&gt;</span><br><span class="line">    &lt;tbody&gt;</span><br><span class="line">        &lt;tr v-for=&quot;(data, index) in datas&quot; :key=&quot;index&quot;&gt;</span><br><span class="line">            &lt;td v-for=&quot;key in keys&quot; :key=&quot;key&quot; v-html=&quot;data[key]&quot;&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;laby-button @click=&quot;del(index)&quot;&gt;删除&lt;/laby-button&gt;</span><br><span class="line">    &lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/tbody&gt;</span><br><span class="line">    &lt;/laby-table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyButton from &quot;../lib/Button.vue&quot;;</span><br><span class="line">    import LabyTable from &quot;../lib/Table.vue&quot;;</span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            LabyTable,</span><br><span class="line">            LabyButton,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            const heads = ref([</span><br><span class="line">                &#123; name: &quot;参数&quot;, identifier: &quot;attr&quot; &#125;,</span><br><span class="line">                &#123; name: &quot;类型&quot;, identifier: &quot;type&quot; &#125;,</span><br><span class="line">            ]);</span><br><span class="line">            const keys = heads.value.map((item: any) =&gt; item.identifier);</span><br><span class="line">            const datas = ref([</span><br><span class="line">                &#123; attr: &quot;level&quot;, type: &quot;string&quot; &#125;,</span><br><span class="line">                &#123; attr: &quot;size&quot;, type: &quot;string&quot; &#125;,</span><br><span class="line">                &#123; attr: &quot;loading&quot;, type: &quot;boolean&quot; &#125;,</span><br><span class="line">            ]);</span><br><span class="line">            const del = (index) =&gt; &#123;</span><br><span class="line">                datas.value = datas.value.filter((item, i) =&gt; i != index);</span><br><span class="line">            &#125;;</span><br><span class="line">            return &#123; heads, keys, datas, del &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-9.png" alt="效果图"></p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自定义表格也是非常香的&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-Switch 组件</title>
    <link href="https://ringoer.com/project/ui-framework-switch/"/>
    <id>https://ringoer.com/project/ui-framework-switch/</id>
    <published>2021-02-23T08:06:00.000Z</published>
    <updated>2021-02-23T10:39:06.108Z</updated>
    
    <content type="html"><![CDATA[<p>很常用的开关组件</p><a id="more"></a><hr><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>惯例先行需求分析</p><ol><li>分为选中/未被选中，两种状态</li><li>可以通过点击变更选中状态</li><li>不同的选中状态有不同的颜色，且有滑块处于不同的端</li><li>可以指定不同的尺寸</li><li>可以自定义颜色</li><li>可以设置为禁用</li></ol><p>那么可以整理出以下参数表格</p><table><thead><tr><th>参数</th><th>含义</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>value</td><td>默认选择状态</td><td>boolean</td><td>false / true</td><td>false</td></tr><tr><td>size</td><td>尺寸</td><td>string</td><td>middle / small / large</td><td>middle</td></tr><tr><td>color</td><td>颜色</td><td>string</td><td>任意合法颜色值</td><td>#f3678e</td></tr><tr><td>disabled</td><td>是否禁用</td><td>boolean</td><td>false / true</td><td>false</td></tr></tbody></table><h1 id="骨架"><a href="#骨架" class="headerlink" title="骨架"></a>骨架</h1><p>因为具有和 <code>button</code> 标签一样的”点击”之功能，所以可以直接使用 <code>button</code> 标签来实现</p><p>然后用一个 <code>div</code> 来充当滑块</p><p>容易得到如下骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">            @<span class="attr">click</span>=<span class="string">"toggle"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">class</span>=<span class="string">"laby-swicth"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:class</span>=<span class="string">"&#123; active: value &#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:size</span>=<span class="string">"size"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:style</span>=<span class="string">"&#123; '--color': color &#125;"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:disabled</span>=<span class="string">"disabled"</span></span></span><br><span class="line"><span class="tag">            &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>先 ts 声明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> props: &#123;</span><br><span class="line">    value: <span class="built_in">boolean</span>;</span><br><span class="line">    size?: <span class="string">"middle"</span> | <span class="string">"small"</span> | <span class="string">"large"</span>;</span><br><span class="line">    color: <span class="built_in">string</span>;</span><br><span class="line">    disabled: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> context: SetupContext;</span><br></pre></td></tr></table></figure><p>然后在 <code>export default</code> 中，写入我们的参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"LabySwitch"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        value: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        size: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"middle"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        color: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"#f3678e"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        disabled: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再补全 <code>setup</code> 方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> toggle = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        context.emit(<span class="string">"update:value"</span>, !props.value);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; toggle &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h1><p>然后补全样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> layout(<span class="variable">$r</span>, <span class="variable">$d</span>) &#123;</span><br><span class="line">    <span class="variable">$r2</span>: <span class="variable">$r</span> - <span class="variable">$d</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#adadad</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    <span class="attribute">transition</span>: background-color <span class="number">250ms</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    :focus &#123;</span><br><span class="line">        <span class="attribute">outline</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">background</span>: white;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">        <span class="attribute">transition</span>: left <span class="number">250ms</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="variable">$r2</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="variable">$r2</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="variable">$d</span>/<span class="number">2</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="variable">$d</span>/<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">$r</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$r</span> * <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="variable">$r</span> / <span class="number">2</span>;</span><br><span class="line">    &amp;<span class="selector-class">.active</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: var(--color);</span><br><span class="line">        &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">left</span>: calc(<span class="number">100%</span> - #&#123;<span class="variable">$r2</span>&#125; - #&#123;<span class="variable">$d</span>/<span class="number">2</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$r</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="variable">$d</span>: <span class="number">4px</span>;</span><br><span class="line"><span class="selector-class">.laby-swicth</span><span class="selector-attr">[size="small"]</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$r</span>, <span class="variable">$d</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-swicth</span><span class="selector-attr">[size="middle"]</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$r</span> * 1.5, <span class="variable">$d</span> * 1.5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-swicth</span><span class="selector-attr">[size="large"]</span> &#123;</span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$r</span> * 2, <span class="variable">$d</span> * 2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-swicth</span><span class="selector-attr">[disabled]</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>引入文档页看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Switch.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;Switch 文档&lt;/div&gt;</span><br><span class="line">  &lt;laby-switch v-model:value=&quot;isActive&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import LabySwitch from &quot;../lib/Switch.vue&quot;;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    LabySwitch,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const isActive = ref(false);</span><br><span class="line">    return &#123; isActive &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-8.png" alt="效果图"></p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很常用的开关组件&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-Dialog 组件</title>
    <link href="https://ringoer.com/project/ui-framework-dialog/"/>
    <id>https://ringoer.com/project/ui-framework-dialog/</id>
    <published>2021-02-23T07:07:00.000Z</published>
    <updated>2021-02-23T10:38:49.184Z</updated>
    
    <content type="html"><![CDATA[<p>做好了 Button，知道有遮罩层这么一回事，就可以做 Dialog 组件了</p><a id="more"></a><hr><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>惯例先行需求分析</p><ol><li>默认是不可见的，在用户触发某个动作后变为可见</li><li>自带白板卡片，分为上中下三个区域，分别放置标题、内容、操作</li><li>有两个基本操作：确定、取消</li><li>卡片后应放置淡黑色遮罩层，遮住原本网页内容</li><li>可以自定义是否允许取消</li><li>右上角提供小叉叉来允许关闭</li><li>允许通过点击遮罩层来关闭</li></ol><p>那么可以整理出以下参数表格</p><table><thead><tr><th>参数</th><th>含义</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>visible</td><td>是否可见</td><td>boolean</td><td>false / true</td><td>false</td></tr><tr><td>title</td><td>标题</td><td>string</td><td>任意字符串</td><td>必填</td></tr><tr><td>ok</td><td>确定回调</td><td>()=&gt;boolean</td><td>返回 boolean 的函数</td><td>()=&gt;true</td></tr><tr><td>cancel</td><td>取消回调</td><td>()=&gt;boolean</td><td>返回 boolean 的函数</td><td>()=&gt;true</td></tr></tbody></table><p>第 3 条，可以通过设置返回值为 true 来允许事件发生，反之不允许</p><p>第 5 条，可以通过设置返回 false 来取消事件</p><p>第 6/7 条，直接与取消功能共用函数即可</p><h1 id="骨架"><a href="#骨架" class="headerlink" title="骨架"></a>骨架</h1><p>可以复用已经制作好的 <code>Button</code> 组件</p><p>容易得到如下骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"visible"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-dialog-overlay"</span> @<span class="attr">click</span>=<span class="string">"close"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-dialog"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"laby-dialog-header"</span>&gt;</span></span><br><span class="line">                &#123;&#123; title &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"laby-dialog-close"</span> @<span class="attr">click</span>=<span class="string">"close"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-dialog-divider"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"laby-dialog-main"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-dialog-divider"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"laby-dialog-footer"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">laby-button</span> <span class="attr">level</span>=<span class="string">"plain"</span> @<span class="attr">click</span>=<span class="string">"close"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">laby-button</span>&gt;</span></span><br><span class="line">                &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                <span class="tag">&lt;<span class="name">laby-button</span> @<span class="attr">click</span>=<span class="string">"task"</span> <span class="attr">:loading</span>=<span class="string">"loading"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">laby-button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是我们一般不希望对话框弹窗在 DOM 树上的位置是非常下级的元素的子元素，而希望是 <code>body</code> 的直接子元素，那么我们可以使用 vue3 的 <code>teleport</code> 组件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-if</span>=<span class="string">"visible"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-dialog-overlay"</span> @<span class="attr">click</span>=<span class="string">"close"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-dialog"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"laby-dialog-header"</span>&gt;</span></span><br><span class="line">                    &#123;&#123; title &#125;&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"laby-dialog-close"</span> @<span class="attr">click</span>=<span class="string">"close"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-dialog-divider"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"laby-dialog-main"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-dialog-divider"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"laby-dialog-footer"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">laby-button</span> <span class="attr">level</span>=<span class="string">"plain"</span> @<span class="attr">click</span>=<span class="string">"close"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">laby-button</span>&gt;</span></span><br><span class="line">                    &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">laby-button</span> @<span class="attr">click</span>=<span class="string">"task"</span> <span class="attr">:loading</span>=<span class="string">"loading"</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">laby-button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，在渲染时，<code>teleport</code> 内部的内容就会出现在 <code>body</code> 的子级</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>先 ts 声明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> props: &#123;</span><br><span class="line">  visible: <span class="built_in">boolean</span>;</span><br><span class="line">  title: <span class="built_in">string</span>;</span><br><span class="line">  ok: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line">  cancel: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> context: SetupContext;</span><br></pre></td></tr></table></figure><p>然后在 <code>export default</code> 中，写入我们的参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"LabyDialog"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        visible: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        title: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            required: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        ok: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Function</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">        cancel: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Function</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        LabyButton,</span><br><span class="line">    &#125;,</span><br><span class="line">    setup()&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>再补全 <code>setup</code> 方法，此处选用 Promise 制造提交等待响应的感觉</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> loading = ref(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">const</span> close = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (loading.value) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(props.cancel());</span><br><span class="line">        &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (result !== <span class="literal">false</span>) &#123;</span><br><span class="line">                context.emit(<span class="string">"update:visible"</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> task = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            loading.value = <span class="literal">true</span>;</span><br><span class="line">            resolve(props.ok());</span><br><span class="line">        &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (result === <span class="literal">true</span>) &#123;</span><br><span class="line">                loading.value = <span class="literal">false</span>;</span><br><span class="line">                context.emit(<span class="string">"update:visible"</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> &#123; loading, close, task &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h1><p>然后补全样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.laby-dialog-overlay</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: fade-out(<span class="variable">$color</span>: <span class="number">#000000</span>, <span class="variable">$amount</span>: <span class="number">0.7</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-dialog</span> &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    &gt; * &#123;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.laby-dialog-divider</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ffb5dc</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.laby-dialog-header</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">        &gt; <span class="selector-class">.laby-dialog-close</span> &#123;</span><br><span class="line">            <span class="attribute">position</span>: relative;</span><br><span class="line">            <span class="attribute">display</span>: inline-block;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">            <span class="attribute">cursor</span>: pointer;</span><br><span class="line">            &amp;::before,</span><br><span class="line">            &amp;::after &#123;</span><br><span class="line">                <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">                <span class="attribute">position</span>: absolute;</span><br><span class="line">                <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">                <span class="attribute">background</span>: black;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">                <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">                <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;::before &#123;</span><br><span class="line">                <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>) rotate(-<span class="number">45deg</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            &amp;::after &#123;</span><br><span class="line">                <span class="attribute">transform</span>: translate(-<span class="number">50%</span>, -<span class="number">50%</span>) rotate(<span class="number">45deg</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.laby-dialog-main</span> &#123;</span><br><span class="line">        <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">background</span>: white;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.laby-dialog-footer</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: flex;</span><br><span class="line">        <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>引入文档页看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Dialog.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Dialog 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-button @click=&quot;visible = true&quot;&gt;打开对话框&lt;/laby-button&gt;</span><br><span class="line">&lt;laby-dialog v-model:visible=&quot;visible&quot; title=&quot;标题&quot; :ok=&quot;ok&quot; :cancel=&quot;cancel&quot;&gt;</span><br><span class="line">    &lt;span&gt; 内容 &lt;/span&gt;</span><br><span class="line">    &lt;/laby-dialog&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyButton from &quot;../lib/Button.vue&quot;;</span><br><span class="line">    import LabyDialog from &quot;../lib/Dialog.vue&quot;;</span><br><span class="line"></span><br><span class="line">    import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            LabyButton,</span><br><span class="line">            LabyDialog,</span><br><span class="line">        &#125;,</span><br><span class="line">        setup() &#123;</span><br><span class="line">            const visible = ref(false);</span><br><span class="line">            const ok = () =&gt; &#123;</span><br><span class="line">                return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">                    setTimeout(() =&gt; &#123;</span><br><span class="line">                        console.log(&quot;ok&quot;);</span><br><span class="line">                        resolve(true);</span><br><span class="line">                    &#125;, 1000);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;;</span><br><span class="line">            const cancel = () =&gt; &#123;</span><br><span class="line">                console.log(&quot;cancel&quot;);</span><br><span class="line">            &#125;;</span><br><span class="line">            return &#123; visible, ok, cancel &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-7.png" alt="效果图"></p><h1 id="一行代码打开"><a href="#一行代码打开" class="headerlink" title="一行代码打开"></a>一行代码打开</h1><p>有时候还会想，能不能不用组件式，直接用函数生成一个呢</p><p>其实是可以的，只要使用 vue3 提供的 <code>createApp</code> 和 <code>h</code> 函数就可以做到了</p><p>此处只给出一个示例，不多介绍</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createDialog.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp, h &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> LabyDialog <span class="keyword">from</span> <span class="string">'./Dialog.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createDialog = <span class="function"><span class="params">options</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; title, content, ok, cancel &#125; = options</span><br><span class="line">    <span class="keyword">const</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>)</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div)</span><br><span class="line">    <span class="keyword">const</span> close = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        app.unmount(div)</span><br><span class="line">        div.remove()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> app = createApp(&#123;</span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">return</span> h(LabyDialog, &#123;</span><br><span class="line">                visible: <span class="literal">true</span>,</span><br><span class="line">                <span class="string">'onUpdate:visible'</span>: <span class="function"><span class="params">newVisible</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (newVisible === <span class="literal">false</span>) &#123;</span><br><span class="line">                        close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                title,</span><br><span class="line">                ok, cancel</span><br><span class="line">            &#125;, &#123; <span class="keyword">default</span>() &#123; <span class="keyword">return</span> content &#125; &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    app.mount(div)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在需要的地方使用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createDialog&#125; <span class="keyword">from</span> <span class="string">'./createDialog.ts'</span></span><br></pre></td></tr></table></figure><p>引入即可</p><p>该函数要求传入一个 <code>options</code> 对象，该对象包含 <code>title, content, ok, cancel</code> 等 4 个部分，<code>content</code> 指代组件式中的插槽，其余含义见需求分析</p><p>然后使用 <code>h</code> 函数渲染新 app 中的内容，并作为参数传入 <code>createApp</code> 函数用以创建新的 app，最后挂载到 DOM 树上即可</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做好了 Button，知道有遮罩层这么一回事，就可以做 Dialog 组件了&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-Button 组件</title>
    <link href="https://ringoer.com/project/ui-framework-button/"/>
    <id>https://ringoer.com/project/ui-framework-button/</id>
    <published>2021-02-21T15:05:00.000Z</published>
    <updated>2021-02-24T09:48:17.067Z</updated>
    
    <content type="html"><![CDATA[<p>官网做好了，现在开始做核心组件吧！</p><a id="more"></a><hr><p>先创建一个 <code>src/lib</code> 文件夹，用来存放所有的组件</p><p>然后创建 <code>Button.vue</code>，开始制作 Button 吧！</p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>惯例先行需求分析</p><ol><li>多种类基础 Button，包含警告、成功、危险等</li><li>允许设置 Button 为禁用状态</li><li>不止有传统 Button，还可以有文字或链接形式</li><li>当处于加载中，Button 应当显示</li><li>有不同的尺寸可供选择</li><li>应当允许更换颜色</li><li>当鼠标放置于 Button 上、鼠标按下未松开、处于加载中等状态时，应当变更背景色</li><li>允许用户自定义 Button 上显示的文本</li></ol><p>那么可以整理出以下参数表格</p><table><thead><tr><th>参数</th><th>含义</th><th>类型</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>level</td><td>默认类型</td><td>string</td><td>default / plain / primary / success / info / warning / danger</td><td>default</td></tr><tr><td>disabled</td><td>是否禁用</td><td>boolean</td><td>false / true</td><td>false</td></tr><tr><td>theme</td><td>式样</td><td>string</td><td>button / link / text</td><td>button</td></tr><tr><td>loding</td><td>是否加载中</td><td>boolean</td><td>false / true</td><td>false</td></tr><tr><td>size</td><td>尺寸</td><td>string</td><td>middle / small / large</td><td>middle</td></tr><tr><td>color</td><td>颜色</td><td>string</td><td>任意合法颜色值</td><td>#f3678e</td></tr></tbody></table><p>第 7 条，可以通过设置一个遮罩层来实现，只要遮罩层变色，背景色也等效变色</p><p>第 8 条，可以通过插槽实现，注意 vue3 不建议使用具名插槽</p><h1 id="骨架"><a href="#骨架" class="headerlink" title="骨架"></a>骨架</h1><p>容易得到如下骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"laby-button"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:theme</span>=<span class="string">"theme"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:level</span>=<span class="string">"level"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:size</span>=<span class="string">"size"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:style</span>=<span class="string">"&#123; '--color': color &#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:disabled</span>=<span class="string">"disabled"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:loading</span>=<span class="string">"loading"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"laby-button-mask"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"laby-button-loadingIndicator"</span> <span class="attr">v-if</span>=<span class="string">"loading"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先，本质应当是一个 button 元素</p><p>在此基础上，将参数列表中整理出来的每个参数，都使用 <code>v-bind</code> 绑定到 button 上</p><p>注意，此处绑定 color，必须是如上例一样，绑定到 <code>--color</code> 属性上，才可以在 css 中使用 css3 语法 <code>var()</code> 读取，在 css 小节会再解释，此处略</p><p>之后，在 button 内</p><ol><li>放置一个遮罩层，用于变色</li><li>放置一个”加载中”的动画，用于在加载中状态下显示</li><li>放置一个默认插槽，用于传递用户自定义的文本</li></ol><p>然后为上述元素配置各自的 class 名称，骨架就完成了</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>显然，参数列表中整理出来的内容，一定来自引用该组件的地方的传入</p><p>先根据参数列表，写好 ts 声明</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> props: &#123;</span><br><span class="line">  theme?: <span class="string">"button"</span> | <span class="string">"link"</span> | <span class="string">"text"</span>;</span><br><span class="line">  level?:</span><br><span class="line">    | <span class="string">"default"</span></span><br><span class="line">    | <span class="string">"plain"</span></span><br><span class="line">    | <span class="string">"primary"</span></span><br><span class="line">    | <span class="string">"success"</span></span><br><span class="line">    | <span class="string">"info"</span></span><br><span class="line">    | <span class="string">"warning"</span></span><br><span class="line">    | <span class="string">"danger"</span>;</span><br><span class="line">  size?: <span class="string">"middle"</span> | <span class="string">"small"</span> | <span class="string">"large"</span>;</span><br><span class="line">  color: <span class="built_in">string</span>;</span><br><span class="line">  disabled: <span class="built_in">boolean</span>;</span><br><span class="line">  loading: <span class="built_in">boolean</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后在 <code>export default</code> 中，写入我们的参数</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"LabyButton"</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        theme: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"button"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        level: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"default"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        size: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"middle"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        color: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">"#f3678e"</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        disabled: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        loading: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>ok，组件功能也完成了</p><p>什么？你说属性绑定完成了，事件绑定怎么办？？</p><p>那个不用担心，在外部传递到组件的事件，在组件只有唯一根元素的情况下，是会自动绑定到根元素上面的，所以现在这样基本就完成了</p><h1 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h1><p>然后补全样式表</p><p>注意，UI 库的样式表一般不要加 <code>scoped</code> 修饰符，为了尽可能减少对用户样式表的影响，方便用户 DIY</p><p>建议直接打字抄一遍吧，一边抄一边理解比较好</p><p>特别注意，button 元素会有默认黑色外边框，不属于 border，必须通过 <code>outline: none;</code> 才能消除</p><p>然后，我们使用 css3 的 <code>var()</code> 语法，取得我们通过 js 绑定到 style 上的 <code>--color</code> 属性</p><p>为什么是 <code>--color</code> 而不是 <code>color</code> ？因为 <code>var()</code> 语法要求这个参数必须是 <code>--</code> 开头，才可以正常访问到</p><p>对于遮罩层，采用淡出到白色即可实现，原理此处不解释了</p><p>最后，对于多种不同的 button，可以使用 scss 提供的 <code>mixin / include</code> 语法来实现 </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$theme-color</span>: var(--color);</span><br><span class="line"><span class="variable">$base-mask</span>: fade-out(<span class="number">#fff</span>, <span class="number">0.7</span>);</span><br><span class="line"><span class="variable">$active-mask</span>: fade-out(<span class="number">#fff</span>, <span class="number">0.5</span>);</span><br><span class="line"><span class="variable">$h</span>: <span class="number">32px</span>;</span><br><span class="line"><span class="variable">$radius</span>: <span class="number">4px</span>;</span><br><span class="line"></span><br><span class="line">@keyframes laby-spin &#123;</span><br><span class="line">    0% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: rotate(<span class="number">0deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    100% &#123;</span><br><span class="line">        <span class="attribute">transform</span>: rotate(<span class="number">360deg</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">transition</span>: background-color <span class="number">250ms</span>;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">    :focus &#123;</span><br><span class="line">        <span class="attribute">outline</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.laby-button-mask</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="variable">$radius</span>;</span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="variable">$base-mask</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-attr">[loading="true"]</span>,</span><br><span class="line">    &amp;<span class="selector-attr">[disabled]</span> &#123;</span><br><span class="line">        <span class="attribute">cursor</span>: not-allowed;</span><br><span class="line">        &gt; <span class="selector-class">.laby-button-mask</span> &#123;</span><br><span class="line">            <span class="attribute">pointer-events</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.laby-button-loadingIndicator</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">14px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">14px</span>;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">        <span class="attribute">margin-right</span>: <span class="number">4px</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">8px</span>;</span><br><span class="line">        <span class="attribute">border-style</span>: solid;</span><br><span class="line">        <span class="attribute">border-width</span>: <span class="number">2px</span>;</span><br><span class="line">        <span class="attribute">animation</span>: laby-spin <span class="number">1s</span> infinite linear;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">mixin</span> layout(<span class="variable">$color</span>) &#123;</span><br><span class="line">    <span class="variable">$loading-color</span>: fade-out(black, <span class="number">0.7</span>);</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">$color</span>;</span><br><span class="line"></span><br><span class="line">    &amp;:active &#123;</span><br><span class="line">        &gt; <span class="selector-class">.laby-button-mask</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="variable">$active-mask</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.laby-button-loadingIndicator</span> &#123;</span><br><span class="line">        <span class="attribute">border-color</span>: <span class="variable">$loading-color</span> <span class="variable">$loading-color</span> <span class="variable">$loading-color</span> transparent;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-attr">[loading="true"]</span>,</span><br><span class="line">    &amp;<span class="selector-attr">[disabled]</span> &#123;</span><br><span class="line">        &gt; <span class="selector-class">.laby-button-mask</span> &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="variable">$base-mask</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[theme="button"]</span> &#123;</span><br><span class="line">    <span class="variable">$color</span>: <span class="variable">$theme-color</span>;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span>:not(<span class="selector-attr">[theme="button"]</span>) &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="variable">$theme-color</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[theme="link"]</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[level="plain"]</span> &#123;</span><br><span class="line">    <span class="variable">$base-color</span>: <span class="variable">$theme-color</span>;</span><br><span class="line">    @<span class="keyword">include</span> layout(white);</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid rgb(<span class="number">187</span>, <span class="number">187</span>, <span class="number">187</span>);</span><br><span class="line"></span><br><span class="line">    &amp;:not(<span class="selector-attr">[loading="true"]</span>):not(<span class="selector-attr">[disabled]</span>) &#123;</span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="variable">$base-color</span>;</span><br><span class="line">            <span class="attribute">color</span>: <span class="variable">$base-color</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[level="primary"]</span> &#123;</span><br><span class="line">    <span class="variable">$color</span>: <span class="number">#29adfa</span>;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[level="success"]</span> &#123;</span><br><span class="line">    <span class="variable">$color</span>: rgb(<span class="number">103</span>, <span class="number">194</span>, <span class="number">58</span>);</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[level="info"]</span> &#123;</span><br><span class="line">    <span class="variable">$color</span>: <span class="number">#808080</span>;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[level="warning"]</span> &#123;</span><br><span class="line">    <span class="variable">$color</span>: rgb(<span class="number">230</span>, <span class="number">162</span>, <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[level="danger"]</span> &#123;</span><br><span class="line">    <span class="variable">$color</span>: rgb(<span class="number">245</span>, <span class="number">108</span>, <span class="number">108</span>);</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[size="large"]</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">14px</span> <span class="number">24px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.laby-button</span><span class="selector-attr">[size="small"]</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上，button 组件就完成了</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>引入文档页看一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// src/components/Button.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;Button 文档&lt;/div&gt;</span><br><span class="line">&lt;laby-button&gt;测试&lt;/laby-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">    import LabyButton from &quot;../lib/Button.vue&quot;;</span><br><span class="line">    export default &#123;</span><br><span class="line">        components: &#123;</span><br><span class="line">            LabyButton,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-6.png" alt="效果图"></p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;官网做好了，现在开始做核心组件吧！&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-文档页</title>
    <link href="https://ringoer.com/project/ui-framework-document/"/>
    <id>https://ringoer.com/project/ui-framework-document/</id>
    <published>2021-02-21T12:02:00.000Z</published>
    <updated>2021-02-21T14:14:59.798Z</updated>
    
    <content type="html"><![CDATA[<p>首页做好了，文档页不能光秃秃的啊</p><a id="more"></a><hr><h1 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h1><p>先想想我们需要文档页通向哪些地方</p><p>这里直接给出我的设计</p><table><thead><tr><th>所属</th><th>子标题</th><th>跳转路径</th><th>文件名(*.vue)</th></tr></thead><tbody><tr><td>指南</td><td>介绍</td><td>/document/introduction</td><td>Introduction</td></tr><tr><td>指南</td><td>安装</td><td>/document/install</td><td>Install</td></tr><tr><td>指南</td><td>快速上手</td><td>/document/start</td><td>Start</td></tr><tr><td>组件</td><td>Button</td><td>/document/button</td><td>Button</td></tr><tr><td>组件</td><td>Dialog</td><td>/document/dialog</td><td>Dialog</td></tr><tr><td>组件</td><td>Switch</td><td>/document/switch</td><td>Switch</td></tr><tr><td>组件</td><td>Tabs</td><td>/document/tabs</td><td>Tabs</td></tr></tbody></table><p>大致就做如上的子内容</p><p>然后在 <code>src/components</code> 目录下新建需要的文件们，此处举例 <code>Introduction.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;介绍&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">    </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>再配置 <code>router.ts</code> 以路由</p><p>此处使用嵌套路由</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createWebHistory, createRouter &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./views/Home.vue'</span></span><br><span class="line"><span class="keyword">import</span> Document <span class="keyword">from</span> <span class="string">'./views/Document.vue'</span></span><br><span class="line"><span class="keyword">import</span> Introduction <span class="keyword">from</span> <span class="string">'./components/Introduction.vue'</span></span><br><span class="line"><span class="keyword">import</span> Install <span class="keyword">from</span> <span class="string">'./components/Install.vue'</span></span><br><span class="line"><span class="keyword">import</span> Start <span class="keyword">from</span> <span class="string">'./components/Start.vue'</span></span><br><span class="line"><span class="keyword">import</span> Button <span class="keyword">from</span> <span class="string">'./components/Button.vue'</span></span><br><span class="line"><span class="keyword">import</span> Dialog <span class="keyword">from</span> <span class="string">'./components/Dialog.vue'</span></span><br><span class="line"><span class="keyword">import</span> Switch <span class="keyword">from</span> <span class="string">'./components/Switch.vue'</span></span><br><span class="line"><span class="keyword">import</span> Tabs <span class="keyword">from</span> <span class="string">'./components/Tabs.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> history = createWebHistory()</span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: <span class="string">'/'</span>, component: Home &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/document'</span>, component: Document, children: [</span><br><span class="line">        &#123; path: <span class="string">''</span>, redirect: <span class="string">'/document/introduction'</span> &#125;, <span class="comment">// 默认进入介绍页面</span></span><br><span class="line">        &#123; path: <span class="string">'introduction'</span>, component: Introduction &#125;,</span><br><span class="line">        &#123; path: <span class="string">'install'</span>, component: Install &#125;,</span><br><span class="line">        &#123; path: <span class="string">'start'</span>, component: Start &#125;,</span><br><span class="line">        &#123; path: <span class="string">'button'</span>, component: Button &#125;,</span><br><span class="line">        &#123; path: <span class="string">'dialog'</span>, component: Dialog &#125;,</span><br><span class="line">        &#123; path: <span class="string">'switch'</span>, component: Switch &#125;,</span><br><span class="line">        &#123; path: <span class="string">'tabs'</span>, component: Tabs &#125;,</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h1 id="骨架"><a href="#骨架" class="headerlink" title="骨架"></a>骨架</h1><p>然后搭个骨架吧</p><p>已知文档页要显示</p><ol><li>顶边栏</li><li>菜单</li><li>内容区域</li></ol><p>容易得到如下骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Topnav</span> <span class="attr">class</span>=<span class="string">"nav"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside-list"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>指南<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document/introduction"</span>&gt;</span>介绍<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document/introduction"</span>&gt;</span>安装<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document/introduction"</span>&gt;</span>快速上手<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside-list"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document/button"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document/dialog"</span>&gt;</span>Dialog<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document/switch"</span>&gt;</span>Switch<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document/tabs"</span>&gt;</span>Tabs<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"main-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">:key</span>=<span class="string">"$route.fullPath"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后加上基本的布局样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.layout</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    &gt; <span class="selector-class">.nav</span> &#123;</span><br><span class="line">        <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.content</span> &#123;</span><br><span class="line">        <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">        <span class="attribute">padding-top</span>: <span class="number">90px</span>;</span><br><span class="line">        <span class="attribute">padding-left</span>: <span class="number">210px</span>;</span><br><span class="line">        @<span class="keyword">media</span> (max-width: 500px) &#123;</span><br><span class="line">            <span class="attribute">padding-left</span>: <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="侧边栏"><a href="#侧边栏" class="headerlink" title="侧边栏"></a>侧边栏</h1><p>重复代码不少，可以优化一下</p><p>先在 script 中声明数组</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setup() &#123;</span><br><span class="line">    <span class="keyword">const</span> componentsList = [<span class="string">"Button"</span>, <span class="string">"Dialog"</span>, <span class="string">"Switch"</span>, <span class="string">"Tabs"</span>];</span><br><span class="line">    <span class="keyword">const</span> guidancesList = [</span><br><span class="line">        &#123; path: <span class="string">"introduction"</span>, title: <span class="string">"介绍"</span> &#125;,</span><br><span class="line">        &#123; path: <span class="string">"install"</span>, title: <span class="string">"安装"</span> &#125;,</span><br><span class="line">        &#123; path: <span class="string">"start"</span>, title: <span class="string">"快速上手"</span> &#125;,</span><br><span class="line">    ];</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        componentsList,</span><br><span class="line">        guidancesList,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在模板中引入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>指南<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(guidance, index) in guidancesList"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/document/' + guidance.path"</span>&gt;</span></span><br><span class="line">                    &#123;&#123; guidance.title &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>组件列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(component, index) in componentsList"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"'/document/' + component.toLowerCase()"</span>&gt;</span></span><br><span class="line">                    &#123;&#123; component &#125;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后补全样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$base-color</span>: <span class="number">#fe9acf</span>;</span><br><span class="line"><span class="variable">$aside-index</span>: <span class="number">10</span>;</span><br><span class="line"><span class="variable">$active-color</span>: linear-gradient(</span><br><span class="line">    <span class="number">90deg</span>,</span><br><span class="line">    rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>) <span class="number">0%</span>,</span><br><span class="line">    rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>) <span class="number">97%</span>,</span><br><span class="line">    <span class="variable">$base-color</span> <span class="number">97%</span>,</span><br><span class="line">    <span class="variable">$base-color</span> <span class="number">100%</span></span><br><span class="line">);</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    &gt; <span class="selector-tag">aside</span> &#123;</span><br><span class="line">        <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">16px</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding-top</span>: <span class="number">90px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">z-index</span>: <span class="variable">$aside-index</span>;</span><br><span class="line">        &gt; <span class="selector-class">.aside-list</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">12px</span> <span class="number">0</span>;</span><br><span class="line">            &gt; <span class="selector-tag">h2</span> &#123;</span><br><span class="line">                <span class="attribute">margin-bottom</span>: <span class="number">4px</span>;</span><br><span class="line">                <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">16px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            &gt; <span class="selector-tag">ol</span> &#123;</span><br><span class="line">                &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">                    &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">                        <span class="attribute">display</span>: block;</span><br><span class="line">                        <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">32px</span>;</span><br><span class="line">                        <span class="attribute">text-decoration</span>: none;</span><br><span class="line">                        <span class="attribute">transition</span>: background-color <span class="number">100ms</span>;</span><br><span class="line">                        &amp;:hover &#123;</span><br><span class="line">                            <span class="attribute">color</span>: <span class="variable">$base-color</span>;</span><br><span class="line">                            <span class="attribute">background</span>: <span class="variable">$active-color</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="selector-class">.router-link-active</span> &#123;</span><br><span class="line">                        <span class="attribute">color</span>: <span class="variable">$base-color</span>;</span><br><span class="line">                        <span class="attribute">background</span>: <span class="variable">$active-color</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @<span class="keyword">media</span> (max-width: 500px) &#123;</span><br><span class="line">            <span class="attribute">background</span>: <span class="number">#fdd1e8</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">            <span class="attribute">height</span>: auto;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就可以做到移动的时候会浮光的侧边栏了</p><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-5.png" alt="效果图"></p><h1 id="内容区"><a href="#内容区" class="headerlink" title="内容区"></a>内容区</h1><p>先填充一下文档，然后用 border 法调整文本位置</p><p>得到如下调整</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &gt; main &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">4px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">    @<span class="keyword">media</span> (max-width: 500px) &#123;</span><br><span class="line">        <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果就不贴了，反正只是 padding 的调整</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>在文档页，还应当可以控制顶边栏上的”弹出菜单”按键的是否可见</p><p>显然默认是允许在文档页显示的，所以在模板中调整 <code>Topnav</code> 为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Topnav</span> <span class="attr">toggleMenuButtonVisible</span> <span class="attr">class</span>=<span class="string">"nav"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>然后获得对菜单的引用</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aside = ref&lt;HTMLDivElement&gt;(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">v-if</span>=<span class="string">"menuVisible"</span> <span class="attr">ref</span>=<span class="string">"aside"</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再读取 <code>App.vue</code> 提供的 <code>menuVisible</code>，并实现隐藏菜单的方法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> menuVisible = inject&lt;Ref&lt;<span class="built_in">boolean</span>&gt;&gt;(<span class="string">"menuVisible"</span>);</span><br><span class="line"><span class="keyword">const</span> hideMenu = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> target: Node = event.target;</span><br><span class="line">    <span class="keyword">if</span> (!(target <span class="keyword">instanceof</span> HTMLAnchorElement)) &#123;</span><br><span class="line">        <span class="keyword">while</span> (target.parentNode &amp;&amp; target.parentNode !== <span class="built_in">document</span>.body) &#123;</span><br><span class="line">            target = target.parentNode;</span><br><span class="line">            <span class="keyword">if</span> (target === aside.value) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.documentElement.clientWidth &lt;= <span class="number">500</span>) &#123;</span><br><span class="line">        menuVisible.value = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以有如下 <code>script</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Topnav <span class="keyword">from</span> <span class="string">"../components/Topnav.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; inject, ref, Ref &#125; <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        Topnav,</span><br><span class="line">    &#125;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        <span class="keyword">const</span> componentsList = [<span class="string">"Button"</span>, <span class="string">"Dialog"</span>, <span class="string">"Switch"</span>, <span class="string">"Tabs"</span>];</span><br><span class="line">        <span class="keyword">const</span> guidancesList = [</span><br><span class="line">            &#123; path: <span class="string">"introduction"</span>, title: <span class="string">"介绍"</span> &#125;,</span><br><span class="line">            &#123; path: <span class="string">"install"</span>, title: <span class="string">"安装"</span> &#125;,</span><br><span class="line">            &#123; path: <span class="string">"start"</span>, title: <span class="string">"快速上手"</span> &#125;,</span><br><span class="line">        ];</span><br><span class="line">        <span class="keyword">const</span> aside = ref&lt;HTMLDivElement&gt;(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">const</span> menuVisible = inject&lt;Ref&lt;<span class="built_in">boolean</span>&gt;&gt;(<span class="string">"menuVisible"</span>);</span><br><span class="line">        <span class="keyword">const</span> hideMenu = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> target: Node = event.target;</span><br><span class="line">            <span class="keyword">if</span> (!(target <span class="keyword">instanceof</span> HTMLAnchorElement)) &#123;</span><br><span class="line">                <span class="keyword">while</span> (target.parentNode &amp;&amp; target.parentNode !== <span class="built_in">document</span>.body) &#123;</span><br><span class="line">                    target = target.parentNode;</span><br><span class="line">                    <span class="keyword">if</span> (target === aside.value) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">document</span>.documentElement.clientWidth &lt;= <span class="number">500</span>) &#123;</span><br><span class="line">                menuVisible.value = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            componentsList,</span><br><span class="line">            guidancesList,</span><br><span class="line">            aside,</span><br><span class="line">            menuVisible,</span><br><span class="line">            hideMenu,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>取得关闭方法后，通过事件委托，将方法挂载到 <code>div.content</code> 上</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span> @<span class="attr">click</span>=<span class="string">"hideMenu"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>即可实现点击空白处也可以关闭弹出菜单了</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首页做好了，文档页不能光秃秃的啊&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-首页</title>
    <link href="https://ringoer.com/project/ui-framework-home/"/>
    <id>https://ringoer.com/project/ui-framework-home/</id>
    <published>2021-02-21T11:57:00.000Z</published>
    <updated>2021-02-21T12:34:11.874Z</updated>
    
    <content type="html"><![CDATA[<p>顶边栏完成了，现在先把首页做好</p><a id="more"></a><hr><p>让我们先新建一个 <code>src/views</code> 文件夹，用来存放官网的主要视图</p><p>然后在该文件夹下新建两个 vue 文件，作为我们的视图</p><ul><li><code>Home.vue</code>，首页</li><li><code>Document.vue</code>，文档页</li></ul><p>再配置一下 <code>router.ts</code> 来实现跳转</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// router.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createWebHistory, createRouter &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./views/Home.vue'</span></span><br><span class="line"><span class="keyword">import</span> Document <span class="keyword">from</span> <span class="string">'./views/Document.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> history = createWebHistory()</span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: <span class="string">'/'</span>, component: Home &#125;,</span><br><span class="line">    &#123; path: <span class="string">'/document'</span>, component: Document &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h1 id="骨架"><a href="#骨架" class="headerlink" title="骨架"></a>骨架</h1><p>先搭建一下首页的骨架</p><p>已知首页要显示</p><ol><li>顶边栏</li><li>极光背景<ul><li>两个跳转链接</li></ul></li><li>三点特性</li></ol><p>首先是极光背景，非常简单，用渐变色+转向当作背景色就可以了</p><p>然后三点特性，显然是无序列表</p><p>那么可以得到如下骨架</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Topnav</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/Ringoer/laby-ui"</span>&gt;</span> Github <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document"</span>&gt;</span> 文档页 <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"features"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>特性1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>特性2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>特性3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h1><p>然后在 script 中引入顶边栏</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Topnav <span class="keyword">from</span> <span class="string">"../components/Topnav.vue"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Topnav,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>最后制作一下极光的样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: white;</span><br><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: linear-gradient(</span><br><span class="line">    <span class="number">145deg</span>,</span><br><span class="line">    rgb(<span class="number">254</span>, <span class="number">242</span>, <span class="number">246</span>) <span class="number">0%</span>,</span><br><span class="line">    rgb(<span class="number">252</span>, <span class="number">208</span>, <span class="number">215</span>) <span class="number">30%</span>,</span><br><span class="line">    rgb(<span class="number">243</span>, <span class="number">140</span>, <span class="number">159</span>) <span class="number">70%</span>,</span><br><span class="line">    rgb(<span class="number">243</span>, <span class="number">103</span>, <span class="number">142</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">clip-path</span>: ellipse(<span class="number">80%</span> <span class="number">60%</span> at <span class="number">50%</span> <span class="number">40%</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  &gt; * &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">12px</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &gt; <span class="selector-class">.actions</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">8px</span>;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">24px</span>;</span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        <span class="attribute">text-decoration</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下，得到了如下的效果</p><p><img src="https://pic.ringoer.com/laby-ui-2.png" alt="效果图"></p><h1 id="改进首页"><a href="#改进首页" class="headerlink" title="改进首页"></a>改进首页</h1><p>那显然，特性应该单独占据一行，并且在宽度足够的时候横向排列</p><p>两个链接也最好横向排列，而且最好各自有点介绍</p><p>那么先修改模板</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Topnav</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"banner"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Laby UI<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Ringoer 的练习用 UI 框架<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"actions"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/Ringoer/laby-ui"</span>&gt;</span> Github <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document"</span>&gt;</span> 文档页 <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"features"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>基于 Vue 3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>使用了 Vue 3 全新特性<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>基于 TypeScript<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>源代码采用 TypeScript 书写<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>具有亲和力的代码<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">p</span>&gt;</span>新手也能轻松阅读的源代码<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后补全样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$theme-color</span>: <span class="number">#fe9acf</span>;</span><br><span class="line"><span class="variable">$border-radius</span>: <span class="number">4px</span>;</span><br><span class="line"><span class="variable">$color</span>: white;</span><br><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: linear-gradient(</span><br><span class="line">    <span class="number">145deg</span>,</span><br><span class="line">    rgb(<span class="number">254</span>, <span class="number">242</span>, <span class="number">246</span>) <span class="number">0%</span>,</span><br><span class="line">    rgb(<span class="number">252</span>, <span class="number">208</span>, <span class="number">215</span>) <span class="number">30%</span>,</span><br><span class="line">    rgb(<span class="number">243</span>, <span class="number">140</span>, <span class="number">159</span>) <span class="number">70%</span>,</span><br><span class="line">    rgb(<span class="number">243</span>, <span class="number">103</span>, <span class="number">142</span>) <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">clip-path</span>: ellipse(<span class="number">80%</span> <span class="number">60%</span> at <span class="number">50%</span> <span class="number">40%</span>);</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">120px</span>;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  &gt; * &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">12px</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &gt; <span class="selector-class">.actions</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">8px</span>;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">      <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">24px</span>;</span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        <span class="attribute">text-decoration</span>: none;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="attribute">text-align</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.features</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">64px</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">16px</span>;</span><br><span class="line">  @<span class="keyword">media</span> (min-width: 800px) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    &gt; <span class="selector-tag">ul</span> &#123;</span><br><span class="line">      &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  @<span class="keyword">media</span> (min-width: 1200px) &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    &gt; <span class="selector-tag">ul</span> &#123;</span><br><span class="line">      &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">33.3333%</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  @<span class="keyword">media</span> (max-width: 800px) &#123;</span><br><span class="line">    &gt; <span class="selector-tag">ul</span> &#123;</span><br><span class="line">      <span class="attribute">flex-direction</span>: column;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &gt; <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">    &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">16px</span> <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">display</span>: grid;</span><br><span class="line">      <span class="attribute">justify-content</span>: center;</span><br><span class="line">      <span class="attribute">align-content</span>: space-between;</span><br><span class="line">      grid-template-areas:</span><br><span class="line">        <span class="string">"icon title"</span></span><br><span class="line">        <span class="string">"icon text"</span>;</span><br><span class="line">      grid-template-<span class="attribute">columns</span>: <span class="number">80px</span> auto;</span><br><span class="line">      grid-template-rows: <span class="number">1</span>fr auto;</span><br><span class="line">      &gt; <span class="selector-tag">h3</span> &#123;</span><br><span class="line">        grid-<span class="selector-tag">area</span>: title;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">        grid-<span class="selector-tag">area</span>: text;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>得到如下效果</p><p><img src="https://pic.ringoer.com/laby-ui-3.png" alt="效果图"></p><h1 id="svg"><a href="#svg" class="headerlink" title="svg"></a>svg</h1><p>特性也太光秃秃了，加个 svg</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"features"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#icon-Vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>基于 Vue 3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>使用了 Vue 3 全新特性<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#icon-ts"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>基于 TypeScript<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>源代码采用 TypeScript 书写<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#icon-cloud"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>具有亲和力的代码<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>新手也能轻松阅读的源代码<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后补全 <code>.features &gt; ul &gt; li &gt; svg</code> 的样式表，就可以了</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; svg &#123;</span><br><span class="line">    grid-<span class="selector-tag">area</span>: icon;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">64px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">64px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，再为两个跳转入口贴个图</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"actions"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/Ringoer/laby-ui"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span></span></span><br><span class="line"><span class="tag">             <span class="attr">src</span>=<span class="string">"../assets/github.png"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">alt</span>=<span class="string">"Github"</span></span></span><br><span class="line"><span class="tag">             <span class="attr">style</span>=<span class="string">"transform: rotateY(180deg)"</span></span></span><br><span class="line"><span class="tag">             /&gt;</span></span><br><span class="line">        Github</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../assets/goto.png"</span> <span class="attr">alt</span>=<span class="string">"开始"</span> /&gt;</span></span><br><span class="line">        开始</span><br><span class="line">    <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>补个样式表</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.banner</span>&#123;</span><br><span class="line">    &gt; <span class="selector-class">.actions</span>&#123;</span><br><span class="line">        <span class="selector-tag">a</span>&#123;</span><br><span class="line">            &gt; <span class="selector-tag">img</span>&#123;</span><br><span class="line">                <span class="attribute">display</span>: block;</span><br><span class="line">                <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果如图</p><p><img src="https://pic.ringoer.com/laby-ui-4.png" alt="效果图"></p><p>这不是还挺好看的2333</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;顶边栏完成了，现在先把首页做好&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-顶边栏</title>
    <link href="https://ringoer.com/project/ui-framework-topnav/"/>
    <id>https://ringoer.com/project/ui-framework-topnav/</id>
    <published>2021-02-20T12:04:00.000Z</published>
    <updated>2021-02-21T12:18:54.152Z</updated>
    
    <content type="html"><![CDATA[<p>显然顶边栏比较好做，且首页和文档页都需要它，那让我们先做好顶边栏</p><a id="more"></a><hr><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>首先，在 <code>components</code> 文件夹下，新建一个 vue 组件，就叫 <code>Topnav.vue</code> 吧，然后打板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">  </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>建议使用 scss 书写所有 css，下略</p><p>以后所有 vue 组件，无特殊说明的话，均沿用此初始化模板，下略</p><h1 id="页面结构"><a href="#页面结构" class="headerlink" title="页面结构"></a>页面结构</h1><p>分析顶边栏的结构，显然，有以下成分</p><table><thead><tr><th>成分</th><th>位置</th><th>默认</th><th>小于 500px</th></tr></thead><tbody><tr><td>首页跳转入口</td><td>左侧</td><td>可见</td><td>居中</td></tr><tr><td>文档页跳转入口</td><td>右侧</td><td>可见</td><td>不可见</td></tr><tr><td>展开菜单按键</td><td>左侧</td><td>不可见</td><td>可见</td></tr></tbody></table><p>容易得到以下页面结构</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"topnav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line">            首页</span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document"</span>&gt;</span></span><br><span class="line">            文档页</span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br><span class="line">            菜单</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是，未来有可能变更需求，在右侧出现不只一个文档页跳转入口，所以应该做一个列表，以备未来扩展</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"topnav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span></span><br><span class="line">            首页</span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document"</span>&gt;</span></span><br><span class="line">                    文档页</span><br><span class="line">                <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toggleMenu"</span>&gt;</span></span><br><span class="line">            菜单</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>先分析需要的控制元素</p><p>显然，顶边栏中的弹出菜单按键，可以在引入它的组件中，被设置是否可见，那么应当有一个 Boolean 类型的变量来控制可见</p><p>且需要提供一个方法，控制菜单本体是否可见</p><p>但是，现在又犯难了——菜单本体是属于文档页的，而不是属于顶边栏的。如何跨组件控制呢？</p><p>回顾需求分析可得，通过弹出菜单按键，以及视口宽度，共同控制菜单是否可见</p><p>其中，视口宽度显然是一个全局属性，那么理应在 <code>App.vue</code> 中控制</p><p>于是我们在 <code>App.vue</code> 中定义其是否可见，并通过 <code>provide/inject</code> API 暴露给子组件</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// App.vue script</span></span><br><span class="line"><span class="keyword">import</span> &#123; provide, ref &#125; <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">"App"</span>,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        <span class="keyword">const</span> width = ref(<span class="built_in">document</span>.documentElement.clientWidth);</span><br><span class="line">        <span class="keyword">const</span> menuVisible = ref(width.value &gt; <span class="number">500</span> ? <span class="literal">true</span> : <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">window</span>.onresize = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            width.value = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">            <span class="keyword">if</span> (width.value &gt; <span class="number">500</span>) &#123;</span><br><span class="line">                menuVisible.value = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                menuVisible.value = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        provide(<span class="string">"menuVisible"</span>, menuVisible);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>初始化时根据视口宽度决定顶边栏的弹出菜单按键是否可见，并监听视口大小变化，根据视口宽度自动更新控制变量</p><p>然后编写 <code>Topnav.vue</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Topnav.vue script</span></span><br><span class="line"><span class="keyword">import</span> &#123; inject, Ref &#125; <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">        toggleMenuButtonVisible: &#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">        <span class="keyword">const</span> menuVisible = inject&lt;Ref&lt;<span class="built_in">boolean</span>&gt;&gt;(<span class="string">"menuVisible"</span>);</span><br><span class="line">        <span class="keyword">const</span> toggleMenu = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            menuVisible.value = !menuVisible.value;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            toggleMenu,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意，此处的 <code>inject</code> 需要注明变量的类型。因为 <code>menuVisible</code> 声明的时候是 <code>ref(true|false)</code>，所以其类型为 <code>Ref&lt;boolean&gt;</code></p><p>将暴露出的变量引回模板，同时再贴个图美化一下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"topnav"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../assets/logo.png"</span> <span class="attr">alt</span>=<span class="string">"首页"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/document"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../assets/document.png"</span> <span class="attr">alt</span>=<span class="string">"文档"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-if</span>=<span class="string">"toggleMenuButtonVisible"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">class</span>=<span class="string">"toggleAside"</span></span></span><br><span class="line"><span class="tag">                @<span class="attr">click</span>=<span class="string">"toggleMenu"</span></span></span><br><span class="line"><span class="tag">                &gt;</span></span><br><span class="line">            菜单</span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h1><p>此处为了美观，选用线性渐变来做到下边一条分割线的效果</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: <span class="number">#fe9acf</span>;</span><br><span class="line"><span class="selector-class">.topnav</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">background</span>: linear-gradient(</span><br><span class="line">    <span class="number">180deg</span>,</span><br><span class="line">    rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>) <span class="number">0%</span>,</span><br><span class="line">    rgba(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">1</span>) <span class="number">97%</span>,</span><br><span class="line">    <span class="number">#ffb5dc</span> <span class="number">97%</span>,</span><br><span class="line">    <span class="number">#ffb5dc</span> <span class="number">100%</span></span><br><span class="line">  );</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">32px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">20</span>;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  &gt; <span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">6em</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>: auto;</span><br><span class="line">    &gt; svg &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">80px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &gt; <span class="selector-class">.menu</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">flex-wrap</span>: nowrap;</span><br><span class="line">    &gt; <span class="selector-tag">li</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">      &gt; <span class="selector-tag">a</span> &#123;</span><br><span class="line">        &gt; svg &#123;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">32px</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &gt; <span class="selector-class">.toggleAside</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">32px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: translateY(-<span class="number">50%</span>);</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br><span class="line">  @<span class="keyword">media</span> (max-width: 500px) &#123;</span><br><span class="line">    &gt; <span class="selector-class">.menu</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.logo</span> &#123;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt; <span class="selector-class">.toggleAside</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: inline-block;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引入 <code>App.vue</code> 看看效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;Topnav /&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; provide, ref &#125; from &quot;vue&quot;;</span><br><span class="line">import Topnav from &quot;./components/Topnav.vue&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Topnav,</span><br><span class="line">  &#125;,</span><br><span class="line">  setup() &#123;</span><br><span class="line">    const width = ref(document.documentElement.clientWidth);</span><br><span class="line">    const menuVisible = ref(width.value &gt; 500 ? true : false);</span><br><span class="line">    window.onresize = () =&gt; &#123;</span><br><span class="line">      width.value = document.documentElement.clientWidth;</span><br><span class="line">      if (width.value &gt; 500) &#123;</span><br><span class="line">        menuVisible.value = true;</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        menuVisible.value = false;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    provide(&quot;menuVisible&quot;, menuVisible);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">$max-width: 1200px;</span><br><span class="line">.app &#123;</span><br><span class="line">  max-width: $max-width;</span><br><span class="line">  margin-left: calc(50vw - 600px);</span><br><span class="line">  position: relative;</span><br><span class="line">  @media (max-width: $max-width) &#123;</span><br><span class="line">    margin-left: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="https://pic.ringoer.com/laby-ui-1.png" alt="效果图"></p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;显然顶边栏比较好做，且首页和文档页都需要它，那让我们先做好顶边栏&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>UI 框架-起步</title>
    <link href="https://ringoer.com/project/ui-framework-start/"/>
    <id>https://ringoer.com/project/ui-framework-start/</id>
    <published>2021-02-20T12:00:00.000Z</published>
    <updated>2021-02-23T10:51:29.587Z</updated>
    
    <content type="html"><![CDATA[<p>先宣传一下我自己的 UI 框架 <a href="https://ringoer.gitee.io/laby-ui/index.html#/" target="_blank" rel="noopener">Laby UI - 一个基于Vue3的UI框架</a></p><p>既然是一个 UI 框架，总要有展示的地方吧</p><p>让我们先搭一个官网</p><a id="more"></a><hr><p><strong>注意，本教程的所有样式表，可以直接照抄</strong></p><p><strong>如有修改需求，再去研究具体写了什么，不然从零研究实在太难了</strong></p><h1 id="设计选型"><a href="#设计选型" class="headerlink" title="设计选型"></a>设计选型</h1><p>从零自己想一个官网也太难了，还是参考一下别人的官方文档设计</p><p>本 UI 框架参考了 <a href="https://element.eleme.cn/#/zh-CN" target="_blank" rel="noopener">element UI</a> 的设计风格</p><p>大致提供了如下页面</p><ol><li>顶边栏</li><li>首页</li><li>文档页<ol><li>侧边栏</li><li>内容区域</li></ol></li></ol><p>然后选择一个自己的风格，既然 element 选择了蓝色风格，我就选择粉色的风格吧</p><p>绝对不是什么个人恶趣味，而是来自 <a href="https://www.elwiki.net/w/Laby/zh-hans" target="_blank" rel="noopener">艾尔之光 - 娜薇</a>，2333</p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><table><thead><tr><th>位置</th><th>特性</th></tr></thead><tbody><tr><td>布局</td><td>两侧留白，内容在中间<br>最大宽度 1200px，小于 1200px 时，宽度 100%<br>小于 500px 时，变为手机版</td></tr><tr><td>顶边栏</td><td>左侧是通往首页的跳转链接，右侧是通往文档页的跳转链接<br>视口小于 500px 时，只显示前往首页的跳转</td></tr><tr><td>首页</td><td>分为两部分，视觉效果部分和特点介绍部分</td></tr><tr><td>首页-视觉</td><td>粉色极光背景，中间放置两个跳转链接，一个前往 github 查看代码，另一个前往文档页</td></tr><tr><td>首页-特点</td><td>包含3个特点，分别是<br>1. 使用了 vue3 新特性<br>2. 使用 ts<br>3. 代码易读</td></tr><tr><td>文档页</td><td>文档页实际由顶边栏和本体构成，本体包含侧边栏和内容区域</td></tr><tr><td>顶边栏-文档页</td><td>小于 500px 时，在左侧额外显示弹出侧边栏的按键，并使得侧边栏不可见</td></tr><tr><td>侧边栏</td><td>默认可见，选中高亮，但视口宽度小于 500px 时，默认不可见<br>包含两个部分：指南和组件，各自有子级跳转</td></tr><tr><td>内容区域</td><td>根据侧边栏中选中的链接，显示 md 内容或组件范例内容</td></tr></tbody></table><h1 id="搭建官网"><a href="#搭建官网" class="headerlink" title="搭建官网"></a>搭建官网</h1><p>可以通过 <code>vite</code> 新建一个 vue3 项目</p><p>此处将项目命名为 <code>laby-ui</code></p><p>运行以下命令即可创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir laby-ui</span><br><span class="line"><span class="built_in">cd</span> laby-ui</span><br><span class="line">cva .</span><br></pre></td></tr></table></figure><p>然后运行以下命令，进行初始化，并启动应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>现在，就可以在 <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a> 预览项目了</p><p>然后照抄淘宝移动端的 <code>meta</code>，以便更好适配移动端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,viewport-fit=cover"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，因为我们是 ts 项目，所以把 <code>main.js</code> 改为 <code>main.ts</code></p><p>这时候，ts 可能无法识别 vue 后缀文件，加一个 shims 就好了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// shims.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> '*.vue' &#123;</span><br><span class="line">  <span class="keyword">import</span> &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">  <span class="keyword">const</span> componentOptions: ComponentOptions</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> componentOptions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当静态报错为”无法识别 vue 后缀的文件”时，打开该 ts，再返回原代码，即可解决红线报错</p><h1 id="整体布局设计"><a href="#整体布局设计" class="headerlink" title="整体布局设计"></a>整体布局设计</h1><p>根据需求分析，我们得到如下推论</p><p>首先，最大宽度等限制，是作用于整个 app 上的，所以这方面的样式应该写在 <code>app.vue</code> 上</p><p>其次，首页和文档页的顶边栏，其功能分别为</p><table><thead><tr><th>位置</th><th>功能</th></tr></thead><tbody><tr><td>首页</td><td>不可以弹出菜单</td></tr><tr><td>文档页</td><td>根据情况显示或隐藏菜单</td></tr></tbody></table><p>可见并不完全相同，也就是说不是同一个组件的复用，所以应该将顶边栏组件分别嵌入首页和文档页组件，而不是嵌入 <code>app.vue</code></p><p>然后，首页显然没有侧边栏，所以首页的内容直接写在其模板内即可，而文档页需要侧边栏和内容区域</p><p>但是文档页的侧边栏，实际上与弹出的顶部菜单是相同的内容，所以只需要编写一次，然后复用为侧边栏和顶部菜单即可</p><p>除此之外，文档页的内容区域，还要分别展示 markdown 内容和组件内容，所以内容区域要分成两种进行编写</p><p>综上，首页大致为上下结构，恒定不变；文档页大致为T字结构，小于 1200px 时为上下结构，附有弹出菜单的选项。图示可以参考 <a href="https://ringoer.gitee.io/laby-ui/index.html#/" target="_blank" rel="noopener">Laby UI</a></p><p>让我们先完成 App 整体的控制</p><p>先引入总控制的样式表 <code>index.scss</code>，记得删除旧的 <code>index.css</code></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: inherit;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1d2c40</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: -apple-system, <span class="string">"Noto Sans"</span>, <span class="string">"Helvetica Neue"</span>, Helvetica,</span><br><span class="line">    <span class="string">"Nimbus Sans L"</span>, Arial, <span class="string">"Liberation Sans"</span>, <span class="string">"PingFang SC"</span>, <span class="string">"Hiragino Sans GB"</span>,</span><br><span class="line">    <span class="string">"Noto Sans CJK SC"</span>, <span class="string">"Source Han Sans SC"</span>, <span class="string">"Source Han Sans CN"</span>,</span><br><span class="line">    <span class="string">"Microsoft YaHei"</span>, <span class="string">"Wenquanyi Micro Hei"</span>, <span class="string">"WenQuanYi Zen Hei"</span>, <span class="string">"ST Heiti"</span>,</span><br><span class="line">    SimHei, <span class="string">"WenQuanYi Zen Hei Sharp"</span>, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.icon</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1em</span>; <span class="attribute">height</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">vertical-align</span>: -<span class="number">0.15em</span>;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改 <code>main.ts</code> 中的引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./index.scss'</span></span><br></pre></td></tr></table></figure><p>最后完成 <code>App.vue</code> 的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-view /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;App&quot;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">$max-width: 1200px;</span><br><span class="line">.app &#123;</span><br><span class="line">  max-width: $max-width;</span><br><span class="line">  margin-left: calc(50vw - 600px);</span><br><span class="line">  position: relative;</span><br><span class="line">  @media (max-width: $max-width) &#123;</span><br><span class="line">    margin-left: 0;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>通过 <code>background-color</code> 检查一下宽度，ok</p><p>注意使用 scss 需要安装 sass 依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D sass</span><br></pre></td></tr></table></figure><p>千万不要丢了 <code>-D</code>，否则就不是安装到开发环境了</p><h1 id="路由设计"><a href="#路由设计" class="headerlink" title="路由设计"></a>路由设计</h1><p>既然有多个页面，那肯定就要通过路由进行跳转</p><p>路由显然是使用 <code>vue-router</code>，首先安装它</p><p>要注意，默认安装的 <code>vue-router</code> 是 <code>3.x.x</code> 版本的，只能用于 vue2</p><p>要想用于 vue3，必须是 <code>4.x.x</code> 版本</p><p>通过 <code>npm info vue-router</code> 可以看到最新版（next 版本）是 <code>4.0.4</code>（如有变化，下载最新版即可），则我们通过</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@4.0.4</span><br></pre></td></tr></table></figure><p>安装适合 vue3 的 <code>vue-router</code></p><p>然后设计路由，这个因人而异，这里给出我的路由设计如下</p><table><thead><tr><th>目标</th><th>路由</th></tr></thead><tbody><tr><td>首页</td><td>/</td></tr><tr><td>文档页</td><td>/document</td></tr><tr><td>文档页 - 介绍</td><td>/document/introduction</td></tr><tr><td>文档页 - 安装</td><td>/document/install</td></tr><tr><td>文档页 - 快速上手</td><td>/document/start</td></tr><tr><td>文档页 - [组件名]</td><td>/document/[componentName]</td></tr></tbody></table><p>至于 <code>router.ts</code> 的内容，因为现在暂无视图，所以我们先搁置，写一个空的引入就好</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/router.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createWebHistory, createRouter &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> history = createWebHistory()</span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">    history,</span><br><span class="line">    routes: [</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>然后在 <code>main.ts</code> 中引入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./index.scss'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line">createApp(App).use(router).mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h1 id="使用-svg"><a href="#使用-svg" class="headerlink" title="使用 svg"></a>使用 svg</h1><p>有时候只有文字不太好看，有图片比较好</p><p>可以使用 <a href="https://www.iconfont.cn/" target="_blank" rel="noopener">icon font</a> 提供的免费图标，使用教程大致如下</p><ol><li>选择喜欢的图标，加入购物车</li><li>新建一个项目，或选择一个已有项目，将购物车里的图标加入该项目</li><li>进入”我的项目”，生成新的引用链接</li><li>选择 <code>Symbol</code> 模式，复制链接，粘贴到本地项目的 <code>index.html</code> 的新 script 标签中</li></ol><p>之后就可以在本地使用如下的方式引用 svg 了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">"#icon-Vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p>svg 的命名，参考 icon font 上”我的项目”里设置的每个图标的名称</p><p>！！！如果图标有任何变化（包括数量或命名等），必须重新生成引用链接！！！</p><h1 id="其余部分"><a href="#其余部分" class="headerlink" title="其余部分"></a>其余部分</h1><p>篇幅所限，其余部分分开写了，请按顺序查看以下文章</p><p><a href="/project/ui-framework-topnav/">UI 框架-顶边栏</a></p><p><a href="/project/ui-framework-home/">UI 框架-首页</a></p><p><a href="/project/ui-framework-document/">UI 框架-文档页</a></p><p><a href="/project/ui-framework-button/">UI 框架-Button 组件</a></p><p><a href="/project/ui-framework-dialog/">UI 框架-Dialog 组件</a></p><p><a href="/project/ui-framework-switch/">UI 框架-Switch 组件</a></p><p><a href="/project/ui-framework-table/">UI 框架-Table 组件</a></p><p><a href="/project/ui-framework-tabs/">UI 框架-Tabs 组件</a></p><p><a href="/project/ui-framework-card/">UI 框架-Card 组件</a></p><p><a href="/project/ui-framework-rollup/">UI 框架-打包发布</a></p><p><a href="/project/ui-framework-improve/">UI 框架-完善官网</a></p><p><a href="/project/ui-framework-code-improve/">UI 框架-代码优化</a></p><p><a href="/project/ui-framework-deploy/">UI 框架-完工部署</a></p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先宣传一下我自己的 UI 框架 &lt;a href=&quot;https://ringoer.gitee.io/laby-ui/index.html#/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Laby UI - 一个基于Vue3的UI框架&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;既然是一个 UI 框架，总要有展示的地方吧&lt;/p&gt;
&lt;p&gt;让我们先搭一个官网&lt;/p&gt;
    
    </summary>
    
    
      <category term="project" scheme="https://ringoer.com/categories/project/"/>
    
    
      <category term="ui-framework" scheme="https://ringoer.com/tags/ui-framework/"/>
    
  </entry>
  
  <entry>
    <title>SCSS 简述</title>
    <link href="https://ringoer.com/frontend/css-scss/"/>
    <id>https://ringoer.com/frontend/css-scss/</id>
    <published>2021-02-17T03:47:00.000Z</published>
    <updated>2021-02-17T03:52:31.602Z</updated>
    
    <content type="html"><![CDATA[<p>SCSS 是 CSS 的超集</p><p>基于笔者自己的使用体验</p><a id="more"></a><hr><p>scss 完全兼容 css 语法，并在此上提供了一些新语法</p><ol><li>$ 变量名</li><li>嵌套层级</li><li>mixin</li><li>include</li></ol><h1 id="变量名"><a href="#变量名" class="headerlink" title="$ 变量名"></a>$ 变量名</h1><p>在 scss 中，可以声明 $ 开头的变量名，作为常量在下文中使用</p><p>示例如下</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$color</span>: <span class="number">#ababab</span>;</span><br><span class="line"><span class="selector-id">#app</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以将 <code>#app</code> 的背景色设为 <code>#ababab</code></p><h1 id="嵌套层级"><a href="#嵌套层级" class="headerlink" title="嵌套层级"></a>嵌套层级</h1><p>在 scss 中，包含关系可以直接写在嵌套中，不需要像 css 一样全部写在根</p><p>设有如下 DOM 结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">            内容</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>则如果要分别设置 标题 和 内容 部分的样式，并给 <code>#app</code> 设置 hover 样式，在原生 css 中，要这么写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span>&gt;<span class="selector-class">.title</span>&#123;</span><br><span class="line">    xxx</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#app</span>&gt;<span class="selector-class">.context</span>&#123;</span><br><span class="line">    yyy</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#app</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    zzz</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而在 scss 中，只需要这么写</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span>&#123;</span><br><span class="line">    &gt;<span class="selector-class">.title</span>&#123;</span><br><span class="line">        xxx</span><br><span class="line">    &#125;</span><br><span class="line">    &gt;<span class="selector-class">.content</span>&#123;</span><br><span class="line">        yyy</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:hover&#123;</span><br><span class="line">        zzz</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于子元素选择器，可以直接嵌套书写</p><p>对于伪元素、伪类，需要使用 <code>&amp;</code> 来作为当前层级的标识符</p><p>在上文中的 <code>&amp;:hover</code> 等效于 <code>#app:hover</code></p><h1 id="mixin"><a href="#mixin" class="headerlink" title="mixin"></a>mixin</h1><p>当有一套固定的模式 css 要适用于多种不同属性时，可以使用 <code>@mixin</code> 语法</p><p>类似于 css 中的 function</p><p>设有如下 mixin</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> layout(<span class="variable">$color</span>)&#123;</span><br><span class="line">    &amp;:hover&#123;</span><br><span class="line">        <span class="attribute">background-color</span>:<span class="variable">$color</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则表示声明了一个函数 layout，要求传入一个变量，在函数中设为 hover 状态下的背景色</p><p>声明之后，使用 <code>include</code> 进行混入</p><h1 id="include"><a href="#include" class="headerlink" title="include"></a>include</h1><p>设有上述 <code>mixin</code>，则可以按不同情况混入</p><p>比如要在 <code>.title</code> 和 <code>.content</code>，分别适配不同的背景色，则可以有如下写法</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span>&#123;</span><br><span class="line">    &gt;<span class="selector-class">.title</span>&#123;</span><br><span class="line">        <span class="variable">$color</span>: blue;</span><br><span class="line">        @<span class="keyword">include</span> layout(<span class="variable">$color</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &gt;<span class="selector-class">.content</span>&#123;</span><br><span class="line">        <span class="variable">$color</span>: yellow;</span><br><span class="line">        @<span class="keyword">include</span> layout(<span class="variable">$color</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$color</span>: red;</span><br><span class="line">    @<span class="keyword">include</span> layout(<span class="variable">$color</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等效于写作</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#app</span>&#123;</span><br><span class="line">    &gt;<span class="selector-class">.title</span>&#123;</span><br><span class="line">        &amp;:hover&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: blue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &gt;<span class="selector-class">.content</span>&#123;</span><br><span class="line">        &amp;:hover&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: yellow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;:hover&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，<code>mixin</code> 和 <code>include</code> 是搭配使用的，且使用效果为直接替换在原位</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SCSS 是 CSS 的超集&lt;/p&gt;
&lt;p&gt;基于笔者自己的使用体验&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://ringoer.com/categories/frontend/"/>
    
    
      <category term="css" scheme="https://ringoer.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Vue 3 新特性简述</title>
    <link href="https://ringoer.com/frontend/vue3-features/"/>
    <id>https://ringoer.com/frontend/vue3-features/</id>
    <published>2021-02-16T12:03:00.000Z</published>
    <updated>2021-02-17T03:51:52.693Z</updated>
    
    <content type="html"><![CDATA[<p>vue 都发布新版本 vue3 了，不跟上时代怎么可以</p><p>本文结合 ts，且根据笔者自己的使用体验</p><a id="more"></a><hr><p>目录大致如下</p><ol><li>构建</li><li>路由</li><li>构造选项</li><li>ref</li><li>钩子函数</li><li>标签属性</li><li>teleport</li><li>总结</li><li>参考文章</li></ol><h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p>与 vue2 使用 webpack 不同，vue3 可以使用 vite 进行构建</p><blockquote><p>Vite，一个基于浏览器原生 ES imports 的开发服务器。利用浏览器去解析 imports，在服务器端按需编译返回，完全跳过了打包这个概念，服务器随起随用。同时不仅有 Vue 文件支持，还搞定了热更新，而且热更新的速度不会随着模块增多而变慢。针对生产环境则可以把同一份代码用 rollup 打。虽然现在还比较粗糙，但这个方向我觉得是有潜力的，做得好可以彻底解决改一行代码等半天热更新的问题。</p></blockquote><p>简单说就是，在生产环境使用模块，省略打包步骤，开发环境可以秒级启动</p><p>安装 vite，只需要执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g create-vite-app</span><br></pre></td></tr></table></figure><p>安装成功后，可以通过两个命令来构建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create-vite-app [projectName]</span><br><span class="line">// 或</span><br><span class="line">cva [projectName]</span><br></pre></td></tr></table></figure><p>即可在当前目录下构建一个基于 vite 的 vue3 新项目</p><p>之后通过命令行 <code>cd</code> 进入该项目目录，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>初始化 <code>node_modules</code> 之后，再运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>即可启动项目预览了，通常会启动在 3000 端口</p><p>但是，当在项目中使用 ts 时，ts 无法识别 vue 后缀的文件，这时候可以在项目的 <code>src</code> 目录下新建一个文件 <code>shims.d.ts</code> 来处理识别问题</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// shims.d.ts</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">module</span> '*.vue' &#123;</span><br><span class="line">  <span class="keyword">import</span> &#123; ComponentOptions &#125; <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">  <span class="keyword">const</span> componentOptions: ComponentOptions</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> componentOptions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当静态报错为”无法识别 vue 后缀的文件”时，打开该 ts，再返回原代码，即可解决红线报错</p><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h1><p>先来看一个 vue2 的路由示例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> login <span class="keyword">from</span> <span class="string">'@/components/others/login'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">'history'</span>,</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: <span class="string">'/login'</span>,</span><br><span class="line">            name: <span class="string">'login'</span>,</span><br><span class="line">            component: login</span><br><span class="line">        &#125;,</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>可见，vue2 中声明一个路由，是使用 new 操作符来新建一个 <code>Router</code> 对象，并向其构造函数中传入 options 来达成的</p><p>现在再给出一个 vue3 的路由示例</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createWebHistory, createRouter &#125; <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./views/Home.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> history = createWebHistory()</span><br><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  history,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; path: <span class="string">'/'</span>, component: Home &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>细节上，vue3 采用了 <code>createRouter</code> 函数来创建一个 <code>Router</code> 对象，对用户隐藏了内部细节，但仍然要求用户传入一个 options，且该 options 也主要包括 <code>mode</code> 和 <code>routes</code> 两个选项</p><p>同时，在 vue3 中，声明一个路由模式，由字符串改为了函数返回值，具体对应如下</p><table><thead><tr><th>vue2 写法</th><th>vue3 写法</th></tr></thead><tbody><tr><td>mode 字段</td><td>history 字段</td></tr><tr><td>mode: ‘hash’</td><td>history: createWebHashHistory()</td></tr><tr><td>mode: ‘history’</td><td>history: createWebHistory()</td></tr><tr><td>mode: ‘memory’</td><td>history: createMemoryHistory()</td></tr></tbody></table><p>整体上大同小异，使用时注意细节即可</p><h1 id="构造选项"><a href="#构造选项" class="headerlink" title="构造选项"></a>构造选项</h1><p>一个 vue2 的 script 标签写法，大致有如下格式</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props:&#123;</span><br><span class="line">        a:&#123;</span><br><span class="line">            <span class="keyword">type</span>: <span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">'233'</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            ...data</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted()&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="comment">// and other lifecycle</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        xxx()&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>诸如此类</p><p>但是在 vue3 中，除 <code>props</code> 写法照旧之外，其余均可以通过 <code>setup</code> 方法进行处理</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props:&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">        <span class="keyword">const</span> a = ref(<span class="string">'233'</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            a</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>setup</code> 方法中，所有通过 <code>return</code> 暴露出的变量，都等效于 vue2 中 <code>data</code> 暴露的变量；所有通过 <code>return</code> 暴露出的函数，都等效于 vue2 中 <code>methods</code> 暴露的函数</p><p>而生命周期钩子，也可以直接写在 <code>setup</code> 中，如 <code>mounted</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue2</span></span><br><span class="line">mounted()&#123;</span><br><span class="line">    <span class="comment">// some code</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue3</span></span><br><span class="line">setup()&#123;</span><br><span class="line">    onMounted(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// some code</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一种类似于 DOM 事件中 <code>click -&gt; onClick</code> 的转化，将 <code>mounted</code> 转化为了 <code>onMounted</code>，此时 <code>onMounted</code> 接受一个函数作为参数</p><p>除此之外，要在 <code>setup</code> 中使用传递到组件上的参数，在 vue2 中只需要使用 <code>this.xxx</code> 就可以访问到，而在 vue3 中必须要在 <code>setup</code> 的形参列表中声明后才可以使用</p><p><code>setup</code> 接受两个参数，第一个是绑定参数 props，第二个是上下文 context</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setup(props, context)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;xxx&#125; = props</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等效于 vue2 中的</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props:[<span class="string">'xxx'</span>],</span><br><span class="line">data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            xxx: <span class="keyword">this</span>.xxx</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，在 props 中未声明的绑定参数，都去哪了呢？</p><p>在 vue2 中，可以通过 <code>this.$attrs</code> 来访问到其余的参数</p><p>而在 vue3 中，要通过 <code>context.attrs</code> 来访问</p><p>注意：</p><ol><li>在父组件中绑定到子组件的事件，不会出现在 props 里</li><li>props不支持事件，支持其余属性，不在props里的都会到attrs里，但 props 要先声明</li><li>props里有多种类型，attrs只有字符串</li></ol><p>如果不希望子组件继承父组件给出的参数，也可以显式指定不继承</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    inheritAttrs: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 <code>inheritAttrs: false</code> 选项<strong>不会</strong>影响 <code>style</code> 和 <code>class</code> 的绑定</p><p>综上，假如有一个需求是，父组件会向子组件中传入若干参数，而只希望绑定变量名为 <code>xxx</code> 以外的其余变量，那么可以有如下写法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setup(props, context)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;xxx, ...rest&#125; = context.attrs</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        rest</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在模板中，要绑定的地方，写入 <code>v-bind=&quot;rest&quot;</code> 即可绑定所有参数</p><h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><p>细心的朋友应该已经注意到了，上面出现一个名为 <code>ref</code> 的用法，且用法形似一个函数</p><p>熟悉 ES6 的 proxy 的话，可以看出 <code>ref</code> 其实就是返回一个对传入数据的代理，这个代理拦截了 get 和 set 操作，并在 set 的时候通知视图更新</p><p>熟悉 react 的朋友，是不是感觉和 <code>useState</code> 很像？其实就是把 getter/setter 返回到同一个对象身上而已，2333</p><p>设在以下代码段中使用 <code>ref</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> visible = ref([<span class="literal">true</span>,<span class="literal">true</span>])</span><br></pre></td></tr></table></figure><p>则有以下特点</p><ol><li><p>可以使用 const 声明代理对象，反正是这个对象不能变，不是里面的代理内容不能变</p></li><li><p>在 script 标签中读取数组内容时，必须使用 <code>visible.value</code> 才能取得数组，直接访问 <code>visible</code> 取得的是代理对象</p><p><strong>尽可能不要直接修改代理内容</strong></p></li><li><p>在 template 标签（模板）中读取数组内容时，直接访问 <code>visible</code> 即可得到数组内容</p></li><li><p>当模板中引用的代理对象的 set 代理，发现代理内容被更新时，会自动通知视图进行更新</p></li><li><p><code>ref</code> 代理自带 vue2 的 data 做不到的深度监听，比如修改数组项、或对象的字段</p></li></ol><h1 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h1><p>vue3 新增了一个重要的钩子函数 <code>watchEffect</code></p><p>当然，同时可以使用 vue2 的 watch 属性，不赘述了</p><p><code>watchEffect</code> 的主要效果是，注册一个侦听，该侦听会在声明时立刻执行，并在之后所有生命周期函数被调用前，或 <code>setup</code> 函数被调用时执行</p><p>一般写法如下</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watchEffect(<span class="function"><span class="params">onInvalidate</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// work</span></span><br><span class="line">    onInvalidate(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="comment">// options</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>watchEffect</code> 接受两个参数，其中第一个参数必选，第二个参数可选</p><p>第一个参数是每次执行时的执行函数，该函数会提供一个入参，表示侦听执行失败时的善后函数，类似于 <code>catch</code> 语句块中的 <code>finally</code>。此处的入参 <code>onInvalidate</code> 也接受一个函数，表示善后时执行的内容</p><p>第二个参数表示 <code>watchEffect</code> 的配置，一般用于配置 <code>watchEffect</code> 执行的时机</p><p>例如以下代码</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">watchEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// work</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    flush: <span class="string">'post'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>options</code> 中的字段 <code>flush</code>，默认值是 <code>&#39;pre&#39;</code>，表示在钩子函数执行之<strong>前</strong>就执行侦听，所以如果想在之后执行，就要手动设置为 <code>&#39;post&#39;</code></p><p>注意，会在所有生命周期函数被调用后执行，意味着它有可能在 <code>beforeCreate</code> 生命周期之前，或 <code>created</code> 之前就被执行，所以请注意控制其执行时机 </p><h1 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h1><p>也许有人觉得，写一个 <code>setup</code> 函数，和 vue2 好像没有什么本质差别</p><p>但是，vue3 可以在 script 标签上另加一个新属性： <code>setup</code> </p><p>当写一个 script 标签的时候，可以写作如下形式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">xxx</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>此时 script 标签内部的所有内容，都被视为运行在 <code>setup</code> 函数中</p><p>那 <code>setup</code> 的两个参数怎么办呢？直接写在属性上就好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup=&quot;props,context&quot;&gt;</span><br><span class="line">xxx</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>这样就可以在 script 标签中正常使用 <code>props</code> 和 <code>context</code> 了</p><p>那原来在 <code>setup</code> 中的 return 导出怎么办呢？答案是可以直接 export</p><p>例如原来有如下 <code>setup</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setup()&#123;</span><br><span class="line">    <span class="keyword">const</span> data=ref(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;data&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在可以直接写作如下模样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup=&quot;props,context&quot;&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    // 原有 vue 配置</span><br><span class="line">&#125;</span><br><span class="line">export const data = ref(0)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>之后的使用与上例相同，直接在模板中引用即可</p><p>但是，虽然看起来很装逼，不过该写法尚未得到广泛支持，反正到2021年2月16日为止，我在我的编辑器里是用不了，2333</p><h1 id="teleport"><a href="#teleport" class="headerlink" title="teleport"></a>teleport</h1><p>vue3 还有一个重要的新组件： <code>teleport</code></p><p>它用来将新建的渲染挂载到页面上的某个目标，而不是原定位置</p><p>考虑以下情况：我们需要制作一个弹窗功能，希望弹窗弹出后，其在 DOM 树的位置是 body 的直接子级</p><p>那么可以得到如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;template v-if=&quot;visible&quot;&gt;</span><br><span class="line">&lt;teleport to=&quot;body&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;dialog&quot;&gt;</span><br><span class="line">                对话框内容</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;/teleport&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>那么，上述模板在检测到 <code>visible</code> 变为 true 之后，要渲染内部的内容</p><p>内部第一层是 <code>teleport</code>，其 <code>to</code> 属性为 <code>body</code>，那么会将 <code>teleport</code> 内部的所有内容，挂载到 <code>body</code> 上，成为其最后一个子结点</p><p>发现了吧？其实 <code>teleport</code> 最重要的就是 <code>to</code> 属性，该属性接受一个 CSS 选择器，指定要挂载的位置</p><p>选择器重复怎么办？自己看看 JQuery 吧（</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>vue3 还是搞出来一些很好玩的东西，有空多研究一下</p><p>而且和 ts 相性很好，又吸收了 react 的优点，未来超过 react 不是没有可能</p><p>但是！！！太新的特性，使用的时候要先检查一下有没有得到支持了，不要改完代码才发现没支持，又要改回去</p><p>这里我要点名表扬 <code>git reset --hard [version]</code>，存档合理的话，这简直是神技，2333</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.zhihu.com/question/394062839/answer/1496127786" target="_blank" rel="noopener">如何看待 Web 开发构建工具 Vite？ - 阿里巴巴淘系技术</a></p><p><a href="https://v3.cn.vuejs.org/guide/reactivity-computed-watchers.html#%E5%81%9C%E6%AD%A2%E4%BE%A6%E5%90%AC" target="_blank" rel="noopener">响应式计算和侦听 - watchEffect</a></p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue 都发布新版本 vue3 了，不跟上时代怎么可以&lt;/p&gt;
&lt;p&gt;本文结合 ts，且根据笔者自己的使用体验&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://ringoer.com/categories/frontend/"/>
    
    
      <category term="vue" scheme="https://ringoer.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks</title>
    <link href="https://ringoer.com/frontend/react-hooks/"/>
    <id>https://ringoer.com/frontend/react-hooks/</id>
    <published>2021-01-09T10:53:00.000Z</published>
    <updated>2021-01-14T15:25:35.325Z</updated>
    
    <content type="html"><![CDATA[<p>在函数组件里天天 use 来 use 去，我也想自己整点</p><a id="more"></a><hr><h1 id="什么是-React-Hooks"><a href="#什么是-React-Hooks" class="headerlink" title="什么是 React Hooks"></a>什么是 React Hooks</h1><blockquote><p>Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性</p></blockquote><p>其实就是写类组件太麻烦了，函数组件有的功能又没有，所以就用 Hook 来实现所需的效果</p><p>平常见到的那些 useXXX 就是 Hook</p><h1 id="为什么需要-Hook"><a href="#为什么需要-Hook" class="headerlink" title="为什么需要 Hook"></a>为什么需要 Hook</h1><p>可以参看官方给出的 <a href="https://zh-hans.reactjs.org/docs/hooks-intro.html#motivation" target="_blank" rel="noopener">Hook 简介 - 动机</a></p><p>简单说就是，写函数组件就是要用 Hook</p><h1 id="常用-Hooks"><a href="#常用-Hooks" class="headerlink" title="常用 Hooks"></a>常用 Hooks</h1><p>一般有以下 Hook 是常用的</p><ol><li>useState</li><li>useEffect / useLayoutEffect</li><li>useContext</li><li>useReducer</li><li>useMemo / useCallback</li><li>useRef</li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>在开始介绍 Hook 之前，需要先介绍一下注意事项</p><h3 id="只在最顶层使用-Hook"><a href="#只在最顶层使用-Hook" class="headerlink" title="只在最顶层使用 Hook"></a>只在最顶层使用 Hook</h3><p>react 要求在每次执行组件渲染的时候，都要执行相同的 Hook 序列，否则会认为代码出错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [n, setN] = useState(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span>(n % <span class="number">2</span> === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> [m, setM] = useState(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码会触发 react 报错，因为每次执行时，有可能出现不一样的 Hook 序列</p><p>同样的，循环、嵌套函数也可能出现上述问题，请根据具体报错进行处理</p><h3 id="只在-React-函数中调用-Hook"><a href="#只在-React-函数中调用-Hook" class="headerlink" title="只在 React 函数中调用 Hook"></a>只在 React 函数中调用 Hook</h3><p>Hook 在别的函数中，是不起作用的，因为它只为函数组件服务</p><p>所以，Hook 的使用场景必须是以下两个条件之一</p><ol><li>在 react 函数组件中调用 Hook</li><li>在自定义 Hook 中调用其它 Hook</li></ol><p>关于自定义 Hook，下文中会有描述，可以通过目录快进</p><h2 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h2><p>类组件可以通过 <code>this.state = {}</code> 来声明私有变量，但是函数组件不行，所以就需要 <code>useState</code>，其作用实际上就是创建一个变量</p><p>通常使用如下形式创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [n, setN] = useState(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>上述例子创建了一个变量，赋初始值为 0，并取得其 <code>getter/setter</code> API</p><p><code>useState</code> 接受一个传入参数，表示要创建的变量的初始值，之后返回一个具有两个值的数组</p><p>第一个值是该变量的 <code>getter</code>，第二个则是对应的 <code>setter</code></p><p>对于 <code>getter</code>，像普通变量一样使用即可，比如此时直接对 <code>n</code> 取值，就可以取到值 0</p><p>对于 <code>setter</code>，可以有两种调用方式</p><ol><li><p>传入一个新值，此时会完全覆盖旧值</p><p>当且仅当新值与旧值地址不同时，会触发 render</p></li><li><p>传入一个函数，取函数的返回值作为新值</p><p><code>setter</code> 会向这个函数传入一个参数，该参数的值是目标变量当前的最新值</p></li></ol><p>当使用方式 1，直接传入一个新值时，需要注意以下两点</p><ol><li><p>如果此时目标变量是一个对象且具有多个字段，则传入新对象时，不会同步旧有字段的值</p><p>例如，此时对象是 <code>{n: 0, m:1}</code>，通过 <code>setter</code> 设置新值为 <code>{n: 1}</code></p><p>则之后 <code>getter</code> 只能取到 <code>{n: 1}</code>，字段 m 会丢失</p></li><li><p>不要修改旧有的值再传入</p><p>例如，此时对象是 <code>{n: 0}</code>，先直接通过 <code>getter</code> 执行 <code>obj.n ++</code>，再通过 <code>setter</code> 设置新值为 <code>obj</code></p><p>则因为新值和旧值的地址相等，即使内部值变化了，react 也还是认为这个变量并没有发生变化，所以不会重新触发 render</p></li></ol><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p><code>useEffect</code> 最大的作用就是监听</p><p><code>useEffect</code> 要求传入两个参数，第一个参数是回调函数，第二个参数是一个数组，表示当数组中列出的对象变化后，执行回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当 n 变化后，输出 'n changed'</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'n changed'</span>),[n])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 仅在函数组件初始化时，输出 'component start'</span></span><br><span class="line"><span class="comment">// 通常用于模拟生命周期钩子函数 componentDidMount</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'component start'</span>),[])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不论 state 中任意变量变化了，都输出 'something changed'</span></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'something changed'</span>))</span><br></pre></td></tr></table></figure><p>注意，此处所有的回调函数，都会在页面重绘后才执行</p><p><code>useEffect</code> 还有一个功能类似的函数，名为 <code>useLayoutEffect</code></p><p><code>useLayoutEffect</code> 会在 DOM diff 之后，页面重绘之前执行</p><p>但由于上述特点会浪费时间，阻碍用户看到新页面，所以一般不使用 <code>useLayoutEffect</code>，除非使用 <code>useEffect</code> 无法解决问题</p><h2 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h2><p>提供组件上下文，让变量可以穿透组件，从父组件到达子组件</p><p>需要配合 <code>React.createContext</code> 使用</p><p>一个使用例如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useContext &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> themes = &#123;</span><br><span class="line">  light: &#123;</span><br><span class="line">    foreground: <span class="string">"#000000"</span>,</span><br><span class="line">    background: <span class="string">"#eeeeee"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  dark: &#123;</span><br><span class="line">    foreground: <span class="string">"#ffffff"</span>,</span><br><span class="line">    background: <span class="string">"#222222"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ThemeContext = React.createContext(themes.light);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState(themes.dark);</span><br><span class="line">  <span class="keyword">const</span> change = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setValue(themes.light)</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;ThemeContext.Provider value=&#123;value&#125;&gt;</span><br><span class="line">      &lt;ThemedButton /&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">          &lt;button onClick=&#123;change&#125;&gt;change&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/ThemeContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function ThemedButton(props) &#123;</span></span><br><span class="line"><span class="regexp">  const theme = useContext(ThemeContext);</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;button style=&#123;&#123; background: theme.background, color: theme.foreground &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">      I am styled by theme context!</span></span><br><span class="line"><span class="regexp">    &lt;/</span>button&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>先声明 <code>themes</code> 作为父子组件通用的内容</p><p>然后通过 <code>React.createContext</code> 创建上下文，此处返回的变量可以<strong>任意命名</strong></p><p>之后，在父组件中，通过 <code>useState</code> 创建一个响应式变量，用来存放当前提供给子组件的主题，并在模板中，使用一对 <code>ThemeContext.Provider</code> 标签，包裹住可以使用上下文的其它内容</p><p>此处允许子组件 <code>ThemedButton</code> 以及父组件中的一个 <code>button</code> 元素使用上下文</p><p>注意，不论你的上下文变量叫什么名字，此处的包裹标签都必须是 <code>.Provider</code> 形式</p><p>此时就可以在子组件中，通过 <code>useContext</code> 获取上下文，该 Hook 要求传入上下文变量作为参数，并返回此时父组件提供的具体内容，之后就可以在子组件的模板中使用了</p><p><code>useContext / createContext</code> 组合通常用来提供<strong>局部的全局变量</strong></p><p>之所以是全局变量，是因为其可以在父子组件之间通用</p><p>之所以又称为局部，是因为我们通常不希望有太多的变量污染全局空间，容易产生冲突，难以维护，所以最好不要放在主入口中</p><p>注意，上下文的修改不是响应式的，例如直接通过赋值语句修改上例中的 <code>value</code> 的话，并不会触发视图更新，所以上例采用了 <code>useState</code> 提供的响应式更新的方法</p><h2 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h2><p>是一种 <code>useState</code> 的替代方案，使用方法类似于 VUE 的 VUEX，都是一个存放数据的地方，加上预先声明的若干操作，之后通过 <code>dispatch</code> 提交操作</p><p>通常使用如下模样使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialArg, init);</span><br></pre></td></tr></table></figure><p>要求传入三个参数，按顺序分别是对数据的一组操作、数据初始值、初始化方法，其中第三个参数是可选的</p><p>该 Hook 的两个返回值，按顺序分别是数据的 <code>getter</code>，以及向对应数据提交操作的 <code>dispatch</code> 函数</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>一个使用例如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123; <span class="attr">count</span>: <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increment'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'decrement'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      Count: &#123;state.count&#125;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class="attr">type</span>: <span class="string">'decrement'</span> &#125;)&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class="attr">type</span>: <span class="string">'increment'</span> &#125;)&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>先声明要引入的初始值，一般命名为某种 state</p><p>然后以函数形式声明一组操作，该函数接受两个参数，按顺序分别是数据对象和 <code>dispatch</code> 提交上来的对象</p><p>按照约定，一般将操作类型放在 <code>type</code> 字段，将额外的操作数放在 <code>payload</code> 字段</p><p>在这组操作中，通过判断 <code>action.type</code>，来确定要执行的是哪种操作，然后返回一个新的对象，作为新的 <code>state</code></p><p>需要注意的是，此处的返回值不会与旧的 <code>state</code> 自动合并，在使用中需要手动使用 spread 语法进行展开赋值</p><p>从上例的模板可以看出，对 <code>state</code> 的读操作，其写法与直接读源数据相同；对于 <code>dispatch</code> 函数，要求传入一个对象，该对象在操作函数中作为 <code>action</code> 出现</p><h3 id="惰性初始化"><a href="#惰性初始化" class="headerlink" title="惰性初始化"></a>惰性初始化</h3><p>也可以采用函数式声明，进行惰性初始化，这么做可以将用于计算 state 的逻辑提取到 reducer 外部，也为将来对重置 state 的 action 做处理提供了便利</p><p>一个惰性初始化的例子如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">initialCount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">count</span>: initialCount &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'increment'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count + <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'decrement'</span>:</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">count</span>: state.count - <span class="number">1</span> &#125;;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'reset'</span>:</span><br><span class="line">      <span class="keyword">return</span> init(action.payload);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialCount, init);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      Count: &#123;state.count&#125;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          onClick=&#123;() =&gt; dispatch(&#123; <span class="attr">type</span>: <span class="string">'reset'</span>, <span class="attr">payload</span>: initialCount &#125;)&#125;&gt;</span><br><span class="line">          Reset</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: 'decrement' &#125;)&#125;&gt;-&lt;/</span>button&gt;</span><br><span class="line">        &lt;button onClick=&#123;() =&gt; dispatch(&#123; <span class="attr">type</span>: <span class="string">'increment'</span> &#125;)&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>显然，通过函数式初始化，可以对数据进行复杂的预处理，并且不会与 <code>reducer</code> 过耦合</p><p>但写法较为麻烦，实践中一般没什么必要，有需要的时候再重构吧</p><h2 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h2><p>常见的 <code>useMemo</code> 格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> fn(a, b), [a, b]);</span><br></pre></td></tr></table></figure><p>接受两个参数，返回一个缓存值</p><p>第一个参数是一个函数，该函数的传入参数为空，取该函数的返回值作为 <code>useMemo</code> 的返回值</p><p>第二个参数是一个监听数组，效果同 <code>useState</code></p><p>可以通过该 Hook 回避多余的渲染</p><h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h3><p>一般我们执行一个函数的时候，都需要传入参数，但是用 <code>useMemo</code> 第一个参数必须为空，所以就会变成这样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> (a,b) =&gt; fn(a, b), [a, b]);</span><br></pre></td></tr></table></figure><p>这是一个返回函数的函数，一看就很丑</p><p>所以有一个语法糖 <code>useCallback</code>，自带可选参数</p><p>格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> memoizedValue = useCallback(<span class="function">(<span class="params">a,b</span>) =&gt;</span> fn(a, b), [a, b]);</span><br></pre></td></tr></table></figure><p>就是这样，与上面提到的 <code>useMemo</code> 的例子完全等效</p><h3 id="React-memo"><a href="#React-memo" class="headerlink" title="React.memo"></a>React.memo</h3><p>也可以通过 <code>React.memo</code> 函数，来缓存整个组件</p><p>其格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* 使用 props 渲染 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">areEqual</span>(<span class="params">prevProps, nextProps</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  如果把 nextProps 传入 render 方法的返回结果与</span></span><br><span class="line"><span class="comment">  将 prevProps 传入 render 方法的返回结果一致则返回 true，</span></span><br><span class="line"><span class="comment">  否则返回 false</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> React.memo(MyComponent, areEqual);</span><br></pre></td></tr></table></figure><p>要求传入两个参数，返回缓存的组件</p><p>第一个参数是函数组件</p><p>第二个参数可选，是一个判断函数，通过该函数进行对于新旧 <code>props</code> 的判断，返回 <code>true / false</code> 分别表示认为 <code>props</code> 变化或没有变化 </p><p>当传递给 <code>MyComponent</code> 的 <code>props</code> 没有发生变化时，组件不会重新渲染</p><h2 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h2><p>之前说过，react 的推荐思想之一就是<strong>对象不变性</strong></p><p>但是这样的话，每次都要产生一个新对象，各种开销不得不考虑</p><p>于是就有了 <code>useRef</code> 这个 Hook，用来在组件中产生一个唯一的引用，使其在每次重新渲染的时候都保持同一个引用</p><p>一般格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> refContainer = useRef(initialValue);</span><br></pre></td></tr></table></figure><p>传入一个初始值，该初始值可以是对象</p><p>之后返回一个唯一的引用，通过该对象的 <code>current</code> 字段，取得我们传入的数据</p><p>一个用例如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextInputWithFocusButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> inputEl = useRef(<span class="literal">null</span>);</span><br><span class="line">  <span class="keyword">const</span> onButtonClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// `current` 指向已挂载到 DOM 上的文本输入元素</span></span><br><span class="line">    inputEl.current.focus();</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;&gt;</span><br><span class="line">      &lt;input ref=&#123;inputEl&#125; type=<span class="string">"text"</span> /&gt;</span><br><span class="line">      &lt;button onClick=&#123;onButtonClick&#125;&gt;Focus the input&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过创建一个初始值为空的引用，然后通过 <code>ref</code> 属性绑定到 DOM 元素上，之后该引用的 <code>current</code> 字段值就一直是该 DOM 元素</p><p>乍一看是不错，解决了重复产生多个对象的问题，但是又产生了另一个问题——当 ref 对象内容发生变化时，<code>useRef</code> 并<strong>不会</strong>通知你。变更 <code>current</code> 属性不会引发组件重新渲染</p><p>此时需要用户手动调用渲染函数，或采取如下的补救方法</p><h3 id="补救方法"><a href="#补救方法" class="headerlink" title="补救方法"></a>补救方法</h3><p>我们知道 <code>useState</code> 返回的 <code>setter</code> 可以刷新页面，那么我们就可以利用这个 Hook</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> count = useRef(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">const</span> [_, fresh] = useState(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">const</span> onButtonClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        count.current++;</span><br><span class="line">fresh(<span class="built_in">Math</span>.random());</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">        &#123;count.current&#125;</span><br><span class="line">        &lt;button onClick=&#123;onButtonClick&#125;&gt;refresh&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 <code>useState</code> 取得一个可以刷新页面的函数，之后每次在 <code>count.current</code> 更新时，传入保证不相同的随机数，就可以做到更新页面的效果了</p><h3 id="子组件传递-ref"><a href="#子组件传递-ref" class="headerlink" title="子组件传递 ref"></a>子组件传递 ref</h3><p>但是 ref 不能通过 props 传递，怎么办呢</p><p>可以通过 <code>React.forwardRef</code> 来包装一个子组件，并向下传递 ref</p><p><code>React.forwardRef</code> 函数接受一个函数组件作为内部组件，并向该内部组件提供两个参数</p><p>第一个参数是正常的 props，第二个参数则是绑定在当前包装器组件上的 ref</p><p>一个用例如下</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> inputEl = useRef(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">const</span> onButtonClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// `current` 指向已挂载到 DOM 上的文本输入元素</span></span><br><span class="line">        inputEl.current.focus();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">        &lt;MyInput ref=&#123;inputEl&#125; type=<span class="string">"text"</span> /&gt;</span><br><span class="line">        &lt;button onClick=&#123;onButtonClick&#125;&gt;Focus the input&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> MyInput = React.forwardRef(<span class="function"><span class="keyword">function</span>(<span class="params">props, ref</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span>;</span></span><br><span class="line"><span class="xml">&#125;);</span></span><br></pre></td></tr></table></figure><p>不过类组件就没有这个问题，毕竟有 this 指针</p><h3 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a>useImperativeHandle</h3><p>格式如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useImperativeHandle(ref, createHandle, [deps])</span><br></pre></td></tr></table></figure><p>将 ref 设置为 createHandle 的值，在依赖项变更的时候重新计算</p><p>其实就是起到一个设置 ref 的效果</p><p>但是修改 ref 有什么用呢？答案就是没什么用（</p><h1 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h1><p>这个就简单了，先给个例子吧</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useUpdate.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useUpdate = <span class="function">(<span class="params">fn, dep</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [flag, setFlag] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) fn();</span><br><span class="line">    <span class="keyword">else</span> setFlag(<span class="function"><span class="params">flag</span> =&gt;</span> <span class="literal">true</span>);</span><br><span class="line">  &#125;, [fn, dep, flag]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useUpdate;</span><br></pre></td></tr></table></figure><p>通过 react 原生的 <code>useState</code> 和 <code>useEffect</code>，来做到监听、回调与刷新</p><p>自定义 Hook 要求是必须命名为 <code>useXxx</code> 格式</p><p>除了本例的 <code>useUpdate</code>，也可以自定义一些别的对某些数据的操作，只要直接向外暴露读写接口即可</p><p>如果想要加强功能的话，甚至其余的 CURD 也可以一起写好暴露出去，2333</p><h1 id="过时的闭包"><a href="#过时的闭包" class="headerlink" title="过时的闭包"></a>过时的闭包</h1><p>英文说法为 stale closure</p><p>我们可以发现 react 的 <code>useState</code> 等功能，其实都是隐藏了真实目标，而向外暴露接口的形式，这就是一种闭包</p><p>但是大量使用闭包，也有显而易见的缺点，就是不利于内存的管理</p><p>所以 VUE 的作者尤雨溪认为这是一种”过时的闭包”</p><p>当然大家见仁见智吧，react 毕竟这么自由</p><p>但是！我去用 VUE 3.0 了，888888888888888</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在函数组件里天天 use 来 use 去，我也想自己整点&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://ringoer.com/categories/frontend/"/>
    
    
      <category term="react" scheme="https://ringoer.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>React 函数组件</title>
    <link href="https://ringoer.com/frontend/react-function-component/"/>
    <id>https://ringoer.com/frontend/react-function-component/</id>
    <published>2021-01-09T08:27:00.000Z</published>
    <updated>2021-01-14T15:19:33.412Z</updated>
    
    <content type="html"><![CDATA[<p>没什么特殊情况的话，一般还是用函数组件</p><a id="more"></a><hr><p>大部分内容其实是和类组件作出的对比</p><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">props</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [n, setN] = useState(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> add = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setN(<span class="function"><span class="params">n</span> =&gt;</span> n + <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &#123;n&#125;</span><br><span class="line">      &lt;button onClick=&#123;add&#125;&gt;+<span class="number">1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><p>好了，一个函数式组件的基本形完成了，比类组件简短很多吧</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="props"><a href="#props" class="headerlink" title="props"></a>props</h2><p>与类组件基本相同，react 会向组件提供 props 参数</p><p>只不过类组件是使用构造器来接收并初始化，函数组件是直接通过传入参数来取得</p><h2 id="state"><a href="#state" class="headerlink" title="state"></a>state</h2><p>对于私有变量，类组件的方案是在构造器中声明</p><p>而在函数组件中，要使用 <code>useState</code> 来模拟 state 的效果</p><p><code>useState</code> 函数返回两个值，按顺序分别是目标变量的值和对于该变量的 setter</p><p>同时还接受一个传入参数，作为目标变量的初始值</p><p>可以通过解构赋值获得变量和 setter</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [n, setN] = useState(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// n: 取决于传入值，此处是 number</span></span><br><span class="line"><span class="comment">// setN: React.Dispatch&lt;React.SetStateAction&lt;number&gt;&gt; 此处的 number 同上</span></span><br></pre></td></tr></table></figure><h2 id="setter"><a href="#setter" class="headerlink" title="setter"></a>setter</h2><p>对于从 <code>useState</code> 中取得的 setter，一般可以直接写一个值，例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setN(n + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>但是有复杂逻辑时，不免太过单薄，所以一般建议在 setter 中传入一个 function</p><p>setter 会向这个函数抛出一个参数，这个参数是操作数当前的值</p><p>这个函数应当返回一个值，作为操作数的新值</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2><p>函数组件要求 return 一段 JSX 语段，起到类组件中 render 方法的效果</p><p>每当组件刷新时，都会再次执行函数组件中的语句</p><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p>好，现在发现一个很重要的问题——函数组件没有生命周期钩子函数！</p><p>但是 react 作者怎么可能没有想到这个呢？早就给你安排了模拟了</p><h2 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h2><p>首先来了解一下 <code>useEffect</code> 函数，函数原型如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useEffect(fn[,target])</span><br></pre></td></tr></table></figure><p>第一个参数是监听的回调函数</p><p>第二个参数可不填，表示监听组件中的所有项目，或填入一个数组，数组中的每个元素都是监听的对象</p><p>一个用例如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render run'</span>)</span><br><span class="line">&#125;, [n])</span><br></pre></td></tr></table></figure><p>则每当 n 变化时，都会输出 render run</p><h2 id="模拟-constructor"><a href="#模拟-constructor" class="headerlink" title="模拟 constructor"></a>模拟 constructor</h2><p>构造器不需要模拟，在函数组件中，return 前的代码都可以认为是构造器</p><h2 id="模拟-componentDidMount"><a href="#模拟-componentDidMount" class="headerlink" title="模拟 componentDidMount"></a>模拟 componentDidMount</h2><p>根据上述定义，显然我们可以选择填入一个空数组，表示不需要监听任何变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'constructor'</span>)</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure><p>好了，现在只有函数组件初始化的时候会执行这段输出</p><h2 id="模拟-componentWillUnmount"><a href="#模拟-componentWillUnmount" class="headerlink" title="模拟 componentWillUnmount"></a>模拟 componentWillUnmount</h2><p>上面说到 <code>useEffect</code> 的第一个参数应该是一个函数，我们可以通过返回值来控制组件消亡前的动作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'constructor'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'组件即将消亡'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如上，return 一个函数即可，该函数将在组件即将消亡时被调用</p><h2 id="模拟-componentDidUpdate"><a href="#模拟-componentDidUpdate" class="headerlink" title="模拟 componentDidUpdate"></a>模拟 componentDidUpdate</h2><p>在如下这个例子中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'render run'</span>)</span><br><span class="line">&#125;, [n])</span><br></pre></td></tr></table></figure><p>我们发现它会在 n 变动时打印输出，但在初始化的时候也打印了输出</p><p>如果要求不太高的话，其实已经可以就这样满足了</p><p>但我们怎么可以这么容易满足呢？我就是要让它在初始化的时候不打印，在更新的时候才打印！</p><p>那么容易想到使用一个控制变量来判断是不是第一次渲染</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'n changed'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'first render'</span>)</span><br><span class="line">        flag = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, [n])</span><br></pre></td></tr></table></figure><p>但是一运行，发现一直都只能打印 first render，怎么回事？？</p><p>因为直接创建的变量并不会绑定到函数组件上，我们必须通过 <code>useState</code> 函数来创建才可以</p><p>那么可以得到如下改版</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [flag, setFlag] = useState(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'n changed'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'first render'</span>)</span><br><span class="line">        setFlag(<span class="function"><span class="params">flag</span> =&gt;</span> <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, [n])</span><br></pre></td></tr></table></figure><p>现在可以正常实现我们的功能了，但是代码好丑</p><p>于是我们把这个代码段包装成一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> useUpdate = <span class="function"><span class="params">dep</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [flag, setFlag] = useState(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'n changed'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'first render'</span>)</span><br><span class="line">            setFlag(<span class="function"><span class="params">flag</span> =&gt;</span> <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [dep])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>剥离与组件中变量的依赖，改为只依赖传入的参数</p><p>然后在函数组件中通过 <code>useUpdate(n)</code> 进行调用</p><p>注意，此处的函数名必须满足 <code>\use.+\</code> 的格式，否则 react 会报错，认为这不是一个 react 组件或函数</p><p>但是还是不够灵活——我想传入我自己的处理函数，怎么办呢？</p><p>那么我们往这个函数中传入自己的 function</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> useUpdate = <span class="function">(<span class="params">fn, dep</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [flag, setFlag] = useState(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            fn()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'first render'</span>)</span><br><span class="line">            setFlag(<span class="function"><span class="params">flag</span> =&gt;</span> <span class="literal">true</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, [dep])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在函数组件中通过 <code>useUpdate(fn, n)</code> 进行调用即可</p><p>现在就还挺好看了，用法也和原生 useEffect 挺像</p><p>现在把这段逻辑抽离到单独的文件中，然后引入它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useUpdate.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; useEffect, useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useUpdate = <span class="function">(<span class="params">fn, dep</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [flag, setFlag] = useState(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (flag) fn();</span><br><span class="line">    <span class="keyword">else</span> setFlag(<span class="function"><span class="params">flag</span> =&gt;</span> <span class="literal">true</span>);</span><br><span class="line">  &#125;, [fn, dep, flag]);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useUpdate;</span><br></pre></td></tr></table></figure><p>之后就可以在任意文件中引入它了</p><p>注意，此处一般建议将 fn 和 flag 都放入监听数组中，否则 react 担心 fn 和 flag 一旦变化，会导致执行结果脱离预期，所以会引发警告（虽然警告一般都不重要）</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是 react 函数组件的主要内容</p><p>结合类组件的内容，可以看出，react 在绝大多数地方都是推荐使用函数而不是直接赋值，并且大部分时候是通过组合各种功能来实现新功能，而不是依赖继承</p><p>如果用不习惯的话，vue 也不错，2333</p><hr><p>感谢阅读</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;没什么特殊情况的话，一般还是用函数组件&lt;/p&gt;
    
    </summary>
    
    
      <category term="frontend" scheme="https://ringoer.com/categories/frontend/"/>
    
    
      <category term="react" scheme="https://ringoer.com/tags/react/"/>
    
  </entry>
  
</feed>
