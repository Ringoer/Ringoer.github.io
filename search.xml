<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Welcome to No. 68 Floating Island]]></title>
    <url>%2Funcategorized%2Fmainpage%2F</url>
    <content type="text"><![CDATA[Are You Going To Scarborough Fair ?]]></content>
  </entry>
  <entry>
    <title><![CDATA[数据库系统实验报告-实验1 oracle 11g的安装、配置和使用]]></title>
    <url>%2Fdatabase-experiment%2Fdb-ex1%2F</url>
    <content type="text"><![CDATA[只是一篇实验报告。 实验目的a) 掌握Oracle 11g Server的安装b) 掌握Oracle的监听与网络配置c) 掌握Oracle数据库的启动与关闭d) 掌握Oracle的交互式开发环境、工具及常用管理操作命令 实验内容/步骤1、安装Oracle 11g（服务器版本）2、理解安装过程中各选项的含义及作用3、了解内置用户的登录和服务器预定义角色4、安装完成后以OEM方式登录、管理数据库5、创建以自己学号为账号的新用户(S+自己学号)。6、对账号做相应授权。7、使用网络配置工具进行网络配置 存在的问题及解决方案(列出遇到的问题及其解决办法，列出没有解决的问题)1、Windows10安装障碍（不满足最低配置） ① 提取iso中所有文件 ② 记事本打开\stage\cvu\cvu_prereq.xml ③ 修改如图字段，重点修改6.2以及Windows 10 参考链接2、Environment Variable: “PATH” 失败 ① 打开环境变量配置，选择PATH ② 先备份PATH，之后删除一部分PATH项，直到不会报错 ③ 正常安装，结束后恢复原PATH列表 参考链接3、以OEM方式登录 访问localhost:1158/em/console/logon/logon4、创建新用户 ① 打开SQL Plus ② 新建数据表空间，语句如下： 123create tablespace dbsp_2 datafile &apos;url\filename.dbf&apos;size 10mextent management local autoallocate; 其中单引号内链接自行指定，注意指定的文件夹应是已创建的，且新建的文件后缀名为.dbf ③ 新建用户，语句如下 1234create user username identified by passworddefault tablespace dbsp_2temporary tablespace tempquota 10m on dbsp_2; 其中username为用户名，by后面为密钥 ④ 授权，语句格式如下： 1grant connect,resource,dba to username; 可以是如下形式： 1grant connect,resource,dba to username; 参考链接5、配置网络 ① 运行Net Configuration Assist ② 选择“本地网络服务名配置” ③ 选择“添加” ④ 这一步要求输入你要访问的数据库的“全局数据库名”，“全局数据库名”在安装数据库时指定，默认为name.domain（即：数据库名+数据库域名），当然也可以根据自己喜好随意命名，可以通过select * from global_name;进行查询。 *可以直接命名为myorcl ⑤ 选择网络语数据库的通信协议，默认TCP即可 ⑥ 主机名填写127.0.0.1用以访问本地数据库，并选择“使用标准端口号1521” ⑦ 选择“是，进行测试” ⑧ 默认的测试使用Oracle的Scott用户，因为用户被锁或口令不对，一般情况都会测试不成功，这时候可以通过“更改登录”重新输入数据库的用户/口令来进行测试是否连接成功 ⑨ 网络服务名，即为该远程连接配置命名。默认即可。 至此，如果不需要再配置其他的网络服务，则该网络服务名配置完毕。 参考链接]]></content>
      <categories>
        <category>database-experiment</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2017へのさよなら]]></title>
    <url>%2Fdiary%2Fend-of-2017%2F</url>
    <content type="text"><![CDATA[2017也算是过去了，聊表感想。 PART1不知不觉2017已经过去了。实话实说，2017年，真是对我来说人生中重要的一年。经历了严酷的高三总复习，参加了大大小小的模拟考试（省质检一竟然还漏题了，笑），直到高考，直到来到XMU，直到……也算是命中注定吧，为了冲XMU经院，放着自招20分不用，报了普通本一批，第一志愿经院，第二志愿软院。但是在FJ，经院收到597分，而我才考了596，因而还是来了软院。若是我当时多考一分，现在又如何呢？ PART2除了正式的学业之外，我还参加了一些可做可不做的事。 云一OI培训 云一日语部 N3考试 等等但是结果？ NOIP2017无人通过初赛 集训学员学习热情忽高忽低 日语部成员竟然因为一个人退部了就热情降到冰点 N3考试尚无结果又有什么事情成功了呢？只是我的一厢情愿吗？ PART3在XMU软院，似乎借着FJTG2=的基础，大有风生水起之势。但lyh，YJQAQ，hiijar，都能在专业水平方面甩我若干条街。我能做些什么？怕是只有学习。即使是学习，也面临我长期以来的问题：听不下课。小学时期，我发现课不难，上课写作业的话回家可以有更多时间玩。于是一发不可收拾，直到高中毕业我都贯彻落实这一点。这直接造成我现在只有在上课时候才能写作业，也只有写作业才能保证清醒，否则我一旦认真听课，立刻睡着。长期以来的习惯，如今被婊了。我曾经也试过改，然后就睡着了，根深蒂固。但是我能怎么办呢？我就想上课睡觉吗？我就不想改吗？ PART412.30去了上海，在浦东赶星尘宝宝的演唱会，然后去松江找同学玩。从松江到外滩，真的蛮久的，用时好像在2小时？结果见到了重度污染的东方明珠，还因为地铁要封站而匆匆赶回。次日早上兜兜转转，虽然中午开心地聚餐了，但是飞机险些来不及，唉，虹桥居然提前20分钟截停，还是高崎15分钟截停好。只有照片，留下了一点回忆。 PART5想起一句名言？也许不算名言。“未来永远在手中，手中抓不住的是过去”。似乎没什么事情的2017，已经抓不住了。 那么，再见。]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[C++语言-3-循环语句及选择语句]]></title>
    <url>%2Fcpp%2Fcpp-3%2F</url>
    <content type="text"><![CDATA[本章学习循环结构和选择结构的基本用法。 循环语句while语句while语句实现”当型”循环，它的一般格式为：1234while (判断条件)&#123; 循环体&#125; 1、当判断条件成立时，循环执行大括号中语句。并且初始化部分和迭代部分是任选的。2、while语句首先检查判断条件，当条件满足时，才去执行循环中的语句。这是”当型”循环的特点。 do-while语句do-while语句实现”直到型”循环，它的一般格式为：1234do&#123; 循环体&#125;while (判断条件); 1、do-while语句首先执行循环体，然后检查判断条件，若成立，则循环执行大括号中的语句，直到判断条件不成立。2、与while语句不同的是，do-while语句的循环体至少执行一次，是”直到型”循环的特点。 for语句for语句也用来实现”当型”循环，它的一般格式为：1234for (初始化操作;判断条件;迭代部分)&#123; 循环体&#125; 1、for语句执行时，首先执行初始化操作，然后检查判断条件是否满足，如果满足，则执行循环体中的语句，最后执行迭代部分。完成一次循环后，重新判断终止条件。2、可以在for语句的初始化部分声明一个变量，它的作用域为一个for语句。3、for语句通常用来执行循环次数确定的情况(如对数组元素进行操作)，也可以根据循环结束条件执行循环次数不确定的情况。4、在初始化部分和迭代部分可以使用逗号语句，来进行多个动作。逗号语句是用逗号分隔的语句序列。例如：1234for(i=0,j=10;i&lt;j;i++,j--)&#123; 循环体&#125; 5、初始化、终止以及迭代部分都可以为空语句，且只要判断条件为空，就相当于一个无限循环，如：1234for(i=0;;i++)&#123; 循环体&#125; 循环语句的控制1、break跳出当前所在循环，忽略break以下的所有语句。2、continue直接执行下一次循环，忽略continue以下的所有语句。 条件语句if-else语句一般格式为：12345678if(判断条件)&#123; 语句1&#125;else&#123; 语句2&#125; 当判断条件成立时，执行语句1，否则执行语句2。 switch语句一般格式为：123456789101112switch(变量)&#123;case 值1: 语句1; break;case 值2: 语句2; break;default: 语句3; break;&#125; 当变量为值1时执行语句1，当为值2时执行语句2，当不为已给出的任何情况时执行default的语句3。case可以无限添加，不只限2个。需要注意的是，当你没有break时，会一直向下执行。如以下程序段，若变量为值1，则语句1,2,3都将被执行。12345678910switch(变量)&#123;case 值1: 语句1;case 值2: 语句2;default: 语句3; break;&#125; 逻辑判断符号小于：&lt; 大于：&gt; 等于：==（两个等号） 小于等于：&lt;= 大于等于：&gt;= 不等于：!=特别的，计算时用的等于只有一个等号，判断时才用两个等号。逻辑联结符号且：&amp;&amp; 或：||或的符号由两个竖线组成，竖线可以由回车上方的那个键打出。如：1234if(((x&gt;1||x&lt;-1)&amp;&amp;y&gt;2)||(x&lt;-9&amp;&amp;y&gt;0))&#123; sum=sum+1;&#125; 这样表示当满足以下两种情况之一时，sum的值+1。① x大于1且y大于2，或x小于-1且y大于2时。② x小于-9且y大于0时。特别的，使用if(条件1||条件2)的时候，如果条件1成立，则不会判断条件2是否成立，直接进入if的语句块。上述两种符号也属于运算符。使用逻辑符号时的要点*不可以写连等式，如：如果x大于0小于100，不可以写if(0&lt;x&lt;100)，必须拆开，写成if(0&lt;x&amp;&amp;x&lt;100)。其余逻辑符号同理。 第三章到此结束。 本章练习：选择语句：P1422 小玉家的电费P1085 不高兴的津津P1089 津津的储蓄计划P1909 买铅笔T16594 小明的四则运算 循环语句：P1008 三连击P1035 级数求和P1423 小玉在游泳P1424 小鱼的航程(改进版)P1980 计数问题T17068 有多少平方数T17072 是质数吗？T17073 什么？！n！T17071 四个数的2nd问题]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[C++语言-2-数据类型与输入输出]]></title>
    <url>%2Fcpp%2Fcpp-2%2F</url>
    <content type="text"><![CDATA[本章将学习基本数据类型与输入输出的方法。首先，请大家先熟悉下面的计算指定的a+b的和并输出的代码。1234567891011#include&lt;iostream&gt;using namespace std;int main()&#123; int a,b,c; cin&gt;&gt;a&gt;&gt;b; c=a+b; cout&lt;&lt;c; system("pause"); return 0;&#125; 样例输入：2 3样例输出：5在前一篇中讲过的部分就不再赘述，直接从第五行开始讲起。 第五行：int a,b,c;定义三个变量，分别叫做a,b,c，返回int类型（整型），句末要有分号。可以在定义里赋值，如int a=1,b=1,c=1;。int后面要有一个空格。 常用数据类型：short有符号（即表示有正负，下同）短整型，范围-32768~32767（-2^15~2^15-1），只支持整数。unsigned short无符号短整型，范围0~65535（2^16-1），只支持整数。int有符号整型，范围-2147483648~2147483647（-2^31~2^31-1），只支持整数。unsigned int无符号整型，范围0～4294967295（2^32-1），只支持整数。long long有符号长整型，范围-9223372036854775808~9223372036854775807（-2^63~2^63-1），只支持整数。unsigned long long无符号长整型，范围0~18446744073709551615（2^64-1），只支持整数。float单精度，支持小数，有效数字约8位，范围-3.40(10的38次方)~3.40(10的38次方)。double双精度，支持小数，有效数字约16位，范围-1.79(10的308次方)~1.79(10的308次方)。char有符号字符型，不支持字符串，范围-128~127。unsigned char无符号字符型，不支持字符串，范围0~255。string字符串，在第五章中有具体说明。bool布尔型，范围true或false，即非0或0。*当遇见有的程序只写一个unsigned时，默认是unsigned int。*在没有特殊强调时，整数类型一般用int，超过int的范围时可以使用long long或unsigned long long，别的一般不常用；浮点数类型一般用double，少用float。 标识符：上文中提到的变量，就是标识符的一种。对于所有的标识符，均需要满足如下名称要求： 只能是字母或下划线开头，严格区分大小写。 不可以包含数字或字母或下划线以外的其余符号。 不可以是系统正在使用的名称。如在linux系统中time是一个系统变量，则不可以使用time作为变量名称。 变量定义的写法： 定义一个int类型的变量a，写作int a; 定义一个long long类型的变量a，写作long long a; 定义一个float类型的变量a，写作float a; 定义一个double类型的变量a，写作double a; 定义一个char类型的变量a，写作char a; 定义一个string类型的变量a，写作string a; *string在编程环境中不会变色，但仍是可用类型。*要使用string类型，需要#include&lt;string&gt;。*string的具体用法在第五章中有具体说明。*定义里可以直接赋值，如int a=123;*定义里一句可以写多个变量，如int a,b,c;*如在定义时直接对变量赋值，需要对每个想赋值的变量都赋值。&ensp;如：int a,b=1;则a是未赋值变量，b被赋值为1&ensp;再如：int a=2,b=1;则a被赋值为2，b被赋值为1 第六行：cin&gt;&gt;a&gt;&gt;b;按顺序输入一个变量a和一个变量b。cin包含在iostream中。句末有分号。*每输入一个变量都需要写两个&gt;符号（该符号是半角大于号），箭头指向要输入的变量。*cin和cout会自动识别输入/输出的值的类型，无需特意说明。*若是使用cstdio头文件的话，需要写成scanf(“%d%d”,&amp;a,&amp;b);句末有分号，在变量前需加&amp;这个符号，相邻变量以逗号隔开。&quot;%d&quot;的意思是按整型来操作，有两个变量所以写两个%d。*scanf会比cin快一些，在输入量很大（大于10万个数据）时建议使用scanf。printf同理。 对于scanf和printf，其均满足以下写法：scanf(格式说明字符串,操作数);printf(格式说明字符串,操作数);其中，scanf和printf均可以只写格式说明字符串而不写操作数。当且仅当格式说明字符串中出现格式说明符（又叫占位符）时，才填写操作数。并且，scanf和cin一样，均会自动跳过回车，且在格式说明符不为%c和%s时均会跳过空格。 示例：仅格式说明字符串：scanf(&quot;a=b=&quot;);当输入是a=b=时可以正常执行printf(&quot;a=b=&quot;);输出字符串a=b=仅占位符：scanf(&quot;%d%d&quot;,&amp;a,&amp;b);当输入仅有两个数字时可以正常执行，按格式说明符%d来操作变量a和bprintf(&quot;%d&quot;,c);按格式说明符%d来操作变量c混用：scanf(&quot;a=%d,b=%d&quot;,&amp;a,&amp;b);当输入格式满足例如a=1,b=2时（就连逗号也不能漏掉），输入取得值1和2，分别赋值给a和bprintf(&quot;c=%d&quot;,c);将会原样输出c=，之后将变量c的值按格式说明符%d操作后，输出值 又如，本文开头的代码段可以转化为如下代码段，样例也可转化为对应样例：1234567891011#include&lt;iostream&gt;using namespace std;int main()&#123; int a,b,c; scanf(“a=%d,b=%d”,&amp;a,&amp;b); c=a+b; printf(“c=%d”,c); system("pause"); return 0;&#125; 样例输入：a=2,b=3样例输出：c=5 注意到上文中，scanf的操作数前有加”&amp;”符号，而printf的操作数前没有。关于&amp;，将会在第十章中说明。 附，常见格式说明符：%d，表示按int类型处理%lld，表示按long long类型处理%ull，表示按unsigned long long类型处理%c，表示按char类型处理%s，表示按char数组来进行处理（关于数组，后续章节会讲到）%f，表示按float类型处理%lf，表示按double类型处理（因为double本质上是long float，所以其格式操作符取long float的缩写）上述格式操作符均会跳过空格和换行符。也就是说，在使用cin、或在scanf中使用上述格式操作符时，输入的不同值可以使用空格或换行符隔开。 关于格式操作符的特殊操作（以下仅1可以适用于scanf，其余均仅适用于printf）：1、按照指定宽度保留数字的方法：如对int类型保留4个数字的位宽，格式操作符可选用%4d*当数字的实际宽度大于要保留的位宽时，按照原宽度输出。所以若是%0d，就是按原宽度输出*当数字的实际宽度小于要保留的位宽时，将数字右对齐，并在左边补空格填充2、保留指定位数的小数（直接舍去，并不四舍五入）的方法：如对double类型保留两位小数，格式操作符可选用%0.2lf对其中0的说明，参加第1条；而小数点后的2，就表示保留两位小数此种情况下，0可以省略，如%0.2lf与%.2lf等效*内部操作是先计算保留小数，再计算保留位宽*对于小数，小数点也占一个位宽，所以如对于2.15使用格式说明符%4.1lf的话，会因为先计算保留1位小数而变为2.1，此时位宽为3。再因为保留4个位宽，而在2.1前补一个空格后输出3、可以使用0来代替空格进行填充（填充后需符合保留小数位数的要求，以及不能改变原数字大小）：如对于int类型数字100，使用格式操作符%4d，本来是在左边填充一个空格，如果改用格式操作符%04d的话，就会变成在左边填充一个0，这样执行printf(&quot;%04d&quot;,100);就会输出01004、可以使用-来实现左对齐如对于int类型数字100，使用格式操作符%-4d，就会在100右边填充一个空格后输出但如果使用格式操作符%-04d，并不会在右边填充一个0，因为这样会改变100原本的值，所以输出会是100和一个空格 综上，如果想对一个double类型的变量a，保留5位位宽，保留1位小数，用0填充空位，实现左对齐的话，可以写成：printf(&quot;%-05.1lf&quot;,a); 第七行：c=a+b;本句的执行过程是，先计算a+b的值，再赋值给c。本语句称之为赋值语句。赋值语句的等号左边必须是一个可以被赋值的对象。其中，对于+号，=号，我们均称之为运算符。常见运算符有：+,-,*,\，分别表示加减乘除=，表示赋值，先计算等式右边的值，再赋值给左边的对象%，表示取模，功能类似于取余数。如int a=100%7;最终c的值将等于100除以7的余数2+=，表示自加运算。如i+=2，表示i=i+2。其它的-=，*=，/=，%=同理++，表示自加1运算。如i++，表示i=i+1。三个或更多加号则不成立，只有两个+号的++可以表示自加运算。*特别的，++有前置和后置两种写法，如i++和++i，最终都会导致i=i+1。*当i++或++i单独存在时，它们并无区别。但当它们处于赋值语句中时，会引发差别。i++是先取得i的值，再自加；++i是先自加，再取得i的值。如，现在有int i=1,a;然后令a=i++，则先取得i的值1，赋值给a，然后i再自加，i变成2，所以执行完后a=1，i=2。相对的，如现在有int i=1,a;然后令a=++i，则i先自加，i变成2，再取得i的值2，赋值给a，所以执行完后a=,2，i=2。–与++同理。只有加减有这种写法，别的没有。 第二章到此结束。感谢PTW对本文的援助。 本章练习：P1001 A+B ProblemP1421 小玉买文具P1425 小鱼的游泳时间]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[C++语言-1-入门篇]]></title>
    <url>%2Fcpp%2Fcpp-1%2F</url>
    <content type="text"><![CDATA[本章用以给新手入门。首先，请大家先熟悉下面的，输出一串字符”helloworld”的代码。12345678#include&lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;”helloworld”&lt;&lt;endl; return 0;&#125;//这是一句注释 该代码编译运行后，显示的结果如下面这一行： helloworld现在开始逐行解释。1、#include&lt;iostream&gt;，这句的意思是程序中包含一个叫做iostream的头文件，格式是#include&lt;&gt;，头文件名称填在单书名号中。单书名号结尾不需要加分号。需要包含多个头文件时换行写即可。例：#include&lt;iostream&gt;#include&lt;cstdio&gt;也有用双引号的，如#include&quot;cstdio&quot;，虽然这样也可以，不过建议写单书名号。区别在于双引号的是查找自己编写的类库（头文件），而单书名号是查找编译环境自带的类库。常用头文件有：iostream，这个单词由in/out stream组成，是标准输入输出流。cstdio，这个单词由c++ standard in/out组成，是标准输入输出。cmath，这个单词由c++ math组成，是数学库。cstring，这个单词由c++ string组成，是与字符处理有关的头文件。string，这个单词本身就存在，翻译名为“字符串”，使用string类型时需要包含该头文件。algorithm，这个单词本身就存在，翻译名为“算法”，主要包含一些现成的函数。有时候也会见到如”stdio.h”的头文件，这是C语言的头文件，不用管。请大家按C++写法写头文件。2、using namespace std;这句话，称为“使用(using)命名空间(namespace)std”，其中namespace就是“姓名”和“空间”两个单词的组合，称为“命名空间”。而std是standard的缩写，表示“标准的”。这句话写在所有include之后，不可修改。这是硬性规定，不做赘述。句末要有分号。不论包含多少头文件，都只需写一次。3、int main()main()表示主函数，括号不可丢，句末无分号。前面的int表示main函数返回int类型。这句其实也是硬性规定。4、左大括号，与第8行的右大括号匹配，构成一个封闭区域，表示main函数的函数体。大括号是函数的界限，表示这一组大括号里面的所有内容都属于这个函数。括号是一一匹配的，不会重复匹配，且每个左大括号只会匹配到离自己最近的且未被匹配的右大括号。5、cout&lt;&lt;&quot;helloworld&quot;&lt;&lt;endl;输出一个句子并换行。表示输出的是”cout”，是c++ out的缩写。要使用cout，需要包含iostream头文件。这个“句子”的专业表述为“字符串”，因为每个句子实际上都是由一串字符构成的。输出时，在输出的内容中没有双引号。endl是end line的缩写，表示一个换行符。所谓的换行符，就是通常意义上的回车。在输出换行符后，字符串末尾将如同被按下一个回车，光标会来到下一行。*每输出一个变量都需要写两个单书名号，箭头指向cout。&ensp;如cout&lt;&lt;a&lt;&lt;b&lt;&lt;c;//按先后顺序输出三个变量a，b，c。*直接按此方法输出时三个变量会连在一起，如a=1，b=2，c=3时，输入为123，这时需要手动添加空格作为分隔符，代码更改为cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;&quot; &quot;&lt;&lt;c;输出变更为1 2 3。*cout支持两种换行符，endl和”\n”，如cout&lt;&lt;endl;或cout&lt;&lt;&quot;\n&quot;;都可以做到换行。*endl中是小写的L，而不是数字1。 既然cout是输出，相对的，就有输入。表示输出的是”cin”，是c++ in的缩写。要使用cin，需要包含iostream头文件。cin的用法，将在下一篇章中说明。6、return 0;表示正常结束程序。主函数的最后必须有这一句话，句末有分号，写在主函数中时不可改动。不论写在主函数的何处，只要程序执行时遇到这句话，都将使得程序正常结束。7、右大括号，与第4行的左大括号匹配，构成一个封闭区域，表示main函数的函数体。大括号是函数的界限，表示这一组大括号里面的所有内容都属于这个函数。括号是一一匹配的，不会重复匹配，且每个右大括号只会匹配到离自己最近的且未被匹配的左大括号。8、两个除号，//，表示注释，程序将会忽视在//之后的这一行的所有内容如果需要多行注释，可以选择/*内容*/的方式，程序将会忽略/*和*/之间的所有内容。示例：这里还没被忽略//这句会被忽略 这句也没被忽略 1234/*我们这几行全都被忽略了*/ 以上，就是对于本篇开头的代码段的完整解释。至此，可以总结出一个C++程序的基本框架。写程序时可以先打好该框架，然后再继续填充。框架如下：1234567#include&lt;iostream&gt;using namespace std;int main()&#123; return 0;&#125; 到此，第一章结束！感谢PTW对本文的援助。]]></content>
      <categories>
        <category>cpp</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fothers%2Fhello-world%2F</url>
    <content type="text"><![CDATA[这篇文章是Hexo自带的文章，有兴趣的各位可以浏览。Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>others</category>
      </categories>
  </entry>
</search>
