<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Welcome to No. 68 Floating Island]]></title>
    <url>%2Funcategorized%2Fmainpage%2F</url>
    <content type="text"><![CDATA[Are You Going To Scarborough Fair ?]]></content>
  </entry>
  <entry>
    <title><![CDATA[UI 框架-顶边栏]]></title>
    <url>%2Fproject%2Fui-framework-topnav%2F</url>
    <content type="text"><![CDATA[UI 框架的顶边栏部分 顶边栏显然顶边栏比较好做，且首页和文档页都需要它，那让我们先做好顶边栏 初始化首先，在 components 文件夹下，新建一个 vue 组件，就叫 Topnav.vue 吧，然后打板 12345678910111213&lt;template&gt; &lt;div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script lang=&quot;ts&quot;&gt;export default &#123; &#125;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt; &lt;/style&gt; 建议使用 scss 书写所有 css，下略 以后所有 vue 组件，无特殊说明的话，均沿用此初始化模板，下略 页面结构分析顶边栏的结构，显然，有以下成分 成分 位置 默认 小于 500px 首页跳转入口 左侧 可见 居中 文档页跳转入口 右侧 可见 不可见 展开菜单按键 左侧 不可见 可见 容易得到以下页面结构 12345678910111213&lt;template&gt; &lt;div class="topnav"&gt; &lt;router-link to="/"&gt; 首页 &lt;/router-link&gt; &lt;router-link to="/document"&gt; 文档页 &lt;/router-link&gt; &lt;button&gt; 菜单 &lt;/button&gt; &lt;/div&gt;&lt;/template&gt; 但是，未来有可能变更需求，在右侧出现不只一个文档页跳转入口，所以应该做一个列表，以备未来扩展 1234567891011121314151617&lt;template&gt; &lt;div class="topnav"&gt; &lt;router-link to="/" class="logo"&gt; 首页 &lt;/router-link&gt; &lt;ul class="menu"&gt; &lt;li&gt; &lt;router-link to="/document"&gt; 文档页 &lt;/router-link&gt; &lt;/li&gt; &lt;/ul&gt; &lt;button @click="toggleMenu"&gt; 菜单 &lt;/button&gt; &lt;/div&gt;&lt;/template&gt; 然后编写我们的 script 部分 先分析需要的控制元素 显然，顶边栏中的弹出菜单按键，可以在引入它的组件中，被设置是否可见，那么应当有一个 Boolean 类型的变量来控制可见 且需要提供一个方法，控制菜单本体是否可见 但是，现在又犯难了——菜单本体是属于文档页的，而不是属于顶边栏的。如何跨组件控制呢？ 回顾需求分析可得，通过弹出菜单按键，以及视口宽度，共同控制菜单是否可见 其中，视口宽度显然是一个全局属性，那么理应在 App.vue 中控制 于是我们在 App.vue 中定义其是否可见，并通过 provide/inject API 暴露给子组件 12345678910111213141516171819// App.vue scriptimport &#123; provide, ref &#125; from "vue";export default &#123; name: "App", setup() &#123; const width = ref(document.documentElement.clientWidth); const menuVisible = ref(width.value &gt; 500 ? true : false); window.onresize = () =&gt; &#123; width.value = document.documentElement.clientWidth; if (width.value &gt; 500) &#123; menuVisible.value = true; &#125; else &#123; menuVisible.value = false; &#125; &#125;; provide("menuVisible", menuVisible); &#125;,&#125;; 初始化时根据视口宽度决定顶边栏的弹出菜单按键是否可见，并监听视口大小变化，根据视口宽度自动更新控制变量 然后编写 Topnav.vue 12345678910111213141516171819// Topnav.vue scriptimport &#123; inject, Ref &#125; from "vue";export default &#123; props: &#123; toggleMenuButtonVisible: &#123; type: Boolean, default: false, &#125;, &#125;, setup() &#123; const menuVisible = inject&lt;Ref&lt;boolean&gt;&gt;("menuVisible"); const toggleMenu = () =&gt; &#123; menuVisible.value = !menuVisible.value; &#125;; return &#123; toggleMenu, &#125;; &#125;,&#125;; 注意，此处的 inject 需要注明变量的类型。因为 menuVisible 声明的时候是 ref(true|false)，所以其类型为 Ref&lt;boolean&gt; 将暴露出的变量引回模板 1234567891011121314151617&lt;template&gt; &lt;div class="topnav"&gt; &lt;router-link to="/" class="logo"&gt; 首页 &lt;/router-link&gt; &lt;ul class="menu"&gt; &lt;li&gt; &lt;router-link to="/document"&gt; 文档页 &lt;/router-link&gt; &lt;/li&gt; &lt;/ul&gt; &lt;button v-if="toggleMenuButtonVisible" class="toggleAside" @click="toggleMenu"&gt; 菜单 &lt;/button&gt; &lt;/div&gt;&lt;/template&gt; 然后补全样式表 此处为了美观，选用线性渐变来做到下边一条分割线的效果 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253$color: #fe9acf;.topnav &#123; color: $color; display: flex; background: linear-gradient( 180deg, rgba(255, 255, 255, 1) 0%, rgba(255, 255, 255, 1) 97%, #ffb5dc 97%, #ffb5dc 100% ); padding: 0 32px; position: absolute; top: 0; left: 0; width: 100%; z-index: 20; justify-content: center; align-items: center; &gt; .logo &#123; max-width: 6em; margin-right: auto; &#125; &gt; .menu &#123; display: flex; white-space: nowrap; flex-wrap: nowrap; &gt; li &#123; margin: 0 1em; &#125; &#125; &gt; .toggleAside &#123; width: 32px; height: 32px; position: absolute; left: 16px; top: 50%; transform: translateY(-50%); display: none; cursor: pointer; &#125; @media (max-width: 500px) &#123; &gt; .menu &#123; display: none; &#125; &gt; .logo &#123; margin: 0 auto; &#125; &gt; .toggleAside &#123; display: inline-block; &#125; &#125;&#125; 引入 App.vue 看看效果 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;template&gt; &lt;div class=&quot;app&quot;&gt; &lt;Topnav /&gt; &lt;router-view /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script lang=&quot;ts&quot;&gt;import &#123; provide, ref &#125; from &quot;vue&quot;;import Topnav from &quot;./components/Topnav.vue&quot;;export default &#123; name: &quot;App&quot;, components: &#123; Topnav, &#125;, setup() &#123; const width = ref(document.documentElement.clientWidth); const menuVisible = ref(width.value &gt; 500 ? true : false); window.onresize = () =&gt; &#123; width.value = document.documentElement.clientWidth; if (width.value &gt; 500) &#123; menuVisible.value = true; &#125; else &#123; menuVisible.value = false; &#125; &#125;; provide(&quot;menuVisible&quot;, menuVisible); &#125;,&#125;;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;$max-width: 1200px;.app &#123; max-width: $max-width; margin-left: calc(50vw - 600px); position: relative; @media (max-width: $max-width) &#123; margin-left: 0; &#125;&#125;&lt;/style&gt; 效果图 感谢阅读]]></content>
      <categories>
        <category>project</category>
      </categories>
      <tags>
        <tag>ui-framework</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[UI 框架-起步]]></title>
    <url>%2Fproject%2Fui-framework-start%2F</url>
    <content type="text"><![CDATA[先宣传一下我自己的 UI 框架 Laby UI - 一个基于Vue3的UI框架 既然是一个 UI 框架，总要有展示的地方吧 让我们先搭一个官网 设计选型从零自己想一个官网也太难了，还是参考一下别人的官方文档设计 本 UI 框架参考了 element UI 的设计风格 大致提供了如下页面 顶边栏 首页 文档页 侧边栏 内容区域 然后选择一个自己的风格，既然 element 选择了蓝色风格，我就选择粉色的风格吧 绝对不是什么个人恶趣味，而是来自 艾尔之光 - 娜薇，2333 需求分析 位置 特性 布局 两侧留白，内容在中间最大宽度 1200px，小于 1200px 时，宽度 100%小于 500px 时，变为手机版 顶边栏 左侧是通往首页的跳转链接，右侧是通往文档页的跳转链接视口小于 500px 时，只显示前往首页的跳转 首页 分为两部分，视觉效果部分和特点介绍部分 首页-视觉 粉色极光背景，中间放置两个跳转链接，一个前往 github 查看代码，另一个前往文档页 首页-特点 包含3个特点，分别是1. 使用了 vue3 新特性2. 使用 ts3. 代码易读 文档页 文档页实际由顶边栏和本体构成，本体包含侧边栏和内容区域 顶边栏-文档页 小于 500px 时，在左侧额外显示弹出侧边栏的按键，并使得侧边栏不可见 侧边栏 默认可见，选中高亮，但视口宽度小于 500px 时，默认不可见包含两个部分：指南和组件，各自有子级跳转 内容区域 根据侧边栏中选中的链接，显示 md 内容或组件范例内容 搭建官网可以通过 vite 新建一个 vue3 项目 此处将项目命名为 laby-ui 运行以下命令即可创建 123mkdir laby-uicd laby-uicva . 然后运行以下命令，进行初始化，并启动应用 12npm installnpm run dev 现在，就可以在 http://localhost:3000/ 预览项目了 然后照抄淘宝移动端的 meta，以便更好适配移动端 12&lt;meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no,viewport-fit=cover"&gt; 然后，因为我们是 ts 项目，所以把 main.js 改为 main.ts 这时候，ts 可能无法识别 vue 后缀文件，加一个 shims 就好了 123456// shims.d.tsdeclare module '*.vue' &#123; import &#123; ComponentOptions &#125; from 'vue' const componentOptions: ComponentOptions export default componentOptions&#125; 当静态报错为”无法识别 vue 后缀的文件”时，打开该 ts，再返回原代码，即可解决红线报错 整体布局设计根据需求分析，我们得到如下推论 首先，最大宽度等限制，是作用于整个 app 上的，所以这方面的样式应该写在 app.vue 上 其次，首页和文档页的顶边栏，其功能分别为 位置 功能 首页 不可以弹出菜单 文档页 根据情况显示或隐藏菜单 可见并不完全相同，也就是说不是同一个组件的复用，所以应该将顶边栏组件分别嵌入首页和文档页组件，而不是嵌入 app.vue 然后，首页显然没有侧边栏，所以首页的内容直接写在其模板内即可，而文档页需要侧边栏和内容区域 但是文档页的侧边栏，实际上与弹出的顶部菜单是相同的内容，所以只需要编写一次，然后复用为侧边栏和顶部菜单即可 除此之外，文档页的内容区域，还要分别展示 markdown 内容和组件内容，所以内容区域要分成两种进行编写 综上，首页大致为上下结构，恒定不变；文档页大致为T字结构，小于 1200px 时为上下结构，附有弹出菜单的选项。图示可以参考 Laby UI 让我们先完成 App 整体的控制 先引入总控制的样式表 index.scss，记得删除旧的 index.css 123456789101112131415161718192021222324252627282930313233343536373839404142* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125;ul,ol &#123; list-style: none;&#125;a &#123; text-decoration: none; color: inherit; &amp;:hover &#123; text-decoration: underline; cursor: pointer; &#125;&#125;h1,h2,h3,h4,h5,h6 &#123; font-weight: normal;&#125;body &#123; font-size: 16px; line-height: 1.5; color: #1d2c40; font-family: -apple-system, "Noto Sans", "Helvetica Neue", Helvetica, "Nimbus Sans L", Arial, "Liberation Sans", "PingFang SC", "Hiragino Sans GB", "Noto Sans CJK SC", "Source Han Sans SC", "Source Han Sans CN", "Microsoft YaHei", "Wenquanyi Micro Hei", "WenQuanYi Zen Hei", "ST Heiti", SimHei, "WenQuanYi Zen Hei Sharp", sans-serif;&#125;.icon &#123; width: 1em; height: 1em; vertical-align: -0.15em; fill: currentColor; overflow: hidden;&#125; 然后修改 main.ts 中的引入 1import './index.scss' 最后完成 App.vue 的内容 12345678910111213141516171819202122&lt;template&gt; &lt;div class=&quot;app&quot;&gt; &lt;router-view /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script lang=&quot;ts&quot;&gt;export default &#123; name: &quot;App&quot;,&#125;;&lt;/script&gt;&lt;style lang=&quot;scss&quot; scoped&gt;$max-width: 1200px;.app &#123; max-width: $max-width; margin-left: calc(50vw - 600px); position: relative; @media (max-width: $max-width) &#123; margin-left: 0; &#125;&#125;&lt;/style&gt; 通过 background-color 检查一下宽度，ok 注意使用 scss 需要安装 sass 依赖 1npm install -D sass 千万不要丢了 -D，否则就不是安装到开发环境了 路由设计既然有多个页面，那肯定就要通过路由进行跳转 路由显然是使用 vue-router，首先安装它 要注意，默认安装的 vue-router 是 3.x.x 版本的，只能用于 vue2 要想用于 vue3，必须是 4.x.x 版本 通过 npm info vue-router 可以看到最新版（next 版本）是 4.0.4（如有变化，下载最新版即可），则我们通过 1npm install vue-router@4.0.4 安装适合 vue3 的 vue-router 然后设计路由，这个因人而异，这里给出我的路由设计如下 目标 路由 首页 / 文档页 /document 文档页 - 介绍 /document/introduction 文档页 - 安装 /document/install 文档页 - 快速上手 /document/start 文档页 - [组件名] /document/[componentName] 至于 router.ts 的内容，因为现在暂无视图，所以我们先搁置，写一个空的引入就好 12345678910// src/router.tsimport &#123; createWebHistory, createRouter &#125; from 'vue-router'const history = createWebHistory()const router = createRouter(&#123; history, routes: [ ]&#125;)export default router 然后在 main.ts 中引入 1234567// main.tsimport &#123; createApp &#125; from 'vue'import App from './App.vue'import './index.scss'import router from './router'createApp(App).use(router).mount('#app') 其余部分篇幅所限，其余部分分开写了，请按顺序查看以下文章 UI 框架-顶边栏 UI 框架-首页和文档页 UI 框架-Button 组件 UI 框架-Switch 组件 UI 框架-Dialog 组件 UI 框架-Tabs 组件 UI 框架-打包发布 UI 框架-完善官网 UI 框架-代码优化 UI 框架-完工部署 感谢阅读]]></content>
      <categories>
        <category>project</category>
      </categories>
      <tags>
        <tag>ui-framework</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SCSS 简述]]></title>
    <url>%2Ffrontend%2Fcss-scss%2F</url>
    <content type="text"><![CDATA[SCSS 是 CSS 的超集 基于笔者自己的使用体验 scss 完全兼容 css 语法，并在此上提供了一些新语法 $ 变量名 嵌套层级 mixin include $ 变量名在 scss 中，可以声明 $ 开头的变量名，作为常量在下文中使用 示例如下 1234$color: #ababab;#app&#123; background-color: $color;&#125; 这样就可以将 #app 的背景色设为 #ababab 嵌套层级在 scss 中，包含关系可以直接写在嵌套中，不需要像 css 一样全部写在根 设有如下 DOM 结构 12345678&lt;body&gt; &lt;div id="app"&gt; &lt;span class="title"&gt;标题&lt;/span&gt; &lt;div class="content"&gt; 内容 &lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 则如果要分别设置 标题 和 内容 部分的样式，并给 #app 设置 hover 样式，在原生 css 中，要这么写 123456789#app&gt;.title&#123; xxx&#125;#app&gt;.context&#123; yyy&#125;#app:hover&#123; zzz&#125; 而在 scss 中，只需要这么写 1234567891011#app&#123; &gt;.title&#123; xxx &#125; &gt;.content&#123; yyy &#125; &amp;:hover&#123; zzz &#125;&#125; 对于子元素选择器，可以直接嵌套书写 对于伪元素、伪类，需要使用 &amp; 来作为当前层级的标识符 在上文中的 &amp;:hover 等效于 #app:hover mixin当有一套固定的模式 css 要适用于多种不同属性时，可以使用 @mixin 语法 类似于 css 中的 function 设有如下 mixin 12345@mixin layout($color)&#123; &amp;:hover&#123; background-color:$color; &#125;&#125; 则表示声明了一个函数 layout，要求传入一个变量，在函数中设为 hover 状态下的背景色 声明之后，使用 include 进行混入 include设有上述 mixin，则可以按不同情况混入 比如要在 .title 和 .content，分别适配不同的背景色，则可以有如下写法 123456789101112#app&#123; &gt;.title&#123; $color: blue; @include layout($color); &#125; &gt;.content&#123; $color: yellow; @include layout($color); &#125; $color: red; @include layout($color);&#125; 等效于写作 123456789101112131415#app&#123; &gt;.title&#123; &amp;:hover&#123; background-color: blue; &#125; &#125; &gt;.content&#123; &amp;:hover&#123; background-color: yellow; &#125; &#125; &amp;:hover&#123; background-color: red; &#125;&#125; 可见，mixin 和 include 是搭配使用的，且使用效果为直接替换在原位 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue 3 新特性简述]]></title>
    <url>%2Ffrontend%2Fvue3-features%2F</url>
    <content type="text"><![CDATA[vue 都发布新版本 vue3 了，不跟上时代怎么可以 本文结合 ts，且根据笔者自己的使用体验 目录大致如下 构建 路由 构造选项 ref 钩子函数 标签属性 teleport 总结 参考文章 构建与 vue2 使用 webpack 不同，vue3 可以使用 vite 进行构建 Vite，一个基于浏览器原生 ES imports 的开发服务器。利用浏览器去解析 imports，在服务器端按需编译返回，完全跳过了打包这个概念，服务器随起随用。同时不仅有 Vue 文件支持，还搞定了热更新，而且热更新的速度不会随着模块增多而变慢。针对生产环境则可以把同一份代码用 rollup 打。虽然现在还比较粗糙，但这个方向我觉得是有潜力的，做得好可以彻底解决改一行代码等半天热更新的问题。 简单说就是，在生产环境使用模块，省略打包步骤，开发环境可以秒级启动 安装 vite，只需要执行以下命令 1npm i -g create-vite-app 安装成功后，可以通过两个命令来构建 123create-vite-app [projectName]// 或cva [projectName] 即可在当前目录下构建一个基于 vite 的 vue3 新项目 之后通过命令行 cd 进入该项目目录，执行 1npm install 初始化 node_modules 之后，再运行 1npm run dev 即可启动项目预览了，通常会启动在 3000 端口 但是，当在项目中使用 ts 时，ts 无法识别 vue 后缀的文件，这时候可以在项目的 src 目录下新建一个文件 shims.d.ts 来处理识别问题 123456// shims.d.tsdeclare module '*.vue' &#123; import &#123; ComponentOptions &#125; from 'vue' const componentOptions: ComponentOptions export default componentOptions&#125; 当静态报错为”无法识别 vue 后缀的文件”时，打开该 ts，再返回原代码，即可解决红线报错 路由先来看一个 vue2 的路由示例 1234567891011121314151617import Vue from 'vue'import Router from 'vue-router'import login from '@/components/others/login'Vue.use(Router)const router = new Router(&#123; mode: 'history', routes: [ &#123; path: '/login', name: 'login', component: login &#125;, ],&#125;)export default router 可见，vue2 中声明一个路由，是使用 new 操作符来新建一个 Router 对象，并向其构造函数中传入 options 来达成的 现在再给出一个 vue3 的路由示例 123456789101112import &#123; createWebHistory, createRouter &#125; from 'vue-router'import Home from './views/Home.vue'const history = createWebHistory()const router = createRouter(&#123; history, routes: [ &#123; path: '/', component: Home &#125;, ],&#125;)export default router 细节上，vue3 采用了 createRouter 函数来创建一个 Router 对象，对用户隐藏了内部细节，但仍然要求用户传入一个 options，且该 options 也主要包括 mode 和 routes 两个选项 同时，在 vue3 中，声明一个路由模式，由字符串改为了函数返回值，具体对应如下 vue2 写法 vue3 写法 mode 字段 history 字段 mode: ‘hash’ history: createWebHashHistory() mode: ‘history’ history: createWebHistory() mode: ‘memory’ history: createMemoryHistory() 整体上大同小异，使用时注意细节即可 构造选项一个 vue2 的 script 标签写法，大致有如下格式 1234567891011121314151617181920export default &#123; props:&#123; a:&#123; type: String, default: '233' &#125;, &#125;, data()&#123; return&#123; ...data &#125; &#125;, mounted()&#123; // ... // and other lifecycle &#125;, methods:&#123; xxx()&#123;&#125; &#125;&#125; 诸如此类 但是在 vue3 中，除 props 写法照旧之外，其余均可以通过 setup 方法进行处理 1234567891011export default &#123; props:&#123; // ... &#125;, setup()&#123; const a = ref('233') return &#123; a &#125; &#125;&#125; 在 setup 方法中，所有通过 return 暴露出的变量，都等效于 vue2 中 data 暴露的变量；所有通过 return 暴露出的函数，都等效于 vue2 中 methods 暴露的函数 而生命周期钩子，也可以直接写在 setup 中，如 mounted 1234567891011// vue2mounted()&#123; // some code&#125;// vue3setup()&#123; onMounted(()=&gt;&#123; // some code &#125;)&#125; 一种类似于 DOM 事件中 click -&gt; onClick 的转化，将 mounted 转化为了 onMounted，此时 onMounted 接受一个函数作为参数 除此之外，要在 setup 中使用传递到组件上的参数，在 vue2 中只需要使用 this.xxx 就可以访问到，而在 vue3 中必须要在 setup 的形参列表中声明后才可以使用 setup 接受两个参数，第一个是绑定参数 props，第二个是上下文 context 123456setup(props, context)&#123; const &#123;xxx&#125; = props return &#123; xxx &#125;&#125; 等效于 vue2 中的 12345678export default &#123; props:['xxx'], data()&#123; return &#123; xxx: this.xxx &#125; &#125;&#125; 那么，在 props 中未声明的绑定参数，都去哪了呢？ 在 vue2 中，可以通过 this.$attrs 来访问到其余的参数 而在 vue3 中，要通过 context.attrs 来访问 注意： 在父组件中绑定到子组件的事件，不会出现在 props 里 props不支持事件，支持其余属性，不在props里的都会到attrs里，但 props 要先声明 props里有多种类型，attrs只有字符串 如果不希望子组件继承父组件给出的参数，也可以显式指定不继承 123export default &#123; inheritAttrs: false&#125; 注意 inheritAttrs: false 选项不会影响 style 和 class 的绑定 综上，假如有一个需求是，父组件会向子组件中传入若干参数，而只希望绑定变量名为 xxx 以外的其余变量，那么可以有如下写法 123456setup(props, context)&#123; const &#123;xxx, ...rest&#125; = context.attrs return &#123; rest &#125;&#125; 然后在模板中，要绑定的地方，写入 v-bind=&quot;rest&quot; 即可绑定所有参数 ref细心的朋友应该已经注意到了，上面出现一个名为 ref 的用法，且用法形似一个函数 熟悉 ES6 的 proxy 的话，可以看出 ref 其实就是返回一个对传入数据的代理，这个代理拦截了 get 和 set 操作，并在 set 的时候通知视图更新 熟悉 react 的朋友，是不是感觉和 useState 很像？其实就是把 getter/setter 返回到同一个对象身上而已，2333 设在以下代码段中使用 ref 1const visible = ref([true,true]) 则有以下特点 可以使用 const 声明代理对象，反正是这个对象不能变，不是里面的代理内容不能变 在 script 标签中读取数组内容时，必须使用 visible.value 才能取得数组，直接访问 visible 取得的是代理对象 尽可能不要直接修改代理内容 在 template 标签（模板）中读取数组内容时，直接访问 visible 即可得到数组内容 当模板中引用的代理对象的 set 代理，发现代理内容被更新时，会自动通知视图进行更新 ref 代理自带 vue2 的 data 做不到的深度监听，比如修改数组项、或对象的字段 钩子函数vue3 新增了一个重要的钩子函数 watchEffect 当然，同时可以使用 vue2 的 watch 属性，不赘述了 watchEffect 的主要效果是，注册一个侦听，该侦听会在声明时立刻执行，并在之后所有生命周期函数被调用前，或 setup 函数被调用时执行 一般写法如下 12345678watchEffect(onInvalidate =&gt; &#123; // work onInvalidate(()=&gt;&#123; &#125;)&#125;,&#123; // options&#125;) watchEffect 接受两个参数，其中第一个参数必选，第二个参数可选 第一个参数是每次执行时的执行函数，该函数会提供一个入参，表示侦听执行失败时的善后函数，类似于 catch 语句块中的 finally。此处的入参 onInvalidate 也接受一个函数，表示善后时执行的内容 第二个参数表示 watchEffect 的配置，一般用于配置 watchEffect 执行的时机 例如以下代码 12345watchEffect(()=&gt;&#123; // work&#125;,&#123; flush: 'post'&#125;) options 中的字段 flush，默认值是 &#39;pre&#39;，表示在钩子函数执行之前就执行侦听，所以如果想在之后执行，就要手动设置为 &#39;post&#39; 注意，会在所有生命周期函数被调用后执行，意味着它有可能在 beforeCreate 生命周期之前，或 created 之前就被执行，所以请注意控制其执行时机 标签属性也许有人觉得，写一个 setup 函数，和 vue2 好像没有什么本质差别 但是，vue3 可以在 script 标签上另加一个新属性： setup 当写一个 script 标签的时候，可以写作如下形式 123&lt;script lang=&quot;ts&quot; setup&gt;xxx&lt;/script&gt; 此时 script 标签内部的所有内容，都被视为运行在 setup 函数中 那 setup 的两个参数怎么办呢？直接写在属性上就好 123&lt;script lang=&quot;ts&quot; setup=&quot;props,context&quot;&gt;xxx&lt;/script&gt; 这样就可以在 script 标签中正常使用 props 和 context 了 那原来在 setup 中的 return 导出怎么办呢？答案是可以直接 export 例如原来有如下 setup 1234setup()&#123; const data=ref(0); return &#123;data&#125;&#125; 现在可以直接写作如下模样 123456&lt;script lang=&quot;ts&quot; setup=&quot;props,context&quot;&gt;export default &#123; // 原有 vue 配置&#125;export const data = ref(0)&lt;/script&gt; 之后的使用与上例相同，直接在模板中引用即可 但是，虽然看起来很装逼，不过该写法尚未得到广泛支持，反正到2021年2月16日为止，我在我的编辑器里是用不了，2333 teleportvue3 还有一个重要的新组件： teleport 它用来将新建的渲染挂载到页面上的某个目标，而不是原定位置 考虑以下情况：我们需要制作一个弹窗功能，希望弹窗弹出后，其在 DOM 树的位置是 body 的直接子级 那么可以得到如下代码 123456789&lt;template&gt; &lt;template v-if=&quot;visible&quot;&gt; &lt;teleport to=&quot;body&quot;&gt; &lt;div class=&quot;dialog&quot;&gt; 对话框内容 &lt;/div&gt; &lt;/teleport&gt; &lt;/template&gt;&lt;/template&gt; 那么，上述模板在检测到 visible 变为 true 之后，要渲染内部的内容 内部第一层是 teleport，其 to 属性为 body，那么会将 teleport 内部的所有内容，挂载到 body 上，成为其最后一个子结点 发现了吧？其实 teleport 最重要的就是 to 属性，该属性接受一个 CSS 选择器，指定要挂载的位置 选择器重复怎么办？自己看看 JQuery 吧（ 总结vue3 还是搞出来一些很好玩的东西，有空多研究一下 而且和 ts 相性很好，又吸收了 react 的优点，未来超过 react 不是没有可能 但是！！！太新的特性，使用的时候要先检查一下有没有得到支持了，不要改完代码才发现没支持，又要改回去 这里我要点名表扬 git reset --hard [version]，存档合理的话，这简直是神技，2333 参考文章如何看待 Web 开发构建工具 Vite？ - 阿里巴巴淘系技术 响应式计算和侦听 - watchEffect 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React Hooks]]></title>
    <url>%2Ffrontend%2Freact-hooks%2F</url>
    <content type="text"><![CDATA[在函数组件里天天 use 来 use 去，我也想自己整点 什么是 React Hooks Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性 其实就是写类组件太麻烦了，函数组件有的功能又没有，所以就用 Hook 来实现所需的效果 平常见到的那些 useXXX 就是 Hook 为什么需要 Hook可以参看官方给出的 Hook 简介 - 动机 简单说就是，写函数组件就是要用 Hook 常用 Hooks一般有以下 Hook 是常用的 useState useEffect / useLayoutEffect useContext useReducer useMemo / useCallback useRef 注意事项在开始介绍 Hook 之前，需要先介绍一下注意事项 只在最顶层使用 Hookreact 要求在每次执行组件渲染的时候，都要执行相同的 Hook 序列，否则会认为代码出错 1234const [n, setN] = useState(0)if(n % 2 === 0)&#123; const [m, setM] = useState(0)&#125; 上述代码会触发 react 报错，因为每次执行时，有可能出现不一样的 Hook 序列 同样的，循环、嵌套函数也可能出现上述问题，请根据具体报错进行处理 只在 React 函数中调用 HookHook 在别的函数中，是不起作用的，因为它只为函数组件服务 所以，Hook 的使用场景必须是以下两个条件之一 在 react 函数组件中调用 Hook 在自定义 Hook 中调用其它 Hook 关于自定义 Hook，下文中会有描述，可以通过目录快进 useState类组件可以通过 this.state = {} 来声明私有变量，但是函数组件不行，所以就需要 useState，其作用实际上就是创建一个变量 通常使用如下形式创建 1const [n, setN] = useState(0) 上述例子创建了一个变量，赋初始值为 0，并取得其 getter/setter API useState 接受一个传入参数，表示要创建的变量的初始值，之后返回一个具有两个值的数组 第一个值是该变量的 getter，第二个则是对应的 setter 对于 getter，像普通变量一样使用即可，比如此时直接对 n 取值，就可以取到值 0 对于 setter，可以有两种调用方式 传入一个新值，此时会完全覆盖旧值 当且仅当新值与旧值地址不同时，会触发 render 传入一个函数，取函数的返回值作为新值 setter 会向这个函数传入一个参数，该参数的值是目标变量当前的最新值 当使用方式 1，直接传入一个新值时，需要注意以下两点 如果此时目标变量是一个对象且具有多个字段，则传入新对象时，不会同步旧有字段的值 例如，此时对象是 {n: 0, m:1}，通过 setter 设置新值为 {n: 1} 则之后 getter 只能取到 {n: 1}，字段 m 会丢失 不要修改旧有的值再传入 例如，此时对象是 {n: 0}，先直接通过 getter 执行 obj.n ++，再通过 setter 设置新值为 obj 则因为新值和旧值的地址相等，即使内部值变化了，react 也还是认为这个变量并没有发生变化，所以不会重新触发 render useEffectuseEffect 最大的作用就是监听 useEffect 要求传入两个参数，第一个参数是回调函数，第二个参数是一个数组，表示当数组中列出的对象变化后，执行回调函数 123456789// 当 n 变化后，输出 'n changed'useEffect(()=&gt;console.log('n changed'),[n])// 仅在函数组件初始化时，输出 'component start'// 通常用于模拟生命周期钩子函数 componentDidMountuseEffect(()=&gt;console.log('component start'),[])// 不论 state 中任意变量变化了，都输出 'something changed'useEffect(()=&gt;console.log('something changed')) 注意，此处所有的回调函数，都会在页面重绘后才执行 useEffect 还有一个功能类似的函数，名为 useLayoutEffect useLayoutEffect 会在 DOM diff 之后，页面重绘之前执行 但由于上述特点会浪费时间，阻碍用户看到新页面，所以一般不使用 useLayoutEffect，除非使用 useEffect 无法解决问题 useContext提供组件上下文，让变量可以穿透组件，从父组件到达子组件 需要配合 React.createContext 使用 一个使用例如下 1234567891011121314151617181920212223242526272829303132333435363738394041import React, &#123; useState, useContext &#125; from 'react';import './App.css';const themes = &#123; light: &#123; foreground: "#000000", background: "#eeeeee" &#125;, dark: &#123; foreground: "#ffffff", background: "#222222" &#125;&#125;;const ThemeContext = React.createContext(themes.light);function App() &#123; const [value, setValue] = useState(themes.dark); const change = () =&gt; &#123; setValue(themes.light) &#125;; return ( &lt;ThemeContext.Provider value=&#123;value&#125;&gt; &lt;ThemedButton /&gt; &lt;div&gt; &lt;button onClick=&#123;change&#125;&gt;change&lt;/button&gt; &lt;/div&gt; &lt;/ThemeContext.Provider&gt; );&#125;function ThemedButton(props) &#123; const theme = useContext(ThemeContext); return ( &lt;button style=&#123;&#123; background: theme.background, color: theme.foreground &#125;&#125;&gt; I am styled by theme context! &lt;/button&gt; );&#125;export default App; 先声明 themes 作为父子组件通用的内容 然后通过 React.createContext 创建上下文，此处返回的变量可以任意命名 之后，在父组件中，通过 useState 创建一个响应式变量，用来存放当前提供给子组件的主题，并在模板中，使用一对 ThemeContext.Provider 标签，包裹住可以使用上下文的其它内容 此处允许子组件 ThemedButton 以及父组件中的一个 button 元素使用上下文 注意，不论你的上下文变量叫什么名字，此处的包裹标签都必须是 .Provider 形式 此时就可以在子组件中，通过 useContext 获取上下文，该 Hook 要求传入上下文变量作为参数，并返回此时父组件提供的具体内容，之后就可以在子组件的模板中使用了 useContext / createContext 组合通常用来提供局部的全局变量 之所以是全局变量，是因为其可以在父子组件之间通用 之所以又称为局部，是因为我们通常不希望有太多的变量污染全局空间，容易产生冲突，难以维护，所以最好不要放在主入口中 注意，上下文的修改不是响应式的，例如直接通过赋值语句修改上例中的 value 的话，并不会触发视图更新，所以上例采用了 useState 提供的响应式更新的方法 useReducer是一种 useState 的替代方案，使用方法类似于 VUE 的 VUEX，都是一个存放数据的地方，加上预先声明的若干操作，之后通过 dispatch 提交操作 通常使用如下模样使用 1const [state, dispatch] = useReducer(reducer, initialArg, init); 要求传入三个参数，按顺序分别是对数据的一组操作、数据初始值、初始化方法，其中第三个参数是可选的 该 Hook 的两个返回值，按顺序分别是数据的 getter，以及向对应数据提交操作的 dispatch 函数 基本用法一个使用例如下 123456789101112131415161718192021222324252627282930import React, &#123; useReducer &#125; from 'react';import './App.css';const initialState = &#123; count: 0 &#125;;function reducer(state, action) &#123; switch (action.type) &#123; case 'increment': return &#123; count: state.count + 1 &#125;; case 'decrement': return &#123; count: state.count - 1 &#125;; default: throw new Error(); &#125;&#125;function App() &#123; const [state, dispatch] = useReducer(reducer, initialState); return ( &lt;&gt; Count: &#123;state.count&#125; &lt;div&gt; &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: 'decrement' &#125;)&#125;&gt;-&lt;/button&gt; &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: 'increment' &#125;)&#125;&gt;+&lt;/button&gt; &lt;/div&gt; &lt;/&gt; );&#125;export default App; 先声明要引入的初始值，一般命名为某种 state 然后以函数形式声明一组操作，该函数接受两个参数，按顺序分别是数据对象和 dispatch 提交上来的对象 按照约定，一般将操作类型放在 type 字段，将额外的操作数放在 payload 字段 在这组操作中，通过判断 action.type，来确定要执行的是哪种操作，然后返回一个新的对象，作为新的 state 需要注意的是，此处的返回值不会与旧的 state 自动合并，在使用中需要手动使用 spread 语法进行展开赋值 从上例的模板可以看出，对 state 的读操作，其写法与直接读源数据相同；对于 dispatch 函数，要求传入一个对象，该对象在操作函数中作为 action 出现 惰性初始化也可以采用函数式声明，进行惰性初始化，这么做可以将用于计算 state 的逻辑提取到 reducer 外部，也为将来对重置 state 的 action 做处理提供了便利 一个惰性初始化的例子如下 12345678910111213141516171819202122232425262728293031323334353637383940import React, &#123; useReducer &#125; from 'react';import './App.css';const initialCount = 0;function init(initialCount) &#123; return &#123; count: initialCount &#125;;&#125;function reducer(state, action) &#123; switch (action.type) &#123; case 'increment': return &#123; count: state.count + 1 &#125;; case 'decrement': return &#123; count: state.count - 1 &#125;; case 'reset': return init(action.payload); default: throw new Error(); &#125;&#125;function App() &#123; const [state, dispatch] = useReducer(reducer, initialCount, init); return ( &lt;&gt; Count: &#123;state.count&#125; &lt;div&gt; &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: 'reset', payload: initialCount &#125;)&#125;&gt; Reset &lt;/button&gt; &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: 'decrement' &#125;)&#125;&gt;-&lt;/button&gt; &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: 'increment' &#125;)&#125;&gt;+&lt;/button&gt; &lt;/div&gt; &lt;/&gt; );&#125;export default App; 显然，通过函数式初始化，可以对数据进行复杂的预处理，并且不会与 reducer 过耦合 但写法较为麻烦，实践中一般没什么必要，有需要的时候再重构吧 useMemo常见的 useMemo 格式如下 1const memoizedValue = useMemo(() =&gt; fn(a, b), [a, b]); 接受两个参数，返回一个缓存值 第一个参数是一个函数，该函数的传入参数为空，取该函数的返回值作为 useMemo 的返回值 第二个参数是一个监听数组，效果同 useState 可以通过该 Hook 回避多余的渲染 useCallback一般我们执行一个函数的时候，都需要传入参数，但是用 useMemo 第一个参数必须为空，所以就会变成这样 1const memoizedValue = useMemo(() =&gt; (a,b) =&gt; fn(a, b), [a, b]); 这是一个返回函数的函数，一看就很丑 所以有一个语法糖 useCallback，自带可选参数 格式如下 1const memoizedValue = useCallback((a,b) =&gt; fn(a, b), [a, b]); 就是这样，与上面提到的 useMemo 的例子完全等效 React.memo也可以通过 React.memo 函数，来缓存整个组件 其格式如下 1234567891011function MyComponent(props) &#123; /* 使用 props 渲染 */&#125;function areEqual(prevProps, nextProps) &#123; /* 如果把 nextProps 传入 render 方法的返回结果与 将 prevProps 传入 render 方法的返回结果一致则返回 true， 否则返回 false */&#125;export default React.memo(MyComponent, areEqual); 要求传入两个参数，返回缓存的组件 第一个参数是函数组件 第二个参数可选，是一个判断函数，通过该函数进行对于新旧 props 的判断，返回 true / false 分别表示认为 props 变化或没有变化 当传递给 MyComponent 的 props 没有发生变化时，组件不会重新渲染 useRef之前说过，react 的推荐思想之一就是对象不变性 但是这样的话，每次都要产生一个新对象，各种开销不得不考虑 于是就有了 useRef 这个 Hook，用来在组件中产生一个唯一的引用，使其在每次重新渲染的时候都保持同一个引用 一般格式如下 1const refContainer = useRef(initialValue); 传入一个初始值，该初始值可以是对象 之后返回一个唯一的引用，通过该对象的 current 字段，取得我们传入的数据 一个用例如下 12345678910111213function TextInputWithFocusButton() &#123; const inputEl = useRef(null); const onButtonClick = () =&gt; &#123; // `current` 指向已挂载到 DOM 上的文本输入元素 inputEl.current.focus(); &#125;; return ( &lt;&gt; &lt;input ref=&#123;inputEl&#125; type="text" /&gt; &lt;button onClick=&#123;onButtonClick&#125;&gt;Focus the input&lt;/button&gt; &lt;/&gt; );&#125; 通过创建一个初始值为空的引用，然后通过 ref 属性绑定到 DOM 元素上，之后该引用的 current 字段值就一直是该 DOM 元素 乍一看是不错，解决了重复产生多个对象的问题，但是又产生了另一个问题——当 ref 对象内容发生变化时，useRef 并不会通知你。变更 current 属性不会引发组件重新渲染 此时需要用户手动调用渲染函数，或采取如下的补救方法 补救方法我们知道 useState 返回的 setter 可以刷新页面，那么我们就可以利用这个 Hook 1234567891011121314function App() &#123; const count = useRef(0); const [_, fresh] = useState(null); const onButtonClick = () =&gt; &#123; count.current++; fresh(Math.random()); &#125;; return ( &lt;&gt; &#123;count.current&#125; &lt;button onClick=&#123;onButtonClick&#125;&gt;refresh&lt;/button&gt; &lt;/&gt; );&#125; 通过 useState 取得一个可以刷新页面的函数，之后每次在 count.current 更新时，传入保证不相同的随机数，就可以做到更新页面的效果了 子组件传递 ref但是 ref 不能通过 props 传递，怎么办呢 可以通过 React.forwardRef 来包装一个子组件，并向下传递 ref React.forwardRef 函数接受一个函数组件作为内部组件，并向该内部组件提供两个参数 第一个参数是正常的 props，第二个参数则是绑定在当前包装器组件上的 ref 一个用例如下 1234567891011121314151617function App() &#123; const inputEl = useRef(null); const onButtonClick = () =&gt; &#123; // `current` 指向已挂载到 DOM 上的文本输入元素 inputEl.current.focus(); &#125;; return ( &lt;&gt; &lt;MyInput ref=&#123;inputEl&#125; type="text" /&gt; &lt;button onClick=&#123;onButtonClick&#125;&gt;Focus the input&lt;/button&gt; &lt;/&gt; );&#125;const MyInput = React.forwardRef(function(props, ref)&#123; return &lt;input ref=&#123;ref&#125; &#123;...props&#125; /&gt;;&#125;); 不过类组件就没有这个问题，毕竟有 this 指针 useImperativeHandle格式如下 1useImperativeHandle(ref, createHandle, [deps]) 将 ref 设置为 createHandle 的值，在依赖项变更的时候重新计算 其实就是起到一个设置 ref 的效果 但是修改 ref 有什么用呢？答案就是没什么用（ 自定义 Hook这个就简单了，先给个例子吧 12345678910111213// useUpdate.jsimport &#123; useEffect, useState &#125; from 'react';const useUpdate = (fn, dep) =&gt; &#123; const [flag, setFlag] = useState(false); useEffect(() =&gt; &#123; if (flag) fn(); else setFlag(flag =&gt; true); &#125;, [fn, dep, flag]);&#125;;export default useUpdate; 通过 react 原生的 useState 和 useEffect，来做到监听、回调与刷新 自定义 Hook 要求是必须命名为 useXxx 格式 除了本例的 useUpdate，也可以自定义一些别的对某些数据的操作，只要直接向外暴露读写接口即可 如果想要加强功能的话，甚至其余的 CURD 也可以一起写好暴露出去，2333 过时的闭包英文说法为 stale closure 我们可以发现 react 的 useState 等功能，其实都是隐藏了真实目标，而向外暴露接口的形式，这就是一种闭包 但是大量使用闭包，也有显而易见的缺点，就是不利于内存的管理 所以 VUE 的作者尤雨溪认为这是一种”过时的闭包” 当然大家见仁见智吧，react 毕竟这么自由 但是！我去用 VUE 3.0 了，888888888888888 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React 函数组件]]></title>
    <url>%2Ffrontend%2Freact-function-component%2F</url>
    <content type="text"><![CDATA[没什么特殊情况的话，一般还是用函数组件 大部分内容其实是和类组件作出的对比 demo1234567891011121314151617import React, &#123; useState &#125; from 'react';import './App.css';const App = props =&gt; &#123; const [n, setN] = useState(0) const add = () =&gt; &#123; setN(n =&gt; n + 1) &#125; return ( &lt;div&gt; &#123;n&#125; &lt;button onClick=&#123;add&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; )&#125;export default App; 好了，一个函数式组件的基本形完成了，比类组件简短很多吧 基本概念props与类组件基本相同，react 会向组件提供 props 参数 只不过类组件是使用构造器来接收并初始化，函数组件是直接通过传入参数来取得 state对于私有变量，类组件的方案是在构造器中声明 而在函数组件中，要使用 useState 来模拟 state 的效果 useState 函数返回两个值，按顺序分别是目标变量的值和对于该变量的 setter 同时还接受一个传入参数，作为目标变量的初始值 可以通过解构赋值获得变量和 setter 123const [n, setN] = useState(0)// n: 取决于传入值，此处是 number// setN: React.Dispatch&lt;React.SetStateAction&lt;number&gt;&gt; 此处的 number 同上 setter对于从 useState 中取得的 setter，一般可以直接写一个值，例如 1setN(n + 1) 但是有复杂逻辑时，不免太过单薄，所以一般建议在 setter 中传入一个 function setter 会向这个函数抛出一个参数，这个参数是操作数当前的值 这个函数应当返回一个值，作为操作数的新值 返回值函数组件要求 return 一段 JSX 语段，起到类组件中 render 方法的效果 每当组件刷新时，都会再次执行函数组件中的语句 生命周期好，现在发现一个很重要的问题——函数组件没有生命周期钩子函数！ 但是 react 作者怎么可能没有想到这个呢？早就给你安排了模拟了 useEffect首先来了解一下 useEffect 函数，函数原型如下 1useEffect(fn[,target]) 第一个参数是监听的回调函数 第二个参数可不填，表示监听组件中的所有项目，或填入一个数组，数组中的每个元素都是监听的对象 一个用例如下 123useEffect(()=&gt;&#123; console.log('render run')&#125;, [n]) 则每当 n 变化时，都会输出 render run 模拟 constructor构造器不需要模拟，在函数组件中，return 前的代码都可以认为是构造器 模拟 componentDidMount根据上述定义，显然我们可以选择填入一个空数组，表示不需要监听任何变量 123useEffect(()=&gt;&#123; console.log('constructor')&#125;, []) 好了，现在只有函数组件初始化的时候会执行这段输出 模拟 componentWillUnmount上面说到 useEffect 的第一个参数应该是一个函数，我们可以通过返回值来控制组件消亡前的动作 123456useEffect(()=&gt;&#123; console.log('constructor') return ()=&gt;&#123; console.log('组件即将消亡') &#125;&#125;) 如上，return 一个函数即可，该函数将在组件即将消亡时被调用 模拟 componentDidUpdate在如下这个例子中 123useEffect(()=&gt;&#123; console.log('render run')&#125;, [n]) 我们发现它会在 n 变动时打印输出，但在初始化的时候也打印了输出 如果要求不太高的话，其实已经可以就这样满足了 但我们怎么可以这么容易满足呢？我就是要让它在初始化的时候不打印，在更新的时候才打印！ 那么容易想到使用一个控制变量来判断是不是第一次渲染 1234567891011let flag = falseuseEffect(() =&gt; &#123; if (flag) &#123; console.log('n changed') &#125; else &#123; console.log('first render') flag = true &#125;&#125;, [n]) 但是一运行，发现一直都只能打印 first render，怎么回事？？ 因为直接创建的变量并不会绑定到函数组件上，我们必须通过 useState 函数来创建才可以 那么可以得到如下改版 1234567891011const [flag, setFlag] = useState(false)useEffect(() =&gt; &#123; if (flag) &#123; console.log('n changed') &#125; else &#123; console.log('first render') setFlag(flag =&gt; true) &#125;&#125;, [n]) 现在可以正常实现我们的功能了，但是代码好丑 于是我们把这个代码段包装成一个函数 12345678910111213const useUpdate = dep =&gt; &#123; const [flag, setFlag] = useState(false) useEffect(() =&gt; &#123; if (flag) &#123; console.log('n changed') &#125; else &#123; console.log('first render') setFlag(flag =&gt; true) &#125; &#125;, [dep])&#125; 剥离与组件中变量的依赖，改为只依赖传入的参数 然后在函数组件中通过 useUpdate(n) 进行调用 注意，此处的函数名必须满足 \use.+\ 的格式，否则 react 会报错，认为这不是一个 react 组件或函数 但是还是不够灵活——我想传入我自己的处理函数，怎么办呢？ 那么我们往这个函数中传入自己的 function 12345678910111213const useUpdate = (fn, dep) =&gt; &#123; const [flag, setFlag] = useState(false) useEffect(() =&gt; &#123; if (flag) &#123; fn() &#125; else &#123; console.log('first render') setFlag(flag =&gt; true) &#125; &#125;, [dep])&#125; 在函数组件中通过 useUpdate(fn, n) 进行调用即可 现在就还挺好看了，用法也和原生 useEffect 挺像 现在把这段逻辑抽离到单独的文件中，然后引入它 12345678910111213// useUpdate.jsimport &#123; useEffect, useState &#125; from 'react';const useUpdate = (fn, dep) =&gt; &#123; const [flag, setFlag] = useState(false); useEffect(() =&gt; &#123; if (flag) fn(); else setFlag(flag =&gt; true); &#125;, [fn, dep, flag]);&#125;;export default useUpdate; 之后就可以在任意文件中引入它了 注意，此处一般建议将 fn 和 flag 都放入监听数组中，否则 react 担心 fn 和 flag 一旦变化，会导致执行结果脱离预期，所以会引发警告（虽然警告一般都不重要） 总结以上就是 react 函数组件的主要内容 结合类组件的内容，可以看出，react 在绝大多数地方都是推荐使用函数而不是直接赋值，并且大部分时候是通过组合各种功能来实现新功能，而不是依赖继承 如果用不习惯的话，vue 也不错，2333 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React 类组件]]></title>
    <url>%2Ffrontend%2Freact-class-component%2F</url>
    <content type="text"><![CDATA[复杂的类组件 那么还是用我们的 +1 功能作为 demo demo大家都知道 js 有个 class 关键字，其实就是基于原型链的语法糖 那么类组件的声明就很明显了 我们先写一个展示 n 的功能，后面再来填充 12345678910111213141516class App extends React.Component &#123; constructor(props) &#123; super(props) this.state = &#123; n: 0 &#125; &#125; render() &#123; return ( &lt;div&gt; &#123;this.state.n&#125; &lt;button onClick=&#123;() =&gt; alert(this.state.n)&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; ) &#125;&#125; 上述代码就是一个 react 类组件的基本写法 基本概念借助上述 demo，我们先来了解一下 react 类组件的基本概念 参数类组件主要有两种参数 props，来源于父级的传入 state，绑定在 this 上，而不是原型 props例如，在 index.js 中，对 App 传入参数 1&lt;App name="myReactApp" /&gt; 然后在构造函数中获得 props，并通过父类构造函数初始化 props，之后就可以在 App 中访问 this.props.name 来取得这个参数值 一般不建议在子组件中修改 props，因为给出 props 的值的一定是父组件，所以 props 是属于父组件的，应当只能由父组件来修改，便于代码维护 statestate 是当前 App 的私有变量，不在原型上 一般在构造函数中，通过 123this.state = &#123; ...&#125; 来赋予一个对象 要取值时，也是一样通过 this.state.xxx 来取值 渲染类组件通过 render 函数来进行渲染，return 一段 JSX 就行 生命周期类比于 vue 的生命周期，react 也有自己的生命周期 首先是最重要的函数，所有类组件都必须实现的，render 函数！ render 函数负责将组件渲染到页面上 其余常用生命周期钩子函数的对照表如下 react vue constructor created componentDidMount mounted componentDidUpdate updated componentWillUnmount beforeDestroy 不常用的也给出参考 react vue shouldComponentUpdate beforeUpdate UNSAFE_componentWillMount beforeMount UNSAFE_componentWillUpdate beforeUpdate 可以令 shouldComponentUpdate 函数返回 false 来阻止 render 的执行 更多请看 React.Component 生命周期 魔改现在修改 onClick，使其具有 +1 的功能 首先想到，写一个 add 方法，然后 +1 行不行 试试看 123456789101112131415161718192021222324import React from 'react';import './App.css';class App extends React.Component &#123; constructor(props) &#123; super(props) this.state = &#123; n: 0 &#125; &#125; add() &#123; this.state.n += 1 &#125; render() &#123; return ( &lt;div&gt; &#123;this.state.n&#125; &lt;button onClick=&#123;this.add&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; ) &#125;&#125;export default App; 运行一下，发现报错，说找不到 state 为什么呢？因为此处事件绑定的机制，实际上是这样的 假设我们令 onClick=fn，其中 fn 是一个函数 那么经过 webpack 转换后，实际上变成了 onclick = fn.call(window)，这时候 add 里的 this 指针就变成了指向全局的了！ 那怎么办？容易想到一开始就绑定一个 this 1&lt;button onClick=&#123;this.add.bind(this)&#125;&gt;+1&lt;/button&gt; 运行，发现页面没有变化 emmm，让我们加个输出看看 1234add() &#123; this.state.n += 1 console.log(this.state.n)&#125; 运行，发现输出是正常的，+1 正常执行了 那么应该就是要我们手动 render 一下 但是用前文说过的那种，也太麻烦了，有没有什么好办法呢 答案是有，react 内置了另一种通知页面更新的办法，那就是 setState 123add() &#123; this.setState(&#123; n: this.state.n + 1 &#125;)&#125; 这样就可以修改 state 中的内容，并且自动通知页面进行更新 现在得到了一个简陋的 +1 demo 12345678910111213141516171819202122232425import React from 'react';import './App.css';class App extends React.Component &#123; constructor(props) &#123; super(props) this.state = &#123; n: 0 &#125; &#125; add() &#123; this.state.n++ this.setState(this.state) &#125; render() &#123; return ( &lt;div&gt; &#123;this.state.n&#125; &lt;button onClick=&#123;this.add.bind(this)&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; ) &#125;&#125;export default App; 接下来一起优化它吧！ 优化this首先就是这个 onClick，用 bind 也太丑了，有没有好办法呢 刚才说到，实际绑定的 this 会变成全局的 this，所以我们才用 bind 指定了当前对象的 this 那么显然还有一种方法——不支持 this 的箭头函数！ 但是现在的 add 写法，是挂载到原型上的，不能写成 add: ()=&gt;{} 这个样子的箭头函数 所以要挂载到对象上，那么容易想到在构造函数中挂载 12345678910constructor(props) &#123; super(props) this.state = &#123; n: 0 &#125; this.add = () =&gt; &#123; this.state.n++ this.setState(this.state) &#125;&#125; 现在这样，在 button 中就可以不使用 bind 了 1&lt;button onClick=&#123;this.add&#125;&gt;+1&lt;/button&gt; 但是这样的话，构造函数未免太长了 于是 ECMA 说好，我再给你个糖，用等号吧 12345678910111213141516171819202122232425import React from 'react';import './App.css';class App extends React.Component &#123; constructor(props) &#123; super(props) this.state = &#123; n: 0 &#125; &#125; add = () =&gt; &#123; this.state.n++ this.setState(this.state) &#125; render() &#123; return ( &lt;div&gt; &#123;this.state.n&#125; &lt;button onClick=&#123;this.add&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; ) &#125;&#125;export default App; 该写法完全等价于将 add 在构造函数中声明，都是挂载到对象上的 现在就有了一个看起来很完美的 +1 demo！ 对象不变性但是只是看起来完美，实际上还不够完美 假如我们要后退到某一个历史呢？在这个例子中可以直接 -1，但是要是逻辑复杂了，显然不能直接得到历史结果 那么我们应该尽量使得每次 state 的变化都被保存，便于用户在后退操作中引用 容易想到这样的写法来保存 state 12345add = () =&gt; &#123; console.log(this.state) const n = this.state.n + 1 this.setState(&#123; n &#125;) &#125; 显然，我们用一个新的 state 取代了旧的 state，并且在发生变更前进行了存档 异步更新现在我们想要看看保存下来的新值是什么 123456add = () =&gt; &#123; console.log(this.state) const n = this.state.n + 1 this.setState(&#123; n &#125;) console.log(this.state) &#125; 发现两次输出竟然是一样的，都是输出了旧的 state！ 可是页面明显发生更新了啊，怎么回事 这是因为 setState 的更新是异步的，类似于 setTimeout 所幸，setState 可以接收第二个参数，作为其成功回调 12345add = () =&gt; &#123; console.log(this.state) const n = this.state.n + 1 this.setState(&#123; n &#125;, () =&gt; console.log(this.state))&#125; 现在，打印就正常了 追加更新+1 demo 不够用啊，复杂一点吧 +2让我们做一个 +2 功能 容易想到直接 +2 就行，但是我偏要执行两次 +1！ 1234add = () =&gt; &#123; this.setState(&#123; n: this.state.n + 1 &#125;) this.setState(&#123; n: this.state.n + 1 &#125;)&#125; 一运行，发现不行，实际上只加了 1！ 原因如上文中提到的异步，实际上两次取 this.state.n 都取到了相同的值，所以最后等效于 +1 不过 react 已经考虑到了这个问题——setState 可以接受一个函数作为参数！ setState 如果发现传入的是一个函数，那么会向该函数抛出两个参数，按顺序分别是 this.state 和 this.props 那么容易得到如下代码 1234add = () =&gt; &#123; this.setState(state =&gt; (&#123; n: state.n + 1 &#125;)) this.setState(state =&gt; (&#123; n: state.n + 1 &#125;))&#125; 现在就可以正常 +2 了 注意，此处不可以写作 1() =&gt; (&#123; n: this.state.n + 1&#125;) 因为 react 会缓冲更新，此时访问 this.state 并不能第一时间获取最新值 多参数state 只有一个参数也太惨了，我想多搞点，就多一个 m 吧 假设点击 button 会让 n+=1 且 m 不变 可以得到如下代码 123456789101112131415161718192021class App extends React.Component &#123; constructor(props) &#123; super(props) this.state = &#123; n: 0, m: 0 &#125; &#125; add = () =&gt; &#123; this.setState(state =&gt; (&#123; n: state.n + 1 &#125;)) &#125; render() &#123; return ( &lt;div&gt; &lt;div&gt;n : &#123;this.state.n&#125;&lt;/div&gt; &lt;div&gt;m : &#123;this.state.m&#125;&lt;/div&gt; &lt;button onClick=&#123;this.add&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; ) &#125;&#125; 这样就实现了上述功能 但是感觉不对啊，setState 不应该是完全替换了 state 吗，可是新的 state 中并没有声明 m 啊，为什么 m 不会变成 undefined 呢 其实 react 在这里会自动比对新旧两个 state 的区别，然后只落实有提及部分，没提及的部分会保持原样 嵌套对象那我想更新一个嵌套对象，怎么办呢 假设现在 state 中有一个 obj 和一个 n，obj 中有 name 和 age，点击 button 会增加 age 的值 容易得到如下代码 12345678910111213141516171819202122232425class App extends React.Component &#123; constructor(props) &#123; super(props) this.state = &#123; n: 0, obj: &#123; name: 'ringoer', age: 18 &#125; &#125; &#125; add = () =&gt; &#123; this.setState(state =&gt; (&#123; obj: &#123; age: state.obj.age + 1 &#125; &#125;)) &#125; render() &#123; return ( &lt;div&gt; &lt;div&gt;n : &#123;this.state.n&#125;&lt;/div&gt; &lt;div&gt;obj.name : &#123;this.state.obj.name&#125;&lt;/div&gt; &lt;div&gt;obj.age : &#123;this.state.obj.age&#125;&lt;/div&gt; &lt;button onClick=&#123;this.add&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; ) &#125;&#125; 点击 button 后，发现 name 字段丢失了！ 为什么呢？明明 n 字段没有丢失，不是说好 react 会自动对比，保留旧的吗 其实这里的自动保留，只是一个浅拷贝，只能作用于第一层，不能向下深入 这时候一般我们要使用 spread 语法手动展开对象 12345678add = () =&gt; &#123; this.setState(state =&gt; (&#123; obj: &#123; ...state.obj, age: state.obj.age + 1 &#125; &#125;))&#125; 这样，在 age 变动的时候就不会导致 name 被置空了 忽悠渲染器不行，渲染器这么智能，我就想让它不智能一把 我如果在 add 的时候，先 +1 再 -1 呢？渲染器这么聪明，应该知道不用渲染吧 1234add = () =&gt; &#123; this.setState(state =&gt; (&#123; n: state.n + 1 &#125;)) this.setState(state =&gt; (&#123; n: state.n - 1 &#125;))&#125; 答案是不行……渲染器虽然会合并渲染，只渲染一次，但还是发生了渲染 这时候一般有两种办法 可以通过生命周期中的 shouldComponentUpdate 函数，来判断前后 state 是否相等，若相等则不更新 但是太麻烦了，所以就有了懒人方案——改继承！ 改成 1class App extends React.PureComponent 即可实现自动判断的效果 PureComponent 会在 render 之前对比新 state 和旧 state 的每一个 key，以及新 props 和旧 props 的每一个 key 如果所有 key 的值全都一样，就不会 render 如果有任何一个 key 的值不同，就会 render 但是只不过只一个浅对比，深层的话，还是要手写了2333 最终方案于是我们得到了 +1 demo 的最终解决方案 123456789101112131415161718192021222324import React from 'react';import './App.css';class App extends React.PureComponent &#123; constructor(props) &#123; super(props) this.state = &#123; n: 0 &#125; &#125; add = () =&gt; &#123; this.setState(state =&gt; (&#123; n: state.n + 1 &#125;)) &#125; render() &#123; return ( &lt;div&gt; &#123;this.state.n&#125; &lt;button onClick=&#123;this.add&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; ) &#125;&#125;export default App; 鼓掌！！ 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[React 起步]]></title>
    <url>%2Ffrontend%2Freact-start%2F</url>
    <content type="text"><![CDATA[耦合度爆炸（划掉）函数式编程思想的具现化——React 框架 安装有 CDN 引入 本地安装 脚手架构建 共三种方法 CDN 引入在 html 模板中引入至少三个 script 标签，示例如下 1234567&lt;!-- 加载 React。--&gt;&lt;!-- 注意: 部署时，将 "development.js" 替换为 "production.min.js"。--&gt;&lt;script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin&gt;&lt;/script&gt;&lt;script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin&gt;&lt;/script&gt;&lt;!-- 加载我们的 React 组件。--&gt;&lt;script src="like_button.js"&gt;&lt;/script&gt; 本地安装运行以下命令 1npm install -g react react-dom 即可安装必要的两个包 在使用时通过 12import React from 'react'import ReactDOM from 'react-dom' 即可引入 脚手架构建推荐使用该方法，但记得换源，不然就等着小时为单位的 installing 吧 换源命令如下 1npm config set registry https://registry.npm.taobao.org 可以通过以下命令检查是否换源成功 1npm config get registry 返回值是现在的源的路径 然后运行以下命令 1npm install -g create-react-app 然后移动到 react 项目目录下，运行 1create-react-app demo 即可创建一个 demo 文件夹，内含全套 react 项目 或是 1create-react-app . 即可在当前目录下初始化一个 react 项目 开始安装完成后，通过命令 1npm run start 即可启动 react app，不出意外的话会自动打开 localhost:3000 并显示 react 默认页面 自带的热更新效果有限，想查看最新效果，最好还是手动刷新一下 打开 src/index.js 就可以看到主入口代码 暂时不需要考虑太多，只需要知道 ReactDOM.render 函数负责渲染页面 React.StrictMode 标签是一个占位符，不会渲染到页面上，实际渲染的部分只有该占位符内部的部分 React.createElement 函数可以创建一个 react 元素 原则上模板必须是一个整体，不能是两个或多个并列的元素，但是可以使用 React.Fragment 标签做到整体的效果 但是写 React.Fragment 也太多字母了，所以 react 提供了缩写 &lt;&gt;，与上述等效 其对应的闭合标签是 &lt;/&gt; ReactDOM.render 的格式如下 1ReactDOM.render(template, target) 第一个参数填写要渲染的模板 第二个参数填写模板要挂载到页面上的哪个位置 React.createElement 的格式如下 1React.createElement(type, props, text) 第一个参数表示创建的类型，如 &#39;div&#39; 第二个参数表示该标签持有的属性，如 {className: &#39;container&#39;} 第三个参数表示该标签内部的文本 模板与 vue 的构造选项不同，react 采用独特的 JSX 语法来书写模板 在 index.js 中，我们可以看到，ReactDOM.render 函数实际渲染的部分是 &lt;App /&gt; 标签，该标签通过 1import App from './App'; 来引入 App 模块 那么我们打开 src/App.js，可以看到该 js 通过 1export default App; 向外暴露了一个名为 App 的 function，该 function 返回一段形似 HTML 的语段，这个语段所采用的语法就是 JSX JSX 语法要注意的地方有 3 个 总体上沿用 HTML 语法 需要使用 js 来表示的地方（如变量或函数），使用花括号 {} 来表示 与 vue 不同，vue 是使用双花括号 1&#123;&#123;&#125;&#125; 来表示 可以添加任意自定义参数，但要注意有的参数有细微变化 原参数名 class，现在变为 className 原参数名 onclick，现在变为 onClick，其余事件同理 一般有断句的部分，都要同 2 一样变成驼峰，用到的话请查一下文档 需要注意的是，js 中的 return 后如果留空，则实际等效于 return undefined，所以要用一对圆括号来占这一行的位置，然后折行写 JSX 魔改实现 +1现在魔改一下 App 中的 JSX，来做一个简单的 +1 功能 显然，+1 需要一个变量来承载值，一个 button 来触发事件 容易得到以下 JSX 1234567891011121314import './App.css';let n = 0;function App() &#123; return ( &lt;div&gt; &#123;n&#125; &lt;button onClick=&#123;n += 1&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; );&#125;export default App; 但是这时候发现，无论如何点击 button，n 都不会变化！ 这是因为 react 和 vue 不同，不会自动监听数据变化并刷新视图 如果想要刷新视图，需要手动调用 render 函数 那么容易得到以下变体 12345678910111213141516171819202122232425import &#123; render &#125; from 'react-dom';import './App.css';let n = 0;function add() &#123; n += 1; render(( &lt;div&gt; &#123;n&#125; &lt;button onClick=&#123;add&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; ), document.getElementById('root'))&#125;function App() &#123; return ( &lt;div&gt; &#123;n&#125; &lt;button onClick=&#123;add&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; );&#125;export default App; 现在点击页面上的 button，可以正常 +1 并重新渲染了，但是这也太丑了吧？！ 代码优化那么我们可以使用一个变量来保存我们的模板 容易得到以下变体 123456789101112131415161718192021import &#123; render &#125; from 'react-dom';import './App.css';let n = 0;let template = ( &lt;div&gt; &#123;n&#125; &lt;button onClick=&#123;add&#125;&gt;+1&lt;/button&gt; &lt;/div&gt;)function add() &#123; n += 1; render(template, document.getElementById('root'))&#125;function App() &#123; return template;&#125;export default App; 但是现在发现 +1 坏掉了！ 为什么？因为 template 在声明的时候，就已经是一个静态的常量了，计算好了 n 的值，之后不会重新取得 n 的值 那延后 n 的取值行不行？容易想到用函数来装载模板，但是 JSX 支持吗？ 答案是支持！render 函数的第一个参数可以是 一段 JSX 语段 一个返回 JSX 语段的函数，此时会自动执行函数取返回值 但是此时 render 第一个参数必须写成标签形式 那么箭头函数就可以满足我们的目标 123456789101112131415161718192021import &#123; render &#125; from 'react-dom';import './App.css';let n = 0;let template = () =&gt; ( &lt;div&gt; &#123;n&#125; &lt;button onClick=&#123;add&#125;&gt;+1&lt;/button&gt; &lt;/div&gt;)function add() &#123; n += 1; render(&lt;template /&gt;, document.getElementById('root'))&#125;function App() &#123; return template;&#125;export default App; 这时发现——为什么控制台报错，页面不显示了！ 答案是，我们向外暴露的是 App 函数，而 App 函数返回一个函数，在 index.js 中被调用时没有正常返回一段 JSX 于是我们把 JSX 移动到 App 中 1234567891011121314151617import &#123; render &#125; from 'react-dom';import './App.css';let n = 0;let App = () =&gt; ( &lt;div&gt; &#123;n&#125; &lt;button onClick=&#123;add&#125;&gt;+1&lt;/button&gt; &lt;/div&gt;)function add() &#123; n += 1; render(&lt;App /&gt;, document.getElementById('root'))&#125;export default App; 成功了！注意，此时 App 一般是用作标签写法，所以最好是大写开头 现在我们得到了 +1 的功能和一段好看的代码 于是又带来了另一个问题——看起来似乎 render 的时候更新的是整个 template，真的吗？ 部分重新渲染显然 n 是变化的，但是 button 的逻辑似乎没有变化，这样不会过度渲染吗？ 我们可以用开发者工具在页面上给 button 加一个 id，然后再点击一下试试，发现 button 还是带有 id！ 那么我们就可以得到一个结论—— react 知道哪些要改，哪些不用改，在重新渲染的时候只会更新有变化的部分 可是 react 是怎么知道的呢？这就涉及虚拟 DOM 和 DOM diff 算法了 大致就是，react 将页面上的真实 DOM 解析到内存中，建立了一棵内存中的 DOM 树，然后每次重新渲染的时候都会先在内存中比较（其实 vue 也是这么做的） 此处不展开讲，有兴趣的话可以搜搜本站的文章，不过我可能还没写 条件与循环条件现在我想自动检测 n 是奇数还是偶数，怎么办呢 容易想到在 App 中加入条件判断 1234567let App = () =&gt; ( &lt;div&gt; &#123;n&#125; &#123;n % 2 === 0 ? '偶数' : '奇数'&#125; &lt;button onClick=&#123;add&#125;&gt;+1&lt;/button&gt; &lt;/div&gt;) 这样就可以了 什么，你说想要 vue 那种，也可以吧 1234567891011121314151617181920212223242526import &#123; render &#125; from 'react-dom';import './App.css';let n = 0;let App = () =&gt; &#123; let fragment; if (n % 2 === 0) &#123; fragment = '偶数'; &#125; else &#123; fragment = '奇数'; &#125; return ( &lt;div&gt; &#123;n&#125; &#123;fragment&#125; &lt;button onClick=&#123;add&#125;&gt;+1&lt;/button&gt; &lt;/div&gt; )&#125;function add() &#123; n += 1; render(&lt;App /&gt;, document.getElementById('root'))&#125;export default App; 此时 App 兼有了更复杂的功能，一般称为函数组件 循环想展示一个数组，又该怎么办呢 假设有以下数组 12345const array = [ &#123;name: 'ringoer', age: 22&#125;, &#123;name: 'enatsu', age: 21&#125;, &#123;name: 'pecco', age: 20&#125;] 可以得到以下 JSX 12345678910111213141516171819import &#123; render &#125; from 'react-dom';import './App.css';const array = [ &#123; name: 'ringoer', age: 22 &#125;, &#123; name: 'enatsu', age: 21 &#125;, &#123; name: 'pecco', age: 20 &#125;]let App = () =&gt; ( &lt;div&gt; &lt;ul&gt; &#123;array.map((person, index) =&gt; &lt;li&gt;&#123;`第$&#123;index + 1&#125;位：name = $&#123;person.name&#125;, age = $&#123;person.age&#125;`&#125;&lt;/li&gt;)&#125; &lt;/ul&gt; &lt;/div&gt;)export default App; 注意，此时我们要循环得到多个 li 标签，所以要先用 {} 来进行 js 循环 然后在 return 的 li 标签中，又是新的 JSX 语法作用域，可以继续使用 {} 来取值 显示结果如下 123· 第1位：name = ringoer, age = 22· 第2位：name = enatsu, age = 21· 第3位：name = pecco, age = 20 展望上文中提到了函数组件，但并未详细说明 实际上，react 组件一般使用类组件和函数组件，其中又以函数组件为最方便且常用的写法 敬请期待吧 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue Vuex]]></title>
    <url>%2Ffrontend%2Fvue-vuex%2F</url>
    <content type="text"><![CDATA[我想让用户感受快一点，localstorage 又太 low 了，那数据缓存怎么做呢 依然还是祭出我们的 官方文档 和 myzone 项目代码 安装可以使用 npm 进行安装 1npm install vuex --save 在一个模块化的打包系统中，必须显式地通过 Vue.use() 来安装 Vuex 1234import Vue from 'vue'import Vuex from 'vuex'Vue.use(Vuex) 同 vue-router，在配置文件和 main.js 中均需要显式引入 基本流程首先要介绍一下 vuex 的基本原理（如图） vuex 有三个重要部分 actions，用来标识用户的动作，比较宏观，可能涉及多个数据 mutations，针对单个数据的变化规则 state，存放数据之地 并有 3 个动作 dispatch，分发外部事件到代码事件 commit，提交事务到 mutations mutate，落实数据变更 为什么不直接修改数据，而是要这样一层层控制呢？因为数据不是随便的人！！ 咳咳，不是，是数据不能随便改 如果人人都能随便改数据的话，那要是数据出了事情，比如虚空置 0，那谁来负责？ 所以要一层层处理，先分发任务，然后提交事务，再修改，中间配合日志系统，未来万一出错了才方便溯源 这也和 spring 什么的是一样的，为什么 controller 不能直接负责所有代码？因为业务复杂，数据要保证足够的安全性，所以先 dispatch 到 service 层，再 commit 到 dao 层，dao 层再去使用 mapper 层提供的接口来修改数据 配置那么给一个 vuex 配置的范例 12345678910111213141516171819202122import Vue from 'vue'import Vuex from 'vuex'Vue.use(Vuex)const store = new Vuex.Store(&#123; state: &#123; isLogin: false &#125;, mutations: &#123; setIsLogin (state, isLogin) &#123; state.isLogin = isLogin &#125; &#125;, actions: &#123; setIsLogin (context, isLogin) &#123; context.commit('setIsLogin', isLogin) &#125; &#125;&#125;)export default store 然后在 main.js 中引入 12345import store from './store/index'new Vue(&#123; store, ...&#125;) 在外部代码中，就可以使用 1this.$store.dispatch('setIsLogin', true) 在模板中不用写 this，不过相信大家都知道（ 上文实现了在用户登录成功之后，分发参数到指定 actions 方法，actions 再提交到 mutations 等等的流程 上述 dispatch 和 commit，调用式都符合如下模样 1[dispatch | commit]([methodName], ...args) 显式指定要触发的方法名称，然后传入一个展开的参数列表 之后的接收方法，都符合以下模样 1[methodName]([context | state], ...args) 第一个参数是固定的 如果触发的是 dispatch，那么第一个就是对 mutations 的操作，要对上下文 context 进行 commit 如果触发的是 commit，那么第一个就是数据本身，直接取其字段进行修改即可 最后，再给上述流程补上日志记录，ok，状态管理完成了！ 其它其它其实平时没什么用，也就一个热重载有用吧emmm 不过 myzone 没用到，请各位自行查看官方文档（ 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue 路由]]></title>
    <url>%2Ffrontend%2Fvue-router%2F</url>
    <content type="text"><![CDATA[总是需要分发路由的，不然难道让用户在同一个路径下反复横跳？ 本文将结合 官方文档 和 myzone 项目代码 进行介绍 但是只是立即上手的方法，并不包含一些高级技法或者底层实现，所以还是以项目代码为主（ 安装可以通过 npm 安装 vue-router 1npm install vue-router 如果在一个模块化工程中使用，需要显式引用 1234import Vue from 'vue'import VueRouter from 'vue-router'Vue.use(VueRouter) 不仅是 /router/index.js 这个配置文件要引用，main.js 也是要引用 配置路由规则首先要指明什么路由指向什么组件 myzone 中采用下例路由规则 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950import Vue from 'vue'import Router from 'vue-router'import login from '@/components/others/login'import verify from '@/components/others/verify'import index from '@/components/others/index'import userInfo from '@/components/others/userInfo'import message from '@/components/message/message'import messageView from '@/components/message/messageView'Vue.use(Router)export default new Router(&#123; mode: 'history', routes: [ &#123; path: '*/verify', name: 'verify', components: &#123; verify: verify &#125; &#125;, &#123; path: '/login', name: 'login', components: &#123; login: login &#125; &#125;, &#123; path: '/', name: 'index', component: index &#125;, &#123; path: '/user/info', name: 'userInfo', component: userInfo &#125;, &#123; path: '/message', name: 'message', component: message &#125;, &#123; path: '/message/:messageId', name: 'messageView', component: messageView &#125; ]&#125;) 对于每个项，通过 name 属性指出该路由规则的名称，通过 path 属性指明当是何种路径时触发该路由，并通过 component 属性指示路由标的是哪个组件 在本例中使用了通配符 * 表示匹配以 verify 结尾的任意路径，以及通配符 : 表示匹配任意数字 还可以使用嵌套路由以降低耦合度，不过 myzone 比较简单，所以没有这么做 写好路由规则后，配置一下 main.js，就可以使用了 12345import router from './router/index'new Vue(&#123; router, ...&#125;) 路由出口在 myzone 中，为 app.vue 这个页面主体，指定了如下 template 123456789101112131415&lt;template&gt; &lt;div id="app"&gt; &lt;router-view v-if="!this.$store.state.isLogin" name="login"/&gt; &lt;router-view v-if="!this.$store.state.isLogin" name="register"/&gt; &lt;router-view v-if="this.$route.path.endsWith('verify')" name="verify"/&gt; &lt;div v-if="this.$store.state.isLogin"&gt; &lt;sideBar id="sideBar" v-show="this.$store.state.isSideBar"&gt;&lt;/sideBar&gt; &lt;div class="mainBody"&gt; &lt;sideHeader class="sideHeader" v-if="this.$store.state.isLogin"&gt;&lt;/sideHeader&gt; &lt;router-view class="mainContent" v-if="this.$store.state.isLogin &amp;&amp; this.isRouterAlive" name="default"/&gt; &lt;sideFooter class="sideFooter" v-if="this.$store.state.isLogin"&gt;&lt;/sideFooter&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt; 实质上，主要使用 router-view 标签指示路由出口 显然，router-view 标签需要一个 name 参数来指示传递给该出口的是哪个路由 本例中通过 v-if 来控制用户登录与否时看到的页面情况 配置好路由出口后，还要配置路由的入口 路由入口在命名路由（具有 name 属性的路由）情况下，可以使用 router-link 标签实现路由跳转，其功能约等于 a 标签 如上例，要跳转到 /message/123 页面下的话，可以在模板中写入 1&lt;router-link :to="&#123; name: 'messageView', params: &#123; messageId: 123 &#125;&#125;"&gt;message&lt;/router-link&gt; 为该标签绑定 to 属性以实现路由目标的指定 也可以在模板代码中实现跳转 1$router.push(&#123; name: 'messageView', params: &#123; messageId: 123 &#125;&#125;) 或者手动写入路径 1$router.push('/message/123') 在非模板位置，记得写 this 模式一般有三种模式，各有特点 memory hash history memory 是基于 localstorage 的本地存储，换一台机器就无法同步正在浏览的页面 hash 是基于 # 符号进行的分片，所有内容都是在用户端进行的变化，不会传递给服务器，同时也不能进行前进和后退 history 可以没有 # 号，基于访问路径进行索引，是常见的模式，可以前进和后退，但是所有请求都会到达服务器（指 nginx 或 apache），请确保服务器已经正确配置 在 myzone 中采用了 history 模式 懒加载只需要改变 import 时的动作，其余什么都不需要改变 例如，要加载 /user/info 时，可以写成如下形式 1234567891011121314151617import Vue from 'vue'import Router from 'vue-router'Vue.use(Router)const userInfo = () =&gt; import('@/components/others/userInfo')export default new Router(&#123; mode: 'history', routes: [ &#123; path: '/user/info', name: 'userInfo', component: userInfo &#125; ]&#125;) 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue 模板指令]]></title>
    <url>%2Ffrontend%2Fvue-v-directives%2F</url>
    <content type="text"><![CDATA[Vue 设计了很多自创的 v- 指令，来了解一下吧 模板输出首先要知道，最基本的输出到模板的方法 假设 script 中的 vue 实例的 data 包含以下字段 12345data()&#123; return &#123; n: 0 &#125;&#125; 双大括号语法通过在 template 模板中使用双大括号语法可以将 data 中的值插入到模板，如 1&lt;span&gt;&#123;&#123;n&#125;&#125;&lt;/span&gt; 渲染后可以得到最终显示结果 0 当 n 变化时会自动重渲染到页面上（响应式） v-text效果与双大括号语法一样，用法上略有区别 如上例，在此处应改为如下模样 1&lt;span v-text="n"&gt;&lt;/span&gt; 注意此处 v-text 后的字符串表示一个 javascript 表达式，而不是单纯字符串 本语法与双大括号语法一样，都不会显示空值，即如果 n 是 undefined 或者 null，则渲染后不会有任何显示 v-html用于向模板中插入 html 字符串，例如 1&lt;div v-html="&lt;img src=xx.png /&gt;"&gt;&lt;/div&gt; 路径正确的话会显示对应的图片 v-pre被 v-pre 标记的元素会跳过编译，当有大量连续的没有指令的元素时，建议使用 v-pre 加快编译 示例 1&lt;div v-pre&gt;&#123;&#123;n&#125;&#125;&lt;/div&gt; 此时不会显示 n 的值，而是原封不动显示 1&#123;&#123;n&#125;&#125; 选择语句有时候希望用户看得见或看不见某些部分，比如 SPA 中切换页面 v-if可以使用 v-if 来控制元素是否编译 假设 data 中有 number 型数据 n 1&lt;div v-if="n===0"&gt;n is 0&lt;/div&gt; 当 n 为 0 时编译该 div 可以使用 else 或 else if 来控制多条件 123&lt;div v-if="n&gt;0"&gt;n is bigger than 0&lt;/div&gt;&lt;div v-else-if="n===0"&gt;n is 0&lt;/div&gt;&lt;div v-else&gt;n is smaller than 0&lt;/div&gt; 字面意思，不解释了 v-show仅控制当前元素满足条件时显示或不显示，无法实现上例中的复杂逻辑控制 1&lt;div v-show="n===0"&gt;n is 0&lt;/div&gt; 两者区别乍一看似乎差不多，但还是有区别的 v-if 控制的是编译过程，所以一旦 v-if 判断不通过，那么该元素不会出现在 DOM 树上 v-show 其实仅控制 CSS，所以 v-show 判断不通过时，元素仍然会出现在 DOM 树上，但是display: none 显然 v-if 具有更高的切换开销（重构 DOM 树），v-show 具有更高的初始开销（一开始就要渲染），所以选择用哪个，还是要看具体的业务需求 循环语句当使用 ul 之类列表的时候，经常要批量渲染一个数组之类 假设 data 中有如下数组 12345data()&#123; return &#123; fruits: ['apple','banana','orange'] &#125;&#125; 则可以使用 v-for 指令来循环渲染 1234567891011&lt;ul&gt; &lt;li v-for="item in fruits"&gt; &#123;&#123;item&#125;&#125; &lt;/li&gt;&lt;/ul&gt;&lt;!-- 或者如下写法 --&gt;&lt;ul&gt; &lt;li v-for="(item,index) in fruits" :key="index"&gt; &#123;&#123;item&#125;&#125; &lt;/li&gt;&lt;/ul&gt; v-for 提供两个参数，按顺序分别是数组中的 value 和 key 在模板中可以也使用 v-text 来取值 一般建议采用绑定 key 的写法，否则 vue 可能会报错 此处 key 必须是不重复的值，所以一般取索引作为 key 动态绑定v-bind一般需要从内存到页面绑定一组关系，此时可以使用 v-bind 指令 例如，要为一个 img 绑定一个图片路径，可以使用如下写法 设有如下 script 12345data()&#123; return &#123; src: 'xxx.png' &#125;&#125; 然后模板写法如下 1&lt;img v-bind:src="src" /&gt; 当 data 中的 src 变化时，页面上的图片也会变化 v-bind 指令可以缩写为仅一个冒号，示例如下 1&lt;img :src="src" /&gt; 注意，此时如果通过开发者工具修改 src，并不会同步到内存中的 src，因为 v-bind 只是单向绑定 v-on可以为 button 或者 a 标签绑定自定义事件 假设有如下 script 1234567891011data()&#123; return &#123; n: 0 &#125;&#125;,methods: &#123; add(x)&#123; if(x) n+=x else n++ &#125;&#125; 且此时模板如下 12&lt;p&gt;&#123;&#123;n&#125;&#125;&lt;/p&gt;&lt;button v-on:click="add"&gt;点我+1&lt;/button&gt; 则一开始 n 会显示 0，之后每次点击 button 都会调用 add 函数，可以写，也可以不写括号 如果要传参数，除形参列表外，还可以传递一个事件信息参数，命名为 $event 例如 1&lt;button v-on:click="add(2,$event)"&gt;点我+2&lt;/button&gt; v-on 可以缩写为 @ 例如 12&lt;p&gt;&#123;&#123;n&#125;&#125;&lt;/p&gt;&lt;button @click="add"&gt;点我+1&lt;/button&gt; 注意，当用在原生 DOM 事件上时，只能监听原生 DOM 事件 当用在自定义元素组件上时，也可以监听自定义事件 v-model只有 v-bind 单向绑定怎么够用？所以就有了 v-model 双向绑定 一般用于表单中的 input 元素，以同步页面上的变动和内存中的变动 例如设有模板如下 12345&lt;form&gt; &lt;input v-model="username" /&gt; &lt;input v-model="password" /&gt;&lt;/form&gt;&lt;p&gt;&#123;&#123;username&#125;&#125;&lt;/p&gt; 此时 data 如下 123456data()&#123; return &#123; username: ''. password: '' &#125;&#125; 当页面上的 username 变动时，内存中的也会随之变动，显式表现为 p 标签中内容会随着 input 中内容变动而变动 反之，内存变动也会同步显示到页面上 其中原理约等于 1&lt;input :value="username" @change="usernameChange" /&gt; 监听 change 事件，然后在 change 的时候修改 username 其余指令v-once被该指令标记的元素只会编译一次，当任意绑定发生更新时，均不会更新该元素 例如，假设有 n=0，且模板如下 1&lt;p v-once&gt;&#123;&#123;n&#125;&#125;&lt;/p&gt; 则第一次渲染时，会呈现 n 的值 0 之后不论 n 的值如何变化，此处都不会再次更新 v-slot用于 vue 插槽的指令，也许以后会专门写一篇讲插槽 使用形如 12345&lt;div class="container"&gt; &lt;header&gt; &lt;slot name="header"&gt;&lt;/slot&gt; &lt;/header&gt;&lt;/div&gt; 来声明一个名为 header 的具名插槽 并使用形如 12345&lt;base-layout&gt; &lt;template v-slot:header&gt; &lt;h1&gt;Here might be a page title&lt;/h1&gt; &lt;/template&gt;&lt;/base-layout&gt; 来声明一个出口为 header 的插槽内容 此时会渲染为 12345&lt;div class="container"&gt; &lt;header&gt; &lt;h1&gt;Here might be a page title&lt;/h1&gt; &lt;/header&gt;&lt;/div&gt; 若声明的是匿名插槽，则名称为 default 此时插槽模板中所有未使用 v-slot 指令的内容都会被作为 default 插槽内容 例如模板结构如下 1234567891011&lt;div class="container"&gt; &lt;header&gt; &lt;slot name="header"&gt;&lt;/slot&gt; &lt;/header&gt; &lt;main&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/main&gt; &lt;footer&gt; &lt;slot name="footer"&gt;&lt;/slot&gt; &lt;/footer&gt;&lt;/div&gt; 此时插槽内容声明如下 123456789101112&lt;base-layout&gt; &lt;template v-slot:header&gt; &lt;h1&gt;Here might be a page title&lt;/h1&gt; &lt;/template&gt; &lt;p&gt;A paragraph for the main content.&lt;/p&gt; &lt;p&gt;And another one.&lt;/p&gt; &lt;template v-slot:footer&gt; &lt;p&gt;Here's some contact info&lt;/p&gt; &lt;/template&gt;&lt;/base-layout&gt; 也可以具体声明为 default 插槽内容 1234567891011121314&lt;base-layout&gt; &lt;template v-slot:header&gt; &lt;h1&gt;Here might be a page title&lt;/h1&gt; &lt;/template&gt; &lt;template v-slot:default&gt; &lt;p&gt;A paragraph for the main content.&lt;/p&gt; &lt;p&gt;And another one.&lt;/p&gt; &lt;/template&gt; &lt;template v-slot:footer&gt; &lt;p&gt;Here's some contact info&lt;/p&gt; &lt;/template&gt;&lt;/base-layout&gt; 不论何种，都会渲染为 123456789101112&lt;div class="container"&gt; &lt;header&gt; &lt;h1&gt;Here might be a page title&lt;/h1&gt; &lt;/header&gt; &lt;main&gt; &lt;p&gt;A paragraph for the main content.&lt;/p&gt; &lt;p&gt;And another one.&lt;/p&gt; &lt;/main&gt; &lt;footer&gt; &lt;p&gt;Here's some contact info&lt;/p&gt; &lt;/footer&gt;&lt;/div&gt; v-cloak一个仅在编译期有效的标记，常与 CSS 属性选择器共同使用 例如同时有以下 CSS 和 模板 123[v-cloak]&#123; display: none;&#125; 123&lt;div v-cloak&gt; &#123;&#123; message &#125;&#125;&lt;/div&gt; 直到编译结束，该 div 都不会显示 修饰符一般只需要了解如下修饰符 修饰符示例 限用 功能 @click .stop=”myEvent” v-on 阻止事件冒泡 @click .prevent=”myEvent” v-on 阻止事件默认动作 @keypress.enter=”myEvent” v-on 当按下回车时执行 :money.sync=”myAttr” v-bind 组件之间的响应式更新 v-model.lazy=”myAttr” v-model 缓冲 input 的变化直到 input 失去焦点 v-model.number=”myAttr” v-model 自动转换输入为合法的数字 v-model.trim=”myAttr” v-model 自动去除输入的首尾空白 注意，修饰符可以连续施与，例如同时要取消一个事件的冒泡和默认动作，可以这么写 1&lt;button @click.stop.prevent="mySubmit"&gt;点我提交&lt;/button&gt; 其中仅 .sync 需要单独讲解 .sync在父子组件通信中，有时候需要在父子组件之间共享一个属性 但是 provide/inject 方法不能同步子组件的修改到父组件 v-model 又会造成父子组件对属性的修改没有区别，无法区分是谁做出的修改 此时就需要通过 .sync 修饰符来在父子组件之间共享属性 例如父组件中，现在有一子组件 text-document，希望在父子组件之间共享父组件的 title 属性 则模板如下 1&lt;text-document v-bind:title.sync="title"&gt;&lt;/text-document&gt; 此时子组件可以通过以下语句来显式触发事件 update:title 以修改 title 的值 1this.$emit('update:title', newTitle) // newTitle 为子组件中传出的新值 该事件必须有 update 前缀 而父组件修改不需要这么做，直接改就可以了 这样就可以区分开这个属性此时发生的修改究竟是父组件还是子组件所触发的 但 .sync 其实只是一个语法糖，其原理如下 1234&lt;text-document v-bind:title="title" v-on:update:title="title = $event"&gt;&lt;/text-document&gt; 然后在子组件传出变更的新值 1this.$emit('update:title', $event.target.value) 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue 响应式原理]]></title>
    <url>%2Ffrontend%2Fvue-reactivity%2F</url>
    <content type="text"><![CDATA[Vue 最重要的部分，就是响应式原理了 点我查看官方讲解 data众所周知，给 vue 实例设置数据一般是这么写的 1234567const vm = new Vue(&#123; data()&#123; return &#123; n: 0 &#125; &#125;&#125;) 现在改写一下上述代码 123456789let rawData = &#123; n: 0&#125;const vm = new Vue(&#123; data()&#123; return rawData &#125;&#125;)console.log(rawData) 有什么不同呢？在第一个例子中你不能观测到 vue 对 data 返回的对象做了些什么，因为这个对象是个匿名对象 现在你发现，打印出来的 rawData 变了！它不再是个单纯的 {n:0}，而是变成了 123456&#123;__ob__: _e&#125; n: (...) __ob__: _e &#123;value: &#123;…&#125;, dep: oe, vmCount: 1&#125; get n: ƒ () set n: ƒ (e) __proto__: Object 类似上述模样，n 不再是一个单纯的 0 —— 尽管你访问 rawData.n 的时候，还是可以取到 0 这是怎么回事呢？？ 原来 vue 在通过 data 取得实例数据之后，立即对实例数据进行了包装，将实例对象内的所有值都通过 Object.defineProperty 转化为了一组 getter/setter，然后拦截其 set 事件，获取更新消息，及时刷新视图 新增字段上面提到，当在视图中使用了 data 中的数据，且该数据已经设置了监听时，数据更新会触发视图更新 但是这个自动设置监听的事件，是发生在生命周期的 beforeCreate 到 created 阶段执行的，简称为初始化阶段完成了数据监听的设置 12345678910const vm = new Vue(&#123; el: '#app', template: `&lt;div&gt;&#123;&#123;a&#125;&#125;&#123;&#123;b&#125;&#125;&lt;/div&gt;`, data()&#123; return &#123; a: 'x' &#125; &#125;&#125;)vm.b = 'b' 如上代码，视图上只会显示字符串 x，字段 b 因为是后加入的字段，所以没有设置监听 那不是初始化阶段添加的数据，要怎么渲染呢 一般有两种办法 预先设置占位符 使用 vue 提供的设置方法 对于占位符法，非常简单，只需要先定义好 b 就行了 1234567891011const vm = new Vue(&#123; el: '#app', template: `&lt;div&gt;&#123;&#123;a&#125;&#125;&#123;&#123;b&#125;&#125;&lt;/div&gt;`, data()&#123; return &#123; a: 'x', b: '' &#125; &#125;&#125;)vm.b = 'b' 这样就会刷新视图 但是一般不知道未来会有多少字段，所以一般用 vue 提供的设置方法 Vue.set 定义如下 1234567Vue.set( target, propertyName/index, value )// 使用例Vue.set(vm, 'b', '233') // 令 vm.b = '233'// 也可以设置到子对象Vue.set(vm.obj, 'n', 0) // 令 vm.obj.n = 0 第一个参数是要设置的目标，第二个是字段名，第三个是字段值 上例中为 vm 这个实例设置字段 b，并将其值设置为字符串 233 通过这种方法添加的字段，自动带有监听器，更新时可以触发视图刷新 当 vue 实例是具名实例（如 vm）时，也可以使用 vm.$set 来设置字段，使用方法同 Vue.set，因为 vm.$set 就是 Vue.set 的一个别名 数组变异方法需要注意的是，虽然数组定义约等于对象定义，但是 Vue.set 或 vm.$set 不可以为数组内元素添加监听器 为了监听数组的变化，vue 提供了 7 个基于 Array 的变异方法 push pop shift unshift splice sort reverse 之所以称之为”变异方法”，是因为 vue 实际上是对原方法进行了代理，除了正常调用原方法外，还会额外将数组变化通知给 vue 示例，从而在通过以上 7 个方法操作数组的时候，视图也会更新 nextTick刚才虽然说，不通过 Vue.set 添加的属性，是没有监听器，不能渲染到页面上的 但是还是有特例 1234567891011const vm = new Vue(&#123; el: '#app', template: `&lt;div&gt;&#123;&#123;a&#125;&#125;&#123;&#123;b&#125;&#125;&lt;/div&gt;`, data()&#123; return &#123; a: 'x' &#125; &#125;&#125;)vm.a = 'a'vm.b = 'b' 本来 b 应该说是后加入且没有监听器的，所以 b 理论上不会出现在视图上 但实际情况是，字符串 a 和 b 都出现在了视图上，也就是说两句赋值都成功了 这是怎么回事呢 结合之前学习的 javascript 事件循环，原来 vue 会缓冲在一次操作中涉及的视图变化，在当前宏任务中不会渲染视图，而是在下一个事件循环开始前才渲染视图 所以此处发生的情况如下 改变了 vm.a，且 vm.a 有设置监听器，所以 vue 收到通知，将在下一个事件循环开始前渲染视图 当前事件循环还没结束，又对 vm.b 进行了赋值，所以现在 vm 上也有了数据字段 b 此时 b 上虽然没有监听器，但是监听器的作用就是触发视图渲染，而视图渲染已经被 a 触发了，所以 b 是躺赢2333 当然，此处是先改变 a，如果后改变 a，效果也是一样的，只要触发渲染，就会出现 b 当前事件循环结束，渲染视图，b 搭上了便车 所以，有时候会因为某些后添加的变量搭上了便车，而造成一种这个变量也设置了监听的错觉，会引发一些潜在的 bug 出于面试需要，了解这个搭便车就可以了，实际写码的时候建议使用 Vue.set 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue 构造选项]]></title>
    <url>%2Ffrontend%2Fvue-options%2F</url>
    <content type="text"><![CDATA[new Vue()传入的参数，都有哪些呢 可以查看 官方文档 获取详细解释 常用的有以下组分 数据 DOM 生命周期钩子 资源 组合 data el created / beforeCreate components mixins props template mounted / … directives extends computed updated / … provide / inject methods destroyed / … watch activated / deactivated 数据data写作一个对象或一个函数，指明所属的 vue 实例所具有的变量值 123456789data: &#123; n: 0&#125;或data()&#123; return &#123; n: 0 &#125;&#125; 不论是以上哪种，一旦设置，n 立刻就会被 getter/setter 所代理，且访问 vm.n 就可以访问到 data 中所设置的 n 其中，在 vue 组件的定义中，只接受函数形式 而且对象形式有如下 bug 假设有一个 vue 组件，其 data 写作对象形式 n: 0 在 app.vue 中，import 了上述组件，假设命名为 demo 当 app.vue 渲染了两个 demo 时，这两个组件使用的是同一个对 n 的引用 一旦其中一个 n 变化，另一个也会同步 综上，建议 data 恒使用函数形式 props用于向子组件传入参数 设有子组件有如下 props 123Vue.component('props-demo-simple', &#123; props: ['size', 'myMessage']&#125;) 则父组件在通过 html template 渲染子组件时，可以为该子组件传入 size 或 myMessage 属性，子组件可以像使用 data 一样直接使用 size 或 myMessage 可以为子组件的参数设置配置，参考配置如下 123456789101112131415Vue.component('props-demo-advanced', &#123; props: &#123; // 检测类型 height: Number, // 检测类型 + 其他验证 age: &#123; type: Number, default: 0, required: true, validator: function (value) &#123; return value &gt;= 0 &#125; &#125; &#125;&#125;) computed计算属性，用于快速求出一个值 假设当前 vue 实例有以下组分 1234567891011data()&#123; return &#123; n: 0, m: 2 &#125;&#125;,computed:&#123; mulNandM()&#123; return this.n*this.m &#125;&#125; 此时 mulNandM 尽管看起来像个方法，但是其结果会被缓存，并在其依赖的变量上设置监听 当该计算属性再次被访问时会直接返回对应结果，除非其监听的变量发生了变化 在计算属性外部，可以直接像访问成员变量一样访问计算属性 ！！！注意！！！ computed 等内容严重依赖 this 指针，所以尽量不要使用箭头函数，因为箭头函数没有自己的 this 指针 下同，只要依赖 this 指针的，都强烈建议不要使用箭头函数 methods顾名思义，就是 vue 实例的成员方法 上例中的计算属性也可以写作 methods 12345methods:&#123; mulNandM()&#123; return this.n*this.m &#125;&#125; 此时就必须加上括号，以方法形式调用，且不会缓存 一般用于执行复杂逻辑，简单的取值之类的建议使用计算属性 watch监视属性，用于监视当前实例上的 data 的变化 例如，某 vue 实例有以下组分 1234567891011data()&#123; return &#123; n: 0, m: 2 &#125;&#125;,watch:&#123; n(newval,oldval)&#123; console.log(`n changed from $&#123;oldval&#125; to $&#123;newval&#125;`) &#125;&#125; 则当 n 变化的时候就会打印调试语句 若要在初始化时就执行 watch 选项，可以使用 immediate 参数 1234567891011121314data()&#123; return &#123; n: 0, m: 2 &#125;&#125;,watch:&#123; n: &#123; handler: function(newval,oldval)&#123; console.log(`n changed from $&#123;oldval&#125; to $&#123;newval&#125;`) &#125;, immediate: true &#125;&#125; 若要监听对象字段，可以用字符串显式指定 12345678910111213data()&#123; return &#123; obj: &#123; n: 0 &#125;, m: 2 &#125;&#125;,watch:&#123; 'obj.n': function(newval,oldval)&#123; console.log(`obj.n changed from $&#123;oldval&#125; to $&#123;newval&#125;`) &#125;&#125; 直接监听对象的话，其中字段值的改变不会触发监听函数 123456789101112131415data()&#123; return &#123; obj: &#123; n: 0 &#125;, m: 2 &#125;&#125;,watch:&#123; obj: function(newval,oldval)&#123; console.log(`obj changed from $&#123;oldval&#125; to $&#123;newval&#125;`) &#125;&#125;vm.obj.n = 1 // 不会触发对 obj 的监听 因为对基本类型的 === 判断，是基于值的，而对象的判断是基于地址的 此时 obj 指向的地址没有改变，所以 vue 认为 obj 没有更新 如果要在修改其中字段时，也触发对 obj 的监听，可以使用 deep 参数 123456789101112131415161718data()&#123; return &#123; obj: &#123; n: 0 &#125;, m: 2 &#125;&#125;,watch:&#123; obj: &#123; handler: function(newval,oldval)&#123; console.log(`obj changed from $&#123;oldval&#125; to $&#123;newval&#125;`) &#125;, deep: true &#125;&#125;vm.obj.n = 1 // 会触发对 obj 的监听 更多用法请看官方文档 DOMel用于指示当前 vue 实例在页面上的挂载目标 通常 el 可以 接受一个字符串作为其值，该字符串是一个 CSS 选择器 接受一个 HTMLElement 实例作为其值 也可以不指定该参数，而是通过 export default 暴露给父组件，让父组件决定自己所在的位置 template提供一个字符串模板作为 Vue 实例的标识使用 模板将会替换挂载的元素，挂载元素的内容都将被忽略，除非模板的内容有分发插槽。 例如如下配置 12345template: `&lt;div&gt;233&lt;/div&gt;` 但是在 vue 组件中，一般不在 script 部分指定该参数，而是在 HTML template 部分直接写 HTML 模板 生命周期钩子官方文档提供了下图作为标准的生命周期图示 通过图片可以看出，所谓”钩子”，和 aop 编程中的”切点”概念相仿，都是指某个范围的切入口 此处即是两个过程交接之处，类似于绿皮火车相邻两节车厢之间是用钩子连接的 通过图示，可以发现 vue 实例挂载到页面是在 created 阶段后，beforeMount 阶段前完成的 此时判断 vue 实例有没有指示 el 选项 若有 el 选项，则直接挂载并继续编译 若无，则暂停当前实例的编译，直到显式挂载到页面上后才会继续编译 继续判断有没有 template 选项，此处将 template 选项和 HTML template 模板分别称为内部和外部 template 若有内部，则内部的优先级高，否则使用外部模板 若都没有，则报错 除此之外，update 的两个钩子也要注意，当且仅当发生了重新渲染的时候，也就是页面上内容要改变的时候，才会触发 update 相关的两个钩子 若仅修改数据而对页面没有影响，不会触发这两个钩子 资源components可以通过 components 选项引入子组件 示例如下 12345import sideBar from './components/common/sidebar'export default &#123; components: &#123; sideBar &#125; 此时可以在 template 中使用 1&lt;sideBar&gt;&lt;/sideBar&gt; 来引入子组件的 template 进行渲染 directives用于自定义当前实例可用的模板指令 例子如下 12345678directives: &#123; focus: &#123; // 指令的定义 inserted: function (el) &#123; el.focus() &#125; &#125;&#125; 定义一个 focus 指令，当插入到页面中执行对应的函数，之后可以在模板中使用 v-focus 1&lt;input v-focus&gt; 一般有 5 种钩子可选 bind，绑定到元素时调用 inserted，插入到元素时调用 update，所在组件的虚拟结点更新时调用，但可能在更新前被调用 componentUpdated，所在组件及其子组件全部更新后调用 unbind，解除绑定时调用 上述 5 种钩子，会被按顺序传入以下参数 el，绑定的元素 binding，该事件的具体数据 假设现在有 v-on:click=&quot;hello&quot;，其中 hello 是一个方法 name，指令名，不包括 v- 前缀 本例中 binding.name === on value，指令的绑定值 本例中 binding.value === hello 若绑定的内容是可以立即求值的，则绑定其值 如 v-on:click=&quot;1+1&quot;，value 就取值 2，而不是表达式 1+1 oldValue，指令绑定的前一个值，仅在发生更新时，即 update 或 componentUpdated 钩子中传入 expression，字符串形式的指令表达式 沿用 2 中的例子，分别取 hello 和 1+1 arg，传给指令的参数 本例中 binding.arg === &#39;click&#39; modifiers，一个包含修饰符的对象 例如在 v-my-directive.foo.bar 中，有 1234binding.modifiers === &#123; foo: true, bar: true&#125; vnode，所在的虚拟结点 oldVnode，上一个虚拟结点 仅在发生更新时，即 update 或 componentUpdated 钩子中传入 主要用于减少 DOM 操作 每个指令都可以绑定专有的钩子函数，详见 文档 组合mixins将待混入的对象混入到 vue 实例中，相同的属性会智能合并，即 对于 data，覆盖相同的，保留不同的 对于 methods 和生命周期钩子函数等，全部保留 1234567const mixin = &#123; created: function () &#123; console.log(1) &#125;&#125;const vm = new Vue(&#123; created: function () &#123; console.log(2) &#125;, mixins: [mixin]&#125;) 如上例，最终两个 created 阶段的 function 都会在 vm 实例的 created 阶段执行，输出 1和2 记得加方括号 extends与 mixins 类似，使得当前实例继承另一个实例的所有值 1234567const CompA = &#123; ... &#125;// 在没有调用 `Vue.extend` 时候继承 CompAconst CompB = &#123; extends: CompA, ...&#125; 如上例，CompA 的所有内容会在 CompB 内被展开 provide / inject由父组件提供（provide）一个对象或方法，并注入（inject）到子组件中 1234567891011121314151617181920export default &#123; provide () &#123; return &#123; reload: this.reload &#125; &#125;, data () &#123; return &#123; isRouterAlive: true &#125; &#125;, methods: &#123; reload () &#123; this.isRouterAlive = false this.$nextTick(function () &#123; this.isRouterAlive = true &#125;) &#125; &#125;&#125; 如上，父组件提供了一个 reload 方法实现局部刷新 然后在子组件中 123export default &#123; inject: ['reload']&#125; 就成功向子组件注入了 reload 方法，在子组件中也可以通过 this.reload() 来实现局部刷新了 注意，此处传递依然遵循 JS 传递规则，即 3 个基本类型传值，其余传引用 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue 起步]]></title>
    <url>%2Ffrontend%2Fvue-start%2F</url>
    <content type="text"><![CDATA[前端三大框架中相对最简单的 Vue 框架，该怎么上手呢 Vue 这么大名头，就不赘述什么了2333 直接上 官方文档 因为作者是中国人，所以中文文档很有参考价值，就直接贴中文文档了（ 快速创建 vue 项目点击官方文档首页上的 起步，可以来到介绍 通常有以下方法来创建一个 vue 项目 script 标签+cdn通过 1&lt;script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"&gt;&lt;/script&gt; 可以在 html 页面上引入 vue 内容，推荐小型项目使用 npm通过命令 1npm install vue 可以安装 vue 最新稳定版，推荐大型项目使用 vue 脚手架可以使用官方提供的 @vue/cli 快速构建 vue 项目 官方介绍如下 它为现代前端工作流提供了 batteries-included 的构建设置。只需要几分钟的时间就可以运行起来并带有热重载、保存时 lint 校验，以及生产环境可用的构建版本。 可以查阅 cli 对应的 官网 具体使用方法如下 安装1npm install -g @vue/cli-service-global 创建项目1vue create hello-world 此时 vue 会询问你，是否采用默认的配置，建议新手选”是” 选否的话，vue 会询问你具体的各个配置的选项，此时使用方向键的上下来选择选项，并通过空格选定 注意，此时按回车的话会直接决定这个询问的结果，进入下个询问 当然你后悔的话，ctrl+c 就可以了，2333 在询问完所有配置后，vue 会询问你是否保存上述配置为默认配置，这里一般也建议选否 命令行不习惯的话，也可以用图形化界面 1vue ui 通过上述命令可以打开一个浏览器窗口以显示图形化界面来操作 vue codesandbox.io什么？我一句命令行也不想打？可以！ 可以访问 codesandbox.io 来创建 vue 项目 注意，此时不要登录，登录会有创建数量限制，不登录则无限 打开页面后直接访问右上角的 create sandbox，在新弹出的菜单中选择 vue 即可创建一个 vue 项目 codesandbox 提供了在线的热更新，但因为是在线的，所以会略有延迟 为了解决这个延迟，codesandbox 也提供了下载到本地的方法： 找到代码编辑界面左上角的 file 选项 选择 export to zip ok！你下载了一个 zip，解压就可以得到你的 vue 项目了，方便快捷 其效果类似于用 idea 创建 spring boot 项目的时候的 spring assistant，什么都不用做就有一个 helloworld 了2333 （不过命令行还是要学，不亏 vue 不同版本有哪些版本在刚才的介绍中，完全没提及使用 vue 的哪个版本，其实各自有各自默认的版本 vue 有 2x2=4 种主要版本——完整版/非完整版+开发版/生产版 非完整版一般也称作仅运行版本（runtime only） 对应的文件名如下 完整版 非完整版 开发版 vue.js vue.runtime.js 生产版 vue.min.js vue.runtime.min.js 具体特点如下 完整版，有完整完全的功能 非完整版，没有编译模板的功能，只支持渲染函数，体积比完整版小 30% 开发版，包含警告等内容 生产版，不含有警告，且体积比开发版更小，旨在让用户下载最少的 js 完整版和非完整版的区别假设有如下 html 12345&lt;body&gt; &lt;div id="app"&gt; &lt;/div&gt;&lt;/body&gt; 现在意图在 app 中显示一个数字，并提供一个 button 使得点击后可以改变这个数字 如果你使用完整版，只需要这样写即可 1234567&lt;body&gt; &lt;div id="app"&gt; &#123;&#123;n&#125;&#125; &lt;button @click="add"&gt;+1&lt;/button&gt; &lt;/div&gt; &lt;script&gt; // 此处通过 cdn 引入完整版 vue &lt;/script&gt;&lt;/body&gt; 然后在 js 中写 1234567891011new Vue(&#123; el: '#app', data: &#123; n: 0 &#125;, methods: &#123; add()&#123; this.n++ &#125; &#125;&#125;) 或者 html 的 app 中不写内容，而是写在 new Vue 内 1234567891011121314151617new Vue(&#123; el: '#app', data: &#123; n: 0 &#125;, template: ` &lt;div&gt; &#123;&#123;n&#125;&#125; &lt;button @click="add"&gt;+1&lt;/button&gt; &lt;/div&gt; `, methods: &#123; add()&#123; this.n++ &#125; &#125;&#125;) 注意，此处的 template 需要包裹在同一个 div 中 就可以实现点击按钮后自增，并同步到页面上 但是如果用非完整版，就不能这样写 首先 html 要改成这样 12345&lt;body&gt; &lt;div id="app"&gt; &lt;/div&gt; &lt;script&gt; // 此处通过 cdn 引入非完整版 vue &lt;/script&gt;&lt;/body&gt; 然后在 js 中写 12345678910111213141516new Vue(&#123; el: '#app', data: &#123; n: 0 &#125;, render(h)&#123; return h('div', [this.n, h('button', &#123; on: &#123;click: this.add&#125; &#125;, '+1')]) &#125;, methods: &#123; add()&#123; this.n++ &#125; &#125;&#125;) vue 提供的 render 方法接受一个参数，是 vue 封装好向开发者传来的渲染函数，一般命名为 h（因为文档里就是 h） 在上例中，h 函数接收 2 个或 3 个参数 如果只有两个参数，第一个表示其所属的 html 元素类型，第二个参数表示其显示文本 如果有三个参数，第一个参数同上，第二个参数表示其属性配置，第三个表示其显示文本 非完整版的意义既然非完整版这么麻烦，有什么价值呢？ 答案就是大小和独立 在完整版中，vue 的参数直接侵入了模板 html，一旦发生修改，则全部都要改，在实际开发中很难同步；而采用 template 参数的话，又导致在 js 中混入了奇怪的不属于 js 的部件 在非完整版中，所有的局部配置都依赖于同一个 js，当发生修改的时候，只需要修改当前 js 最重要的是，非完整版支持 vue 组件化！便于控制不同部分的代码 综上，实际项目中，应该优先使用非完整版（为了更小体积），并且开发中使用开发版，发布的时候使用生产版 vue 组件创建 vue 项目后，就可以发现核心文件 main.js 和 app.vue 其中 app.vue 就是项目的主组件，并可以以类似逻辑创建 .vue 后缀的文件作为项目的新的 vue 组件 每个 vue 组件都包含以下 3 部分 template，指示该组件的 html 模板，在需要填充时将该部分填充到 app.vue 的对应位置 script，指示该组件使用的 vue 实例的配置 style scoped，指示该组件使用的样式 注意，此处一般要注明 scoped 以使得样式只应用于当前组件，否则会应用到全局 在用户访问时，router 组件会选择 component 并返回 当在 app.vue router-view 中选择 name=”default” 时，router 里不需要写对象，直接写目标组件即可 当选择 name=”xxx” 时，router 返回的 component 必须是对象，且包含你指定的 name 字段，该字段值是目标组件对象 vue 与 SEO众所周知 vue 是单页应用，从上面的说明也看出了 vue 的特点：主页只有一个 div#app，没有别的东西，这样搜索引擎怎么知道你这个页面和什么有关系呢 可以在模板里写 meta 标签来指示本网站相关内容，或是在 div#app 中写入内容（反正会被 vue 渲染替换） 但是仍然治标不治本，SEO 效果仍然很差，这时候就需要——服务端渲染（SSR） 不过 SSR 已经远超本章内容了，就不描述了 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20201222 本站写作方法]]></title>
    <url>%2Fdiary%2F20201222%2F</url>
    <content type="text"><![CDATA[昨天被 yuli 问了这回事，写一下吧 新建文章首先是打开 hexo s 然后新建一篇文章 新建之前，需要想好两点 文章标题 文章分类 因为 hexo 不会上传 markdown 源文件，所以在本地需要有个办法管理这些源文件，我在此处加个前缀 比如说，当文章是 others 或 diary 分类的时候（比如本文），就直接用日期作为前缀 再比如一篇 frontend 分类的文章，就用”前端”当前缀，如”前端-webpack 入门 1” 创建之后，因为 admin 会自动进入编辑页面，所以我也就顺手在编辑页面做一些设定 文章初始化主要在 admin 提供的编辑页面做如下工作： 在文章 title 处去除前缀，只保留文件名上的前缀 在右侧设置一下文章的目录和标签 写一下文章的缩略语和 more 注释，例如本文就写以下部分 123昨天被 yuli 问了这回事，写一下吧&lt;!--more--&gt; 这样，在 admin 上的部分就完成了，现在关掉本地服务器，改用 typora 写文章 准备写文章用 typora 打开文章后，需要做以下工作 打开源代码模式，为本文附加一个 id（为了部署后文章路径好看） 回到渲染模式，全程使用渲染模式写文章 在 more 注释后加上分割线，在结尾处也加上分割线 拟定文章目录，先写好目录再填充内容 文章内联资源一篇文章内一般会有各种其它资源，比如图片，比如下载 我采取的策略如下 能不能使用代码段表示？能就仅使用代码段 不能做到 1，那能不能使用图片表示？能就仅使用图片 最后才选择提供下载 在使用图片的时候，我一般采取以下方案 在专门的图片文件夹 “hexo 图片” 下新建一个图片文件夹，该文件夹名字与当前文章的 id 一致 当前文章所涉及的新图片都保存到该文件夹下，每个图片都命名为 1`$&#123;id&#125;-$&#123;index&#125;.(png|jpg)` 然后通过 markdown 图片引入的方式先插进文章中以便浏览 当文章完成后，将所需图片都上传到 cdn，再 ctrl+r 替换文章中对图片的引用路径 检查文章，提交 若是提供下载，则是先预留超链接位置，写完文章后执行与图片第 3、第 4 步相同的步骤 以上 感谢阅读]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Webpack 入门 4]]></title>
    <url>%2Ffrontend%2Fwebpack-4%2F</url>
    <content type="text"><![CDATA[天天 file 协议，我受够了，来个 server！Webpack 其之四 点我下载本章代码 webpack-dev-server查看 webpack 官方文档，发现有一个东西叫做 webpack-dev-server，而且也就它带一个 server 单词，试试看！ 先安装它 1npm install --save-dev webpack-dev-server 然后照抄一下官方给的配置，发现是在 module.exports 下新增以下字段 123456module.exports = &#123; devtool: 'inline-source-map', devServer: &#123; contentBase: './dist' &#125;&#125; 以及在 node 配置中新增以下字段 1"start": "webpack-dev-server --open" 意思是当运行 npm run start 的时候，执行其值对应的命令行，其中 --open 的意思是自动打开默认浏览器 抄进我们的配置，start 一下 1npm run start 发现报错了…… 1Error: Cannot find module &apos;webpack-cli/bin/config-yargs&apos; 搜索发现，是默认安装的 webpack-cli 版本太高了，以至于和 webpack-dev-server 不兼容 这时候需要重装 webpack-cli 为合适的版本 依次运行下述命令可以重装 webpack-cli 为 3 版本 12npm uninstall webpack-clinpm install webpack-cli@3 --save-dev 现在再试试 start，发现成功打开了浏览器！ 此时坐标 localhost:8080，默认根路径 / 就是我们指定的输出 index.html 的位置 尝试修改一下 style，比如背景色改成 blue 发现随着你在本地保存，浏览器里的页面也会自动更新 不只是 http 协议，webpack-dev-server 也支持热更新！ 不同的配置但是这个 server 再怎么 server，终究还是个 dev，它在编译的时候就应该使用 development mode 而不是 production 让我们复制一下原来的 config，保存成两份 123456789101112131415161718192021222324252627282930313233343536373839404142434445// webpack.config.js 默认使用 development 模式const path = require('path');const HtmlWebpackPlugin = require('html-webpack-plugin');const MiniCssExtractPlugin = require('mini-css-extract-plugin');module.exports = &#123; mode: 'development', entry: './src/index.js', output: &#123; path: path.resolve(__dirname, 'dist'), filename: '[name].[contenthash].js' &#125;, devtool: 'inline-source-map', devServer: &#123; contentBase: './dist' &#125;, plugins: [ new HtmlWebpackPlugin(&#123; title: 'My App', filename: 'index.html', template: 'index.html' &#125;), new MiniCssExtractPlugin(&#123; filename: '[name].[contenthash].css' &#125;) ], module: &#123; rules: [ &#123; test: /\.css$/, use: [MiniCssExtractPlugin.loader, 'css-loader'] // use: [ // 'style-loader', // 'css-loader' // ] &#125;, &#123; test: /\.(png|svg|jpg|gif)$/, use: [ 'file-loader' ] &#125; ] &#125;&#125;; 12345678910111213141516171819202122232425262728293031323334353637// webpack.config.prod.js 使用 production 模式const path = require('path');const HtmlWebpackPlugin = require('html-webpack-plugin');const MiniCssExtractPlugin = require('mini-css-extract-plugin');module.exports = &#123; mode: 'production', entry: './src/index.js', output: &#123; path: path.resolve(__dirname, 'dist'), filename: '[name].[contenthash].js' &#125;, plugins: [ new HtmlWebpackPlugin(&#123; title: 'My App', filename: 'index.html', template: 'index.html' &#125;), new MiniCssExtractPlugin(&#123; filename: '[name].[contenthash].css' &#125;) ], module: &#123; rules: [ &#123; test: /\.css$/, use: [MiniCssExtractPlugin.loader, 'css-loader'] &#125;, &#123; test: /\.(png|svg|jpg|gif)$/, use: [ 'file-loader' ] &#125; ] &#125;&#125;; 这时候，我们直接 npm run build 的话，会使用默认的 development 模式的配置，怎么办呢 答案是修改 node 脚本配置，其中 build 字段改为如下值 1"build": "rimraf ./dist &amp;&amp; webpack --config ./webpack.config.prod.js" 通过 –config 来指示此时使用哪个配置文件进行构建 现在再次 npm run build，也不会用错配置文件了！ 管理配置分析配置分开后，我们又发现了新的问题：配置内容重复不少 重复可是编程一大弊病，必须要避免，容易想到抽出一个公共的配置 现在让我们把目录变成这样 webpack.config.js，保存公共配置 webpack.config.dev.js，保存开发配置 webpack.config.prod.js，保存部署配置 然后修改 node 脚本的 start 字段 1"start": "webpack-dev-server --config ./webpack.config.dev.js --open" 接下来提取刚才两个配置文件中的公共部分 分离显然除了模式、dev-server 有关配置外，其余部分基本一致 那么把共有部分提取一下 12345678910111213141516171819202122232425262728293031323334353637383940// webpack.config.js 共有部分配置const path = require('path');const HtmlWebpackPlugin = require('html-webpack-plugin');const MiniCssExtractPlugin = require('mini-css-extract-plugin');module.exports = &#123; entry: './src/index.js', output: &#123; path: path.resolve(__dirname, 'dist'), filename: '[name].[contenthash].js' &#125;, plugins: [ new HtmlWebpackPlugin(&#123; title: 'My App', filename: 'index.html', template: 'index.html' &#125;), new MiniCssExtractPlugin(&#123; filename: '[name].[contenthash].css' &#125;) ], module: &#123; rules: [ &#123; test: /\.css$/, use: [MiniCssExtractPlugin.loader, 'css-loader'] // use: [ // 'style-loader', // 'css-loader' // ] &#125;, &#123; test: /\.(png|svg|jpg|gif)$/, use: [ 'file-loader' ] &#125; ] &#125;&#125;; 12345678// webpack.config.dev.js 使用 development 模式module.exports = &#123; mode: 'development', devtool: 'inline-source-map', devServer: &#123; contentBase: './dist' &#125;&#125;; 1234// webpack.config.prod.js 使用 production 模式module.exports = &#123; mode: 'production'&#125;; 现在怎么引入呢 引入既然结尾是 js，那这个配置就是按照 js 的引入办法，通过 require 引入 插播一下，在 webpack 配置这边，遵循的是 AMD 规范，使用 require 而平时的 node 代码是遵循 CommonJS 规范，使用 import 1234567891011// webpack.config.dev.js 使用 development 模式const base = require('./webpack.config.js')module.exports = &#123; ...base, mode: 'development', devtool: 'inline-source-map', devServer: &#123; contentBase: './dist' &#125;&#125;; 1234567// webpack.config.prod.js 使用 production 模式const base = require('./webpack.config.js')module.exports = &#123; ...base, mode: 'production'&#125;; 此处使用 spread 语法展开引入的 base，base 就是 require 的模块里的 module.exports 的值 现在就可以使得两个不同 mode 的配置，都继承同样的公共配置了 但是注意，现在不能随便覆写字段，比如我要在 dev mode 新增一个 loader 处理 scss 123456789101112131415161718192021222324const base = require('./webpack.config.js')module.exports = &#123; ...base, mode: 'development', devtool: 'inline-source-map', devServer: &#123; contentBase: './dist' &#125;, module: &#123; rules: [ &#123; test: /\.scss$/, use: [&#123; loader: "style-loader" // 将 JS 字符串生成为 style 节点 &#125;, &#123; loader: "css-loader" // 将 CSS 转化成 CommonJS 模块 &#125;, &#123; loader: "sass-loader" // 将 Sass 编译成 CSS &#125;] &#125; ] &#125;&#125;; 如果这样写，会导致覆写了从 base 引入的 loader，让 css loader 和 file loader 都消失，只有 sass loader 所以要引入新的专有 loader 的话，还要再应用一次 spread 语法 12345678910111213141516module: &#123; ...base.module, rules: [ ...base.module.rules, &#123; test: /\.scss$/, use: [&#123; loader: "style-loader" // 将 JS 字符串生成为 style 节点 &#125;, &#123; loader: "css-loader" // 将 CSS 转化成 CommonJS 模块 &#125;, &#123; loader: "sass-loader" // 将 Sass 编译成 CSS &#125;] &#125; ]&#125; 只有这样才可以保证不会覆写掉共有部分引入的 loader 其余部分的覆写也要注意这一点 合并手动引入还要注意使用 spread 语法以及避免错误覆写，有没有更方便的呢？有 搜索 webpack merge，找到其 github 项目主页 发现要安装，那就安装一下 1npm install webpack-merge --save-dev 刚才 dev 的文件已经用了，现在就用 prod 的文件吧 先引入 merge 1const &#123; merge &#125; = require('webpack-merge') 注意此处要使用解构赋值，否则引入后还要取模块的 merge 字段才行 然后连接 base 和新的配置 123456789101112131415module.exports = merge(base, &#123; mode: 'production', module: &#123; rules: [&#123; test: /\.scss$/, use: [&#123; loader: "style-loader" // 将 JS 字符串生成为 style 节点 &#125;, &#123; loader: "css-loader" // 将 CSS 转化成 CommonJS 模块 &#125;, &#123; loader: "sass-loader" // 将 Sass 编译成 CSS &#125;] &#125;] &#125;&#125;); ok！最终效果和使用 spread 语法手动展开是一样的 merge 这个方法起如下的效果 1234567891011const a = &#123; a: [11], b: 45, c: 1919&#125;const b = &#123; a: [514], b: 114514, d: 810&#125;const result = merge(a,b) 最终 result 结果如下 123456result === &#123; a: [114,514], b: 114514, c: 1919, d: 810&#125; 数组取合并，相同取新值，不同均保留 就是这样~~ 感言Webpack 入门系列就到这里了，有兴趣深入的同学，可以查看 webpack 官方文档以及各个插件的官方文档 学好这几章提及的 webpack 基本原理，对于深入理解 vue 和 react 框架的打包机制是很有必要的（正是基于 webpack） 勘误可以联系我，谢谢！ 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Webpack 入门 3]]></title>
    <url>%2Ffrontend%2Fwebpack-3%2F</url>
    <content type="text"><![CDATA[现代互联网，资源摩多摩多！Webpack 其之三 扩展CSS loader既然已经加载了 CSS，就拿 CSS 的三个变种试试手吧 以下三个变种，都支持默认的 CSS 语法，也就是说直接拿一个 CSS 去改名，就是合法的三种文件 scss在官方文档的 loader 中找到 sass-loader 章节 文档要求我们安装，那就先安装一下 1npm install sass-loader dart-sass webpack --save-dev 注意，文档要求我们安装的是 node-sass，但是这个已经过时了，应该安装更新的 dart-sass 安装完成后，照抄一下示例 123456789101112131415module.exports = &#123; ... module: &#123; rules: [&#123; test: /\.scss$/, use: [&#123; loader: "style-loader" // 将 JS 字符串生成为 style 节点 &#125;, &#123; loader: "css-loader" // 将 CSS 转化成 CommonJS 模块 &#125;, &#123; loader: "sass-loader" // 将 Sass 编译成 CSS &#125;] &#125;] &#125;&#125;; 结合我们在加载 CSS 时候的经验，可以看出 test 是检验文件后缀是否是 .scss 然后按顺序从后向前调用 loader less 和 stylus一模一样.jpg 先安装 12npm install --save-dev less-loader lessnpm install --save-dev stylus-loader stylus 然后引入 123456789101112131415module.exports = &#123; ... module: &#123; rules: [&#123; test: /\.less$/, use: [&#123; loader: "style-loader" // 将 JS 字符串生成为 style 节点 &#125;, &#123; loader: "css-loader" // 将 CSS 转化成 CommonJS 模块 &#125;, &#123; loader: "less-loader" // 将 Less 编译成 CSS &#125;] &#125;] &#125;&#125;; 123456789101112131415module.exports = &#123; ... module: &#123; rules: [&#123; test: /\.styl$/, use: [&#123; loader: "style-loader" // 将 JS 字符串生成为 style 节点 &#125;, &#123; loader: "css-loader" // 将 CSS 转化成 CommonJS 模块 &#125;, &#123; loader: "stylus-loader" // 将 Stylus 编译成 CSS &#125;] &#125;] &#125;&#125;; 完事了，是不是特别简单？ 加载图片显然图片也是重要的一环 从上面的 loader 示例中，可以发现 loader 的格式 12345678module:&#123; rules:[&#123; test: [regex], // 通过正则表达式识别后缀 use: [&#123; loader: "xxx-loader" // 对应的 loader &#125;] &#125;]&#125; 然后在 js 文件中 import 即可引入 那我们可以试着编写一下图片的 loader 格式 假设有一张 image.png，我们可以推测 loader 是这样的配置 12345678module:&#123; rules:[&#123; test: /\.png$/, // 通过正则表达式识别后缀 use: [&#123; loader: "image-loader" // 对应的 loader &#125;] &#125;]&#125; 虽然 image-loader 看起来很合理，但是告诉你个坏消息：没有这个 loader 那怎么办呢？用 file-loader 就可以了 所以 loader 配置就是 12345678module:&#123; rules:[&#123; test: /\.png$/, // 通过正则表达式识别后缀 use: [&#123; loader: "file-loader" // 对应的 loader &#125;] &#125;]&#125; 现在要怎么插入到页面呢？ 首先要知道这时候你在 js 中引入的话，获得了什么呢？是二进制码还是？ 答案是这个图片的一个相对路径 然后通过 img 标签的 src 进行插入即可 12345import url from './image.png'const img = document.createElement('img')img.src = urldocument.body.appendChild(img) 其余图片也可以使用类似的方法 什么？你说还有其它文件怎么办？看文档啊（ 懒加载有时候并不想图片什么的一上来就加载，可不可以控制呢？ 答案是可以 我们注意到，loader 处理后的文件，必须在 import 处理后才可以正常使用，那我们动态延后 import 不就可以了？ 容易想到通过一个 button 之类的元素，来触发某个事件，然后异步加载 用什么可以异步加载呢？可以使用 js 的 import() 方法来动态加载一个模块，这个方法返回一个 Promise，其成功回调返回一个模块，需要通过 module.default 才能取得其默认值 那么假设在页面上有一个 button#btn，容易得到以下代码 123456789const btn = document.getElementById('btn')btn.onclick = () =&gt; &#123; import('./image.png').then(module =&gt; &#123; const url = module.default const img = document.createElement('img') img.src = url document.body.appendChild(img) &#125;)&#125; 此时就可以实现页面上图片的懒加载 下集预告file 协议也太野蛮了，我要 http 协议 点我查看下集 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Webpack 入门 2]]></title>
    <url>%2Ffrontend%2Fwebpack-2%2F</url>
    <content type="text"><![CDATA[也不能总是只搞 js 吧，我三剑客另两位呢？Webpack 其之二 点我下载本章代码 HTML 插件首先先搞一个能看的页面出来 那当然是选择我们的 HTML 因为 webpack 只能把资源处理成 js，所以要想得到 HTML，我们就要使用 plugin 在官方文档的 plugin 中找到 html，发现有这么一个插件 html-webpack-plugin 点开之后可以得到其引导，让我们先安装它 1npm install --save-dev html-webpack-plugin 该插件将为你生成一个 HTML5 文件， 其中包括使用 script 标签的 body 中的所有 webpack 包。 向 module.exports 写入字段 plugins，大致变为如下模样 123456789101112const path = require('path');const HtmlWebpackPlugin = require('html-webpack-plugin');module.exports = &#123; mode: 'production', entry: './src/index.js', output: &#123; path: path.resolve(__dirname, 'dist'), filename: '[name].[contenthash].js' &#125;, plugins: [new HtmlWebpackPlugin()]&#125;; 然后试试构建！ 可以发现 dist 目录下产生了新的 js 和一个 html，并为这个 html 自动绑定了 js 但是这个页面也太白板了，能不能指定一些个性化设置呢 查看 插件文档 可以发现有这么一段代码 123456plugins: [ new HtmlWebpackPlugin(&#123; title: 'My App', filename: 'assets/admin.html' &#125;)] 抄进来试试构建！ 发现 dist 目标文件夹变成了这样 可以看到 title 被我们成功定制了，但是路径错了？！为什么多了一个 assets？？ 我们发现配置中有 assets 的部分是 filename 字段，想到之前配置中的 output 也有 filename 字段，是指示输出的文件名用的，所以结合构建结果来看插件中的配置应该也同理 但是这样还是太单薄了，能不能再丰富一点？ HTML 模板答案是可以！ 继续查看插件文档，有一个地方的代码引起了我们的注意 1234567plugins: [ new HtmlWebpackPlugin(), // Generates default index.html new HtmlWebpackPlugin(&#123; // Also generate a test.html filename: 'test.html', template: 'src/assets/test.html' &#125;)] 注释是说，如果配置了两个 HtmlWebpackPlugin 实例，那么两个实例都会被构建 其中第二个实例指定了一个新字段，template，翻译是模板，那我们可以猜测这个东西是指示入口 html 文件的 正好我们目录下有个 index.html，个性化一下先 然后指定 template 的路径到这个 html 1234567plugins: [ new HtmlWebpackPlugin(&#123; title: 'My App', filename: 'index.html', template: 'index.html' &#125;)] 然后再构建一下，发现 dist 结果现在变成了这样 虽然构建成功了，自动使用我们提供的模板，并引入了 main.js 但是我们配置的 title 没有覆盖模板的 title，并且里面自带的 index.js 还留着 可以猜测配置多余的 title 是没用的，并且不应该自带 js 现在去掉模板里的 title 和 js 引用再试试 123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html lang="zh"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="app"&gt; &lt;ol&gt; &lt;li&gt;1&lt;/li&gt; &lt;li&gt;2&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 构建！ 得到的新 dist 变成这样 虽然 js 确实自动插进去了，但是……我的 title 呢！！！ 怎么办怎么办，看看插件文档吧 正好下一节就提出了一个类似 jsp 的语法 &lt;%= htmlWebpackPlugin.options.title %&gt; 将这个语句写在模板中，可以在构建的时候自动获取配置中的 title 来试试 构建！ 发现成功插入了新的 title！可以推知其它配置也可以采用类似的方法 css loader但是这样的页面好丑……我要加 CSS 看看插件文档怎么说的 直接在插件文档中搜 css 发现官方文档里这么说 If you have any CSS assets in webpack’s output (for example, CSS extracted with the mini-css-extract-plugin) then these will be included with &lt;link&gt; tags in the HTML head. 意思就是如果要 CSS，你去用 mini-css-extract-plugin 吧 这也太麻烦了，我想简单点，回头看看 webpack 文档 在指南中的 加载 CSS 章节发现了这么一段 先安装，然后把配置抄过来看看 然后加个 style.css 123ol&#123; background-color: red;&#125; 在 index.js 中引入这个 css 1234![webpack-2-8](https://pic.ringoer.com/webpack-2-8.png)import './style.css'let string = 'hello'console.log(string) 试试构建，完成后用 file 协议打开 index.html 看看 发现成功引入了 css，而且自动化作 style 标签插在了 document.head 中 此时的 main.xxx.js 变成了复杂的一大串 js 代码，这其实就是 loader 的效果——将其它内容转换为 js 查看配置，发现用到了两个 loader，根据名称，我们可以推测，任何以 .css 结尾的文件，都会通过 test 的测试，然后从后向前依次调用 loader处理 先调用 css-loader 将 css 内容转化为 webpack 能理解的 js 内容，再调用 style-loader 将 js 内容中的样式部分化作 style 标签插入到 document.head 上 那如果我有多个 css 呢？试试看！ 新建一个 style2.css 123ol&#123; color: white;&#125; 然后在 index.js 中引入它 12345import './style.css'import './style2.css'let string = 'hello'console.log(string) 然后构建！刷新页面发现变成了这样 多个 css 文件会化作多个 style 标签被插入 css 抽取但是如果我 css 多了，插作 style 标签的话，不方便管理，也会加大页面代码冗余 能不能抽成 css 文件呢？可以！ 我们知道 webpack 基本功能是提取内容变为 js，刚才的 loader 也是这个功能，那现在要提取作非 js 的 css 文件了，肯定需要的是 plugin 想起刚才 html 的时候，他让我们去用 mini-css-extract-plugin，那我们就去看看 先安装这个插件 npm install --save-dev mini-css-extract-plugin 然后我们发现了这么一段代码 12345678910111213const MiniCssExtractPlugin = require('mini-css-extract-plugin');module.exports = &#123; plugins: [new MiniCssExtractPlugin()], module: &#123; rules: [ &#123; test: /\.css$/i, use: [MiniCssExtractPlugin.loader, 'css-loader'], &#125;, ], &#125;,&#125;; 抄下来 12345678910111213141516171819202122232425262728const path = require('path');const HtmlWebpackPlugin = require('html-webpack-plugin');const MiniCssExtractPlugin = require('mini-css-extract-plugin');module.exports = &#123; mode: 'production', entry: './src/index.js', output: &#123; path: path.resolve(__dirname, 'dist'), filename: '[name].[contenthash].js' &#125;, plugins: [ new HtmlWebpackPlugin(&#123; title: 'My App', filename: 'index.html', template: 'index.html' &#125;), new MiniCssExtractPlugin() ], module: &#123; rules: [ &#123; test: /\.css$/, use: [MiniCssExtractPlugin.loader, 'css-loader'] &#125; ] &#125;&#125;; 然后好像没说什么别的了，试试构建吧 构建之后发现！！js 文件变简单了，css 也自动抽成了 main.css，还自动在 index.html 中引入了 不过为什么仅仅是 main.css？我的哈希呢？ 根据之前猜测的 filename 指示输出文件名，来试试修改配置 将 plugins 中的 filename 改成如下模样，再试试构建 12345plugins: [ new MiniCssExtractPlugin(&#123; filename: '[name].[contenthash].css' &#125;)] 得到了如下结果 现在我们的 CSS 也有每次不同的文件名了！并且也不再依赖于 js 的引入 下集预告更多其它的内容怎么办呢？只有三剑客可不足以撑起现代互联网！ 点我查看下集 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Webpack 入门 1]]></title>
    <url>%2Ffrontend%2Fwebpack-1%2F</url>
    <content type="text"><![CDATA[目前版本第一的打包工具 Webpack 其之一 点我下载本章代码 什么是 Webpack首先贴出 webpack 的官网 webpack webpack 中文文档 本质上，webpack 是一个现代 JavaScript 应用程序的静态模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。构建过程是拓扑排序的一种 说到底，webpack 基本的功能，其实就是把高版本 js 转换成 js，以及把非 js 的文件转换成 js 安装先安装一下吧 我们可以看到，官方文档的指南里给出了如下命令行 123mkdir webpack-demo &amp;&amp; cd webpack-demonpm init -ynpm install webpack webpack-cli --save-dev 那我们也照做一下，完成后目录结构如下 开始指南里还要求我们首先建一个新目录，里面包含一个 src 的一个 index.js，以及一下 index.html index.html 中记得连接到 index.js 然后让我们试试高版本 js 转换成低版本 js 的功能。一般是 ES6 转换成 ES5 让我们先从文档里找一个能用的 webpack 配置 123456789const path = require('path');module.exports = &#123; entry: './path/to/my/entry/file.js', output: &#123; path: path.resolve(__dirname, 'dist'), filename: 'my-first-webpack.bundle.js' &#125;&#125;; 就他了！ 建立一个 webpack.config.js 文件用来保存配置 然后试试运行 1npx webpack npx 命令指示 node 从当前目录下的 node_modules 中寻找webpack 然后发现报错了？！怎么回事呢 看看报错说什么 报错说他不能识别 ./path/to/my/entry/file.js 这个文件是什么 这个字符串在哪里提到了呢？在配置中的 entry entry 这个词很明显是入口的意思，加上是 js 结尾，我们试试看用我们现在目录中唯一的 js 替换 现在配置变成这样，再试试打包吧！ 这次很顺利的成功了 检查目录，发现目录下多了个 dist 文件夹，里面多了个 my-first-webpack.bundle.js 文件 打开内容一看，就是和我们的 index.js 里面是一样的内容！甚至还自己分析了语义，省去了不必要的代码 这就是 webpack 的基本功能 js 转换 入口entry 除了上文提到的单入口指定 123456789const path = require('path');module.exports = &#123; entry: './path/to/my/entry/file.js', output: &#123; path: path.resolve(__dirname, 'dist'), filename: 'my-first-webpack.bundle.js' &#125;&#125;; 也可以指定多个入口，传入一个 hashtable 即可 123456789101112const path = require('path');module.exports = &#123; entry: &#123; app: './src/index.js', print: './src/print.js' &#125;, output: &#123; path: path.resolve(__dirname, 'dist'), filename: 'my-first-webpack.bundle.js' &#125;&#125;; 传入的入口 js 会分别打包，有兴趣的朋友可以自己尝试一下 模式显然代码一般都有开发和部署两种状态，webpack 也有不同的对应代码 在配置中可以添加 mode 字段来指示 webpack 模式，有两种选择 production，部署模式，默认 development，开发模式 具体来说，打包出来的东西会有区别，比如刚才的代码 12let string = 'hello'console.log(string) 在部署模式会被打包成上图样式 1console.log("hello"); 在开发模式会打包成如下样式 123456789101112131415/* * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development"). * This devtool is not neither made for production nor for readable output files. * It uses "eval()" calls to create a separate source file in the browser devtools. * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/) * or disable the default devtool with "devtool: false". * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/). *//******/ (() =&gt; &#123; // webpackBootstrap/*!**********************!*\ !*** ./src/index.js ***! \**********************/eval("let string = 'hello'\r\nconsole.log(string)\n\n//# sourceURL=webpack://webpack-demo/./src/index.js?");/******/ &#125;)(); 多了很多不必要的代码，为了方便程序员查看 输出哈希从配置信息中可以看出，配置里不仅指示了入口文件，还指示了 output——输出文件的配置 上述配置中令输出文件夹命名为 dist，这也是大部分构建工具的配置 还指示了 filename，可以猜出是输出的 js 文件的文件名 在刚才尝试不同模式的构建中，我们已经发现不同的构建会覆盖旧有的文件，但输出文件名仍然是同一个 根据以前学习的浏览器缓存知识可以了解到，浏览器发现你在 html 文件中的连接 js 名称没变，那就会认为现在的页面还是使用原有的缓存，显然不利于页面的更新 于是我们要为新构建的 js 指定一个每次都不一样的名称 但是总不能手动配置吧？那也太烦了 还好 webpack 提供了 filename 模板 可以通过 [name].[contenthash].js 来指定随机的新 filename，其中的 contenthash 是依据文件内容进行哈希，也就是说只要文件内容有变化，新打包出来的文件一定不同名 让我们试试吧 更换了新配置之后发现生成了一个 main.xxxxx.js 文件！成功了！ 快捷构建每次构建都产生一个不同名文件，虽然有利于浏览器更新，但是不利于本地……毕竟总不能每次都手动删除一下 dist 吧2333 这时候我们可以考虑修改 node 默认的配置 可以向 package.json 文件中的 scripts 字段加入如下内容 123"scripts": &#123; "build": "webpack"&#125; 与命令行不同，写在此处的命令可以不加 npx，默认是在本目录下查找 接下来我们运行 npm run build 就等同于运行 npx webpack 于是我们就可以把 rm 语句也加进去 123"scripts": &#123; "build": "rm -rf ./dist &amp;&amp; webpack"&#125; &amp;&amp; 表示前项执行成功才执行后项 现在就可以在运行 npm run build 的时候同时删除旧文件了 注：有的不能用 rm 命令的时候，可以用 rimraf 命令代替 下集预告只有 js 怎么够？！我要完整的三剑客！ 点我查看下集 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[框架模式之 MVC]]></title>
    <url>%2Fprograming%2Fmvc%2F</url>
    <content type="text"><![CDATA[常听说 spring MVC，现在都发展到前端 MVC 了 定义经典 MVC 模式中，M 是指 Model 业务模型，V 是指 View 用户界面，C 则是 Controller 控制器 通常是为了使得代码模式固化，让代码复杂度相对稳定 表现后端比如在 spring 中，Model 通常包括 domain、mapper、dao 等三层，定义了对象模型以及对象对应的存取方法 123456789101112131415161718// domainclass User&#123; private Integer id; User()&#123;&#125; public Integer getId()&#123;return this.id;&#125; public void setId(Integer id)&#123;this.id=id;&#125;&#125;// mapperinterface UserMapper&#123; User selectUserById(Integer id);&#125;// dapclass UserDao&#123; @Autowired private UserMapper userMapper; public User selectUserById(Integer id)&#123;return userMapper.selectUserById(id);&#125;&#125; Controller 则是 controller 层 和 service 层，定义了数据接口和关于数据处理的业务方法 1234567891011121314151617// serviceclass UserService&#123; @Autowired private UserDao userDao; public User getUser(Integer id)&#123;return ResponseUtil.ok(userDao.selectUserById(id));&#125;&#125;// controller@RestController("/user")class UserController&#123; @Autowired private UserService userService; @GetMapping("/info") public Object getUser(@RequestParam Integer userId)&#123;return userService.getUser(userId);&#125;&#125; 特别的，当 controller 的注解是 @RestController 的时候，仅作为数据接口 当注解是 @Controller 的时候，可以返回数据或页面，比如 thymeleaf 渲染的页面 这时候，返回页面的 controller 就是所谓的 View 12345678@Controller("")class UserController&#123; @Autowired private UserService userService; @GetMapping("/index") public String index()&#123;return "index.html";&#125;&#125; 前端而在前端中，一般不需要考虑与数据库的交互，数据来源一般都是后端提供的数据接口 这时候，Controller 就不需要提供数据接口，只需要访问，于是原本在后端分离开的 controller 和 service 就融合在了一起，负责提供业务方法 1234567891011const Controller = el =&gt; &#123; return &#123; el: el, init()&#123; model.bindEvents(el) &#125;, add(target,value)&#123; model.data[target]+=value &#125; &#125;&#125; Model 则是负责保存需要用到的用户数据，并为数据设置事件 12345678910111213const Model = &#123; data: &#123; n: 100 &#125;, events: &#123; click: ()=&gt;console.log(n) &#125;, bindEvents(el)&#123; for(let key in this.events)&#123; el.addEventListener(key,this.events[key]) &#125; &#125;&#125; View 则是负责接收业务方法的信号，重新渲染页面，监听数据事件 1234567const View = &#123; html: `233&#123;&#123;n&#125;&#125;`, render(el)&#123; // 被触发 html.replace('&#123;&#123;n&#125;&#125;',model.data.n) el.innerHTML=this.html &#125;&#125; 于是又多了一个和后端不一样的地方——model 和 view 都要关注用户事件 所以前端 MVC 一般还有一个概念，就是 EventBus 事件总线 EventBus 提供一系列事件绑定、触发、解除等相关的方法，然后交由 Model 和 View 来调用 1234567891011const EventBus = &#123; on(el, eventName, fn)&#123; el.addEventListener(eventName,fn) &#125;, off(el, eventName, fn)&#123; el.removeEventListener(eventName,fn) &#125;, trigger(el, eventName)&#123; el.dispatchEvent(eventName) &#125;&#125; 但是现在这些方法怎么转移使用呢？ 基于 js 的特性，可以选择原型链继承或者类继承 此处可以选择类继承，让 Model、View、EventBus 都成为 class 然后 Model、View 都 extends EventBus，就可以拥有 EventBus 的所有方法 之后在使用的时候，声明一个该类的实例即可 表驱动编程上述伪代码中，我们采用了遍历 model.events 的方法来为 events 里的每个键值对都执行绑定 实际上就是先为要绑定的列表作成一个哈希表，然后遍历这个表 基于这种方法的编程，代码复杂度恒定——无论增加多少个表项，都不需要修改绑定部分的业务代码 模块化其实 MVC 也就是一种模块化，毕竟代码分离了 模块化说到底就是为了方便维护各个部分的代码 比如同一个页面上有多块不同的功能，这时候我总不可以牵一发而动全身吧，那重构和渲染成本也太高了 这时候就可以选择在编程的时候模块化，使得代码耦合度降低，上层实现不直接依赖于底层架构 具体来说就是我们可以把页面上的每个不同功能的部分都应用一次 MVC 架构，这样每个部分都是直接依赖 MVC 提供的接口，而不关心内部的实现 就像前后端通信一样，只需要接口文档规定好，不需要调用者去关心接口内部是怎么写的 既然前后端分离的好处显而易见，那模块分离的好处，是不是也同理呢？ 感谢阅读]]></content>
      <categories>
        <category>programing</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[百文纪念]]></title>
    <url>%2Fdiary%2F20201212%2F</url>
    <content type="text"><![CDATA[博客上写满 100 篇了，来点来点 在双十二之际写下这篇百文纪念 但是其实已经超过一百不少了 四舍五入就是二百文纪念（？） 这一百文见证了我从算法到后端到前端的转变 下一百文又有什么样的变化呢 楽しみだな]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[拆箱即用的 http 服务器]]></title>
    <url>%2Fprograming%2Fparcel%2F</url>
    <content type="text"><![CDATA[有时候只是想走一下 http 访问，但是我不想特意写个后端！！！！ 有没有什么好办法呢？ 那就是伟大的 parcel ！ 安装通过以下命令即可安装 parcel 1npm install -g parcel-bundler 启动服务选择一个目录，在这里新建一个 index.html 写好 html 之后，在当前目录下启动 parcel 1parcel index.html -p 8080 就会在 8080 端口（默认是 1234）启动 http 服务 不需要任何配置，非常好用。而 webpack 需要的配置太多了不适合快速开发 热更新parcel 还有更好用的一点——页面热更新！ 但是要使用页面热更新，对 html 页面是有要求的 那就是 html 需要引入至少一个外联的 script 标签 外联的目标 script 可以是空的，但这个标签不能省略，否则不能热更新 好了，现在不论你修改的是 html，还是 html 外联的 css，都会在保存之后立刻重新编译然后渲染到页面上，不需要手动刷新页面了 配置目录刚才说到了编译——其实 parcel 是会自动帮你打包的 比如现在目录下只有 index.html style.css main.js 启动了 parcel 之后，parcel 会自动把你的 html 以及外联的所有文件都组织起来，自己编码后打包成一个 dist 文件夹 现在开发目录下就变成了 3 个文件加上 1 个文件夹了 所以建议开发目录中，最好把静态文件都放在同一个文件夹中，按惯例命名为 src 目录结构就变成这样 src index.html style.css main.js dist … 这样更有利于文件资源管理 引用路径parcel 之所以会产生 dist 文件夹，就是因为它自己把资源编码了 这时候你的路径就不是原本的路径了 比如你通过 js 动态插入一个 img 标签，这个 img 的 src 是不能正确命中资源的 这时候你需要通过 js 的 import 语句来解决这个问题 感谢阅读]]></content>
      <categories>
        <category>programing</category>
      </categories>
      <tags>
        <tag>http(s)</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手把手教你做一个自己的导航首页]]></title>
    <url>%2Ffrontend%2Fnavigation-page%2F</url>
    <content type="text"><![CDATA[拥有无限潜能的前端导航项目 前端三件套，首先当然是—— 搞什么开发，当然是先需求分析 需求分析前端导航一般都有两个主要功能 搜索 快捷标签页 通过墨刀作图，可以得到如图原型图 页面结构得到产品原型图以后，分析一下页面的结构 首先能够确定的是两边留白，中间三行 大致就是 3x3 表格模样，特别适合 grid 布局 什么？兼容？想那么多干啥，先自己写出来，跑起来再说，2333 在 grid 布局中，用到中间一列，上部放置搜索框，中部放置标签页，下部放置授权标志 那大致可以得到如下 HTML 1234567&lt;body&gt; &lt;div class="app"&gt; &lt;header&gt;&lt;/header&gt; &lt;main&gt;&lt;/main&gt; &lt;footer&gt;&lt;/footer&gt; &lt;/div&gt;&lt;/body&gt; header 中包含两个组件，所以 header 应该写成如下模样 123456&lt;header&gt; &lt;div class="searchBox"&gt; &lt;input type="text" id="keyword"&gt; &lt;button onclick="search()" id="submit"&gt;搜索&lt;/button&gt; &lt;/div&gt;&lt;/header&gt; main 中包含多个标签页，数量不确定，行数也不确定，所以标签页决定通过 js 动态插入 然后新增功能需要一个新增窗口，先画原型图 可见弹出窗口也需要一些组件，且需要用户通过”添加”按钮提供控制 所以可得如下 main 123456789101112131415&lt;main&gt; &lt;div id="tab"&gt; &lt;div class="delete" onclick="cancel()"&gt;×&lt;/div&gt; &lt;div&gt; &lt;span&gt;链接：&lt;/span&gt; &lt;input type="text" id="url" placeholder="请输入链接"&gt; &lt;/div&gt; &lt;div&gt; &lt;span&gt;描述：&lt;/span&gt; &lt;input type="text" id="desp" placeholder="请输入描述"&gt; &lt;/div&gt; &lt;button onclick="insertCard()"&gt;确定&lt;/button&gt; &lt;/div&gt; &lt;div class="container"&gt;&lt;/div&gt;&lt;/main&gt; 而 footer 的内容不是动态的，所以可以直接写死 123&lt;footer&gt; &lt;div&gt;© 2017 — 2020 ringoer.com 版权所有&lt;/div&gt;&lt;/footer&gt; 最后再引入对全文操作的 js 文件，可得全页面的 HTML 如下 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!DOCTYPE html&gt;&lt;html lang="zh-CN"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt; &lt;title&gt;导航&lt;/title&gt; &lt;link rel="stylesheet" href="style.css"&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="app"&gt; &lt;header&gt; &lt;div class="searchBox"&gt; &lt;input type="text" id="keyword"&gt; &lt;button onclick="search()" id="submit"&gt;搜索&lt;/button&gt; &lt;/div&gt; &lt;/header&gt; &lt;main&gt; &lt;div id="tab"&gt; &lt;div class="delete" onclick="cancel()"&gt;×&lt;/div&gt; &lt;div&gt; &lt;span&gt;链接：&lt;/span&gt; &lt;input type="text" id="url" placeholder="请输入链接"&gt; &lt;/div&gt; &lt;div&gt; &lt;span&gt;描述：&lt;/span&gt; &lt;input type="text" id="desp" placeholder="请输入描述"&gt; &lt;/div&gt; &lt;button onclick="insertCard()"&gt;确定&lt;/button&gt; &lt;/div&gt; &lt;div class="container"&gt;&lt;/div&gt; &lt;/main&gt; &lt;footer&gt; &lt;div&gt;© 2017 — 2020 ringoer.com 版权所有&lt;/div&gt; &lt;/footer&gt; &lt;/div&gt; &lt;script src="main.js"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 接下来开始写CSS CSS全局初始化先 fix 一下默认的样式 12345*&#123; margin: 0; padding: 0; box-sizing: border-box;&#125; 然后为 body 选择一个合适的灰色 123body&#123; background-color: #f0f0f0&#125; 定位然后就是定位了 大小，显然要占满全屏，100vh 和 100vw 安排上 滚动条肯定不给左右给上下，overflow 安排 说好的 3x3 布局，grid 安排 可以得到如下 CSS 123456789101112.app&#123; height: 100vh; width: 100vw; overflow: hidden auto; display: grid; grid-template-columns: 1fr 8fr 1fr; grid-template-rows: 100px 1fr 100px; grid-template-areas: ". header ." ". main ." ". footer .";&#125; 然后 app 里的 header main footer 都是要做居中的，3 个flex 安排上 12345.app&gt;*&#123; display: flex; justify-content: center; align-items: center;&#125; 接下来给三个块分配 grid 空间 123456789header&#123; grid-area: header;&#125;main&#123; grid-area: main;&#125;footer&#123; grid-area: footer;&#125; 然后先来做 header 吧 搜索header 包含两个框，输入和按钮，并且还要居中 所以决定用一个 div 包住这两个，然后把 div 居中，里面一左一右摆放 先做个定宽居中 div 1234.searchBox&#123; width: 80%; max-width: 800px;&#125; 之所以这里不用写居中，是因为容器 header 已经定义了 flex 居中了 然后写搜索框宽度，显然这个是自适应的 那么反过来，先决定 button 的样式 首先让 button 宽 80px 吧 搜索 然后为了 button 好看，一般会给 padding 搜索 接下来背景色给个浅蓝色吧，同时字给白色（为了看得见） 搜索 这边框好丑，我要给白边加圆角 搜索 现在就还挺好看的 然后给一下上下 margin，以及为了同行显示的 inline-block，可以得到如下 CSS 12345678910#submit&#123; width: 80px; padding: 8px 12px; margin: 8px 0; display: inline-block; border: 1px solid #ccc; border-radius: 4px; color: white; background-color: cornflowerblue;&#125; 再来做一个搜索框 首先给个 padding 让字显示位置不要那么贴边 然后再和 button 一样弄好看点 最后再弄个计算宽度来自适应 可以得到如下 CSS 12345678#keyword&#123; width: calc(100% - 100px); padding: 8px 12px; margin: 8px 0; display: inline-block; border: 1px solid #ccc; border-radius: 4px;&#125; 搜索就做好了！ 主容器首先要让弹窗不能影响我们的布局，于是把弹窗显示去掉 display: none; 即可去除 之所以选用 display none，是因为它不会渲染到页面上 而 visibility hidden 虽然不保留事件，但还是会渲染到页面上占据空间 opacity 更离谱，事件都还留着 然后开始做主容器内容 显然主容器的每列是平均布局，有多列 多列适合 flex column，但是平均布局不能用 space-between，否则空间分配会失常 所以先得到容器样式 123456789.container&#123; width: 100%; min-width: 300px; max-width: 1200px; height: 100%; display: flex; justify-content: center; flex-wrap: wrap;&#125; 接下来每一个标签页，都有自己的一张卡片一样的样式 在卡片中，也有 logo、description、叉叉等三部分内容 其中叉叉是绝对定位在右上角的，前两个则是纵向居中排列在卡片中 可以得到卡片样式 12345678910111213.card&#123; width: 200px; height: 160px; margin: 20px; box-shadow: 0 0 1px black; background-color: white; position: relative; display: flex; flex-direction: column; justify-content: center; align-items: center; cursor: pointer;&#125; 这里给 margin 预留了足够位置，所以不需要使用 负 margin 法 来平衡 然后给叉叉定位 1234567.delete&#123; position: absolute; font-size: 30px; top: 2px; right: 10px; visibility: hidden;&#125; 因为平时没选中的时候是看不见叉叉的，所以 visibility: hidden; 然后定义 logo 样式，此处我使用文本而不是矢量图 123.logo&#123; font-size: 80px;&#125; 慢着，描述变长的时候，描述怎么换行了？ 给描述上一个不许换行的样式 123.desp&#123; white-space: nowrap;&#125; 接下来定义选中卡片的时候的行为 显然选中的行为一般都是变大或者上浮，此处选择上浮 123.card:hover&#123; transform: translateY(-10px);&#125; 上浮不能太突兀，给卡片加个过渡动画吧 123.card&#123; transition: all 0.3s;&#125; 当选中的时候，叉叉也要能看到才对 123.card:hover .delete&#123; visibility: visible;&#125; 但是这时候，点叉叉还是点不到，怎么回事呢？因为叉叉浮起不够高，点到别的了！ 让叉叉浮起来 123.delete&#123; z-index: 1;&#125; OK，主容器部分做好了 弹窗弹窗有几个要点 绝对定位在视口中央 三列内容，纵向居中排列，加一个叉 当它显示时，按键等级（层叠上下文）要比主页高 于是可以得到如下 CSS 12345678910111213141516#tab&#123; width: 400px; height: 300px; background-color: white; /* display: flex; */ display: none; justify-content: center; align-items: center; flex-direction: column; position: fixed; box-shadow: 0 0 1px black; left: 50%; top: 50%; transform: translate(-50%,-50%); z-index: 1;&#125; 至于 z-index 为什么是 1 呢？ 因为我们刚才给 container 里的 card 里的 delete 赋值了 z-index=1，所以导致 container 的层级也升高了，所以这时候 tab 的 z-index 要不低于 container，才能浮在 container 上方 接下来为了方便布局，让所有内部子元素都以块级元素形式显示，并设置上下边距 1234#tab&gt;*&#123; display: block; margin: 20px 0;&#125; tab 里的 delete 和 card 里的不一样，默认是显示的 1234#tab&gt;.delete&#123; visibility: visible; margin: 0;&#125; 再修整一下 tab 里元素的样式，弄好看点 1234567891011#url,#desp&#123; padding: 10px;&#125;#tab&gt;button&#123; border: 1px solid #0381aa; color: #fff; background-color: #00a7de; padding: 10px; width: 100px;&#125; 响应式我们刚才都是以 PC 端为基准开发的，现在要支持移动端，怎么办呢？ 答案就是一个媒体查询就完事了 分析可得在移动端，容器的 3x3 布局变为 1x3 布局，card 也最多只能排列下两个 所以可得 CSS 12345678910111213141516@media (max-width: 600px)&#123; .app&#123; grid-template-areas: "header header header" "main main main" "footer footer footer"; &#125; .card&#123; width: 35vw; height: 28vw; margin: 3vw; &#125; .logo&#123; font-size: 60px; &#125;&#125; 响应式这样就完成了，不错吧？ JS基本的骨架弄好了，现在要赋予这个项目血肉 搜索从上到下，第一个就是搜索 很简单，只要研究一下百度的搜索格式就可以了 123456function search() &#123; let baseUrl = 'https://www.baidu.com/s?ie=UTF-8&amp;wd=' let keyword = document.querySelector('#keyword').value keyword = keyword.replaceAll(' ', '%20') window.open(baseUrl + keyword)&#125; 注意搜索中要改一下默认的 http 字符转义问题，一般是空格转换成 %20 就行了 标签页渲染然后是最重要的标签页渲染的功能 为了体现效果，此处先多搞几个重复的标签页 12345678910111213let base_navs = [&#123; 'href': 'https://ringoer.com', 'desp': 'Ringoer\'s Site', 'logo': 'R' &#125;,&#123; 'href': 'https://baidu.com', 'desp': '百度', 'logo': 'B' &#125;,&#123; 'href': 'https://baidu.com', 'desp': '百度', 'logo': 'B' &#125;,&#123; 'href': 'https://baidu.com', 'desp': '百度', 'logo': 'B' &#125;,&#123; 'href': 'https://baidu.com', 'desp': '百度', 'logo': 'B' &#125;,&#123; 'href': 'https://baidu.com', 'desp': '百度', 'logo': 'B' &#125;,&#123; 'href': 'https://baidu.com', 'desp': '百度', 'logo': 'B' &#125;,&#123; 'href': 'https://baidu.com', 'desp': '百度', 'logo': 'B' &#125;,&#123; 'href': 'https://baidu.com', 'desp': '百度', 'logo': 'B' &#125;,&#123; 'href': 'https://baidu.com', 'desp': '百度', 'logo': 'B' &#125;,&#123; 'href': 'https://baidu.com', 'desp': '百度', 'logo': 'B' &#125;,&#123; 'href': 'https://baidu.com', 'desp': '百度', 'logo': 'B' &#125;,&#123; 'href': 'https://baidu.com', 'desp': '百度', 'logo': 'B' &#125;,] 接下来，渲染到页面上 首先读取列表里的每个项目 123456let container = document.querySelector('.container')container.innerHTML = ''for (let i = 0; i &lt; navList.length; i++) &#123; let nav = navList[i] container.appendChild(createCard(i, nav.href, nav.desp, nav.logo))&#125; 然后在最后加上”添加”标签页 1container.appendChild(createCard(navList.length, '/', '添加', '+')) 逻辑就完成了 那么来看看 createCard 方法 12345678910111213141516171819202122function createCard(i, href, desp, logo) &#123; let card = document.createElement('div') card.className = 'card' card.addEventListener('click', () =&gt; &#123; if (logo === '+') &#123; let tab = document.querySelector('#tab') tab.style.display = 'flex'; return &#125; window.open(href) &#125;, false) if (logo === '+') &#123; card.innerHTML = '&lt;div class="logo"&gt;' + logo + '&lt;/div&gt;' + '&lt;div class="desp"&gt;' + desp + '&lt;/div&gt;' &#125; else &#123; card.innerHTML = '&lt;div class="delete" onclick="deleteCard(' + i.toString() + ',event)"&gt;×&lt;/div&gt;' + '&lt;div class="logo"&gt;' + logo + '&lt;/div&gt;' + '&lt;div class="desp"&gt;' + desp + '&lt;/div&gt;' &#125; return card&#125; 先动态创建 card，然后根据是不是”添加”标签页，来动态绑定事件并插入子元素，最后返回 card 为了可以正常打开 tab 页，”添加”标签页的 click 事件让 tab 页的 display 从 none 变成了 flex，就可以显示了 可以看到里面提及了 delete 按钮拥有的 delete 事件 123456789function deleteCard(i, event) &#123; let ans = confirm('确定要删除这个标签吗？') if (ans) &#123; navList.splice(i, 1) draw() &#125; event.stopPropagation()&#125; 这里一定要阻止冒泡，否则事件一旦冒泡，就会触发 card 的点击事件，导致虽然删除了 card，但是发生了跳转 这时候发现，我刷新一下怎么就重置了？？ 所以要保存用户使用数据 为了方便起见，这里保存到 localStorage 在初始化的时候先读取内容 12345let navList = JSON.parse(localStorage.getItem('navList'))if (!navList) &#123; navList = base_navs&#125;draw() 然后在每次渲染之后都存数据 1localStorage.setItem('navList', JSON.stringify(navList)) 这样就可以得到完整的 draw 方法 12345678910function draw() &#123; let container = document.querySelector('.container') container.innerHTML = '' for (let i = 0; i &lt; navList.length; i++) &#123; let nav = navList[i] container.appendChild(createCard(i, nav.href, nav.desp, nav.logo)) &#125; container.appendChild(createCard(navList.length, '/', '添加', '+')) localStorage.setItem('navList', JSON.stringify(navList))&#125; 这样渲染功能也大功告成了！ 新增最后是 tab 页提供的新增功能 分析需求可得 只允许 http 或 https 开头的 url 取 url 去掉协议后的第一个字符作为 logo 渲染到最后一个，但还在”添加”标签页之前 于是可得如下 js 12345678910111213141516function insertCard() &#123; let url = document.querySelector('#url').value let desp = document.querySelector('#desp').value if (!url.match('[http|https]://*')) &#123; alert('请输入包含http或https的链接格式！') return &#125; else &#123; let tab = document.querySelector('#tab') tab.style.display = 'none'; &#125; let logo = (url.split('//')[1])[0].toUpperCase() navList.push(JSON.parse('&#123; "href": "' + url + '", "desp": "' + desp + '", "logo": "' + logo + '" &#125;')) draw()&#125; 这是主要功能，但是这个 tab 页还得支持关闭呀 1234function cancel() &#123; let tab = document.querySelector('#tab') tab.style.display = 'none';&#125; 重新 none 就好了 ok，运行试试吧，这就是你的前端导航项目 改进其实简单的项目还有很多值得改进的地方 比如我这个写法，并没有完美复刻设计图 大致有以下改进点 完美复刻设计图 改用 vue 或 react 做这个项目 支持用户在线保存设置 改善 logo，支持图片 以上点就够喝一壶了2333 那就到这里了 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>project</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[同源策略与跨域方案]]></title>
    <url>%2Ffrontend%2Fcross-domain%2F</url>
    <content type="text"><![CDATA[有时候浏览器的 ajax 请求不能正常拉取到别的站点的数据，这是为什么呢？ 同源策略为了阻止一些低成本的跨站攻击，浏览器采取了同源策略 同源策略要求 3 个标准都要完全一致 协议 域名 端口 三个只要有任何一个不一致，那就认为不是同源，这时候的请求虽然能成功发到目标服务器，但并不能取得数据，因为数据被浏览器扣留了 举几个例子（http 默认地址是 80 端口，https 是 443，此时写与不写并无区别） 站点 A 站点 B 是否同源 http://ringoer.com/ https://ringoer.com/ 否，协议不同 https://www.ringoer.com/ https://ringoer.com/ 否，域名不同 https://ringoer.com:12450/ https://ringoer.com/ 否，端口不同 https://ringoer.com/archives/ https://ringoer.com/tags/index.html 是 同源又称之为”同一个域”（不是域名） 跨域但有的时候不得不跨站请求数据，比如前后端分离的时候，服务器地址往往和前端地址不一样 为了解决同源策略带来的限制，提出了跨域方案 常用的跨域方案有 JSONP 跨域和 CORS 跨域，还有一些其它的基于 iframe 的跨域，此处不介绍 JSONP 跨域JSONP 跨域是在 IE 上的一种妥协 主要原理是利用 js 脚本可以任意引用，从而在 A 站与 B 站达成协议的情况下，B 站直接在 js 脚本里包藏数据，A 站直接引用这个脚本 但是 A 站引用后也不能直接看到脚本内容，所以通常采用的方式是 A 站预定义一个数据处理方法，B 站在脚本中直接调用该方法并传入数据 同时一般为了保持隐秘性，会让每次的数据处理方法名都不一样 一个 JSONP 实例如下 首先准备两台服务器模拟 A 站和 B 站 12345678910111213141516var express = require('express');var fs = require('fs')var ringoer = express();ringoer.get('/', (req, res) =&gt; &#123; res.sendFile(__dirname + '/index.html');&#125;);var serverringoer = ringoer.listen(9999, () =&gt; &#123; var host = serverringoer.address().address; var port = serverringoer.address().port; console.log("启动于 http://%s:%s", host, port);&#125;) 1234567891011121314151617181920212223242526272829303132var express = require('express');var fs = require('fs')var app = express();app.get('/', (req, res) =&gt; &#123; res.sendFile(__dirname + '/index.html');&#125;);app.get('/friends.json', (req, res) =&gt; &#123; res.sendFile(__dirname + '/friends.json');&#125;);app.get('/friends.js', (req, res) =&gt; &#123; let str = fs.readFileSync('friends.js').toString() let json = fs.readFileSync('friends.json').toString() let random = req.query.callback str = str.replace('&#123;&#123;callback&#125;&#125;', random.toString()) .replace(`'&#123;&#123;data&#125;&#125;'`, json) console.log(str) res.send(str);&#125;);app.get('/static/*', (req, res) =&gt; &#123; res.sendFile(__dirname + req.path);&#125;);var server = app.listen(8888, () =&gt; &#123; var host = server.address().address; var port = server.address().port; console.log("启动于 http://%s:%s", host, port);&#125;) 然后准备一个 html 用于显示 A 站的页面，请求 B 站的数据 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt; &lt;title&gt;Hello World&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello World&lt;/h1&gt; &lt;button id="test"&gt;点我发请求&lt;/button&gt; &lt;div id="data"&gt;&lt;/div&gt; &lt;script&gt; test.onclick = () =&gt; &#123; let random = Math.random().toString() let script = document.createElement('script') script.src = 'http://qq.com:8888/friends.js?callback=' + random window[random] = (res) =&gt; &#123; data.innerHTML = JSON.stringify(res) &#125; document.body.appendChild(script) script.onload = res =&gt; &#123; script.remove() &#125; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; html 里的内部 js 定义了一个随机函数，函数的效果是将字符串塞进显示区域内 同时定义了 script 标签取回后的动作，是执行取回的 js 后（默认动作），移除自身这个标签 再准备一个 friend.js 用于给 B 站返回 123window['&#123;&#123;callback&#125;&#125;']( '&#123;&#123;data&#125;&#125;') 该代码执行一个函数，传入指定的数据 这里是保留两个占位符，用服务器取得的请求参数（B 站代码的第 15 行）和数据库里取回的数据来填充 所以还要再写一个 json 用来临时顶替数据库保存数据 12345678910[ &#123; "name": "ringoer", "age": 20 &#125;, &#123; "name": "enatsu", "age": 20 &#125;] 先设置一下本地的 hosts 文件改变寻址，再启动两台服务器，访问 A 站的首页并点击按键发送请求，就可以看到原本不能取得的数据被打印在了 A 站首页的内容区域 CORS 跨域CORS 跨域是利用 Access-Control-Allow-Origin 的请求头，来设置跨域允许 该请求头一般是在服务端处理请求，要回送响应的时候，设置在响应包中 该请求头的值可以是星号表示允许所有跨域，也可以是由分号分隔的域名列表 一个 CORS 实例如下 首先准备两台服务器模拟 A 站和 B 站 123456789101112131415var express = require('express');var ringoer = express();ringoer.get('/', (req, res) =&gt; &#123; res.sendFile(__dirname + '/index.html');&#125;);var serverringoer = ringoer.listen(9999, () =&gt; &#123; var host = serverringoer.address().address; var port = serverringoer.address().port; console.log("启动于 http://%s:%s", host, port);&#125;) 1234567891011121314151617181920212223var express = require('express');var app = express();app.get('/', (req, res) =&gt; &#123; res.sendFile(__dirname + '/index.html');&#125;);app.get('/friends.json', (req, res) =&gt; &#123; res.setHeader('Access-Control-Allow-Origin', 'http://enatsu.com:9999') res.sendFile(__dirname + '/friends.json');&#125;);app.get('/static/*', (req, res) =&gt; &#123; res.sendFile(__dirname + req.path);&#125;);var server = app.listen(8888, () =&gt; &#123; var host = server.address().address; var port = server.address().port; console.log("启动于 http://%s:%s", host, port);&#125;) 然后准备一个 html 用于显示 A 站的页面，请求 B 站的数据 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt; &lt;title&gt;Hello World&lt;/title&gt; &lt;link rel="stylesheet" href="static/style.css"&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello World&lt;/h1&gt; &lt;button id="test"&gt;点我发请求&lt;/button&gt; &lt;div id="data"&gt;&lt;/div&gt; &lt;script&gt; test.onclick = () =&gt; &#123; let xhr = new XMLHttpRequest(); xhr.open('GET', 'http://qq.com:8888/friends.json') xhr.onreadystatechange = () =&gt; &#123; if (xhr.readyState === 4 &amp;&amp; xhr.status === 200) &#123; data.innerText = xhr.response &#125; &#125; xhr.send() &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; html 里的内部 js 定义了一个 ajax，并规定当 ajax 返回数据时，填充数据到内容区域 再准备一个 friend.json 用于给 B 站返回 12345678910[ &#123; "name": "ringoer", "age": 20 &#125;, &#123; "name": "enatsu", "age": 20 &#125;] 先设置一下本地的 hosts 文件改变寻址，再启动两台服务器，访问 A 站的首页并点击按键发送请求，就可以看到数据成功填充，并且控制台的请求包有 ‘Access-Control-Allow-Origin’ 字段 简单请求和非简单请求但是刚刚的 CORS 跨域只是最简单的 CORS 跨域，其实 CORS 跨域还有很多限制 浏览器将CORS请求分成两类：简单请求和非简单请求 只要同时满足以下两大条件，就属于简单请求 请求方法是以下三种方法之一 HEAD GET POST 刚才的例子中我们采用的就是 GET 方法 HTTP 请求包的头部不含有除以下字段外的其它字段 Accept Accept-Language Content-Language Last-Event-ID Content-Type，只能是空或以下三种之一 application/x-www-form-urlencoded multipart/form-data text/plain 可见 application/json 请求是不行的 这是为了兼容表单，因为历史上表单一直可以发出跨域请求 ajax 的跨域设计就是，只要表单可以发，ajax 就可以直接发 说是上面那么说，其实实际开发的时候谁记得住（ 只要记得把 Chrome 开发者工具的 Disable cache 开了，然后看看请求有没有发个 options 预检就行了 如果后端没有配置的话，任何非简单请求都不会被放行 简单请求对于简单请求，浏览器会在请求包中增加一个 Origin 字段，然后直接发出 CORS 请求 如果 Origin 指定的源不在许可范围内，服务器就会返回一个正常的 HTTP 响应，浏览器发现响应包中没有 Access-Control-Allow-Origin 字段，就会抛出一个错误 如果成功返回了，浏览器得到的响应可能会多出几个字段 1234Access-Control-Allow-Origin: http://enatsu.comAccess-Control-Allow-Credentials: trueAccess-Control-Expose-Headers: AuthorizationContent-Type: text/html; charset=utf-8 其中前三个都是和 CORS 高度相关的头部，且第一个和第四个是一定会出现的头部 Access-Control-Allow-Origin如果 CORS 成功返回，则该字段只能是两种情况之一 星号，表示允许所有跨域 与请求中 Origin 字段相同 Access-Control-Allow-Credentials浏览器在 CORS 请求中默认是不发送 Cookie 的 如果服务器允许该源的 CORS 请求发送 Cookie，将该字段设为 true 即可 该字段不能设为 false，如果想设为 false，可以直接删除该字段 Access-Control-Expose-Headers浏览器在 CORS 请求中，响应包的默认头部一般只有以下 6 个基本字段 Cache-Control Content-Language Content-Type Expires Last-Modified Pragma 但是看到 Etag 什么的也别惊讶，毕竟实际开发不能认死理对吧 如果需要让浏览器拿到其它字段，服务器必须设置该字段的值 比如上例中设置该字段的值为 Authorization，则浏览器就可以从响应头部中取得字段 Authorization 的值 Content-Type该字段取值取决于返回的数据类型，不解释了 withCredentials刚才说到浏览器在 CORS 请求中默认是不发送 Cookie 的，如果有这个需求，应该由服务器设置 Access-Control-Allow-Credentials 为 true 但其实这样还不够，原则上来说，不止服务端要同意，前端也要主动设置 XMLHTTPRequest 的 withCredentials 为 true，否则即使服务器同意，前端也不会发送 Cookie 但是呢，还是有的浏览器搞特殊，不设也会发，所以刚才只是说原则上是这样，2333 除了这两个要求之外，当有跨域 Cookie 需求的时候，Access-Control-Allow-Origin 的值也不能是星号，必须是具体值 非简单请求当你请求动词是 PUT、DELETE 之类的时候，或者 Content-Type 是 application/json 的时候，就是非简单请求 非简单请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求（preflight） 预检请求浏览器会先向目标服务器发送一个 OPTIONS 请求，询问服务器当前域名是否被许可，以及允许哪些 HTTP 动词和头部字段 预检请求除了请求方法是 OPTIONS 之外，还包含三个关键字段 Origin，表示请求源 Access-Control-Request-Method，表示浏览器会用到哪些 HTTP 请求动词 Access-Control-Request-Headers，表示浏览器会发送哪些简单请求之外的头部字段，用逗号隔开 上述前两个字段都是必须给出的 预检请求的响应服务器确认了上述三个字段的值之后，就会做出响应 如果服务器拒绝响应，会返回一个正常的 HTTP 响应，但是没有任何头部字段，浏览器就会认为服务器拒绝了跨域预检申请，此时会触发 ajax 或 XMLHttpRequest 的 error 事件 如果服务器同意了预检请求，就会在返回的响应包中加入一些特殊的头部字段，一般有以下 4 种 Access-Control-Allow-Methods，指示服务器接受哪些 HTTP 方法，必须 Access-Control-Allow-Headers，指示服务器允许的头部字段 如果请求中包含 Access-Control-Request-Headers 字段，则响应中该字段是必须的 Access-Control-Allow-Credentials，指示是否允许跨域 Cookie，与简单请求中相同 Access-Control-Max-Age，指示当前预检请求的有效期，单位为秒，在有效期内不需要再次发出第二次预检请求 预检请求之后即便通过了预检，浏览器和服务器之间的交互还是存在间隙，不能像真同源一样通信 具体表现在浏览器会在每条请求中都加入 Origin 字段，服务器则会在每条响应中都加入 Access-Control-Allow-Origin 字段 总结CORS 跨域，功能更强大，但是细节更复杂，需要开发者盯紧开发者工具，并且和后端的同学协调好（但是也便于甩锅2333 JSONP 跨域只支持 GET 方法，但是支持旧时代的浏览器（比如 IE），以及向某些达成合意但是因为某些原因不支持 CORS 的网站发送跨域请求 参考链接跨域资源共享 CORS 详解 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>browser</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[异步回调与Promise]]></title>
    <url>%2Ffrontend%2Fpromise%2F</url>
    <content type="text"><![CDATA[在 ajax 中，我们提到了 Promise 式封装 那么什么是 Promise 呢？ 首先要来介绍一下什么是异步回调 我们在计算机网络中学过通信方式一般有三种：全双工、半双工、单工 最理想的方式当然是全双工 异步回调异步异步也是一种全双工 简单来说，就是当一个任务发出后，发件人不需要等待执行方的返回结果，而可以先去做其它事情，等待 比如你加某个人为 qq 好友，发出请求后你就不需要管了，可以自己先去聊天，等到对方同意或拒绝你的好友请求，你才会收到通知，回来处理这件事 回调那回调又是什么呢？回调其实解决了异步的一个非常重要的问题——我要这个结果做什么用，简单说就是当异步结果返回的时候，该做什么呢 在上文 qq 好友的例子中，qq 通知你好友请求返回结果了，你根据结果做出的动作就是回调 比如好友请求通过，你的回调就是找好友聊天 比如失败，你的回调可能是自我分析是什么情况，也可以是什么都不做 在浏览器中，就是浏览器的异步请求取回结果的时候，如果是成功，要进行什么处理、给出什么输出呢？失败的话要不要处理、怎么处理这个错误呢？ 举个例子，就是 setTimeout 12const fn = ()=&gt;console.log('success')setTimeout(fn,1000) 执行 setTimeout 后，将在 1000ms 后执行 fn 此处的 fn 就是回调函数 异步和回调的关系上文可以看出，回调函数其实就是事件完成后，处理结果的方法 但其实事件不一定是异步的，也可以是同步的 即便是同步的函数，也可以使用回调函数，区别只不过是异步任务执行后可以先做别的再收通知，同步任务执行后必须原地等通知罢了 但是如果一层层回调，会变成什么样呢 1234567setTimeout(()=&gt;&#123; setTimeout(()=&gt;&#123; setTimeout(()=&gt;&#123; run() &#125;,0) &#125;,0)&#125;,0) 看，是不是随着回调层数的增加，代码逐渐向右突出。。。这也太难看了 这就是回调地狱 而为了解决这个问题，提出了 Promise Promise 定义Promise 是将“生产者代码”和“消费者代码”连接在一起的一个特殊的 JavaScript 对象。 用我们的类比来说：这就是就像是“订阅列表”。 “生产者代码”花费它所需的任意长度时间来产出所承诺的结果，而 “promise” 将在它准备好时，将结果向所有订阅了的代码开放。 Promise 用途一开始主要是为了解决回调地狱而产生的 现在则已经是前端异步处理的统一解决方案 Promise 用法一般在函数中作为函数返回值，例如 123456function task()&#123; return new Promise((resolve,reject)=&gt;&#123; console.log('promise 正在运行') resolve(233) &#125;)&#125; 上述代码也可以直接赋值 1234let task = new Promise((resolve,reject)=&gt;&#123; console.log('promise 正在运行') resolve(233)&#125;) 首先介绍一下，Promise 有以下状态 pending，Promise 尚未返回结果 settled，Promise 已经返回结果，但不确定是成功还是失败 fulfilled，Promise 已经成功（resolve）返回 rejected，Promise 已经失败（reject）返回 可见，Promise 的构造函数要求传入一个包含两个参数的 executor（可执行代码段），两个参数分别是 Promise 给出的两个函数，分别指示 resolve 和 reject 调用的函数 当然两个参数也可以叫别的名字，只要顺序不变就没有影响，但是一般都是叫 resolve 和 reject 这段 executor 是立即执行的，但是对结果的处理是异步的，直到 settled 之前，这个 Promise 都不算结束 即使在 executor 中，半路上就 resolve/reject 了，executor 的代码段还是会完整执行，不会中断 那么怎么处理 Promise 的返回结果呢？ Promise 方法Promise 的 prototype 上有 3 个重要的回调方法 then catch finally 3 个方法都支持链式调用 thenthen 方法的函数声明伪代码如下 1234promise.then( function(result) &#123; /* handle a successful result */ &#125;, function(error) &#123; /* handle an error */ &#125;) 可以接受两个参数，分别表示对于 fulfilled 和 rejected 状态的 Promise 结果的处理函数 第一个函数接受一个参数，表示成功的结果 第二个函数接受一个参数，表示失败的原因 其中 fulfilled 结果处理函数是必要的，rejected 处理函数可以不写出，但如果 Promise 被 reject，而没有其它地方处理这个 error 的话，会直接报错，停止解释器 上例中的代码，加上 then 回调后，变为如下模样 123456let task = new Promise((resolve,reject)=&gt;&#123; console.log('promise 正在运行') resolve(233)&#125;).then(res=&gt;&#123; console.log(res) // expected output: 233&#125;) then 可以多级传递，比如 123456789let task = new Promise((resolve,reject)=&gt;&#123; console.log('promise 正在运行') resolve(233)&#125;).then(res=&gt;&#123; console.log(res) // expected output: 233 return 114514&#125;).then(res=&gt;&#123; console.log(res) // expected output: 114514&#125;) 链式调用中，结果会沿着链传递 但是分开调用是不对的，比如 1234567891011let task = new Promise((resolve,reject)=&gt;&#123; console.log('promise 正在运行') resolve(233)&#125;)task.then(res=&gt;&#123; console.log(res) // expected output: 233 return 114514&#125;)task.then(res=&gt;&#123; console.log(res) // expected output: 233&#125;) 分开调用，结果不会互相传递 then 中除了被动出错，也可以使用 throw 子句主动抛出错误 catch上例中使用 catch 的话，一般可以写成以下模样 12345678let task = new Promise((resolve,reject)=&gt;&#123; // executor console.log('promise 正在运行') reject(233)&#125;).then(res=&gt;&#123; // then console.log(res)&#125;).catch(err=&gt;&#123; console.log(err)&#125;) 如果在 Promise 的 executor 或者 then 中出错了，都可以用 catch 捕获错误，因为 catch 在他们的下游 此时如果是 executor 出错，then 会被跳过，沿着 Promise 链往下寻找 catch 直到找到第一个 catch 为止 catch 既然支持链式调用，那么 catch 自然也可以再抛出 比如 1234567891011let task = new Promise((resolve,reject)=&gt;&#123; // executor console.log('promise 正在运行') reject('2323')&#125;).then(res=&gt;&#123; // then console.log(res)&#125;).catch(err=&gt;&#123; if(err!=='233') throw err console.log('err 233 is catched')&#125;).catch(err=&gt;&#123; console.log(err)&#125;) 注意，此处要使用 throw 子句来抛出，不能是 return 如果是 return，接下来的结果就要用 then 来接收 finally上例中使用 finally 的话，一般可以写成以下模样 123456789let task = new Promise((resolve,reject)=&gt;&#123; // executor resolve(233)&#125;).finally(()=&gt;&#123; console.log('promise 开始运行')&#125;).then(res=&gt;&#123; console.log(res) // expected output: 233&#125;).catch(err=&gt;&#123; console.log(err)&#125;) 显然，finally 不一定要写在最后，一般只是用来做阶段性封口而已 比如此处，在 executor 执行完毕后，不论 executor 是否出错，都会执行 finally，告诉用户 promise 开始了 然后，不论是 resolve 还是 reject，结果都会越过 finally 传递到可以处理这个结果的回调 以上就是 Promise 的基本用法 现在来深究一下 Promise 这么个好东 Promise 手写面试必考的手写 Promise 部分，你会多少呢？ Promise首先先实现基本的 Promise 功能——resolve 和 reject 容易想到以下基本形 123function P(executor)&#123; executor(resolve,reject)&#125; 那么 resolve 和 reject 从哪里来？显然要由 Promise 提供 这两个函数还兼顾了取结果和改状态的效果，所以得到如下形状 12345678910111213141516171819202122function P(executor)&#123; this.status = 'pending' this.result = undefined try&#123; executor(this.resolve.bind(this),this.reject.bind(this)) &#125; catch(err)&#123; this.reject(err) &#125;&#125;P.prototype.resolve = function(result)&#123; if(this.status === 'pending')&#123; this.status = 'fulfilled' this.result = result &#125;&#125;P.prototype.reject = function(err)&#123; if(this.status === 'pending')&#123; this.status = 'rejected' this.result = err &#125;&#125; 修改数据的时候，要注意不能随便覆盖结果 注意，我们要在 resolve 和 reject 中使用访问 this 的 status 和 result，所以这两个函数 必须有自己的 this，不能是箭头函数 必须指向当前操作的对象，所以要使用 bind 绑定 this 这样 Promise 最基本的功能就实现了，接下来实现最重要的功能 then Promise.then容易得到以下形状 12345P.prototype.then = function(success,fail)&#123; if(this.status==='fulfilled') this.result = success(this.result) else this.result = fail(this.result) return this&#125; 但是这时候我们发现，这个 then 只能执行同步的链式调用 那怎么异步调用呢？答案就是发布订阅模式 可以得到以下代码 1234567891011121314151617181920212223242526272829303132333435363738394041function P(executor)&#123; this.status = 'pending' this.result = undefined this.onfulfilled = [] this.onrejected = [] // 添加两个事件组 try&#123; executor(this.resolve.bind(this),this.reject.bind(this)) &#125; catch(err)&#123; this.reject(err) &#125;&#125;P.prototype.resolve = function(result)&#123; if(this.status === 'pending')&#123; this.status = 'fulfilled' this.result = result this.onfulfilled.map(event=&gt;event.call(this)) &#125;&#125;P.prototype.reject = function(err)&#123; if(this.status === 'pending')&#123; this.status = 'rejected' this.result = err this.onrejected.map(event=&gt;event.call(this)) &#125;&#125;P.prototype.then = function(success,fail)&#123; if(this.status === 'pending')&#123; this.onfulfilled.push(function()&#123; this.result = success(this.result) &#125;) this.onrejected.push(function()&#123; this.result = fail(this.result) &#125;) &#125; else &#123; if(this.status === 'fulfilled') this.result = success(this.result) else this.result = fail(this.result) &#125; return this&#125; 运行测试例 12345678let p=new P((resolve,reject)=&gt;&#123; console.log('start') setTimeout(()=&gt;resolve(233),0) console.log('end')&#125;).then(res=&gt;&#123; console.log(res++) return 666&#125;).then(res=&gt;console.log(res)) 可以得到以下结果 1234startend233666 现在 then 也可以支持异步返回了！但是 catch 似乎还没实现，不过我水平不够了，到此为止了2333 Promise.allPromise.all 的核心要义就是传入多个 Promise，然后按顺序返回所有结果 容易想到以下形状 1234567891011121314151617181920P.all = function(promises)&#123; return new P((resolve,reject)=&gt;&#123; try&#123; let n = 0, len = promises.length let ans = [] for(let i in promises)&#123; P.resolve(promises[i]) .then(res=&gt;&#123; ans[i] = res n++ if(n === len)&#123; resolve(ans) &#125; &#125;) &#125; &#125;catch(err)&#123; reject(err) &#125; &#125;)&#125; 但是我们还需要一个 P.resolve 来得到一个新的 P 所以还要写 123456P.resolve = data =&gt; &#123; if(data instanceof P)&#123; return data &#125; return new P((resolve,reject)=&gt;resolve(data))&#125; 运行以下测试例 123456789let promise1 = P.resolve(3)let promise2 = new P(function(resolve, reject) &#123; setTimeout(resolve, 100, 'foo')&#125;)let promise3 = 42P.all([promise1, promise2, promise3]).then(function(values) &#123; console.log(values)&#125;); 可得结果 1[3, &quot;foo&quot;, 42] Promise.racePromise.race 的核心要义就是传入多个 Promise，然后返回第一个决议的结果，无论是成功还是失败 其实把 all 的计数器去掉就可以了 容易想到以下形状 12345678910111213141516P.race = function(promises)&#123; return new P((resolve,reject)=&gt;&#123; try&#123; let ans = undefined for(let i in promises)&#123; P.resolve(promises[i]) .then(res=&gt;&#123; ans = res resolve(ans) &#125;) &#125; &#125;catch(err)&#123; reject(err) &#125; &#125;)&#125; 运行以下测试例 1234567891011let promise1 = new P(function(resolve, reject) &#123; setTimeout(resolve, 500, 'one');&#125;)let promise2 = new P(function(resolve, reject) &#123; setTimeout(resolve, 100, 'two');&#125;)P.race([promise1, promise2]).then(function(value) &#123; console.log(value)&#125;) 可得结果 1two 完整的 Promise总结一下，可以得到如下的手写 Promise 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889function P(executor)&#123; this.status = 'pending' this.result = undefined this.onfulfilled = [] this.onrejected = [] try&#123; executor(this.resolve.bind(this),this.reject.bind(this)) &#125; catch(err)&#123; this.reject(err) &#125;&#125;P.prototype.resolve = function(result)&#123; if(this.status === 'pending')&#123; this.status = 'fulfilled' this.result = result this.onfulfilled.map(event=&gt;event.call(this)) &#125;&#125;P.prototype.reject = function(err)&#123; if(this.status === 'pending')&#123; this.status = 'rejected' this.result = err this.onrejected.map(event=&gt;event.call(this)) &#125;&#125;P.prototype.then = function(success,fail)&#123; if(this.status === 'pending')&#123; this.onfulfilled.push(function()&#123; this.result = success(this.result) &#125;) this.onrejected.push(function()&#123; this.result = fail(this.result) &#125;) &#125; else &#123; if(this.status === 'fulfilled') this.result = success(this.result) else this.result = fail(this.result) &#125; return this&#125;P.resolve = data =&gt; &#123; if(data instanceof P)&#123; return data &#125; return new P((resolve,reject)=&gt;resolve(data))&#125;P.reject = data =&gt; &#123; if(data instanceof P)&#123; return data &#125; return new P((resolve,reject)=&gt;reject(data))&#125;P.all = function(promises)&#123; return new P((resolve,reject)=&gt;&#123; try&#123; let n = 0, len = promises.length let ans = [] for(let i in promises)&#123; P.resolve(promises[i]) .then(res=&gt;&#123; ans[i] = res n++ if(n === len)&#123; resolve(ans) &#125; &#125;) &#125; &#125;catch(err)&#123; reject(err) &#125; &#125;)&#125;P.race = function(promises)&#123; return new P((resolve,reject)=&gt;&#123; try&#123; let ans = undefined for(let i in promises)&#123; P.resolve(promises[i]) .then(res=&gt;&#123; ans = res resolve(ans) &#125;) &#125; &#125;catch(err)&#123; reject(err) &#125; &#125;)&#125; 参考链接Promise 手写Promise.all和Promise.race 谢谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[事件循环]]></title>
    <url>%2Ffrontend%2Fevent-loop%2F</url>
    <content type="text"><![CDATA[我们经常看到 setTimeout 中延迟设置为 0，但真的是 0 延迟吗？ 事件循环这涉及到 javascript 的事件循环机制 众所周知，javascript 是单线程的，但是却支持异步，和 CPU 非常相似 对照 CPU 的进程调度，可以发现任务是排队执行的，并且有不同的优先级队列 但是我们可以发现，以下输出不是按顺序的 123456Promise.resolve().then(res=&gt;console.log('then1')).then(res=&gt;console.log('then4'))setTimeout(()=&gt;&#123;console.log('setTimeout1')&#125;,0)Promise.resolve().then(res=&gt;console.log('then2')).then(res=&gt;setTimeout(()=&gt;&#123;console.log('setTimeout2')&#125;,0))new Promise((resolve,reject)=&gt;&#123;console.log('promise')&#125;)Promise.resolve().then(res=&gt;console.log('then3')) 实际运行一下，得到输出是 1234567promisethen1then2then3then4setTimeout1setTimeout2 为什么会这样？？ 这就涉及到宏任务和微任务的概念 宏任务和微任务上文中提到单线程，任务队列，事件循环 之所以称之为 事件循环，是因为它经常按照类似如下的方式来被实现： 123while (queue.waitForMessage()) &#123; queue.processNextMessage();&#125; 一个线程中，事件循环是唯一的，但是任务队列可以拥有多个 任务队列又分为 macro-task（宏任务）与 micro-task（微任务），在最新标准中，它们被分别称为 task 和 jobs 用操作系统说法，就是进程和线程的区别 上例可以做如图表示 因为 new Promise 中 settled 之前的函数都是同步进行的，所以先打印 promise 当这一轮主线程执行完毕的时候，变为如图情况 此时，引擎发现，虽然当前主线程为空，但微任务队列不为空，所以当前宏任务还不算结束 于是引擎将微任务队列的任务都塞进主线程，这个过程就是 开启下一次事件循环 再次执行完毕后，变为如图情况 此时微任务队列依然不为空，再次优先执行微任务队列中的任务 执行完后变为如图情况 微任务队列终于空了！主线程开始取宏任务队列中的队首任务，变为如图情况 执行完毕后，发现微任务队列还是空的，于是再取宏任务，再空，终于所有任务都执行完了！ 这就是 JS 事件调度的过程，可见 setTimeout(fn,0) 并不是真正的 0 延迟执行，而是“尽可能快” 显然代码可以分为三种 立即执行的代码 微任务 宏任务 则事件循环的实现，大致有如下伪代码 12345678910111213141516171819while(true)&#123; while(!mainQueue.empty()) &#123; solve(mainQueue.front()); mainQueue.pop(); &#125; if(microQueue.empty())&#123; if(!macroQueue.empty())&#123; mainQueue.push(macroQueue.front()); macroQueue.pop(); render.run(); continue; &#125; &#125; else &#123; while(!microQueue.empty())&#123; mainQueue.push(microQueue.front()); microQueue.pop(); &#125; &#125;&#125; 文字描述如下 处理主线程中所有任务 若微任务队列为空 若宏任务队列不为空，则取宏任务队列的队首到主线程中，并在开启下一个事件循环前，进行页面渲染 若微任务队列不为空，则将微任务队列中所有任务加入主线程中 那么哪些是微任务，哪些是宏任务呢？ 一般有如下认定与支持 宏任务 浏览器 Node I/O 1 1 setTimeout 1 1 setInterval 1 1 setImmediate 0 1 requestAnimationFrame 1 0 script 代码块 1 0 微任务 浏览器 Node Promise.then/catch/finally 1 1 process.nextTick 0 1 MutationObserver 1 0 参考链接JavaScript的事件队列(Event Queue)—宏任务和微任务 并发模型与事件循环 谢谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[原生 ajax 详解]]></title>
    <url>%2Ffrontend%2Fajax%2F</url>
    <content type="text"><![CDATA[做过前后端分离的同学，肯定都知道 ajax 这个异步通信方法 定义首先肯定是要知道什么是 ajax，毕竟不能保证每个读这篇文章的人都是有前后端分离经验的人（ Ajax 即“Asynchronous Javascript And XML”（异步 JavaScript 和 XML），是指一种创建交互式、快速动态网页应用的网页开发技术，无需重新加载整个网页的情况下，能够更新部分网页的技术。 通过在后台与服务器进行少量数据交换，Ajax 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。 说这么复杂，其实就是一种前端主动向后端发送 HTTP 请求的技术 原生写法通过 JS 库 XMLHttpRequest 实现 一般写法如下 12345678let xhr = new XMLHttpRequest()xhr.open('GET','https://www.baidu.com/')xhr.onreadystatechange = res =&gt; &#123; if(xhr.readystate === 4 &amp;&amp; xhr.status === 200) &#123; console.log(res) &#125;&#125;xhr.send() 接下来逐条解释 创建请求通过 new XMLHttpRequest() 可以创建一个请求 设置请求方法和路径通过 xhr.open 方法可以设置请求方法和请求路径 通常 open 方法一般接受两个参数 method，表示 HTTP 动词，默认支持 ‘GET’ 或 ‘POST’，大小写没有影响，但一般是大写 url，表示请求的地址，本例中请求百度首页 请求默认是异步的，但是当然还可以设置请求为同步，但是严重影响用户体验，故本文不介绍 请求状态一般指 xhr.readystate 和 xhr.status readystatexhr 一般有 5 个 readystate，含义分别如下 readystate 含义 0 请求被创建 1 请求被 open 2 请求已经设置好回调，等待发送 3 请求已经被 send，等待响应 4 请求已经收到响应（不一定是成功） 因为 readystate === 4 不一定代表成功，所以还引入了第二个属性 status表示请求返回的响应的 HTTP 状态码 一般 2 开头的表示成功，此处为简单起见直接取 200 来判断 设置回调通过 readystatechange 事件来监听 readystate 的状态以回调 当 readystate 变为 4 时，会向回调函数中传入一个参数作为结果 如果成功，则是取回的值，如果失败，则多半没有内容，具体的可以查看 Chrome Network 中的 Response 所以，我们通过 xhr.onreadystatechange = 包含一个参数的函数，来获取响应的值，并在 readystate === 4 &amp;&amp; status === 200 ——响应成功时，打印取回的值 注意，设置回调函数要先于发送请求，否则请求异常 发送请求当必要的设置都完成后，就可以发送请求了 可以通过 xhr.send() 方法来发送请求 send 方法接受一个可选参数，表示附在请求 body 中的内容，一般是 POST 请求才使用，GET 请求请直接使用拼接 URL 其它功能当然，还有 abort 方法取消请求、setRequestHeader 方法设置请求头等，此处不介绍了，详询 mdn 封装初级封装就是把上文的代码封装成一个 ajax 方法 1234567891011function ajax(method,url,callback,data)&#123; let xhr = new XMLHttpRequest() xhr.open(method,url) xhr.onreadystatechange = res =&gt; &#123; if(xhr.readystate === 4 &amp;&amp; xhr.status === 200) &#123; callback(res) &#125; &#125; xhr.send(data)&#125;ajax('GET','https://www.baidu.com/',console.log) 高级一点的就是用 Promise 封装 12345678910111213function ajax(method,url,data)&#123; return new Promise((resolve,reject)=&gt;&#123; let xhr = new XMLHttpRequest() xhr.open(method,url) xhr.onreadystatechange = res =&gt; &#123; if(xhr.readystate === 4 &amp;&amp; xhr.status === 200) &#123; resolve(res) &#125; &#125; xhr.send(data) &#125;)&#125;ajax('GET','https://www.baidu.com/').then(res =&gt; console.log(res)) 再高级的我也不会了，就这样吧2333 axios现在只有练习和面试的时候会手写原生 ajax 了，正式开发中都是使用基于 ajax 原理的库 axios axios 的使用方法与上文中的 Promise 封装相似，详询 axios 中文网，或各个框架的本地化 axios 文档 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DOM 事件机制]]></title>
    <url>%2Ffrontend%2Fdom-event%2F</url>
    <content type="text"><![CDATA[弱弱地冒一个泡 经常听到冒泡捕获，那到底是什么东西呢？ 事件模型首先就要介绍一下 W3C DOM 事件模型 事件总体上分为三个阶段 捕获阶段，事件从父到子向下传递 目标阶段，事件传递到达发生事件的目标点 冒泡阶段，事件从子到父向上传递 不论是什么事件，没有特殊设置的情况下，都会按顺序经历这三个阶段 除非该事件被取消冒泡，才会在取消冒泡之后停止传递 前两个阶段不能停止传递 通过 on 赋值可以为元素绑定监听器，此时监听器一定是在事件冒泡阶段发生，且后赋值的监听器会覆盖之前的监听器 例如 button.onclick=()=&gt;{} 通过 addEventListener(eventName, listener, useCapture, priority, useWeakReference) 可以设置监听器是在事件的冒泡阶段还是捕获阶段发生，该方式可以为同一个元素的同一个事件设置多个监听 useCapture 默认值是 false，表示监听器在事件冒泡阶段发生，反之当为 true 时即表示在捕获阶段发生 priority 默认值是 0，表示所有同级的监听器按注册顺序进行。可以为个别监听器设置更高的优先级，优先级高的会在该阶段先执行，同优先级的依然按注册顺序进行 useWeakReference 默认值是 false，表示设置监听器为强引用，使得监听器不被垃圾回收，反之 true 则是允许回收 当要取消监听器、或要重新设定优先级时，可以使用 removeEventListener() 来取消监听器，之后再重新设定 每当事件触发一个监听器的时候，都会向监听器内传入两个默认参数 一个是 this，表示事件现在所处的元素 一个是 event，包含事件的完整信息 target 与 currentTarget通过在监听器中打印 event，可以发现两件事 target != currentTarget 如果先保存 event，事件结束后再打印，则会发现 target 变成了 null 对于第一点，target 是事件发生的最小元素，也就是唯一有目标阶段的元素 currentTarget 则是事件现在所处的位置，是传入监听器的 this 对于第二点，则涉及到事件消亡的知识，篇幅过大，此处不介绍了 target 元素 事件先后刚才说到 target 元素是唯一有目标阶段的元素，那么什么是目标阶段？ 实际上，对于 target 元素来说，目标阶段就是捕获冒泡连续发生，不像事件传递路径上别的元素是分开发生的 哦哦，那我懂了，所以对 target 元素来说，监听器也是按照设置好的捕获冒泡顺序执行的吧 不！ 此时监听器不再区分捕获和冒泡，统一按照设置顺序发生 取消冒泡那有时候我想到此为止，不想打扰父级元素，怎么办呢？ 可以在需要中断的元素的冒泡阶段的监听器中，执行 1e.propagetion() 此时就可以阻止事件继续冒泡 默认动作既然冒泡可以阻止，那默认的事件能不能阻止呢？比如我现在有个 a 标签，想做单页面应用的 tab 页跳转，要是按照默认的，可就跳到新页面去了 答案是可以！ 在事件中执行 1e.preventDefault() 就可以阻止默认动作的发生了！ 禁用滚动奇怪，说好的阻止默认动作，怎么我在滚动条上不能 prevent，你骗我！ 等下等下，你真的找准是什么东西产生了滚动条了吗？ 有时候你看着是你的元素产生了滚动条，但说不定是 body 产生的！ 找准了之后，我们来禁用滚动条吧——毕竟滚动条其实只是 CSS 产生的东西 禁用滚动一般分两种： 看不见滚动条 看得见滚动条 对于第一种，其实只需要设置 overflow: hidden 就可以实现了 对于第二种，比较复杂一些 首先能看见滚动条，说明 overflow 至少是 auto，甚至是 scroll 这时候通过划拉滚动条，或者鼠标滚轮，甚至是触屏上的手指，都可以让页面滚动 这种时候就要分三部分禁止 禁止滚动条，通过 #div.scrollTop = 0，即可让滚动条锁定在顶端 禁止鼠标滚轮，通过 #div.onwheel=event=&gt;{event.preventDefault()}，即可阻止滚轮 禁止触控，通过 #div.ontouchstart=event=&gt;{event.preventDefault()}，即可阻止触控 既然能在看得见滚动条的情况下禁止滚动，那能不能在看不见滚动条的情况下允许滚动呢？ 于是就又延伸出一个需求。。。 当然也很简单，通过一个尚未加入标准的 CSS 伪元素即可实现 123#div::-webkit-scrollBar &#123; display:none;&#125; 即可实现在看不见滚动条的情况下允许滚动 自定义事件那万一我玩得不开心，想自定义一个事件，行不行？ 可以！ 通过以下方法即可创建一个自定义事件 1const event = new CustomEvent(eventName, &#123; detail: config &#125;); 其中第一个参数表示你的事件名称，第二个参数是一个包含 detail 属性的对象 关于事件的初始化配置，都写在 detail 中 例如 12345const config=&#123; bubbles: false, cancelable: false&#125;const event = new CustomEvent('test', &#123; detail: config &#125;); 即可创建一个名为 test 的事件，并指示该事件不进行冒泡传递，且不可以被阻止默认动作 创建完成事件后，还要分发事件，才可以让元素上的监听器正常工作，不然你让浏览器怎么触发你设置的事件？2333 要分发事件，首先要选中元素，然后触发他身上的事件 123let div = document.querySelector('#div')div.addEventListener('test',console.log(233))div.dispatchEvent('test') 通过以上代码，就可以为 id 为 div 的元素绑定一个 test 事件的监听器，当事件触发时打印 233 然后向这个元素分发事件，触发对应的监听器 事件委托但是有时候，要为很多相似元素各自绑定相同的监听器 比如一张 10x10 的表格，难道为每个 td 都绑定一个监听器吗？且不说要写 100 行代码，光是 100 个监听器，就卡爆了！ 那么这时候，就需要我们的事件委托 事件委托就是把大量相似子项的相似逻辑的监听器，全部取消，然后利用事件冒泡传递的特性，把监听器绑定在父项上，使得监听器既能获得事件发生的确切位置，又大幅简化了代码，优化了性能 比如开头 10x10 表格的例子，就可以将监听器绑定在 table 标签上，借助冒泡传递，获取事件的 target，来处理对应子项的逻辑 显然，这样是很节省内存的，而且即便后续为表格添加项目，依然可以通过 target 得到事件发生的位置，是非常灵活的 所以，事件委托有以下三大优点 节省内存，多个监听器变为 1 个监听器 动态监听，可以监听未来添加的项目 封装，大幅简化代码逻辑，易于调试 感谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JQuery]]></title>
    <url>%2Ffrontend%2Fjquery%2F</url>
    <content type="text"><![CDATA[DOM API 好难用，我要用 JQ！ 什么是 JQuery众所周知这 DOM 原生 API 长得 1p，语义还七扭八歪的 于是就诞生了 JQuery ！ 好吧好吧，简单说就是，这是一个封装了 DOM 操作的库，使用它比直接使用原生 DOM API 更方便，更好读 那么，为了形成对比，采用和 DOM 那篇一样的结构 Retrieve既然 CSS 选择器这么好用，JQ 怎么能不吸收一下呢 于是 JQ 采用 $(selector) 来选择元素，返回选择器匹配上的所有元素 Create分为从已有创建和重新创建两种 对于从已有创建，只需要选中元素后，调用 clone 方法，就可以获得一个拷贝了原元素的新元素 对于重新创建，只需要直接调用 JQ 构造函数 $，然后传入新元素的 HTML 表示即可 Delete分为删除元素和删除内容 使用 remove 或 detach 方法即可删除元素，但前者不保留元素，后者保留，便于重新插入文档 使用 empty 方法即可清空元素文本 Update分为 对 JQ 对象的更新 对元素的更新 对元素属性的更新 对事件的更新 对 JQ 对象的更新可以采用 JQ 专属过滤器来改变结果集 1234567891011$('div').has('p'); // 选择包含p元素的div元素$('div').not('.myClass'); //选择class不等于myClass的div元素$('div').filter('.myClass'); //选择class等于myClass的div元素$('div').first(); //选择第1个div元素$('div').eq(5); //选择第6个div元素$('div').next('p'); //选择div元素后面的第一个p元素$('div').parent(); //选择div元素的父元素$('div').closest('form'); //选择离div最近的那个form父元素$('div').children(); //选择div的所有子元素$('div').siblings(); //选择div的同级元素$('div').siblings().end(); //返回上一次结果集，此处等效于选中 div 对元素的更新其实是指元素在 DOM 树上的位置更新 一共有 4 对方法 方法名1 方法名2 描述 insertAfter after 为现有元素插入一个相邻弟弟 insertBefore before 为现有元素插入一个相邻哥哥 appendTo append 为现有元素插入一个最小的儿子 prependTo prepend 为现有元素插入一个最大的儿子 看起来没什么差别，其实还是有的 比如第一对方法，调用例如下 12$('div').insertAfter($('p'));$('p').after($('div')); 显然，虽然都是将 div 元素插入到 p 元素的后面，但前者返回的是对 div 操作的 JQ 元素，后者则是对 p 操作的 JQ 元素 实际情况下根据需要选择 对元素属性的更新JQ 使用同名方法来作为同一个目标的 getter/setter 对于 get，如果结果集包含多个元素，则返回第一个元素的值（text 方法例外 对于 set，不论结果集包含多少元素，对于每个元素都会适配这次 set 通常有如下 getter/setter 来实现对元素属性的更新 方法 结果集目标 描述 html() 第一个元素 get html 内容 html(‘233’) 所有元素 set html 内容为 ‘233’ text() 所有元素 get text 内容 text(‘233’) 所有元素 set text 内容为 ‘233’ attr(‘class’) 第一个元素 get class attr(‘class’,’red’) 所有元素 set class 为 red width() 第一个元素 get width width(‘100px’) 所有元素 set width 为 100px height() 第一个元素 get height height(‘100px’) 所有元素 set height 为 100px val() 第一个元素 get 某个 input 元素的值 val(‘233’) 所有元素 set 某个 input 元素的值为 ‘233’ 对事件的更新直接使用对应事件名作为方法名进行调用 几乎所有事件都支持 调用例如下 123$('button').click(function()&#123; alert('hello')&#125;) 该调用等效于 set，会更新 JQ 对象结果集中的所有元素，下略 可以使用 bind 方法来指定多个事件 12345$('button').bind( 'click change', //同时绑定click和change事件 function()&#123; alert('hello')&#125;) 上述绑定方法会重复被触发，但也可以使用 one 方法来设定只触发一次的事件 123$('button').one('click',function()&#123; alert('hello')&#125;) 不想要的事件，也可以用 unbind 方法来解除绑定 1$('button').unbind('click') 当事件触发时，会默认向方法内传入一个参数 event，表示事件发生时的相关信息 在传入的函数中，如果该函数不是箭头函数，则还可以用 this 来访问触发了该事件的元素 事件触发除了页面上的操作，还可以用事件函数或 trigger 方法手动触发 12$('button').click()$('button').trigger('click') 工具方法除了增删改查，JQ 还提供了一些绑定在 $ 上的方法，不需要选中元素即可调用 方法 描述 $.trim() 去除字符串两端的空格。 $.each() 遍历一个数组或对象。 $.inArray() 返回一个值在数组中的索引位置。如果该值不在数组中，则返回-1。 $.grep() 返回数组中符合某种标准的元素。 $.extend() 将多个对象，合并到第一个对象。 $.makeArray() 将对象转化为数组。 $.type() 判断对象的类别（函数对象、日期对象、数组对象、正则对象等等）。 $.isArray() 判断某个参数是否为数组。 $.isEmptyObject() 判断某个对象是否为空（不含有任何属性）。 $.isFunction() 判断某个参数是否为函数。 $.isPlainObject() 判断某个参数是否为用”{}”或”new $.support() 判断浏览器是否支持某个特性。 特殊效果常用的特殊效果方法如下 方法 描述 fadeIn() 淡入 fadeOut() 淡出 fadeTo() 调整透明度 hide() 隐藏元素 show() 显示元素 slideDown() 向下展开 slideUp() 向上卷起 slideToggle() 依次展开或卷起某个元素 toggle() 依次展示或隐藏某个元素 每个方法都有两个参数默认值，分别是变化速度 400ms 和回调函数 undefined 变化速度有两种表示方法，数字表示毫秒，或 slow 等表示指定速度 回调函数可以指定特效结束时执行的方法 例如 123$('h1').fadeIn(300); // 300毫秒内淡入$('h1').fadeOut('slow'); // 缓慢地淡出$('p').fadeOut(300, function() &#123; $(this).remove(); &#125;); 更复杂的可以使用 animate 自定义 例如 12345678$('div').animate( &#123; left : "+=50", opacity : 0.25 &#125;, 300, function() &#123; alert('done!'); &#125;); 第一个参数填写基于 css 语法的对象，第二个参数表示动画持续时间，第三个参数表示回调函数 封装一个自己封装的 JQ，但是功能肯定比真的 JQ 弱很多，2333 https://github.com/Ringoer/Toy/blob/main/39/main.js 参考链接JQuery设计思想 jQuery API 中文文档]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DOM API]]></title>
    <url>%2Ffrontend%2Fdom-api%2F</url>
    <content type="text"><![CDATA[只要是学前端的同学，肯定都听说过 DOM 什么是 DOM在 JS 中，常常使用 document.xxx 来对页面进行操作。那实际操作的是什么呢？ 在开发者工具中运行 12let div=document.querySelector('#container')console.log(div) 就可以看到打印出了一个 id 为 container 的元素 这个元素就是 DOM 元素 然后去 Elements 中查看，可以发现这些元素呈现层次关系，这个关系正是树形结构 所以文档结构就是 DOM 树，全称 文档对象模型树（Document Object Model） 通过打印原型链，可以发现以下原型关系 Object -&gt; EventTarget -&gt; Node -&gt; Element -&gt; HTMLElement -&gt; HTMLDivElement 显然，每个 DOM 元素都有自己的属性，但属性原则上属于 DOM 元素的一部分，对属性的操作等效于对元素的操作，故而在 Update 中统一描述 Retrieve查自己首先要获取，才能做各种操作 对于普通的 DOM 元素，一般有如下 API document.getElementById(‘xxx’)，获取 id 为 xxx 的元素，包括 IE，全都支持 window.xxx（或直接使用 xxx），获取 id 为 xxx 的元素，除了 IE，全都支持 document.getElementsByTagName(‘div’)，获取所有标签名为 div 的元素，返回伪数组 document.getElementsByClassName(‘yyy’)，获取所有 CSS 类名为 yyy 的元素，返回伪数组 document.querySelector(selector)，获取第一个满足传入的 CSS 选择器的元素 document.querySelectorAll(selector)，获取所有满足传入的 CSS 选择器的元素，返回伪数组 对于特殊的元素，一般有以下 API document.documentElement，获取 html 根元素 document.head，获取 head 元素 document.body，获取 body 元素 window，获取窗口（注意窗口不是元素 document.all，获取所有元素 在使用 document.all 的时候需要注意，虽然现在所有浏览器都支持这个查询了，但因为历史遗留原因，虽然能获取到值，但转化为布尔值的时候，在非 IE 的浏览器上都返回 false，只有在 IE 上才返回 true 查祖先显然除了根结点，每个结点有且仅有一个父结点 那么可以通过 div.parentNode 不断向上查找 查子代可以通过 div.childNodes 或 div.children 来查找 需要注意的是，div.childNodes 返回的是 NodeList，单位类型是 Node，是伪数组，直接 concat 空数组的话不能正常展开，需要用空数组 concat 一个 Array,from 才行 div.children 返回的是 ElementCollection，单位类型均为 Element 的派生类型，与数组操作时注意点同上 并且，div.childNode 返回值包括文本结点等不直接显示的结点，而 div.children 没有这个问题 子代中对特定元素也有专有的方法 查看第一个子结点，div.firstChild 查看最后一个子结点，div.lastChild 查兄弟可以通过先查父结点，再查父结点的子结点来做到，但要排除自己才是兄弟结点 同样，兄弟也有专有方法 查看相邻的上一个兄弟，div.previousSibling 查看相邻的下一个兄弟，div.nextSibling Create通常使用 1document.createElement([tagName]) 来创建一个指定标签元素 或 1document.createTextNode([string]) 来创建一个包含指定文本的文本结点 但创建之后的元素或节点，均还在 JS 线程中，必须通过 API 添加到页面上，由渲染线程处理后，才能在页面上显示 通常通过 1[parentNode].appendChild([childNode]) 来将指定的结点添加到某个结点中 关于添加结点，有以下两种特殊情况 同一结点被多次添加到不同结点的子结点列表中 此时该子结点会出现在最后一次被添加到的位置 意图向某结点添加文本 此时不可以直接 appendChild(string)，必须先将 string 转换成文本结点，或用 innerText、textContent 属性来添加文本 innerText 是 IE 产物，textContent 是其它浏览器产物，但现在所有浏览器都同时支持两个 Delete一般有两种方法 [parentNode].removeChild([childNode]) [childNode].remove() 对于被从 DOM 树中移除的结点，只要还没丢失对它的引用，就还可以通过 appendChild 再次回到页面上 Update如同前述，对元素的修改包含对属性的修改 一般分为四种属性 HTML 标签属性 CSS 属性 data 属性 自定义属性 不论是何种属性，都可以通过点符号进行 get/set 但是 JS 中不能使用连接符来访问，所以在使用连接符的地方，要改用驼峰命名法 HTML 标签属性直接使用赋值语句改值即可，注意值必须是字符串 如 img.width = &#39;200px&#39; 但是有的属性不太一样，比如 a 标签的 href 属性 如果通过 a.href 来获取，浏览器会自动补全 href 的根路径，最终获取到的字符串是 http/https 开头的 此时应该通过 a.getAttribute(&#39;href&#39;) 来获取，能保证获取到的字符串不会被浏览器动手脚 CSS 属性有 class 和 style 两种 对于 class，使用 [node].className=&#39;newClass&#39; 来修改 或使用 [node].classList.add(&#39;newClass&#39;) 来添加适配的 class 对于 style，可以直接赋值 style 字符串 如 div.style=&#39;width:100px; height: 200px&#39; 也可以针对性赋值，如 div.style.width=&#39;100px&#39; data 属性常常可以见到形如 data-* 的属性 这些属性类似于 style，可以通过统一入口 dataset 来访问 如属性 data-x-err，可以通过 div.dataset.xErr 来访问 自定义属性修改方法与 HTML 属性相同，直接通过点符号访问即可 但一般不建议采用不是 data 的自定义属性 因为当目标结点现在在页面中时，对以上三种属性的修改都会直接同步到页面上，但对自定义属性的修改不能同步到页面上 事件每个元素都会有各种事件，此处以 click 事件为例 要为 click 事件绑定处理函数，可以用如下两种方法 div.onclick=()=&gt;{}，此时 div 只能有一个方法，新方法会覆盖旧方法，在冒泡阶段执行 div.addEventListener(&#39;click&#39;,()=&gt;{},false)，此时 div 有若干个方法，新方法与旧方法都会在 click 事件被触发 此处的第三个参数默认值 false，表示事件在冒泡阶段触发。如果改为 true 就是在捕获阶段触发 需要注意的是，IE 只有冒泡阶段，并且事件列表执行顺序是 FIFO，其它非 IE 浏览器则有捕获和冒泡，且执行顺序是 LIFO 不论是如何添加事件，在事件被触发时，都有两个默认参数 一个是 this，指向事件触发所在的元素 一个是 event，包含该事件触发时的所有相关信息 文本内容通过 innerText、textContent 属性来添加文本 innerText 是 IE 产物，textContent 是其它浏览器产物，但现在所有浏览器都同时支持两个 父子结点关系可以通过结点操作或 innerHTML 注入来实现 例如 div.innerHTML=&#39;&lt;span&gt;233&lt;/span&gt;&#39; 就是向 div 中插入了一个内容为 233 的 span 标签 注意，此时会覆盖 div 中的所有内容（包括子元素） 如果想添加新儿子，可以使用 appendChild 方法，不再赘述 如果想换个新父结点，则只需要利用 appendChild 会出现在最新位置的特点，直接向新父结点插入当前结点即可 封装原生 dom 封装 拓展既然 DOM API 这么复杂，有没有更方便的方法呢？ 答案是有，典型的例子就是 JQuery 库]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS循环打印与延迟执行]]></title>
    <url>%2Ffrontend%2Fjavascript-setTimeout%2F</url>
    <content type="text"><![CDATA[众所周知 var 在循环里有坑 本文介绍基于经典例子——打印 0 到 5 关于打印 0 到 5 这个任务，该怎么办呢？很自然地想到使用循环打印 但如果是普通的循环打印，就不会有这篇文章了 我们要做的是——通过 setTimeout 的循环打印 首先是 c 风格的循环打印代码 123456let i = 0for(i = 0; i&lt;6; i++)&#123; setTimeout(()=&gt;&#123; console.log(i) &#125;,0)&#125; run 了一看，ん？？怎么打了 6 个 6 原因是此时 i 变量相对于 for 来说处在全局，而不是封闭的词法环境 光是这个原因，都足以抹平 let 和 var 的差距了 再加上 setTimeout 的宏任务，会在下一个事件循环开启的时候才执行（关于宏任务，会在其它文章介绍，本篇略 于是执行就变成了 声明 i=0 循环设置定时器，定时器中索引指向 i 循环完毕，i=6 当前事件循环清空，开启下一个事件循环 通过索引发现 i=6，于是所有定时器都打印了 6 那怎么办呢？此时注意到，刚才我提到了一个关键词——封闭的词法环境 那采用闭包的思想，让 i 处于封闭的词法环境，不就可以了！ 来试试 12345for(let i = 0; i&lt;6; i++)&#123; setTimeout(()=&gt;&#123; console.log(i) &#125;,0)&#125; 现在就可以正常打印 0 到 5 了！ 为什么呢？因为此时 i 的作用域仅限于 for 之内，每个 setTimeout 获取 i 的索引的时候，获取到的都是不一样的值，所以现在可以正常打印 但是在这里，换成 var 就大不相同了 因为通过 var 声明的变量实际上会绑定到 window，所以此时获取的索引还是相同，还是要打印 6 个 6 那么，还有什么别的，能通过 setTimeout 打印 0 到 5 的办法呢？ 容易想到，有两种改变 通过在 setTimeout 中自增来实现 通过 generator 实现 先说第一种，代码很简单，把控制自增的部分从 for 移动到 setTimeout 就可以了 123456let n = 0for(let i = 0; i&lt;6; i++)&#123; setTimeout(()=&gt;&#123; console.log(n++) &#125;,0)&#125; 注意到此时 let i 除了控制循环，已经和 setTimeout 没有关系了 配合后置 ++ 运算符的先取值再自增特性，很容易实现了在 setTimeout 中的自增 那么 generator 怎么实现呢？ 我不想在这里介绍 generator 语法（（实在太长了 直接给出例子 1234567891011function* generateSequence(start, end) &#123; for (let i = start; i &lt;= end; i++) yield i;&#125;let g=generateSequence(0,5)for(var i = 0; i&lt;6; i++)&#123; setTimeout(()=&gt;&#123; console.log(g.next().value) &#125;,0)&#125; 我们可以声明一个生成器工厂，每当运行该工厂方法的时候，传入上下界，然后返回一个生成器 每当生成器调用 next 方法的时候，都会返回一个对象，该对象包含 value 字段和 done 字段，分别表示抛出的值和该生成器当前的状态 显然生成器的调用是不可逆的，所以也约等于刚才说的在 setTimeout 中自增 以上 你还有别的办法吗？可以通过本站的”联系方式”向我发邮件~~]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[py对拍器]]></title>
    <url>%2Falgorithm%2Fpython-counterpoint%2F</url>
    <content type="text"><![CDATA[今天在验题的时候，与其他验题人输出不合，偶感，特此写一个对拍器 可以用于 c/cpp 对拍 请先去除代码中的 freopen，并编译成 exe 使用时只需要修改运行目录，和验题人标识符，即可 1234567891011121314151617181920212223242526272829import osos.chdir('E:\problems\div1\T1')arr=os.listdir()input_files=[file for file in arr if file.endswith('.in')]l=len(input_files)names=['lzz','ringoer']for name in names: for i in range(l): os.system(name+'.exe &lt;'+input_files[i]+' &gt;'+str(i+1)+'.'+name+'.out')arr=os.listdir()output_files=[file for file in arr if file.endswith('.out')]ans=[[open(file,mode='r',encoding='utf-8').read() for file in output_files if name in file] for name in names]for i in range(l): flag=True for j in range(1,len(names)): if ans[0][i] != ans[j][i]: flag=False break if flag: print(flag) else: print(i) for j in range(0,len(names)): print(names[j]+'='+ans[j][i]) 高度解耦，非常美观]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS对象用法]]></title>
    <url>%2Ffrontend%2Fjavascript-object%2F</url>
    <content type="text"><![CDATA[JS 也有面向对象 又到了我第 114514 喜欢的 CRUD 环节 Create创建属性一般有两种办法 在对象声明时创建 在对象声明后插入 声明对象一般有两种 直接创建 123let obj=&#123; x:1&#125; 通过 Object 对象方法创建 123let obj=new Object(&#123; x:1&#125;) 为什么会有两种写法？因为第二种才是正规的 但是架不住第一种更方便，于是第一种也变成合法的了 obj 的键一定是字符串，所以可以写任意的键名，甚至包括 空字符串 和 emoji 需要注意的是，无论你怎么写 obj 的键，它在构造完成后都会变成字符串 可以通过 Object.keys(obj) 来查看 比如 键是数字的情况 123let obj=&#123; 2:'233'&#125; 此时 obj 会拥有一个名为 ‘2’ 的键 有同名变量的情况 1234let a=100;let obj=&#123; a:'233'&#125; 此时 obj 会拥有一个名为 ‘a’ 的键 但还有 2 种情况例外 当 obj 是数字表达式的时候 123let obj=&#123; 1e2: '233'&#125; 此时 obj 会拥有一个名为 ‘100’ 的键 当 obj 使用方括号表达式的时候 1234let a=233;let obj=&#123; [a]:'233'&#125; 此时 obj 会拥有一个名为 ‘233’ 的键 而且，obj 在自动构建后会包含一个 __proto__ 属性指向其原型 那我不要默认的 Object 原型，想要别的原型怎么办？ 可以使用 Object.create 来创建来自指定原型的新对象 示例如下 12345let common=&#123; xxx:1&#125;;let a=Object.create(common,&#123;yyy:&#123;value:2&#125;&#125;);console.log(a); 期望输出如下 12345&#123;yyy: 2&#125; yyy: 2 __proto__: xxx: 1 __proto__: Object 此时 a 可以访问属性 xxx 和 yyy，其中 yyy 来自自身，xxx 来自原型 需要注意的是，在 create 的第二个参数中，要求写的是属性描述符，一般包括 value，属性值，必填 writeable，默认 true，可以编辑，若为 false 则只读 enumerable，默认 true，可以被枚举，若为 false 则不能通过简单的键遍历找到 configureable，默认 true，可以被重新配置，若为 false 则永远在当前对象上保持当前状态 等 4 个配置 插入属性一般有两种逐条插入的写法 obj.property = value obj[property] = value 都是合法的写法 但是对于第一种，点号后必须是完整键名，不加引号 对于第二种，方括号内可以是表达式或字符串，如果可以识别为字符串，则字符串优先 示例如下 12345678910let obj=&#123; xxx: 666&#125;;obj['abc']=233;let abc='xxx';console.log(obj.abc); // 233console.log(obj['abc']); // 233console.log(obj[abc]); // 666 可见点符号的识别和方括号的识别是不一样的 还有一种批量插入的写法 Object.assign 12345678let obj=&#123; xxx: 666, yyy: 233&#125;;Object.assign(obj,&#123;xxx:111,zzz:114514&#125;)console.log(obj); 期望输出如下 1&#123;xxx: 111, yyy: 233, zzz: 114514&#125; 可见 assign 可以覆盖，可以新增，而且不会影响其他原有值 Retrieve显然可以分为按键查找和按值查找两种类型 按键查找可以使用以下两种方法 in Object.hasOwnProperty in 通过查找原型链确定某个参数是否存在于指定对象上 Object.hasOwnProperty 只会查找对象本身，不会上升到原型链 也可以用以下的 Object 方法来查找键或值 Object.keys 列出所有键 Object.values 列出所有值 Object.entries 列出所有键值对 按值查找通过上述的 entries 方法取得所有键值对，然后遍历即可 Update可以使用 点符号 方括号 Object.assign Object.defineProperty 来更新属性 需要注意的是，上述方法均不会直接修改到原型上 比如原型上有属性 xxx，当前对象 obj 上没有 则令 obj.xxx=’233’，会为当前对象绑定一个新属性 xxx，而不会修改原型上的 虽然可以通过 __proto__.xxx 来修改，但十分不推荐修改原型的属性 那如果直接修改原型呢？ 虽然 JS 是允许直接通过 __proto__ = xxx 来修改对象的原型指向的，但性能十分之低下 如果一定要修改原型，最好在创建对象的时候使用 Object.create，在创建时就指定新的原型 Delete一般有删除值和删除键两种需求 对于删除值，只需要取对应的键，然后赋值 undefined 即可 对于删除键，只需要使用 delete 语句 1delete obj.property; 即可删除键 可以用 property in obj 查看 obj 中是否还含有指定键名 但待删除的键不可以是不可配置的（通过 Object.defineProperty 设置的不可配置） 需要注意的是，delete 语句用于删除属性时，在所有情况下都会返回 true 表示删除成功，即便 obj 中不存在目标键 除非将 delete 用于删除对象等非属性值，才会返回 false 谢谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS语法-基于C]]></title>
    <url>%2Ffrontend%2Fjavascript-base-grammar%2F</url>
    <content type="text"><![CDATA[本文描述 JavaScript 的基本语法，但和 c 一样的就跳过了 表达式和语句与 c 基本相同，但是 c 对于分号是强要求，js 对于分号并不强要求，只要不影响断句，想怎么样都可以 并且，c 对于换行的语句基本不支持，但是 js 依然是只要不影响断句就可以 但是 return 不一样，js 的 return 不能换行，否则会返回 undefined 标识符c 的标识符只能接受数字字母下划线，且不能以数字开头 js 的标识符可以接受所有符号，包括希腊文、中文等，不过依然不能以数字开头 if、else、switch、三目表达式与 c 完全相同 while、break、continue与 c 完全相同 forc 只能接受 for(初始化; 循环条件; 迭代) 这种形式 js 除了上述形式，还可以接受 for(let 标识符 of 可迭代对象) 或 for(let 标识符 in 可迭代对象) 的形式 for … in 还可以用于枚举对象键 label类似于 c 的 goto 语句 区别是 c 只有 goto，只能前往 label 所在区域 但是 js 只有 break 和 continue，只能打破现在所在 label 为什么这里 continue 不是循环？因为 continue 的作用是进入下一次迭代，但是普通的 label，除非写在循环中，否则哪里来的下一次迭代呢 以上]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo唯一ID遍历器]]></title>
    <url>%2Fothers%2Fhexo-uniform-id%2F</url>
    <content type="text"><![CDATA[用 hexo 写博客，为了 URL 好看，显然要手动为每一篇文章都指定 ID，怎么防止重复呢？ 可以用 python 代码实现 强语义的代码如下 1234567891011121314import os# 改变当前工作目录，并获取目录下的所有文件os.chdir('D:\hexo\source\_posts')arr=os.listdir()# 读取每个文件的内容，存数组arr=[open(file,mode='r',encoding='utf-8').read() for file in arr]# 读取每个内容中的 ID，存数组arr=[text.split('id: ')[1].split('\n')[0] for text in arr]arr.sort()for i in arr: print(i) 通过如上代码，一眼就可以看出哪里 ID 重复了]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JS的历史]]></title>
    <url>%2Ffrontend%2Fjavascript-history%2F</url>
    <content type="text"><![CDATA[简单讲讲前端利器 JavaScript 的历史 诞生JavaScript 诞生自美国人布兰登之手 布兰登于 1961 年出生，1995 年进入网景公司，受命为网景公司的浏览器开发了 JavaScript 功能 该功能当初只是为了蹭 Java 的热度，所以才命名为 JavaScript，类似雷锋和雷峰塔的关系（ 布兰登当初只花了 10 天就设计出了 JavaScript 的雏形 发展没想到后来大家发现 JavaScript 在浏览器上这么好用，于是每家浏览器都开发了自己浏览器上的 JavaScript 方言，其中包括微软 IE 浏览器 网景公司一看，这怎么行，我要合纵连横，打败微软先 于是 1996 年 11 月，网景向 ECMA 提交了 JavaScript 语言标准，但因为版权问题，改名为 ECMAScript 现在我们所说的 ECMAScript 是标准，JavaScript 是实现，类似于 C99 和 C语言的关系 停滞在和网景的竞争中，微软采取了一个很”机智”的行为：将 IE6 捆绑进 Windows XP 系统 这个行为虽然在之后被判定为垄断行为，但在当时确实帮助 IE 迅速抢占了大量的市场份额，直接导致网景公司无法继续运营 网景决定绝地求生奋力一搏，将自己的浏览器源代码开源了，这就是后来的 Firefox 但是即便开源，也还是竞争不过 IE，终于在 1998 年年底，网景被收购了 这之后 IE6 打遍天下无敌手，以至于微软都觉得 IE 不需要继续改进了，于是解散了 IE6 团队 在看到 IE6 团队解散后，Firefox 打算再试试，卷土重来，继续与 IE 竞争，但收效甚微 到 2004 年，IE6 占有全球市场的 80% 但是——IE6 不兼容 W3C 标准，特别是 CSS！！！！ 2005 年，微软终于发现 IE6 还是太菜，BUG 巨多，标准不兼容，于是重新组建了 IE7 团队，但却不是 IE 原班人马，这导致 IE7 甚至打不过 IE6 特别是中国市场，几乎全国都是盗版 Windows XP，所以 IE6 在中国大行其道 直到 2008 年，Chrome 发布第一版为止，JavaScript 都因为浏览器大战，只产生了几项新技术，没有太大的发展 重新起步2004 年，谷歌抓住机会，抢了一些从 Firefox 和 IE 流失的程序员 同年，谷歌发布了 Gmail 在线网页，向人们展示了 JavaScript 不止可以做小功能，还可以在网页上做到当时应用程序才能做到的邮件系统功能，让人们发现了 JavaScript 的无限可能性 显然，邮件系统的交互是用到了网页与服务器通信的技术的 于是在 2005 年，Jesse 总结了这项技术，并将其命名为 AJAX。这标志着前端这个领域正式诞生 2008 年，谷歌发布了 Chrome 第一版 Chrome 对标准支持良好，JavaScript 终于有能正常运行的地方了，这才又重新慢慢发展 之后的 2010 年，iPhone4 发布，世界进入智能手机时代 虽然微软也试图搭上这班车，但 Windows Phone 实在是不行，竞争中没有任何优势 于是智能手机市场就出现了一个情况——因为智能手机上没有 IE，所以不需要在智能手机上兼容 IE 了！ 这是 IE 消亡的重大征兆，毕竟从现在回头看，跟不上智能手机市场的服务基本都被淘汰了 在中国国内，则有一个重大事件：2016 年，淘宝和天猫宣布不再支持 IE6、7、8 中国程序员也摆脱了 IE 的枷锁，让 JavaScript 再也没有后顾之忧地开始极速发展 ECMAScript 标准1997 年 6 月，第一版 1999 年 12 月，第三版。因为此时 IE6 还在更新，所以 IE6 也有实现该标准的部分要求，所以这一版成为了使用最广的版本 第四版则因为贪心不足蛇吞象，加入新功能太多，浏览器厂商纷纷表示不能实现，于是流产了 这下一搞，直到十年之后，浏览器大战结束的 2009 年 12 月，才发布了第五版 又拖到 2015 年 6 月，Chrome 占有全球过半市场，才发布了第六版 标准的制定与发布遵循以下流程： 浏览器厂商尝试添加新功能，添加后用户反馈良好 浏览器厂商将该功能推荐给 ECMA，ECMA 询问其他厂商意见 其他厂商一致认为该功能是有用的，于是 ECMA将该功能加入标准 从此 ES6 发布开始，JavaScript 发展进入快车道，每年都有一版新标准发布，以年份命名 但目前面试常考的只有 ES5 和 ES6，至于 ES2016、ES2017等标准，一般不会在面试中考察 关键技术Chrome 使用的 JS 引擎叫 V8 引擎，是一个系列引擎的一种，其余引擎分别解析其它语言 2009 年，Ryan 基于 V8 创造了 Node.js；2010 年，Isaac 基于 Node.js 创造了 npm。这让 JavaScript 在浏览器之外也可以执行了！所以 Node.js 快速流行起来 还是 2010 年，TJ 基于 Node.js 发布了 Express 框架，从此 JavaScript 也可以用于后端开发了 之后前端的发展越来越快，产生了很多其其它它的框架，比如 requirejs，比如 webpack 打包，比如 React、Vue 等前端框架，总之技术发展日新月异，JS 生命力旺盛，蓬勃向上 相信未来也会有更多更多的，关键的新技术出现 总结JavaScript 其实是和 Java 同年出生的，如果没有十年浏览器大战，JavaScript 现在又会是何等光景呢…… 不过也正是 JavaScript 现在正处在市场热点，我才有机会通过这项技术找到工作，2333 希望 JavaScript 越来越好！]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[计算机网络]]></title>
    <url>%2Fknowledge%2Fcomputer-network%2F</url>
    <content type="text"><![CDATA[本文简单介绍一些计算机网络相关的专业知识 众所周知，计算机网络最重要的概念是 OSI 七层模型 OSI 七层模型自底向上，分为以下七层 物理层，完成 bit 到载波之间的转换，处理物理介质接口 数据链路层，负责介质访问控制和逻辑链路控制 网络层，负责主机到主机之间的通信与路由寻址 传输层，负责进程间端到端通信和可靠传输 会话层，负责会话的建立、撤销与面向连接的口令认证等 表示层，负责信息的加密、解密、压缩、转换等 应用层，提供最通用的应用程序（电子邮件、web等），完成用户与软件的交互 然后先介绍一下重要的协议们 网络层，IP 协议 传输层，TCP 协议 应用层，HTTP 协议 介于网络层和传输层之间，SSL 协议 IP 协议网络层负责路径确定与逻辑寻址 而路径，就是由 IP 地址提供的，通过点分十进制计数法确定 IPv4 地址 但是显然 IP 地址总数是有限的，怎么延长寿命呢？ 1985 年起增加 “子网号字段”，IP 地址变为 网络号+子网号+主机号 其中，主机号全 0 代表网络，主机号全 1 代表广播 这样，网络数量就增加了，但还是不够用，于是又产生了 网络地址转换——NAT 根据网络的 ABC 类，分配不同的私有地址，私有地址是同一路由器内特有的 常见的民用 IP 地址是 C 类，私有地址就是 192.168.0.0/16， 16 指子网掩码 为了 IP 协议的正常运转，又产生了 差错报告机制——ICMP，我们知道的 ping 命令测试网络连接可达性，就是基于 ICMP 的 而且 ping 命令是应用层直接使用 网络层 ICMP 的，并没有经过传输层的 TCP 或 UDP 一个 ping 实例如下 123456789101112ping baidu.com正在 Ping baidu.com [220.181.38.148] 具有 32 字节的数据:来自 220.181.38.148 的回复: 字节=32 时间=49ms TTL=53来自 220.181.38.148 的回复: 字节=32 时间=46ms TTL=53来自 220.181.38.148 的回复: 字节=32 时间=47ms TTL=53来自 220.181.38.148 的回复: 字节=32 时间=47ms TTL=53220.181.38.148 的 Ping 统计信息: 数据包: 已发送 = 4，已接收 = 4，丢失 = 0 (0% 丢失)，往返行程的估计时间(以毫秒为单位): 最短 = 46ms，最长 = 49ms，平均 = 47ms TCP 协议传输层有 TCP 协议和 UDP 协议，其中 TCP 协议负责端到端连接、可靠性和流量控制 TCP 的特点如下 面向连接 点对点 可靠 全双工 字节流 相对的 UDP 的特点如下 无连接 尽力交付 面向报文 允许广播 因为 TCP 有 UDP 所没有的最重要的机制 —— 三次握手、四次挥手，所以 TCP 传输会比 UDP 安全很多，也易于控制，但是也因此在连接上消耗了更多时间，传输速率不如 UDP 快 TCP 的主要机制如下，其特点全部依赖其机制 应答机制、超时机制、重传机制、窗口机制 流量控制：滑动窗口机制 拥塞控制：慢开始、拥塞避免、快重传、快恢复、随机早期检测 连接的建立和解除：三次握手、四次挥手 虽然实际的数据报交换还是网络层在负责，但传输层解决了网络层的主要问题：丢包、重复、乱序 为什么可以解决这些问题呢？因为网络通信本质上是两个进程间的通信，而不是主机之间的通信 通信中由 IP 地址唯一标识主机，由端口号唯一标识进程，所以可以通过 IP 地址+端口号的形式来进行进程间通信 而传输层又向上层隐藏了硬件拓扑、路由细节等，使得上层应用程序可以直接调用其接口，建立一条虚拟的端到端的通信信道 建立信道和解除的过程如下图 HTTP 协议定义万维网 WWW（World Wide Web）建立的原因，是一个美好的愿景：万物互联 万维网是分布式超媒体系统，是超文本系统的扩充 在万维网客户程序与万维网服务器程序之间进行交互所使用的就是超文本传输协议 HTTP，这是一个应用层协议，基于 TCP 进行可靠传输 URL万维网通过”链接”的方法能主动地按需获取信息，不同的信息通过 统一资源定位符 URL 来标识 URL 的格式如下 &lt;协议&gt;://&lt;主机&gt;:&lt;端口&gt;/&lt;路径&gt; 此处的协议可以是 http、ftp、file 等，但本文只介绍 http 协议相关内容 协议版本HTTP 1.0 协议是无状态的，HTTP 本身也是无连接的，虽然使用了基于 TCP 的可靠传输，但是每次通过 TCP 传输完毕后，该 TCP 连接都会被关闭 作为改进，HTTP 1.1 协议使用持续连接，指在收到服务器响应后，连接仍会保持一段时间，同一个客户和该服务器之间可以继续使用这条连接进行通信 域名系统URL 中的主机号可以是 IP 地址，或一个域名，或一个计算机地址标识符 域名系统 DNS（Domain Name System）提供了将人类可读符号映射到计算机地址的服务（计算机地址不止是 IP 地址） 域名与计算机地址之间的关系是多对一，即一个域名只能映射到一个计算机地址，但一个计算机地址可以被多个域名所映射 域名的结构为 层次树状结构，由标号序列组成，各部分之间用 点号 隔开 但是如何知道域名和计算机地址的映射关系？需要通过 DNS 服务器来进行解析 每个 DNS 服务器负责一个区，此时该 DNS 服务器称为 权限域名服务器，用来保存该区中所有主机的域名到 计算机地址 的映射 包括 权限域名服务器，DNS 服务器自顶向下共有以下类型 根域名服务器 最重要的域名服务器。所有根域名服务器都知道所有顶级域名服务器的域名和 IP 地址 不论是哪一个本地域名服务器，只要这个本地域名服务器不能自己解析一个域名，就会首先求助根域名服务器 顶级域名服务器 负责管理在自己注册的所有二级域名 响应可能是域名解析结果，也可能是下一步应当询问的域名服务器地址 权限域名服务器 负责一个区的域名服务器 响应可能是域名解析结果，也可能是下一步应当询问的权限域名服务器地址 本地域名服务器，也称为默认域名服务器 一般是客户端主机上设置的首选 DNS 服务器，也称为 ISP DNS 服务器 当主机发出 DNS 查询请求时，该请求报文首先发送给本地域名服务器 显然查询 DNS 的请求是要经过多级中转的。如何决定查询顺序呢？ 有两个阶段 递归查询：主机向本地域名服务器的查询 如果主机所询问的本地域名服务器不知道域名解析的结果，则本地域名服务器就以 DNS 客户的身份，向其他服务器继续发出查询请求报文 迭代查询：本地域名服务器向根域名服务器及其他域名服务器的查询 如果本地域名服务器所询问的根域名服务器不知道域名解析的结果，则告诉本地域名服务器下一个查询目标服务器的地址，由本地域名服务器继续提交请求 示意图如下 这是服务器上的 DNS 查询，但不是每次 DNS 查询都直接从本地域名服务器开始 DNS 查询流程按顺序一般如下 浏览器缓存 操作系统缓存 路由器缓存 主机上的 hosts 文件 本地域名服务器… 可以使用 nslookup [addr] 命令来解析目标域名 一个 nslookup 实例如下 123456789nslookup baidu.com服务器: UnKnownAddress: 192.168.1.1非权威应答:名称: baidu.comAddresses: 220.181.38.148 39.156.69.79 端口此处特指软件意义上的端口，有别于交换机上的硬件端口 端口号一般是一个 16 为无符号整数，范围在 0 - 65536 一般 0 - 1023 号端口是服务保留端口，自己的项目最好不要启动在这些端口上，除非你知道自己在干什么 常用端口一般有 20、21、22、80、443 等 路径对于静态资源服务器，路径一般与服务器所在的磁盘目录一一对应 对于动态服务器，路径一般是个逻辑路径，用以标识资源 在动态服务器的路径，一般采用 RESTFUL API 设计，用 URI 标识资源，用 HTTP 动词描述动作 一般在路径的末尾都有一个斜杠，除非该路径指向一个具体的静态文件 报文结构HTTP 有两类报文：请求报文（request）和响应报文（response） 由于 HTTP 是面向文本的，所以报文中每个字段都是 ASCII 码串，长度不确定 报文都分为开始行、首部行和实体主体，分别对应 Chrome 控制台中看到的 General、Headers 和 Payload 在请求报文中，开始行就是请求行 可以在本地命令行通过 curl -v [url] 查看报文信息 一个 curl 实例如下 123456789101112131415161718192021222324252627curl -v baidu.com* Rebuilt URL to: baidu.com/* Trying 220.181.38.148...* TCP_NODELAY set* Connected to baidu.com (220.181.38.148) port 80 (#0)&gt; GET / HTTP/1.1&gt; Host: baidu.com&gt; User-Agent: curl/7.55.1&gt; Accept: */*&gt;&lt; HTTP/1.1 200 OK&lt; Date: Fri, 27 Nov 2020 04:02:06 GMT&lt; Server: Apache&lt; Last-Modified: Tue, 12 Jan 2010 13:48:00 GMT&lt; ETag: "51-47cf7e6ee8400"&lt; Accept-Ranges: bytes&lt; Content-Length: 81&lt; Cache-Control: max-age=86400&lt; Expires: Sat, 28 Nov 2020 04:02:06 GMT&lt; Connection: Keep-Alive&lt; Content-Type: text/html&lt;&lt;html&gt;&lt;meta http-equiv="refresh" content="0;url=http://www.baidu.com/"&gt;&lt;/html&gt;* Connection #0 to host baidu.com left intact HTTP 动词显然请求方法是很重要的。通常有如下请求方法 方法 意义 OPTION 向服务器请求一些构成请求的关键选项，例如允许的方法 HEAD 向服务器询问，首部行中哪些头部是 required GET 查 POST 增 PUT 改 PATCH 部分改 DELETE 删 TRACE 用于环回测试 CONNECT 用于代理服务器 状态码HTTP 状态码分为 5 大类 状态码 意义 1xx 通知 2xx 成功 3xx 重定向 4xx 客户端出错 5xx 服务器出错 常见的有 200、301、302、304、401、403、404、415、500、502 等 SSL 协议SSL 只有一个重点，就是 RSA 加密，可以查看本文 图解非对称加密 接下来介绍一下物理层和数据链路层 待续]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
        <tag>http(s)</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS动画]]></title>
    <url>%2Ffrontend%2Fcss-animation%2F</url>
    <content type="text"><![CDATA[CSS 也具备原生的动画实现机制，可以在不使用或少使用 JS 的情况下做到动画的效果 概述CSS 动画是基于对盒模型的变形、变色等 2D变换 实现的 也就是说，其核心是 transform 属性 一般有三种方案 定时器 transition 过渡 animation 动画 显然动画是逐帧播放的，每一帧都依赖于浏览器渲染。于是先介绍一下浏览器渲染 浏览器渲染关于浏览器渲染的详细优化，可以查阅 渲染性能 首先介绍一个关键词：像素管道 像素管道如图，这就是像素管道，表示渲染的全过程 JavaScript。一般来说，我们会使用 JavaScript 来实现一些视觉变化的效果。比如用 jQuery 的 animate 函数做一个动画、对一个数据集进行排序或者往页面里添加一些 DOM 元素等。当然，除了 JavaScript，还有其他一些常用方法也可以实现视觉变化效果，比如：CSS Animations、Transitions 和 Web Animation API。 样式计算。此过程是根据匹配选择器（例如 .headline 或 .nav &gt; .nav__item）计算出哪些元素应用哪些 CSS 规则的过程。从中知道规则之后，将应用规则并计算每个元素的最终样式。 布局。在知道对一个元素应用哪些规则之后，浏览器即可开始计算它要占据的空间大小及其在屏幕的位置。网页的布局模式意味着一个元素可能影响其他元素，例如 &lt;body&gt; 元素的宽度一般会影响其子元素的宽度以及树中各处的节点，因此对于浏览器来说，布局过程是经常发生的。 绘制。绘制是填充像素的过程。它涉及绘出文本、颜色、图像、边框和阴影，基本上包括元素的每个可视部分。绘制一般是在多个表面（通常称为层）上完成的。 合成。由于页面的各部分可能被绘制到多层，由此它们需要按正确顺序绘制到屏幕上，以便正确渲染页面。对于与另一元素重叠的元素来说，这点特别重要，因为一个错误可能使一个元素错误地出现在另一个元素的上层。 并非每次渲染都会触发全部的 5 个过程，大致分为如下 3 种 JS / CSS &gt; 样式 &gt; 布局 &gt; 绘制 &gt; 合成 当修改了元素的几何属性时，会触发重新布局，所以 5 个过程都会执行 JS / CSS &gt; 样式 &gt; 绘制 &gt; 合成 如果只是修改了背景图片、文字颜色等仅依赖绘制的属性，即不会影响布局，则浏览器会跳过布局，但仍将执行绘制 JS / CSS &gt; 样式 &gt; 合成 如果更改的属性是一个既不需要布局也不需要绘制的属性，则浏览器将直接跳到合成 第 3 种情况的开销最小，最适合于应用生命周期中的高压力点，例如动画或滚动 布局首次布局，称之为 布局（layout） 之后的修改布局，称之为 回流 或 重排（reflow） 重排，即元素的几何属性被修改，导致浏览器重新执行整个渲染流程 由上图情况 1 可得，重排必定引发重绘 重绘首次绘制，称之为 绘制（paint） 之后的修改表现，称之为 重绘（repaint） 重绘，即背景图片、文字颜色等仅依赖绘制的属性被修改，导致浏览器重新绘制所需的颜色等 由上图情况 1 和 2 可得，引发重绘的时候不一定发生重排 合成已经算完了，只要同步到页面上就可以了，这就是合成，所以不能跳过 查询那怎么知道什么属性会不会引发重排或重绘呢？可以查看 CSS Triggers 测试Chrome 提供了工具，来帮助开发者确定什么时候发生了重绘 打开工具的流程如下 F12 打开开发者工具 在 HTML 和 CSS 界面，按 ESC 打开 console 界面 按 console 界面左上角的更多，打开 Rendering 面板 勾选 Paint flashing，即可观察到浏览器在每次发生重绘时，重绘的部分发绿 设置如图 也可以查看 Chrome 的文档 使用 Chrome DevTools 快速确定绘制瓶颈 定时器可以通过定时器，为某个盒子设置定时变换 一般有三种定时器 setTimeout setInterval requestAnimationFrame 其中 1 和 2 的用法相同，类似如下代码 123setTimeout(()=&gt;&#123; div.style.cssText='transform: translate(100px,200px)';&#125;,1000); setTimeout 和 setInterval 方法都会返回一个 long 整数，表示计时器 ID 可以使用 cancelTimeout(id) 或 cancelInterval(id) 来取消计时器 但是使用 setTimeout 的动画，不是统一管理动画帧，而是分别渲染的，所以会导致有时候这一帧还没渲染好，下一帧的请求又来了，会造成丢帧的问题 所以更建议使用 requestAnimationFrame 来管理动画 requestAnimationFrame 的方法原型是 1window.requestAnimationFrame(callback) 要求传入一个回调函数，并在执行时向回调函数内传入一个 long 整数，表示时间戳 requestAnimationFrame 默认的执行间隔约 16.67 ms，约每秒 60 帧 可以在回调函数内通过时间戳判断是否应该准备渲染下一帧 与 setTimeout 同样的是，requestAnimationFrame 返回值也是一个 long 整数，表示计时器 ID 可以使用 cancelAnimationFrame(id) 来取消计时器 范例可以参考 MDN window.requestAnimationFrame 或 使用 requestAnimationFrame 来实现视觉变化 transition第二种办法是使用 CSS transition 属性，令元素在两个状态之间过渡 一般用于制作悬浮等特效，呈现动画效果，而不是真正意义上的动画 查看 transition 的相关效果，可以访问 MDN transition transition 一般有如下 4 个参数 property name（required），指示监视的属性名，当该属性在指定两个状态之间发生变化的时候触发过渡效果 可以指定该属性取值为 all，表示监视该 css 选择器选中元素的所有属性 duration（required），指示过渡动画的播出时间 delay，指示过渡效果在触发时，先延迟 delay 时长，再开始播放过渡效果 timing function，指示过渡效果的变化速率曲线，默认是 ease，可以指定为 linear（线性） 如上参数并排写，只需要用空格隔开 默认第一个出现的时间指示的是 duration，第二个才是 delay 当有多个 property 需要监视时，可以用逗号隔开参数语句 animation第三种办法是使用 CSS animation 属性，令元素在若干个状态之间连续变化 与 transition 的区别是，transition 不能在没有触发条件的情况下播放，但 animation 不仅可以做到 transition 能做到的，还可以自动无限播放 查看 animation 的相关效果，可以访问 MDN animation animation 一般有如下 8 个参数 keyframe name（required），指示使用的动画帧定义 duration（required），指示动画的播出时间 delay，指示动画效果在触发时，先延迟 delay 时长，再开始播放动画效果 timing function，指示动画效果的变化速率曲线，默认是 ease，可以指定为 linear（线性） iteration count，指示动画播出的次数，默认是 1，可以修改为 infinite direction，指示动画播出的方向，默认是 normal，可以修改为 reverse 反向播放，或 alternate 表示来回播放 fill mode，指示动画播放结束时保留的帧，默认是 none，不保留任何帧，可以设置为 forwards 保留最后一帧，或 backwards 保留第一帧，或 both 在两个方向上扩展动画 play state，指示一个动画所处的状态，默认是 running，可以通过 JS 设置为 paused 来暂停动画，重新修改为 running 则会在暂停的位置继续播放 显然，animation 属性规定了动画在播放时的参数，但还需要另外指定关键帧 在 transition 中是根据不同的动作触发，在 animation 中则是用 @keyframes 关键字定义 @keyframes 一般有如下两种写法 from-to写法 123456789@keyframes slidein &#123; from &#123; transform: translateX(0%); &#125; to &#123; transform: translateX(100%); &#125;&#125; 让 animation 在起始和末尾的两个帧之间变化 百分比写法 12345678@keyframes identifier &#123; 0% &#123; top: 0; left: 0; &#125; 30% &#123; top: 50px; &#125; 50% &#123; top: 30px; left: 20px; &#125; 50% &#123; top: 10px; &#125; 68%, 72% &#123; left: 50px; &#125; 100% &#123; top: 100px; left: 100%; &#125;&#125; 让动画在生命周期的不同节点呈现不同的效果 相同节点重复定义，会以最后一次定义为准，如第 4 和第 5 行，只有第 5 行会生效 相同效果可以用逗号隔开，如第 6 行 以上，就是 CSS 动画相关的效果 关于优化等问题，需要配合 JS，此处就不描述了 谢谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS布局]]></title>
    <url>%2Ffrontend%2Fcss-layout%2F</url>
    <content type="text"><![CDATA[现代网站都需要各种布局以保证页面展示效果，本文就说说布局 布局类型视觉类型不同布局看起来的效果不一样 主要有 3 种 两栏布局，很少单独使用了，一般用在给三栏布局的中间部分做两栏布局 三栏布局（多栏布局同三栏思路），如淘宝首页，两侧留空，中间保有内容 平均布局，如淘宝首页下方的 猜你喜欢，平均排列各种商品 技术类型可以选用不同的方案实现布局 主要有 4 种 纯文档流布局 float 浮动布局 flex 弹性盒子布局 grid 网格布局 本文以技术类型为轴，分别尝试实现 3 种视觉类型 本文中的两栏布局采用如下设计图 如图，画得不太准，认为是方形就好了，同时为了展示效果，在代码中会放大 10 倍 三栏布局采用 淘宝首页 作为示例 平均布局采用 bilibili 番剧区作为示例 纯文档流纯文档流布局，利用了文档流本身的特点——表现为块级的元素逐行排列，表现为内联的元素同行自左向右排列 两栏布局由图片可得，大致有如下结构的 HTML 1234567891011121314&lt;body&gt; &lt;div class="main"&gt; &lt;div class="left"&gt; &lt;div class="large"&gt;&lt;/div&gt; &lt;div class="small"&gt;&lt;/div&gt; &lt;div class="small"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="right"&gt; &lt;div class="middle"&gt;&lt;/div&gt; &lt;div class="middle"&gt;&lt;/div&gt; &lt;div class="middle"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 使用如下 CSS，即可完成两栏布局 12345678910111213141516171819202122232425262728293031323334353637* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125; /* reset */.main &#123; font-size: 0;&#125; /* 去除两列之间的空白 */.main&gt;div,.main&gt;div&gt;div &#123; border: 1px solid black;&#125; /* 令 class=main 下的子 div 和孙 div 都获得边框，便于观察 */.left,.right &#123; display: inline-block; /* 使得左右两列并排 */ width: 400px;&#125;/* 之后在左右盒子中分别逐行排列即可 */.large &#123; width: 400px; height: 500px;&#125;.middle &#123; width: 400px; height: 300px;&#125;.small &#123; width: 400px; height: 200px;&#125; 效果如图 三栏布局显然只需要在 body 中放置 3 个块 于是可以推出如下 HTML 12345&lt;body&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;main&gt;&lt;/main&gt; &lt;div class="right"&gt;&lt;/div&gt;&lt;/body&gt; 使用如下 CSS，即可完成三栏布局 1234567891011121314151617181920212223242526272829* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125; /* reset */body &#123; font-size: 0;&#125; /* 去除底部空白 */body&gt;* &#123; display: inline-block;&#125; /* 使得三个块并排 */main &#123; border: 1px solid black; height: 100vh; width: 60vw;&#125; /* 使得 main 获得大小和边框，便于观察 */ /* 分别设定左右宽度 */.left &#123; width: 20vw;&#125;.right &#123; width: 20vw;&#125; 效果如图 可见随着视口变小，中间部分也会自适应 平均布局平均布局一般都设定了每个单位所占大小，所以一般分为占满全行和占不满两种 而占不满的话，在多行场合下末行又会很难看，所以一般都是占满全行 设每个块大小为 width = height = 200px，每行 4 个块，放在刚才的三栏布局的 main 元素中 那么显然，为了维持每行 4 个块，应该取消响应式 鉴于之前说过的 margin 的同行不合并特性，一般只会设置单方向（通常为 right）的 margin 设每两个块之间隔开的距离为 x，显然 4 200px + 3 x = main.width - main.border.width * 2 设 x = 30px，则 main.width = 892px 可以推出如下 HTML 1234567891011121314151617181920212223&lt;body&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;main&gt; &lt;div class="column"&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="column"&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="column"&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/main&gt; &lt;div class="right"&gt;&lt;/div&gt;&lt;/body&gt; 使用以下 CSS，即可实现占满全行的效果 123456789101112131415161718192021222324252627282930313233343536373839404142434445/* reset */* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125;/* 去除底部空白 */body &#123; font-size: 0;&#125;/* 使得三个块并排 */body&gt;* &#123; display: inline-block;&#125;/* 使得 main 获得大小和边框，便于观察 */main &#123; border: 1px solid black; height: 100vh; width: 892px;&#125;/* 分别设定左右宽度 */.left &#123; width: calc((100vw - 892px) / 2);&#125;.right &#123; width: calc((100vw - 892px) / 2);&#125;.entity &#123; display: inline-block; border: 1px solid black; width: 200px; height: 200px; margin-right: 30px;&#125; 效果如图 发现惨了！怎么换行了！ 从开发者工具可以看到，是因为每行最后一个 div 的右外边距超出容器了，所以被换行，这时候，我们需要添加如下 CSS 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/* reset */* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125;/* 去除底部空白 */body &#123; font-size: 0;&#125;/* 使得三个块并排 */body&gt;* &#123; display: inline-block;&#125;/* 使得 main 获得大小和边框，便于观察 */main &#123; border: 1px solid black; height: 100vh; width: 892px;&#125;/* 分别设定左右宽度 */.left &#123; width: calc((100vw - 892px) / 2);&#125;.right &#123; width: calc((100vw - 892px) / 2);&#125;.entity &#123; display: inline-block; border: 1px solid black; width: 200px; height: 200px; margin-right: 30px;&#125;/* 选择第 4 个 entity div 并取消其右外边距 */.column&gt;.entity:nth-child(4) &#123; margin-right: 0;&#125; 或选用对容器进行调整的 CSS，更高级，更受面试官喜爱 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/* reset */* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125;/* 去除底部空白 */body &#123; font-size: 0;&#125;/* 使得三个块并排 */body&gt;* &#123; display: inline-block;&#125;/* 使得 main 获得大小和边框，便于观察 */main &#123; border: 1px solid black; height: 100vh; width: 892px;&#125;/* 分别设定左右宽度 */.left &#123; width: calc((100vw - 892px) / 2);&#125;.right &#123; width: calc((100vw - 892px) / 2);&#125;.entity &#123; display: inline-block; border: 1px solid black; width: 200px; height: 200px; margin-right: 30px;&#125;/* 令行末的右外边距折返 30px */.column &#123; margin-right: -30px;&#125; 效果如图 但是现在纯文档流布局已经没人用了，除非你的网站需要在 IE 6 以下运行…… float通过 caniuse，我们知道对于 IE，float 可以运行在 IE 6 7 8 9 10 11 上，除非 6 以下才需要使用纯文档流布局 而 flex 在 IE 6 7 8 9 上都不能使用，10 和 11 的兼容性也不是完全兼容 所以，假如你还需要兼容 IE，最好使用 float 布局 两栏布局由图片可得，大致有如下结构的 HTML 1234567891011121314&lt;body&gt; &lt;div class="main clearfix"&gt; &lt;div class="left"&gt; &lt;div class="large"&gt;&lt;/div&gt; &lt;div class="small"&gt;&lt;/div&gt; &lt;div class="small"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="right"&gt; &lt;div class="middle"&gt;&lt;/div&gt; &lt;div class="middle"&gt;&lt;/div&gt; &lt;div class="middle"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 使用如下 CSS，即可完成两栏布局 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125;/* reset */.main &#123; font-size: 0;&#125;/* 去除两列之间的空白 */.main&gt;div,.main&gt;div&gt;div &#123; border: 1px solid black;&#125;/* 令 class=main 下的子 div 和孙 div 都获得边框，便于观察 */.left,.right &#123; width: 400px;&#125;/* 令 left 和 right 都向左浮动 */.left &#123; float: left;&#125;.right &#123; float: left;&#125;/* 之后在左右盒子中分别逐行排列即可 */.large &#123; width: 400px; height: 500px;&#125;.middle &#123; width: 400px; height: 300px;&#125;.small &#123; width: 400px; height: 200px;&#125;/* 用于清除浮动，否则会发现父元素的高度变成了 0 */.clearfix:after&#123; content: ''; display: block; clear: both;&#125; 效果图与纯文档流相同 从 CSS 可见，如果同层级的两个元素都是向左浮动的话，则排列顺序按照其在文档中的出现顺序 当然也可以令右边盒子向右浮动，此时右边盒子会出现在父元素的最右边，具体位置取决于父元素宽度 在本例中，如果父元素宽度为 800px，则与向左浮动表现相同 三栏布局显然只需要在 body 中放置 3 个块 于是可以推出如下 HTML 12345&lt;body class="clearfix"&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;main&gt;&lt;/main&gt; &lt;div class="right"&gt;&lt;/div&gt;&lt;/body&gt; 使用如下 CSS，即可完成三栏布局 12345678910111213141516171819202122232425262728293031323334353637/* reset */* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125;/* 使得 main 获得大小和边框，便于观察 */main &#123; float: left; border: 1px solid black; height: 100vh; width: 60vw;&#125;.left &#123; float: left; border: 1px solid white; /* 若不设定边框，则会观察到左右空白的宽度都变为 0，但可以设置白色边框保持左边空白 */ width: 20vw;&#125;.right &#123; float: right; /* 右边不需要设置边框，因为排列是从左向右的，除非 main 的 float = right */ width: 20vw;&#125;/* 用于清除浮动，否则会发现父元素的高度变成了 0 */.clearfix:after &#123; content: ''; display: block; clear: both;&#125; 效果图与纯文档流相同 平均布局float 实现平均布局的代码和效果，与纯文档流几乎一致，除了 clearfix，就只是把 1display: inline-block; 换成了 1float: left; 而已 关于右外边距溢出容器的处理，也与纯文档流一致 故此处不再给出示例 flex通过 caniuse 可以发现，除了 IE 之外的所有浏览器最新版本均支持 flex，但 grid 布局尚未受到全面支持 所以当你不需要兼容 IE，但又不是只需要兼容最新的浏览器时，可以选择 flex 布局方案 附一个 flex 布局小游戏 FLEXBOX FROGGY 语法Flex 布局教程：语法篇) flex 有两个主要概念：容器（container）和项目（item） 一个容器中包含两条轴：主轴和交叉轴，交叉轴恒垂直于主轴。默认主轴是水平方向 一个容器中往往包含多个项目，项目沿主轴排列 容器容器上可以设置 6 个属性 flex-direction flex-wrap flex-flow justify-content align-items align-content 属性含义不解释了，本文不是教语法的，是教布局的，可以点击阮一峰博客学习语法 下同，不讲语法 项目项目上可以设置 6 个属性 order flex-grow flex-shrink flex-basis flex align-self 两栏布局显然扭转主轴方向到竖直方向，更有利于排版 所以由图片可得，大致有如下结构的 HTML 1234567891011121314&lt;body&gt; &lt;div class="main"&gt; &lt;div class="left"&gt; &lt;div class="large"&gt;&lt;/div&gt; &lt;div class="small"&gt;&lt;/div&gt; &lt;div class="small"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="right"&gt; &lt;div class="middle"&gt;&lt;/div&gt; &lt;div class="middle"&gt;&lt;/div&gt; &lt;div class="middle"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 使用如下 CSS，即可完成两栏布局 1234567891011121314151617181920212223242526272829303132333435363738394041424344/* reset */* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125;/* 令 class=main 下的子 div 和孙 div 都获得边框，便于观察 */.main&gt;div,.main&gt;div&gt;div &#123; border: 1px solid black;&#125;/* 令主盒子成为弹性盒子容器，使得左右盒子沿默认主轴（水平方向）排列 */.main &#123; display: flex;&#125;.left,.right &#123; /* 令左右盒子都成为弹性盒子容器 */ display: flex; /* 更改主轴方向 */ flex-direction: column; width: 400px; height: 800px;&#125;/* 之后在左右盒子中分别设置大小即可 */.large &#123; flex-grow: 2;&#125;.middle &#123; flex-grow: 1;&#125;.small &#123; flex-grow: 1;&#125; 效果图与纯文档流相同 三栏布局显然只需要在 body 中放置 3 个块 于是可以推出如下 HTML 12345&lt;body&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;main&gt;&lt;/main&gt; &lt;div class="right"&gt;&lt;/div&gt;&lt;/body&gt; 使用如下 CSS，即可完成三栏布局 1234567891011121314151617181920212223242526272829/* reset */* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125;/* 使得 body 成为弹性盒子容器，让三个区域都沿默认主轴（水平方向）排列 */body &#123; display: flex; height: 100vh;&#125;/* 使得 main 获得大小和边框，便于观察 */main &#123; border: 1px solid black; flex-grow: 3;&#125;.left &#123; flex-grow: 1;&#125;.right &#123; flex-grow: 1;&#125; 效果图与纯文档流相同 代码明显比 float 简洁许多，所以是比 float 更好用的布局方案 平均布局设每个块大小为 width = height = 200px，每行 4 个块，放在刚才的三栏布局的 main 元素中 可以推出如下 HTML 1234567891011121314151617181920212223&lt;body&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;main&gt; &lt;div class="column"&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="column"&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="column"&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;/div&gt; &lt;/main&gt; &lt;div class="right"&gt;&lt;/div&gt;&lt;/body&gt; 使用以下 CSS，即可实现占满全行的效果 12345678910111213141516171819202122232425262728293031323334353637383940414243/* reset */* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125;/* 使得 body 成为弹性盒子容器，让三个区域都沿默认主轴（水平方向）排列 */body &#123; display: flex; height: 100vh;&#125;/* 使得 main 获得大小和边框，便于观察 */main &#123; border: 1px solid black; flex-grow: 3;&#125;.left &#123; flex-grow: 1;&#125;.right &#123; flex-grow: 1;&#125;.column &#123; border: 1px solid black; display: flex; max-height: 200px; height: 15vw; justify-content: space-between;&#125;.entity &#123; border: 1px solid black; width: 200px; height: 200px;&#125; 效果如图 发现，坏了，怎么最后一行隔开这么远 于是我们便不能使用 justify-content 来简单控制间距，必须使用 margin-right 来控制 计算结果沿用纯文档流布局的计算结果 于是 CSS 变更为如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051/* reset */* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125;/* 去除底部空白 */body &#123; font-size: 0;&#125;/* 使得三个块并排 */body&gt;* &#123; display: inline-block;&#125;/* 使得 main 获得大小和边框，便于观察 */main &#123; border: 1px solid black; height: 100vh; width: 892px;&#125;/* 分别设定左右宽度 */.left &#123; width: calc((100vw - 892px) / 2);&#125;.right &#123; width: calc((100vw - 892px) / 2);&#125;/* 令行末的右外边距折返 30px */.column &#123; display: flex; margin-right: -30px;&#125;.entity &#123; border: 1px solid black; width: 200px; height: 200px; margin-right: 30px;&#125; 效果如图 好了，使用负 margin，成功修复！ 当然 nth-child 也可以，不过不建议 grid通过 caniuse 可以发现，grid 布局尚未受到全面支持 所以当你只需要兼容最新的，甚至是未来的浏览器时，可以选择 grid 布局方案 附一个 grid 布局小游戏 GRID GARDEN 语法CSS Grid 网格布局教程 容器和项目的概念同 flex，但是 grid 没有主轴和交叉轴 如果说 flex 的精力集中在每个容器的主轴上，是一维操作，那 grid 布局就是二维操作 容器容器上可以设置 7 种属性 grid-template-columns/rows/areas column/row-gap gap grid-auto-flow justify/align/place-items justify/align/place-content grid-auto-columns/rows 项目项目上可以设置 3 种属性 grid-column/row-start/end grid-column/row/area justify/align/place-self 两栏布局由图片可得，大致有如下结构的 HTML 12345678910&lt;body&gt; &lt;div class="main"&gt; &lt;div class="large"&gt;&lt;/div&gt; &lt;div class="small1"&gt;&lt;/div&gt; &lt;div class="small2"&gt;&lt;/div&gt; &lt;div class="middle1"&gt;&lt;/div&gt; &lt;div class="middle2"&gt;&lt;/div&gt; &lt;div class="middle3"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 使用如下 CSS，即可完成两栏布局 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455/* reset */* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125;/* 令 class=main 下的子 div 和孙 div 都获得边框，便于观察 */.main&gt;div,.main&gt;div&gt;div &#123; border: 1px solid black;&#125;/* 令主盒子成为 grid 容器 */.main &#123; display: grid; grid-template-columns: 400px 400px; grid-template-rows: repeat(9, 100px); grid-template-areas: 'large middle1' 'large middle1' 'large middle1' 'large middle2' 'large middle2' 'small1 middle2' 'small1 middle3' 'small2 middle3' 'small2 middle3';&#125;.large &#123; grid-area: large;&#125;.small1 &#123; grid-area: small1;&#125;.small2 &#123; grid-area: small2;&#125;.middle1 &#123; grid-area: middle1;&#125;.middle2 &#123; grid-area: middle2;&#125;.middle3 &#123; grid-area: middle3;&#125; 效果图与纯文档流相同 语义化非常好，一看就知道布局长什么样 三栏布局显然只需要在 body 中放置 3 个块 于是可以推出如下 HTML 12345&lt;body&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;div class="center"&gt;&lt;/div&gt; &lt;div class="right"&gt;&lt;/div&gt;&lt;/body&gt; 使用如下 CSS，即可完成三栏布局 1234567891011121314151617181920212223242526272829303132333435/* reset */* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125;/* 令 div 都获得边框，便于观察 */div &#123; border: 1px solid black;&#125;/* 令主盒子成为 grid 容器 */body &#123; font-size: 0; display: grid; grid-template-columns: 1fr 3fr 1fr; grid-template-rows: 100vh; grid-template-areas: 'left center right';&#125;.left &#123; grid-area: left;&#125;.center &#123; grid-area: center;&#125;.right &#123; grid-area: right;&#125; 效果如下 这令人惊叹的高度语义化，比 flex 高到不知道哪去了 平均布局设每个块大小为 width = height = 200px，每行 4 个块，放在刚才的三栏布局的 main 元素中 可以推出如下 HTML 1234567891011121314151617&lt;body&gt; &lt;div class="left"&gt;&lt;/div&gt; &lt;div class="center"&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;div class="entity"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div class="right"&gt;&lt;/div&gt;&lt;/body&gt; 使用以下 CSS，即可实现占满全行的效果 1234567891011121314151617181920212223242526272829303132333435363738/* reset */* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125;/* 令 div 都获得边框，便于观察 */div &#123; border: 1px solid black;&#125;/* 令主盒子成为 grid 容器 */body &#123; font-size: 0; display: grid; grid-template-columns: 1fr 3fr 1fr; grid-template-rows: 100vh; grid-template-areas: 'left center right';&#125;.left &#123; grid-area: left;&#125;.center &#123; grid-area: center; display: grid; grid-template-columns: repeat(4, 1fr); grid-template-rows: repeat(auto-fill, 200px);&#125;.right &#123; grid-area: right;&#125; 效果如图 完美的自动占格子，不再有负 margin 的问题 即便需要间隔，也可以通过 gap 来实现 12345678910111213141516171819202122232425262728293031323334353637383940/* reset */* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125;/* 令 div 都获得边框，便于观察 */div &#123; border: 1px solid black;&#125;/* 令主盒子成为 grid 容器 */body &#123; font-size: 0; display: grid; grid-template-columns: 1fr 3fr 1fr; grid-template-rows: 100vh; grid-template-areas: 'left center right';&#125;.left &#123; grid-area: left;&#125;.center &#123; grid-area: center; display: grid; grid-template-columns: repeat(4, 1fr); grid-template-rows: repeat(auto-fill, 200px); column-gap: 30px; row-gap: 10px;&#125;.right &#123; grid-area: right;&#125; 效果如图 天不生我 grid 布局，万古如长夜！！！]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浏览器请求机制]]></title>
    <url>%2Ffrontend%2Fbrowser-request-mechanism%2F</url>
    <content type="text"><![CDATA[众所周知，前端的内容一般都是通过 HTTP 相关协议获取，并在浏览器上呈现的 要想深刻了解浏览器的请求机制，首先要有一定的 计算机网络基础 浏览器的请求流程显然，我们要先了解一下，当我们访问一个网页时，浏览器都做了什么 浏览器执行了以下动作 URL 解析，判断用户输入的是什么，自动组装请求 查看本地缓存，是否有已经缓存的该地址的资源，若未过期则直接取用，跳到处理 HTML 文档 DNS 查询，获得服务器地址 与服务器建立 TCP 连接，如果是 HTTPS 协议，还会有密钥交换 向服务器发送 HTTP 或 HTTPS 请求 服务器如果回复了一个永久重定向（301）或临时重定向（302），则浏览器需要向新的地址重新发送请求 服务器处理请求并响应，此时浏览器收到的响应状态码可能是 200 或 304 浏览器开始处理 HTML 文档，根据 HTML 文档生成 DOM 树和 CSSOM 树 合并两棵树，得到渲染树 根据渲染树，开始执行渲染五步骤 总的来说，涉及以下知识点 缓存机制 DNS 查询 TCP 连接 HTTP 与 HTTPS 页面渲染 缓存机制显然网络请求是非常消耗时间的 有没有办法能减少网络请求呢？答案就是缓存 缓存位置首先要了解一下缓存保存在哪里，浏览器又是如何索引缓存的 按照访问顺序，缓存一般有如下 4 个存储位置 Service Worker Memory Cache Disk Cache Push Cache Service WorkerService Worker 是运行在浏览器背后的独立线程，一般可以用来实现缓存功能使用 Service Worker 的话，传输协议必须为 HTTPS，因为 Service Worker 中涉及到请求拦截，所以必须使用 HTTPS 协议来保障安全Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且缓存是持续性的 Memory Cache也就是内存缓存，包含一些小文件 但一旦关掉当前标签页，该标签页对应的内存缓存就被释放了 Disk Cache硬盘缓存，显然比内存缓存要慢，但存储空间要大，且只有资源过期了才会释放资源 一般大文件会放到 Disk Cache 中，小文件放到 Memory Cache 中 但如果当前系统内存占用高，则会优先存进 Disk Cache Push Cache是 HTTP 2 中的 服务端推送 产生的缓存，只在 session 中存在，且缓存时间也很短（在 Chrome 中约 5 分钟） 关于其优点，详见 HTTP 2 的特点描述 缓存过程浏览器会根据以下流程，确定缓存的处理方法 URL 解析后，是否含有目标地址的缓存？ 否 向服务器发送请求 返回请求结果和缓存标识，将结果存入缓存 是 缓存是否过期？ 根据 Expires ( HTTP 1.0 ) 或 Cache-Control ( HTTP 1.1 ) 判断 是（协商缓存机制） 在头部添加字段 If-Modified-Since ( HTTP 1.0 ) 或 If-None-Match ( HTTP 1.1 ) ，然后向服务器发送请求 服务器根据字段值判断资源是否有更新，并响应给浏览器 资源是否更新？ 是，则连带 HTML 文档一同返回给浏览器，同时状态码置为 200，浏览器将请求结果存入缓存 否，返回状态码 304，读取并返回缓存 否（强缓存机制） 读取并返回缓存 缓存机制图示如下 强缓存缓存未过期，则不会向服务器发送请求，直接读取并返回缓存 该操作会在控制台产生一个假请求，返回状态码 200，并显示 from memory cache 或 from disk cache 由上图可见，有两个参数可以决定强缓存 Expires Cache-Control Expires是 HTTP 1 的产物 由服务端指定具体多久之后过期，关键字段名为 max-age，实际的 Expires = max-age + 服务器收到请求的时间 显然，Expires 是否过期，取决于与本地时间的对比结果，所以如果设置本地时间为超过 Expires 的值，则会直接造成 Expires 过期 Cache-Control是 HTTP 1.1 的产物 一般有以下字段 字段名 参考值 作用 public 无 客户端和代理服务器均可以缓存该资源 private 无 只有客户端可以缓存该资源 max-age 30 缓存 30 秒后过期 s-maxage 30 覆盖 max-age，但只在代理服务器中生效 no-store 无 不缓存 no-cache 无 资源被缓存，但立即过期，下次请求会发起协商缓存认证 max-stale 30 30 秒内即使过期也使用该缓存 min-fresh 30 希望在 30 秒内获取最新的响应 推荐的配置思路图如下 在使用 Cache-Control 的时候，有两种常见情况，其描述和对策如下 情况 对策 描述 资源频繁更新 Cache-Control: no-cache 永不缓存，确保时效性 资源不常更新 Cache-Control: max-age=31536000 缓存一年 对比由上文可知，Cache-Control 是更新版本的参数，也具有更强大的功能，所以当 Cache-Control 和 Expires 同时存在时，Cache-Control 优先级要高于 Expires 现在的 Expires，只是为了兼容不支持 HTTP 1.1 的环境罢了 协商缓存当强缓存查找不到未过期的合适缓存，但存在已过期的合适缓存时，浏览器会采用协商缓存策略 一般有两种情况 协商缓存有效，服务器返回 304 Not Modified 协商缓存失效，服务器返回 200 和新的资源 那么如何提交协商缓存请求呢？可以通过设置两组参数实现 Last-Modified 和 If-Modified-Since是 HTTP 1 提出的缓存控制参数 浏览器在第一次访问资源时，服务器可以在响应中加入请求头 Last-Modified，值是这个资源在服务器上的最后修改时间 浏览器下次强缓存命中失败，要请求这个资源时，发现这个已过期资源带有 Last-Modified 标识，则会在请求中带上 If-Modified-Since 的 header 服务器收到 If-Modified-Since 后，与服务器上的资源对比，如果 If-Modified-Since 的时间小于服务器上该资源的最后更新时间，则说明资源有更新，服务器返回 200 和新的资源文件，否则仅返回 304 但如果客户在本地打开缓存文件，即使没有修改，也依然会造成 Last-Modified 更新，此时会导致缓存失效 并且，Last-Modified 的精确度是秒，所以如果在小于秒的时间内修改了文件，Last-Modified 并不会更新，导致命中的文件不正确 所以，HTTP 1.1 提出了更加精确的验证参数，Etag 和 If-None-Match Etag 和 If-None-Match浏览器在第一次访问资源时，服务器可以在响应中加入请求头 Etag，值是这个资源在服务器上的唯一标识。只要文件发生变化，Etag 就会重新生成 如同 Last-Modified，浏览器在使用 Etag 进行协商缓存时，也会在请求中加入特殊的 header，此时这个 header 为 If-None-Match 如果 If-None-Match 与服务器上的文件标识符相同，则返回 304，否则返回 200 和新的资源文件 对比显然 Etag 要比 Last-Modified 更精确，但精确的代价就是生成标识符的算法的复杂性增大 但大部分情况下，Etag 造成的性能损耗都可以忽略不计，所以当 Etag 和 Last-Modified 同时存在时，Etag 的优先级较高 无缓存策略如果服务器什么缓存都没设置，难道就不缓存了吗？显然不是 此时浏览器会取响应报文中的 Date 来减去 Last-Modified，取得一个时间差值，然后取这个差值的 10% 作为缓存时间 DNS 查询DNS 查询流程按顺序一般如下 浏览器缓存 操作系统缓存 路由器缓存 主机上的 hosts 文件 本地域名服务器等域名服务器 TCP 连接流程中说到，浏览器与服务器之间会建立 TCP 连接来传输数据，那么显然具有至少一个 TCP 连接 那么自然产生了以下问题 一个 TCP 连接能用多久？什么时候断开？ 一个 TCP 连接可以承担几个 HTTP 请求的任务？ 一个 TCP 连接能不能同时发送数个 HTTP 请求？ 浏览器最多能对同一服务器建立几个 TCP 连接？ 一个 TCP 连接能用多久在 HTTP 1 中，服务器会在响应了一个 HTTP 请求后，立刻断开这个 TCP 连接 但如果要对该服务器连续发起多个请求，重复建立连接显然开销过大 于是开始有某些服务器，提出了不在 HTTP 标准中的头部字段 Connection，并通过设置 Connection: keep-alive 来保持当前请求使用的 TCP 连接不断开 因为 SSL 也是基于 TCP 的，所以此时 SSL 连接也不会断开，不需要重新交换密钥和验证 既然 Connection: keep-alive 这么好用，于是 HTTP 1.1 就将其加入了标准之中，并且默认保持 TCP 连接，除非手动在请求头中指定 Connection: close 一个 TCP 连接可以承担几个 HTTP 请求的任务从上一个问题，显然可以看出，如果一个 TCP 连接不断开，是可以用来发送多个 HTTP 请求的，直到断开为止 一个 TCP 连接能不能同时发送数个 HTTP 请求在 HTTP 1.1 中，一个 TCP 连接同时只能处理一个请求，不同请求不能同时使用同一个 TCP 连接 虽然标准中设计了一个参数 Pipelining 来试图解决这个问题，但是了解网络工作原理的人都知道，客户端按某个顺序发送的请求，服务器并不能按顺序接收（同一个请求的 IP 报文可以，详见 IP 数据报） 那就造成客户端发送请求后，接收到的响应不能和请求按发送时的顺序一一对应，那请求就完全错乱了 所以在 HTTP 1.x 的场合，浏览器没有合适的并发方案，只能通过保持连接或同时并行多个连接来提高效率 但是 HTTP 2 中引入了多路复用的概念，在应用层采取如同网络层的 IP 数据报一样的分段标号模式，此时同一个 TCP 连接就可以正常并发多个 HTTP 请求了 浏览器最多能对同一服务器建立几个 TCP 连接依据浏览器不同，这个限制是不同的 对于 Chrome，最多允许对同一个 host 建立 6 个 TCP 连接 HTTP 与 HTTPSHTTP 1.0 和 HTTP 1.1 在上文已经有提到一些了，除了缓存机制和 TCP 以外也没有什么太大的差别，所以着重讨论 HTTP 2.0 和 HTTPS HTTP 2.0HTTP 2.0 有如下特点 二进制分帧 首部压缩 多路复用 服务端推送 二进制分帧我们知道数据链路层有以太网帧，网络层有 IP 报文分割，此处的二进制分帧设计思路正是基于前两者的特点而得来的 使用了二进制分帧后，每个 HTTP 报文都使用二进制格式传输数据，每个报文都由一个或多个帧组成 相比 HTTP 1.x 的文本格式传输，HTTP 2.0 的二进制格式解析效率更高 为了正常使用帧，HTTP 2.0 同时使用了流的概念 流是一个虚拟通道，可以承载双向消息，每个流都有一个唯一 ID 简单理解，流就是同一组请求和响应的组号 首部压缩显然每个请求之间都使用了大量的头部字段，且这些字段的值在浏览器和服务器之前是一致的 HTTP 2.0 则采用了”首部表”来缓存已经发送过的头部字段键值对，使得浏览器和服务器对于与缓存相同的字段，不需要重复在请求中发送，显著减小了请求报文的大小 该首部表在 HTTP 2.0 连接断开前始终存在，由使用双方共同更新 当产生未记录的键值对时，要么更新首部表中的记录值，要么追加到首部表的末端 多路复用在 HTTP 2.0 中，相同域名下的所有通信都使用同一个连接完成，该连接可以并发任意数量的请求和响应，克服了 HTTP 1.x 中同一个连接不能并发请求的问题，消除了 TCP 连接多次建立以及浏览器同时维护多个 TCP 连接的开销 之所以可以做到这一点，是因为二进制分帧后，同一个流的每个帧都含有首部流标识，可以乱序发送，双方都可以根据首部流标识得到正确的消息 该设计思路的具体描述可以参考 IP 数据报的分割 服务端推送是 HTTP 2.0 最重要的特性 在 HTTP 1.x 中，如果浏览器没有发出请求，服务器是不能向浏览器发送数据的 但在 HTTP 2.0 中，服务器可以打开 PUSH 模式，当浏览器请求了一个资源后，服务器可以推送相关资源给浏览器 例如，有如下 HTML 12345678&lt;html&gt;&lt;head&gt; &lt;link rel="stylesheet" href="style.css"&gt;&lt;/head&gt;&lt;body&gt; &lt;img src="example.png"&gt;&lt;/body&gt;&lt;/html&gt; 如果在 HTTP 1.x 中，浏览器需要发起 3 个请求，才可以得到整个页面的完整数据 但在 HTTP 2.0 中，如果服务器打开 了 PUSH 模式，浏览器只需要发送 1 个请求，申请取得 HTML 文档，服务器就会先返回 HTML 文档，然后根据 HTML 文档中的资源指向，向浏览器推送 css 文件和 png 文件，这样浏览器在后续要使用的时候，就发现已经收到了资源，不需要再发请求了 这样，只要 1 个请求，就完成了以前 3 个请求才能完成的事情，效率显然大大提高 既然服务器可以主动推送，客户端自然也可以选择是否接受 如果服务端推送的资源已经被浏览器缓存过，浏览器可以通过发送RST_STREAM帧来拒收 主动推送也遵守同源策略，服务器不会随便推送第三方资源给客户端。 HTTPSHTTPS 基于 SSL 协议，采用 RSA 算法，使得通信双方不需要直接发送私钥，就可以达成合意开始加密通信 具体流程如下 浏览器向服务器发起 HTTPS 连接请求 服务器向浏览器发送公钥和根据自己的私钥与公钥联合加密的密文 浏览器收到公钥和密文，随机产生一个私钥，向服务器发送根据自己的私钥与公钥联合加密的密文 双方都根据公钥、自己的私钥和对方发送的密文进行计算，得到共同的密钥，通信建立 在之后的通信中，都使用这个计算出来的密钥进行加密通信 算法原理概述可以参看 图解非对称加密 页面渲染首先是浏览器渲染 5 步图 根据上图，可知浏览器渲染流程如下 首次渲染 解析 JS 脚本。该动作会导致阻塞，所以一般放在 HTML 文档最后 构建 DOM 树和 CSSOM 树 合并为渲染树，进行布局 布局完成后，根据渲染树进行绘制 绘制完成后交由 GPU 进行合成 后续渲染 解析 JS 脚本 计算布局和样式更改 将布局和样式更改同步到渲染树上 根据渲染树重排、重绘 重绘完成后交由 GPU 进行合成 特性浏览器渲染有如下几个特性 容错机制我们在编码中从来没有见过浏览器报 HTML 和 CSS 的错，因为现代浏览器对 CSS 有强大的容错能力，会自动修复那些可以修复的 HTML 和 CSS 的语法错误，对于不能修复的则直接跳过不加解析 页面生命周期HTML 页面生命周期中有以下事件 DOMContentLoaded load beforeunload unload 触发时间点如下 事件 触发时点 DOMContentLoaded 当 DOM 树构建完毕 load 当所有资源已经加载完毕 beforeunload 当用户正在离开页面，此时数据尚未清除 unload 当用户已经离开页面 通常我们可以利用 beforeunload 事件来弹出一个对话框，用以询问用户是否确定离开 需要注意的是，当 DOMContentLoaded 事件发生时，async 和 defer 脚本可能尚未执行，其余文件也很有可能正在下载中，不要轻易访问它们 除了上述事件，我们也可以用 document.readyState 来获取页面当前的状态，并通过 readystatechange 事件来监听页面生命周期的变化 document.readyState 通常有 3 个值 loading，页面正在加载中 interactive，页面解析完毕，触发时点与 DOMContentLoaded 相同，但执行时比 DOMContentLoaded 要早 complete，页面上所有资源都已经加载完毕，触发时点与 load 相同，但执行时比 load 要早 参考链接在浏览器输入URL回车之后发生了什么？（超详细版） 深入理解浏览器的缓存机制 面试官问我：一个 TCP 连接可以发多少个 HTTP 请求？我竟然回答不上来… 一文读懂 HTTP/2 特性 深入浅出：HTTP/2 页面生命周期：DOMContentLoaded, load, beforeunload, unload]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>浏览器</tag>
        <tag>http(s)</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS盒子要点简述]]></title>
    <url>%2Ffrontend%2Fcss-box-summary%2F</url>
    <content type="text"><![CDATA[CSS 的知识点太多了，本文只讲一些重要的、和盒子有关的知识点 盒子模型首先当然先介绍 CSS 最重要的概念：盒子模型 我们在网站上可以看到各种各样的元素，在页面上显示为一个方形的”盒子” 用开发者工具一看，每个元素都带着各自的彩色边 这个盒子，就是盒子模型 组成从上图彩色部分可以看出，每个盒子都有 4 块彩色区域，分别是 margin，外边距，表示盒子外部空出的空间 border，边框，表示盒子的界限 padding，内边距，表示盒子内部空出的空间，也即边框和内容的距离 content，内容 类型知道了盒子模型的组成，就可以介绍一下盒子的类型 盒子模型有两种类型 content-box（默认） border-box 我们知道，可以通过控制 width 和 height 属性来控制盒子的大小，那顾名思义 在 content-box 中设置 width 就是设置内容区域的宽度，高度同理 在 border-box 中设置 width 就是设置内容+内边距+边框的宽度，高度同理。此处尺寸包含边框的尺寸大小 所以在 content-box 中，width = content.width，总宽度自动计算 在 border-box 中，width = content.width + padding.width + border.width，内容宽度自动计算 那么怎么设置呢？可以通过 1box-sizing: border-box; 来切换成 border-box 文档流然后介绍一下 CSS 基本概念——文档流 观察开发者工具里的 HTML 文档，可以观察到类似如下情况 可见元素一般是从上到下、独占一行的，只有文字之类的内部元素才占同一行 而图片占的位置，又会影响后面标签页的位置 一般一个元素独占一行，且前面的布局会影响后面的布局，这样的就是文档流 要使元素脱离文档流，可以修改其 position 属性，或为其 float 属性赋值 那么哪些元素会独占一行呢？ displayHTML 中有 div，表现为占据一行，也有 span，表现为在同一行显示。为什么会有这种区别呢？ 答案就在 CSS 的 display 属性身上 display 一般有三种取值 block inline inline-block 默认值要看是什么标签，不同标签默认值不同 表现分别如下 display 取值 特性 block 独占一行，高度自适应，可以设置宽高 inline 多个共用一行，高度自适应，宽度尽可能短，行末溢出则切断，不可设置宽高 inline-block 多个共用一行，高度自适应，宽度尽可能短，行末溢出不切断，其余同 block 那么既然可以设置宽高，如果 block 中文本长度超出设定范围，怎么办呢 overflow可以使用 overflow 属性定义内容溢出的情况下父元素如何表现 overflow 一般有 5 种取值 visible（默认） hidden scroll auto inherit 表现分别如下 overflow 取值 特性 visible 溢出部分恒可见 hidden 溢出部分恒不可见 scroll 不论是否溢出，均提供滚动条，当溢出时可以通过滚动条查看溢出内容 auto 仅当溢出时，会在溢出方向提供滚动条，可以通过滚动条查看溢出内容 inherit 继承父元素的 overflow 设置值 显然 scroll 比较蠢，需要滚动条的时候用 auto 比较好 还可以通过 overflow-x 和 overflow-y 来分别设置 x 方向的溢出和 y 方向的溢出如何处理 注意，当设置了滚动条时，如果内容超出设定范围，虽然会提供滚动条以查看溢出内容，但其余内容只会显示在第一视角，不会自动填充到溢出范围 讲完盒子整体，来重点讲讲盒子里具体的内容 内容一般用来放置文字，故而此处主要讲文字 文字常用属性如下 属性 用途 font-family 设置字体 font-size 设置文字大小，可选单位 px、em、rem、%、vw、vh color 设置文字颜色，可用单词、rgba、hsla、#十六进制色号 letter-spacing 字符间距 line-height 行高 text-align 常取值 center，文本居中 vertical-align 与同行元素对齐，指定对齐的基线取决于当前字体下 x 的高度 white-space 指示空格和换行符的处理方式常取值 nowrap，表示即使遇到空格和换行符，也不换行 padding是一个距离度量，表示自身 border 到自身内容区域之间的距离 可能的值： length（固定的px、pt、em等值 %（使用百分比边距，相对于最近的有设置宽度的父元素的宽度 border常用属性如下 属性 用途 border-style 必填，设置边框类型，常用 solid，共有 8 种 border-width 设置边框宽度，常用单位 px border-color 设置边框颜色，可用单词、rgba、hsla、#十六进制色号 border-radius 设置边框弧度，可以填 4 个值，表示 4 个对角方向分别的弧度常用单位 %、px box-shadow 设置边框阴影，可以设置 x、y 方向的阴影距离，模糊情况与色号 border-image 设置用来填充 border 的图片 marginmargin 表现是一个距离度量，用以清除周围元素区域 没有背景颜色，完全透明 可能的值： auto（依赖于浏览器 length（固定的px、pt、em等值 %（使用百分比边距，相对于最近的有设置宽度的父元素的宽度 外边距的直观表现就是与相邻元素的距离会拉开，比如有如下 HTML 1234&lt;body&gt; &lt;div class="first"&gt;&lt;/div&gt; &lt;div class="second"&gt;&lt;/div&gt;&lt;/body&gt; 且有如下 CSS 123456789101112body &#123; box-sizing: border-box; border: 1px solid red;&#125;div &#123; box-sizing: border-box; display: inline-block; width: 100px; height: 100px; border: 1px solid red;&#125; 可以观察到如图景象 现在我们对第一个盒子加入 margin-left 123.first &#123; margin-left: 10px;&#125; 就可以观察到第一个盒子向左，也就是 body 的左边框离开了 10 px，也就是向右移动了 10 px，连带着影响到第二个盒子也向右移动了 10 px（文档流） 如果对第二个盒子也加上 margin-left: 10px; ，那第二个盒子也会变得向第一个盒子离开了 10 px 显然，margin 是决定相隔距离的 但是，margin 是会重叠的！！！！！！ margin 重叠margin 重叠有一个前提：重叠的两个元素的 display 属性必须都是 block，不可以是 inline-block 或 inline 当满足前提时，会发生在如下情况下： 不同行，但相邻的兄弟元素，上面元素的下外边距会和下面元素的上外边距重叠 父元素中第一个子元素的上外边距会和父元素的上外边距重叠 父元素中最后一个子元素的下外边距会和父元素的下外边距重叠 当满足以上条件，且 margin 被设置了值（而且不是 auto）时，margin 会发生重叠，重叠时： 两个 margin 都是正数，保留较大值 一正一负，作差 两个均为负值，保留绝对值较大的值 如果想要取消父子重叠，可以令父元素具有以下特征 令父元素成为 BFC 块级格式化上下文 父元素设置 border 或 padding 父元素和第一个或最后一个子元素之间用 inline 或 inline-block元素隔开 很神奇吧，记得亲自尝试一下 什么，你问我为什么会这样？CSS 没有为什么（ 负 margin外边距还有一招神奇的招式，叫做负外边距，主要用来实现居中布局和平均布局，会在 CSS 布局 一文中介绍 我们知道可以用 background 属性为盒子设置背景色，那么看到这里可能有人会问，背景色会不会覆盖边框或者内容呢？ 盒子分层一个盒子的分层自顶向下大致如下 inline 和 inline-blcok 子元素 float 元素 block 子元素 border background 如何验证呢？通过调整对 border 的着色的透明度，就可以验证 那如何超越这个分层呢？可以使用 z-index 属性 z-index对于一个已经定位的盒子（即其 position 属性值不是 static，这里要注意的是 CSS 把元素看作盒子），z-index 属性指定： 盒子在当前堆叠上下文中的堆叠层级。 盒子是否创建一个本地堆叠上下文。 默认的 z-index 是 auto，符合上述分层模型 当 z-index 相同时，按照元素在文档流中的出现顺序决定元素的遮挡关系，后出现的遮挡先出现的 虽然 auto 的解析值是 0，但是直接令 z-index = 0 和令 z-index = auto，是不一样的 当你为某元素设置了一个不是 auto 的 z-index，世界就改变了 刚才在分层模型中说到 内联子元素是在最高层 这里又提到默认的 z-index 是 auto 那就可以推断出，最高层的内联子元素，在解析后 z-index = 0，那么它就会比 z-index 大于 0 的元素要低！！就会被这样的元素覆盖了！！ 同理可以推断，z-index 小于 0 的元素，会被 background 覆盖，因为 background 的解析值也是 0 于是可以大致得出结论，z-index 数值大的会遮挡数值小的元素 但这也不是绝对的，两个元素是否满足 z-index 决定的遮挡关系，还要看其所在环境，这个环境叫做 层叠上下文 层叠上下文层叠上下文是一个小世界，必须要同等级的小世界之间，才可以互相比较 z-index 设有如下的 HTML 123456&lt;body&gt; &lt;div style="z-index: 1"&gt; &lt;div style="z-index: 3"&gt;&lt;/div&gt; &lt;/div&gt; &lt;div style="z-index: 2"&gt;&lt;/div&gt;&lt;/body&gt; 按说，z-index = 3 的 div 应当遮挡住 z-index = 2 的 div，但实际上并不是，因为 z-index = 3 的 div 与 z-index = 2 的 div 并不同级，他只能与 z-index = 1 的 div 中的其它元素进行比较 而因为 z-index = 1 的 div 恒低于 z-index = 2 的 div，所以 z-index = 3 的 div 也恒低于 z-index = 2 的 div 如果都没有父元素设置 z-index，那么他们共同的层叠上下文是 html 根元素 如何创建层叠上下文？请查询 层叠上下文 知道了一个盒子自己内部的事情，现在来了解一下文档流中盒子是怎么布局的 position顾名思义，影响盒子的位置 一般有 5 个取值 static（默认，属于文档流 relative（属于文档流 absolute（脱离文档流 fixed（脱离文档流 sticky（看情况 static 作为默认值，就不多介绍了，介绍一下其它的 relative在文档流中所占的位置是默认位置，常作为 absolute 元素的父元素的属性 可以使用 left、right、top、bottom 等 4 个属性来调整自己相对于原本位置的偏移距离 absolute相对于最近的已定位父元素（不能是 static）进行定位 可以使用 left、right、top、bottom 等 4 个属性来调整自己相对于最近的已定位父元素的偏移距离 fixed在视口上绝对定位，不随窗口滚动而移动 可以使用 left、right、top、bottom 等 4 个属性来调整自己相对于视口的偏移距离 sticky粘性定位，超出视口前表现为 relative，超出后表现为 fixed 在变为 fixed 时，会粘在还是 relative 时最后的位置 如上，CSS 与盒子有关的常用部分就是这样了，谢谢观看]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML重要标签]]></title>
    <url>%2Ffrontend%2Fhtml-tags%2F</url>
    <content type="text"><![CDATA[本文介绍一些前端常用且重要的标签 首先给出索引 table form a img video audio canvas svg tabletable，表格标签，用于制表，包含以下子标签 标签 含义 thead 表头 tbody 表体 tfoot 表脚 tr 行 th 表头子项 td 表体子项 表格示例代码如下： 12345678910111213141516171819202122&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;时间&lt;/th&gt; &lt;th&gt;事件&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt;&lt;td&gt;7点&lt;/td&gt;&lt;td&gt;起床&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;8点&lt;/td&gt;&lt;td&gt;早饭&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;12点&lt;/td&gt;&lt;td&gt;午饭&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;13点&lt;/td&gt;&lt;td&gt;午休起床&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;17点&lt;/td&gt;&lt;td&gt;晚饭&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;23点&lt;/td&gt;&lt;td&gt;休息&lt;/td&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td&gt;总共24小时&lt;/td&gt; &lt;td&gt;总共6件事情&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt;&lt;/table&gt; 但是，此时你会发现表格十分之难看，间距很大，对齐也不正常 我们可以用三个常用的表格属性来调整 属性 含义 默认值 建议值 table-layout 表格布局 auto（自动分配 fixed（如果有指定宽度则等分 border-collapse 边框隔离 separated（分隔 collapsed（合并 border-spacing 边框间距 0 0 formform，表单标签，常用于提交请求 主要功能全部体现在其属性上，故此处先讲属性 属性 含义 action 提交表单的地址，可以是相对路径或绝对路径，留空则为当前页面。提交后当前页面会刷新 method 可选 GET 或 POST，默认 GET，详见 HTTP 动词 target 常用 _blank，表示在新标签页打开，默认值为 _self，表示在当前页面打开。若有 iframe 嵌套，则还可以使用 _parent 或 _top 来控制打开位置 autocompete 可选 on 或 false，当值为 on 时会依据用户历史提供下拉填充选项，默认值取决于浏览器 当表单提交时，触发其 onsubmit 事件，并将所有数据组织为 [name]=[value] 形式的 formdata，发送到 action 指定的地址 可以通过 js 拦截该 onsubmit 事件，提供一些诸如先验的操作 可用以下子标签作为 form 的子元素 标签 含义 input[type=”text”] 单行文本框 input[type=”password”] 单行文本框，但不可直接看见 textarea 多行文本框 input[type=”submit”] 提交按钮，触发所在表单的 submit 事件 button 按钮，触发所在表单的 submit 事件 input[type=”radio”] 单选框 input[type=”checkbox”] 复选框 input[type=”file”] 用于选择文件 input[type=”email”] 用于输入邮箱 input[type=”tel”] 用于输入电话 input[type=”hidden”] 一个隐藏的输入框，用于为 js 脚本保存数据 select 下拉选框 option 下拉选框子项 label 为输入框添加描述 专有属性此处专有属性并非指字段名专有，而是指意义专有 标签 属性 是否取值 含义 [all] required 否 任意允许用户输入的标签，都可以使用该属性来强制要求用户输入，否则无法提交表单 [all] autofocus 否 自动聚焦到该元素 [all] disabled 否 令用户不能编辑该元素 input[type=”text”]、textarea placeholder 是 指定当文本框为空时，显示的提示文本 input[type=”text”]、textarea maxlength 是 指定文本框可以接受的最大文本长度 textarea style&gt;resize 是 默认情况下可以拖动改变文本框大小，当该属性指定为 none 时不可改变大小 input[type=”radio”] name 是 指定若干个 input 为同一组 input[type=”radio”] checked 否 指定同一组 input 中的默认选择 input[type=”checkbox”] name 是 指定若干个 input 为同一组 input[type=”checkbox”] checked 否 指定同一组 input 中的默认选择 input[type=”file”] multiple 否 令该文件输入框可以选择多个文件 button type 是 在表单中若不指定，则为 submit，指定为其它值则不会触发提交 option value 是 选项的实际值，该值区别于用户能看到的值，由 js 处理 显然，input 元素的表现非常复杂，且主要负责输入，那么有以下 3 个主要事件来控制 input 的输入 事件 适合元素 触发时机 onchange input[type=”text”]、textarea 文本改变 onfocus input[type=”text”]、textarea 获得焦点 onblur input[type=”text”]、textarea 失去焦点 在项目中一般不使用 form 直接提交数据，而使用 js 拦截提交事件，然后用 ajax 提交，故现在 form 标签更多仅作为一个表示而已 aa，超链接标签，常用于跳转页面，没有专属的子标签 重要属性如下 属性 是否取值 含义 href 是 指定超链接的地址，一般是1. 网络上的路径，使用 http 或 https 协议，或不指定协议2. 本站相对路径3. 伪协议路径，一般是 javascript、mailto、tel 三种伪协议之一4. 页内锚点，通过 #[id] 指定 target 是 常用 _blank，表示在新标签页打开，默认值为 _self，表示在当前页面打开。若有 iframe 嵌套，则还可以使用 _parent 或 _top 来控制打开位置，或直接指定为 iframe 的 name download 否 此时 a 标签的动作不再是打开新页面，而是下载新页面 rel 是 当使用 target=”_blank” 时，要加上 rel=”noopener” 以防止钓鱼攻击 也可以设置一个用于触发 JavaScript 方法，其余什么也不做的 a 标签 此处使用 javascript 伪协议，代码如下 &lt;a href=&quot;javascript:;&quot;&gt;点击我什么也没发生&lt;/a&gt; imgimg，图片标签，用于通过 GET 请求来引入图片，没有专属的子标签 重要属性如下 属性 含义 src 指定图片来源，可以是网络地址或相对路径，可以通过 js 改变指向 alt 指定当图片无法加载时的提示内容 width 指定图片的宽度，此时高度会根据比例调整 height 指定图片的高度，此时宽度会根据比例调整 style&gt;max-width 指定图片的最大宽度，当设为 100% 时，最大不会超过视口大小 重要事件如下 事件 触发时机 用法 onload 图片加载成功 统计图片访问量 onerror 图片加载失败 补救失败图片 使用 img 标签，要遵循以下规则 img 的大小应该不超过 300 kb，否则严重影响加载速度 永远不要在不合比例的情况下同时指定 height 和 width，否则图片将严重变形 最好只使用 width 来修改图片尺寸 videovideo，视频标签，用于引入视频 有以下重要属性 属性 是否取值 含义 src 是 指定视频来源 controls 否 提供一些用户操作 preload 是 指示视频是否应该被缓存 其余部分请查看 mdn audioaudio，音频标签，用于引入音频 重要属性与 video 相同 canvascanvas，为用户提供一张画布 具体的比较难以说明，建议查看以下画图板范例，或 mdn https://github.com/Ringoer/Toy/blob/main/22/canvas.html svgsvg，矢量图形，一般要用的时候直接去网上找一个 svg 库，然后引用他们的 svg 即可 常用 svg 库如下 Iconfont-阿里巴巴矢量图标库]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML入门]]></title>
    <url>%2Ffrontend%2Fhtml-introduction%2F</url>
    <content type="text"><![CDATA[HTML入门 阅读本文，建议使用的编辑器为 VSCODE 概述HTML的英文全称是 Hyper Text Markup Language，即超文本标记语言 HTML是由Web的发明者 Tim Berners-Lee于1990年创立的一种标记语言 板子首先来看看HTML板子长什么样子 打开 VSCODE，新建一个 html 文件，在其中打入一个英文的感叹号 !，会弹出一个选框，选择一个感叹号的选项。如果选了三个感叹号的选项，只会给出文档头 自动打板后效果如下 12345678910&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 但是此时还不够完善，让我们先去改了默认的板子 修改默认打板上面不够完善的部分，是 meta 标签中的 content 部分 先不要管起了什么作用，改完了再说 修改步骤如下 打开 VSCODE 所在目录，进入 ./resources/app/extensions/emmet/dist/node 目录 打开 emmetNodeMain.js 文件，搜索 meta:vp 如无意外，会有两个设置项，两个引用项。确定两个设置项 设置项形如 &quot;meta:vp&quot;:&quot;meta[name=viewport content=&#39;width=${1:device-width}, initial-scale=${2:1.0}&#39;]&quot; 改为 &quot;meta:vp&quot;:&quot;meta[name=viewport content=&#39;width=${1:device-width}, initial-scale=${2:1.0}, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&#39;]&quot; 改完后重新打板，效果如下 1234567891011&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt; 底板解释 第一行是文档声明，声明该文档为 html 文档 注意感叹号是英文感叹号，DOCTYPE 大写，html 小写 第二行是根元素，含有 lang 属性，用于指定文档语言 第三行是文档头，包含了表示元数据的 meta 标签和表示页面标题的 title 标签 文档头之后是文档体，用于书写页面正文 meta:vp 是什么？ 是 meta 的默认配置，具体含义如下 属性 取值 含义 charset UTF-8 指定页面使用 UTF-8 编码 name viewport 指定根据视口大小的设置 content&gt;width device-width 视口大小等于设备大小 content&gt;initial-scale 1.0 初始大小与视口同大 content&gt;minimum-scale 1.0 最小缩小比例与视口同大 content&gt;maximum-scale 1.0 最大放大比例与视口同大 content&gt;user-scalable no 禁止用户手动放大页面 标签基本标签 标签 含义 html 根元素 head 文档头 body 文档体 title 页面标题 meta 元数据 link 链接外部资源 style 内部样式 script 内部脚本或链接到外部脚本 文章标签最早，HTML是用来在网上展示文章信息的，所以有了如下文章标签 标签 含义 article 文章 section 章节 h[1…6] 标题 p 段落 header 头部 footer 脚部 main 主要内容 aside 分支内容 div 块 内容标签有了文章结构，自然还要写文章内容，于是又有了内容标签 但是有的标签相当重要，需要单独说明，故而会在下个章节给出 标签 含义 ol 有序列表 ul 无序列表 li 列表项 dl 描述列表 dt 描述标题 dd 描述项 pre 预览 code 代码 q 引用（此项为内联元素 blockquote 引用（此项为块级元素 em 斜体（语气上强调 strong 粗体（实际上重要 hr 分隔线 br 换行符 重要标签此处仅给出这些标签，具体的部分请点击超链接查看 标签 含义 table 表格 form 表单 a 超链接 img 图片 video 视频 audio 音频 canvas 画图 svg 矢量图 其余标签其余标签并不是很重要，有兴趣的话可以 点我查看 属性刚才说到根元素有 lang 属性，用于指明文档语言 显然不同的标签有共通属性，也有专有属性 全局属性 属性名 是否取值 含义 class 是 css 类 hidden 否 visible=hidden，此时有渲染，但无事件 id 是 声明全局唯一 id，但需要程序员手动控制 style 是 内联样式 tabindex 是 指定 tab 的顺序，使用正整数，越小越优先；=0则最后；=-1则不会被 tab 访问 title 是 指定所在元素的说明，在鼠标放置在该元素上时会显示浮窗 contenteditable 是 指定所在元素是否（true/false）可以被用户编辑 专有属性请前往 重要标签 查看，或查阅 MDN 谢谢阅读]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图解非对称加密]]></title>
    <url>%2Falgorithm%2Frsa%2F</url>
    <content type="text"><![CDATA[学习 HTTPS 必备的 RSA 算法的基础 概念所谓非对称加密，就是服务器和客户端，在不直接互通私钥的情况下，通过公钥和互相发送的密文，推出本次连接使用的密钥 非对称加密涉及的数学原理非常多，想了解的可以看 非对称加密算法–RSA加密原理 本文不解释数学原理，只讲解加密的具体流程 流程首先看下图，下图对流程作出了简单描述 接下来开始具体描述 设服务器有一组公钥 [k1,k2] 和一个取余公式 p=&gt;k1**p%k2，其中 k1、k2、p 均要求是质数 服务器收到了客户端的连接请求，将公钥发给客户端 服务器产生一个随机质数 p，代入公钥求得密文 m1，发送给客户端 客户端也产生一个随机质数 q，代入公钥求得密文 m2，发送给服务器 服务器和客户端各自使用自己收到的密文，取代公钥中的 k1，求得结果就是共同的密钥 往后的通信中，双方均使用该密钥，进行对称加密通信 显然 k2 要尽可能大，才能尽可能减小碰撞 现在代入值计算一下是否正确 设 k1=13，k2=31，p=23，q=19 m1 = 13**23%31 =24，m2 = 13**19%31 = 21 21**23%31 = 17，24**19%31 = 17 验证完毕 感兴趣的朋友可以自行验证一下，面试的时候能答出上述流程就行了 至于数学原理，我不知道你能不能看懂，反正我看不懂，2333]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>http(s)</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git远程操作]]></title>
    <url>%2Fprograming%2FremoteGit%2F</url>
    <content type="text"><![CDATA[有了本地操作，肯定还得保存到云端 配置连接默认 本地操作 中的配置已经完成了 以下命令全部都在 bash 中执行 ssh 原理ssh 是基于非对称加密的 RSA 算法，算法流程请点我 通过 ssh 加密，使得本地和远程可以安全地通信 生成 ssh 密钥执行命令 ssh-keygen -t rsa -C ringoer@qq.com 此时会生成ssh密钥。命令中邮件地址替换为自己的 查看密钥执行命令 cat ~/.ssh/id_rsa.pub 此时会在控制台显示一串密钥，复制下来 设置密钥打开 github，打开 settings，选择 SSH and GPG keys，选择 New SSH key title 随便写，key 的文本则填写刚才复制出来的密钥，然后 add key 一台电脑只需要一个密钥 测试配对执行命令 ssh -T git@github.com 如遇询问 yes or no，请输入 yes 并继续 设置目标仓库在 github 上新建一个 repository，然后复制其 ssh 地址 ssh 地址一般形如 `git@github.com:Ringoer/xxx.git` 注意不要复制到 HTTPS 地址 然后在本地执行命令 git remote add origin git@github.com:Ringoer/xxx.git 执行后会在本地仓库创建一个名为 origin 的仓库，指向目标远程仓库 理论上可以随意命名这个仓库，不叫 origin 也可以，但是业界潜规则就是第一个仓库要叫 origin。如果以后新建了其它仓库，可以自己尝试叫别的名字 如果忘记自己配置了哪些远程仓库，可以通过命令 git remote -v 来查看在当前本地仓库配置的所有远程仓库及其别名 创建完成后，就可以直接通过 origin 操作远程仓库了 然后就又是我们熟悉的 CRUD 了 但是在 Git 远程操作中，略有些变化，大致如下表 动作 描述 特点 push 推送本地仓库代码到远程仓库 会在远程仓库强制创建分支 pull 从远程仓库拉取指定分支的代码到本地 要求本地已有对应分支 clone 从远程仓库克隆指定分支的代码到本地 最好在空目录下克隆，否则会覆盖已有内容 push通过命令 git push 可以上传本地仓库的代码到远程仓库 该命令有如下变体 命令 描述 git push -u origin master 推送本地仓库的 master 分支到远程仓库的 master 分支，并将该远程仓库设置为上传流（upstream） git push 推送本地仓库所有修改到被设置为 upstream 的远程仓库 git push origin master 推送本地仓库的 master 分支到远程仓库的 master 分支 git push origin master:child 推送本地仓库的 master 分支到远程仓库的 child 分支，格式是 本地:远程 clone通过命令 git clone 可以拉取远程仓库代码到本地仓库 该命令有如下变体 命令 描述 git clone [git] 拉取指定 git 地址对应的仓库的所有分支代码，到新目录中，新目录与远程 repository 的名字相同 git clone [git] . 拉取指定 git 地址对应的仓库的所有分支代码，到当前目录中 git clone [git] [folderName] 拉取指定 git 地址对应的仓库的所有分支代码，到指定名字目录中，若该目录不存在会被新建，否则已有内容会被覆盖 注意，执行 clone 之后不会自动进入新文件夹，需要手动进入 pull通过命令 git pull 可以拉取远程仓库代码到本地仓库已有分支 该命令可能会产生冲突 该命令有如下变体 命令 描述 git pull 拉取 upstream 仓库的，与当前所在分支相同的分支的所有内容到本地 git pull origin master:child 拉取 origin 仓库的，master 分支的代码到本地 child 分支 在该命令中如果想回避冲突，可以使用 git stash 和 git stash pop 组合命令 stash压栈通过命令 git stash 可以将本地仓库已经标记但还未 commit 的文件隐藏进缓存栈中 此时执行 git pull 不会与缓存栈中文件作对比 可以多次执行命令 git stash 来不断压栈 弹出当 pull 完成后可以通过命令 git stash pop 来弹出栈顶内容 可以根据需要来弹出，但因为栈的特性，必然是只能按顺序弹出 该操作可能会引起冲突 查看可以通过命令 git stash list 来查看当前缓存栈中保存的内容 清空可以通过命令 git stash clear 来清空缓存栈中所需内容 注意，该操作不可复原 其它缩写可以通过 code ~/.bashrc 命令，通过 vscode 打开 bash 配置文件 然后通过 alias 指令，指定缩写 如 alias ga=&quot;git add&quot; 来令缩写命令 ga 等效于 git add 命令 不止 git 命令，其它 bash 命令也可以通过这种方法设置缩写 格式可以通过 git rebase 命令来为 git log 指定排版 假设现在有三个版本，版本号如图 版本 版本号 1 bikh345 2 12jop3i 3（最新） u09dsf3 现在想合并已有版本1和2，使得日志缩短，可以通过命令 git rebase -i u09dsf3 来告诉 git，我想对 u09dsf3 之前的版本进行修改 此时 git 会弹出默认编辑器，向你请求修改，同时会给出帮助，按帮助修改即可 修改完毕后，保存，关闭这个文件，git 就会开始处理你的修改 在处理完成之前，如果你反悔了，可以通过命令 git rebase --abort 来取消这次 rebase 如果又反悔了（什么人啊这是），可以通过命令 git rebase --continue 来继续这次 rebase rebase 也有可能出错，看看日志解决即可 大概就这些 感谢饥人谷对 其它 部分的帮助]]></content>
      <categories>
        <category>programing</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git本地操作]]></title>
    <url>%2Fprograming%2FlocalGit%2F</url>
    <content type="text"><![CDATA[关于提交到 github 之前，在本地仓库的操作 在使用 Git 之前，要先配置一下本地的 Git Bash 配置一般来说，有如下6行配置，是建议运行的 123456git config --global user.name [yourName]git config --global user.email [yourEmail]git config --global push.default simplegit config --global core.quotepath falsegit config --global core.editor "code --wait"git config --global core.autocrlf input user这两行是必须执行的，用于告诉 Git 你的个人信息 例如 12git config --global user.name Ringoergit config --global user.email ringoer@qq.com push.default这个参数有两个可取的值，具体如下 参数值 版本 行为 matching 1.x 版本默认 上传本地所有分支 simple 2.x 版本默认 上传本地当前分支 建议手动执行一下该命令，以免出现意外的上传 core.quotepath用于配置是否开启路径转义，默认值是 true，表示中文路径名或文件名要自动转义为形如 \xx\xx 的类似 unicode 的形式 core.editor用于指定当 Git 希望打开一个文本编辑器时，执行的命令行。默认值是 vi，表示启动 vim core.autocrlf首先了解一下 CRLF、CR、LF 分别是什么 参数值 对应转义字符 CRLF \r\n CR \r LF \n core.autocrlf 用于指定行结束符 LF 和 CRLF 之间的转换，具体如下 参数值 提交（commit）行为 签出（checkout）行为 true（默认） CRLF 转换为 LF LF 转换为 CRLF input CRLF 转换为 LF 不转换 false 不转换 不转换 鉴于 Windows 下的行结束符通常是 CRLF，Mac 和 Linux 下通常是 LF，所以最好是选择 input 参数值，以免产生跨平台协作问题 说到 Git 本地操作，那必然也是对某目标的 CRUD。是什么目标呢？是分支 分支（Branch）首先要了解什么是分支 每当我们想保存代码的时候，往往有很多文件，组成一个项目。这个项目此时此刻的所有状态，合称为一个版本，而这个项目的所有版本，都处于同一个分支之中 Create一般有两种新增 初始化本地仓库时，新增默认的分支 已有分支的情况下，新增新的分支 初始化首先通过 cd 命令进入项目所在目录，然后使用 git init 来完成本地仓库的初始化 初始化完成之后，会在该目录中产生一个 .git 文件夹，这个就是本地仓库 默认分支是 master，但由于 zzzq 等原因，现在默认分支改名叫 main 初始化完成后，.git 目录下会有一个名为 .gitignore 的文本文档，里面用类正则表达式写法，指明了在提交操作中应该忽略哪些文件 新增现在我们已经有一个 master 分支了，想要新增一个分支 可以使用 git branch [branchName] 命令来新增分支 假设新分支名为 child，那么命令就是 git branch child，此时就新建了一个名为 child 的新分支 注意该操作仅创建了分支，不会自动移动到新分支 Retrieve查看所有分支情况可以使用 git branch 查看本地仓库中的所有分支名称 查看当前分支情况状态可以通过 git status 命令查看当前分支的状态 通常会显示以下种内容 还未执行 标记 的文件列表 已经执行 标记 ，还未执行 提交 的文件列表 存在 冲突 的文件列表 可以通过 -sb 选项简化显示的内容（只显示文件列表） 日志日志有两种，log 和 reflog，关于其差别请阅读 重置 部分内容 每条日志都记录了一次提交，包括这次提交的版本号、理由等 可以通过 git log 命令查看当前分支的局部日志（不包括重置操作） 可以通过 git reflog 命令查看当前分支的所有日志（包括重置操作） Update要让增删有意义，那么自然是要进行符合我心意的修改了 此处的修改分支，是指修改本地仓库内保存的分支内容 提交初始化的分支，或是新建的分支，里面都是没有内容的。如何让它充实呢？ 可以通过 git commit 命令让它充实。 但是仅仅是 git commit 来上传新版本的话，以后无法查询版本更新信息，所以我们需要 -m 和 -v 参数 -mgit commit -m [string] 表示将 -m 选项后的字符串作为本次提交的理由（备注），使得后续可以查看该版本提交时的相关信息 但是 -m 因为是在命令行中直接给出，人在潜意识影响下会倾向于写短理由，不利于以后查询，所以有了 -v 选项 -vgit commit -v 可以打开 Git 默认的文本编辑器（默认是 vim）来等待用户写入提交理由，直到用户在新打开的文件中写完理由并保存后才会继续提交 因为是在新文件中书写理由，视野比较开阔，会更容易写出更易阅读的理由，所以推荐手动上传时，使用 -v 选项，自动上传时才选择 -m 选项 但是 Git 怎么知道你要上传哪些内容呢？万一你只修改了部分文件，只想上传这一部分，怎么办呢 标记可以通过 git add [filename] 命令来标记要提交的文件 可以用 git add . 来标记目录下的所有文件（注意点号） 此处的标记，指的是“将要同步到本地仓库当前分支的更新”，一般有三种情况 文件状态 释义 commit 后的行为 New 新建 向本地仓库当前分支中 添加 该文件 Modified 更新 修改 本地仓库当前分支中的对应文件 Deleted 删除 从本地仓库当前分支中 删除 该文件 可见，虽然命令中采用的是 add 短语，但实际上表达的意思是“添加标记”，而不是单纯的“新增” 只有当文件被标记后，才可以在下一次 commit 操作中被提交到本地仓库 怎么办，代码写着写着，发现以前的某个版本更优秀，我想回去———— 重置可以通过 git reset --hard [version] 来切换版本 版本号可以打完整，也可以打前缀，一般选择7位前缀 查看版本号，可以通过 git log 或 git reflog 来查看，或前往 github 网站，通过可视化界面查看 假设现在是版本4，想切换到版本2，那么切换后，log 里只会保留如下内容（简单说法） commit 版本1 commit 版本2 而 reflog 里会保留所有内容 commit 版本1 commit 版本2 commit 版本3 commit 版本4 reset 版本2 注意一旦切换版本，将会丢失当前所有修改，请确保备份 如果不想重置所有修改，也可以选择回滚部分事务 回滚可以通过 git revert [version] 来回滚当前分支上的某次提交事务 可能产生 冲突 Delete可以通过 git branch -d [branchName] 来删除指定分支 注意删除后该分支所以内容都会从本地消失，请确保已经备份 有很多操作会产生冲突，怎么办呢？ 冲突当发生冲突的时候，首先要找到冲突 前述的 git status 命令，就可以找到现在有冲突的文件 然后我们需要手动解决冲突 假设有文件 1.txt，里面的原内容是 今天是2020年11月16日，新内容是 今天是1970年1月1日 当要将新内容同步到 1.txt 时，就会发生冲突 此时 1.txt 内容变更为类似如下模样 12345&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD(当前更改)今天是2020年11月16日=======今天是1970年1月1日&gt;&gt;&gt;&gt;&gt;&gt;&gt; child(传入的更改) 可见冲突的格式是以 &lt;&lt;&lt;&lt;&lt;&lt;&lt; 开头，以 &gt;&gt;&gt;&gt;&gt;&gt;&gt; 结尾，以 ======= 分隔 所以当我们打开一个可能有冲突的文件时，可以搜索 ======= 来快速定位冲突在文件中的位置 此时我们怎么处理这个冲突呢？ 可以选择性保留我们想要的字段，假设保留新内容，那么可以对 1.txt 作出如下操作 12345&lt;&lt;&lt;&lt;&lt;&lt;&lt; master(当前更改) 【删除该行】今天是2020年11月16日 【删除该行】======= 【删除该行】今天是1970年1月1日&gt;&gt;&gt;&gt;&gt;&gt;&gt; child(传入的更改)【删除该行】 只保留我们需要的部分，其余部分删除 那刚才创建的新分支又有什么用呢？ 多分支检出可以通过 git checkout [branchName] 命令来改变 Git 当前所在的分支 该操作称之为 检出 当执行该命令时，会将指定分支的最后一次提交的内容同步到当前目录下 该操作可能会产生冲突 若同步前的文件内容与将要同步下来的内容无冲突，则保留同步前的文件；若冲突，则需要先解决冲突，解决冲突后不需要再次检出 合并可以通过 git merge [branchName] 命令来将目标分支的内容合并到当前分支下 该操作在完成后，会自动向本地仓库中提交合并的结果，且理由自动设定为 Merge branch [branchName]，表示此次提交是因为合并而产生的 该操作可能会产生冲突 当产生冲突时，需要按顺序完成以下步骤以完成合并流程 解决冲突 git add [冲突的文件] git commit（不需要填写理由） 如上，即是 Git 本地操作中最常用的部分内容 谢谢阅读]]></content>
      <categories>
        <category>programing</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用命令行合集]]></title>
    <url>%2Fprograming%2Fcommand-line%2F</url>
    <content type="text"><![CDATA[20201113命令行总结 首先我们要打开命令行，应该使用 git bash 而不是 Windows cmd，因为命令行实际上就是 bash 脚本语言 关于安装命令行，可以参考 本站建站指导 命令行的默认目录一般是形如 C:\Users\Ringoer ，这里被称之为用户目录，可以缩写为英文波浪线 ~ 然后我们可能要先切换目录到达目标目录 切换目录要切换到根目录（盘符的上级目录）的话，非常容易，只需要 cd / 就行了，此处 / 表示系统根目录 切换盘符的话，也挺简单的，直接在命令行输入盘符+冒号即可。例如 D: 可以切换到 D 盘 切换目录使用命令 cd ，是 change directory 的缩写。使用方法一般有两种 绝对目录 相对目录 绝对目录一般指从盘符开始的目录描述，比如 C:\Users\Ringoer 就是一个标准的绝对目录 需要注意，上面说到用户目录缩写是 ~ ，所以 ~ 也是一个绝对目录 相对目录相对目录的写法一般根据当前目录决定。 首先我们可以在命令行上看到自己当前所在的目录，也可以使用命令 pwd 来显示当前目录 然后，我们可以选择前往上一级目录，此时可以使用命令 cd .. ，注意一定是两个点表示上级目录，如果是一个点则表示当前目录 不知道要去哪个目录怎么办？没关系，可以使用命令 ls （注意是字母 L 的小写）来查看当前目录下的所有子目录或文件，然后 cd 子目录名称 或 cd ./子目录名称 即可进入目标子目录 说到命令行，那最大的用处，肯定是对文件 CRUD 啦 Create-新增创建一个新文件，一般有两种类型 从零创建 从已有创建 从零创建一般使用 touch [...filename] 来创建文件 其中 ... 是 spread 语法，表示不定长参数列表，下同 若目标文件不存在，则在当前目录创建这个文件 若目标文件已经存在，则更新最后更新时间 从已有创建一般使用 cp [filename1] [filename2] 来复制文件 将 文件1 的内容全数复制到 文件2 中 文件夹文件夹也有如上两种情况，分别采用 mkdir [...directoryName] cp -r [directoryName1] [directoryName2] 来创建文件夹 其中参数 -r 表示 递归地复制，概念与 js 中的深度拷贝相同 Retrieve-查询一般有 4 种查询语句 语句 描述 cat […filename] 全量查看文件 head -n [line] […filename] 查看文件前 n 行 tail -n [line] […filename] 查看文件后 n 行 less [filename] 分页查看文件 Update-修改显然修改文件和文件夹是不一样的 文件查询中前三种语句，都是有确定的返回内容的，此时可以通过 &gt; [filename] 将返回内容导入到新的文件中。该命令会覆盖目标文件原有内容 例如，cat 1.txt 2.txt &gt; 3.txt ，将 1.txt 和 2.txt 的内容都全量导出，然后拼接在一起，之后保存到 3.txt 中 也可以通过 &gt;&gt; [filename] 将返回内容导入到新的文件中。该命令会将新内容拼接到目标文件原有内容末尾 例如，cat 1.txt 2.txt &gt;&gt; 3.txt ，将 1.txt 和 2.txt 的内容都全量导出，然后拼接在一起，之后拼接到 3.txt 的末尾 刚才说到”确定的返回内容”，就不得不说说回显命令 echo [body] ，用于将参数体的内容原封不动回显到标准输出中。显然，echo 命令也可以通过 &gt; [filename] 和 &gt;&gt; [filename] 重定向到文件中 echo 还可以输出 bash 脚本代码，实际上就是输出字符串，需要双引号 例如 echo &quot;hello world&quot; ，英文引号，懂得都懂 文件夹修改文件夹是什么意思呢？对比修改文件是指修改其中保存的内容，那修改文件夹显然就是修改文件夹中保存的文件列表 我们可以通过 mv [...filename] [directoryName] 命令来将文件移动到目标文件夹中 其中文件可以指定不少于 1 的任意多个，但目标文件夹只能有一个 mv，实际上是 move 的缩写。 重命名说到这里，肯定会有同学想问，如何重命名呢？这就需要我们刚刚说的 mv 命令了 mv [file1] [file2] 可以实现将文件1重命名为文件2 mv [directory1] [directory2] 可以实现将文件夹1重命名为文件夹2 如果文件2已经存在会怎么样呢？ 那么文件1会改名为文件2，而文件2会被删除 Delete-删除删除一个文件，一般使用 rm [filename] 来删除，其中 rm 是 remove 的缩写 如果删除目标是一个文件夹，一般使用 rm -r [directoryName] 来删除，其中参数 -r 同上 有时候要删除某个文件或文件夹的时候，会触发警告，此时可以通过 -f 来强制删除文件或 -rf 来强制删除文件夹，这也是 rm -rf / 删库跑路的来源。但此举非常不推荐，否则很容易就把重要文件删了导致系统崩溃 但是测试 CRUD 的时候，总是要重复运行很多代码，好烦啊，有没有方便的办法呢？ 脚手架显然我们在上面测试的时候，经常会重复运行代码，输入内容等等。比如下方代码就是一个可能的情况 1234567891011121314echo "Waiting..." &gt; 1.txtecho "hello world" &gt;&gt; 1.txtcp 1.txt 2.txtecho "success" &gt;&gt; 2.txtcat 1.txt 2.txt &gt; 3.txtmkdir testmv 1.txt 2.txt 3.txt testcd testtail -n 4 3.txt &gt; 4.txtless 4.txt 但是我们总不能每一次测试都手打一遍？所以我们要将它保存为一个单独的 bash 代码文件，称之为 bash 脚本，它一旦运行起来，就可以帮助我们运行设定好的代码。 假设我们把它保存为 node.exe，或者干脆不要 exe，直接叫做 node 实际上，对于系统来说，文件后缀是不是 exe 并不是很重要，只要是机器能读懂的语言，都是可执行文件 如果你不是 windows 系统，需要先执行 chmod +x [filename] 命令，来赋予文件执行的权能 然后一般有三种方法运行你的可执行文件。假设此处运行当前目录下的 node，它是一个删除了 exe 后缀的原 exe 文件 ./node，其中单个 . 表示当前目录 sh node，其中 sh 表示将其当作 bash 脚本启动 node 第一种和第二种没有什么区别，主要是第三种 环境变量前面我们讲过可以通过 ls 查看当前目录下的文件列表，那系统怎么知道 ls 是什么命令呢？答案就在系统环境变量 PATH 中 因为 PATH 中登记了 ls 所在的目录，所以系统能找到 ls 的指向 那么答案就很明确了，我们可以把我们现在的运行目录也登记到 PATH 中，就可以通过 node 直接运行我们的可执行文件了 命名冲突但是大家电脑上都已经安装了 nodejs 了吧？这时如果直接在命令行中执行 node 命令，往往会启动了 nodejs 的 node.exe 。那怎么让我们的 node 文件更优先呢？ 答案还是在 PATH 身上 刚才设置 PATH 的时候，可以注意到，PATH 列表右侧有”上移””下移”按钮，可以推测目录在 PATH 中的注册顺序是影响调用决策的重要条件。那么我们把我们的工作目录上移到比 nodejs 目录更上方的位置 此时如果你不是 windows 环境，应该可以看到命令行正常输出了你的 node 文件的内容了。但如果是 windows 环境……还有一个坑点，那就是 windows 环境在决策时 exe 后缀的文件优先级更高。那么把你的 node 文件改名为 node.exe，ok，大功告成！ 好了，关于命令行，我暂且只有这些想说的，谢谢你看到这里，快回去自己动手试验一下吧！]]></content>
      <categories>
        <category>programing</category>
      </categories>
      <tags>
        <tag>命令行</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[配置HTTPS方案]]></title>
    <url>%2Fhttps%2Fhttps%2F</url>
    <content type="text"><![CDATA[HTTPS配置方案 本文基于腾讯云的域名配置，以及七牛云CDN和自建CDN两种情况 申请SSL证书 打开腾讯云，找到SSL证书 选择申请免费证书 填写要配置https的域名，最好是已经配置云解析的域名 等待10分钟左右，之后下载 下载完成，解压后，得到如图目录 其中Apache内容 Nginx内容 七牛云CDN 打开七牛云SSL证书服务 上传已有证书 打开下载好的证书的Apache文件夹，找到同名但后缀不同的两个文件，然后贴入文本框中 上传完毕后可在我的证书中看到，点击部署CDN 如果你的证书名称和域名一样，那么点击部署即可一键升级HTTPS，然后等待半小时，收到邮件即是升级成功 自建CDN 打开Nginx文件夹，将crt和key都上传到服务器的nginx文件夹中 编辑default.conf文件为如下模样 12345678910111213141516171819202122232425server &#123; listen 443 ssl; # HTTPS的端口号就是443 server_name ali.ringoer.com; # 你的域名，要与证书一致 #charset koi8-r; access_log /var/log/nginx/host.access.log main; error_log /var/log/nginx/error.log error; ssl_certificate 1_ali.ringoer.com_bundle.crt; # 你的crt，与你上传的同名 ssl_certificate_key 2_ali.ringoer.com.key; # 你的key，与你上传的同名 ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; # 这几条不变 location / &#123; root /usr/share/nginx/html; try_files $uri $uri/ /index.html; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root /usr/share/nginx/html; &#125;&#125; 配置Dockerfile为如图，注意default.conf配置文件和证书不在同一个文件夹 1234FROM nginxCOPY nginx/default.conf /etc/nginx/conf.d/default.confCOPY nginx/2_ali.ringoer.com.key /etc/nginx/2_ali.ringoer.com.keyCOPY nginx/1_ali.ringoer.com_bundle.crt /etc/nginx/1_ali.ringoer.com_bundle.crt docker build创建镜像，然后用如下命令挂载目录再运行 1docker run -d --name static -p 443:443 -v /root/static/dist:/usr/share/nginx/html static]]></content>
      <categories>
        <category>https</category>
      </categories>
      <tags>
        <tag>http(s)</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu下配置Mysql的办法]]></title>
    <url>%2Fprograming%2Fubuntu-mysql%2F</url>
    <content type="text"><![CDATA[不小心还原云主机又忘记备份sql，只好亲自重配一遍了 卸载 mysql要想顺利下载，首先要卸载旧版本。 删除 mysql 的数据文件 1sudo rm /var/lib/mysql/ -R 删除 mysql 的配置文件 1sudo rm /etc/mysql/ -R 自动卸载 mysql（包括server和client） 123sudo apt-get autoremove mysql* --purgesudo apt-get remove apparmor 检查 mysql 的依赖项 1dpkg --list|grep mysql 当 4 存在返回值时，使用 sudo apt-get remove xxx 依次卸载 安装 mysql 刷新 apt 存储库 1sudo apt-get update 安装 mysql 1sudo apt-get install mysql-server 初始化 mysql 1sudo mysql_secure_installation 一大堆配置，如下 123456789101112131415161718192021222324252627282930#1VALIDATE PASSWORD PLUGIN can be used to test passwords...Press y|Y for Yes, any other key for No: N#2Please set the password for root here...New password: (输入密码)Re-enter new password: (重复输入)#3By default, a MySQL installation has an anonymous user,allowing anyone to log into MySQL without having to havea user account created for them...Remove anonymous users? (Press y|Y for Yes, any other key for No) : N#4Normally, root should only be allowed to connect from'localhost'. This ensures that someone cannot guess atthe root password from the network...Disallow root login remotely? (Press y|Y for Yes, any other key for No) : Y #5By default, MySQL comes with a database named 'test' thatanyone can access...Remove test database and access to it? (Press y|Y for Yes, any other key for No) : N #6Reloading the privilege tables will ensure that all changesmade so far will take effect immediately.Reload privilege tables now? (Press y|Y for Yes, any other key for No) : Y 建议选择 N+密码+NYNY 检查服务状态 1systemctl status mysql.service 如果显示绿色 active(running) 则成功 配置 mysql 前往服务器目录 /etc/mysql/mysql.conf.d，注释掉关于 bind-address 的配置 使用命令 sudo mysql -u root -p 进入 root 用户的用户界面 1use mysql; 选中 database mysql 1update user set host='%' where user='root'; 修改 root 的访问权限为 %，表示允许 root 用户的来自任意 ip 的访问 1alter user 'root'@'%' identified with mysql_native_password by 'pwd'; 对于 root 用户，不论任何来源的访问，均要求使用密码登录，密码为末尾字符串中设置的密码 此处不能使用 password() 函数来构造密码，最新版 mysql 不支持 此处不能使用 grant all privileges 来授予权限，最新版 mysql 不支持 4 和 5 的顺序不能颠倒 好了，此时可以使用 navicat 远程登录 mysql 了 常见错误 远程连接服务器报错 2003，连接不上服务器 3306 端口 查看服务器安全策略是否开放这个端口 查看上一节的 1 远程连接服务器报错 1130 查看上一节的 4 远程连接服务器报错 1698 查看上一节的 5 远程连接服务器报错 1045 不可以直接 update root 用户的密码，否则你直接设置的密码会被解密，然后发现和你输入的密码不一致 参考文章Ubuntu16.04彻底卸载MySQL Ubuntu18.04 安装MySQL]]></content>
      <categories>
        <category>programing</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
        <tag>mysql</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Node.js 学习提纲]]></title>
    <url>%2Ffrontend%2Fnodejs%2F</url>
    <content type="text"><![CDATA[留给自己参考的Node.js学习提纲 目录： HelloWorld 回调函数 事件循环 EventEmitter 模块系统 web 模块 express 框架 Restful API MySQL Buffer/Stream 全局对象 fs模块 util模块 其余常用模块 HelloWorld过程新建一个 server.js 文件，输入以下代码： 123456789101112131415var http = require('http');http.createServer(function (request, response) &#123; // 发送 HTTP 头部 // HTTP 状态值: 200 : OK // 内容类型: text/plain response.writeHead(200, &#123;'Content-Type': 'text/plain'&#125;); // 发送响应数据 "Hello World" response.end('Hello World\n');&#125;).listen(8888);// 终端打印如下信息console.log('Server running at http://127.0.0.1:8888/'); 然后在命令行使用 node 命令执行以上代码： 1node server.js 之后访问本地的 8888 端口，就可以看到我们的 HelloWorld 消息了。 1http://localhost:8888/ 代码分析从上面的代码中，我们可以看到，首先代码 require 了一个名为 http 的模块，用来提供 http 服务 之后使用 http.createServer 方法，传入了一个 function 作为回调方法，用来处理监听到的请求，之后在 8888 端口启动服务，监听该端口的请求。 在回调方法中可以看到，我们在响应中定义了响应头，其中响应的 http 状态码是200，内容类型是 text/plain，之后在响应中使用 end 方法写入数据并返回 回调函数Node.js 异步编程的直接体现就是回调。 异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。 回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。 在之前学过的 ES6 Promise 中，大家一定深有体会。 回调函数一般作为函数的最后一个参数出现。 阻塞代码（同步）123456var fs = require("fs");var data = fs.readFileSync('input.txt');console.log(data.toString());console.log("程序执行结束!"); 执行结果： 1234$ node main.js本站地址：ringoer.com程序执行结束! 可见程序是强顺序执行的，不到读取完毕文件，不会继续执行。 非阻塞代码（异步）12345678var fs = require("fs");fs.readFile('input.txt', function (err, data) &#123; if (err) return console.error(err); console.log(data.toString());&#125;);console.log("程序执行结束!"); 执行结果： 123$ node main.js程序执行结束!本站地址：ringoer.com 可见程序是先执行完当前任务，再在读取文件完成的时候打印文件内容的。 以上两个实例我们了解了阻塞与非阻塞调用的不同。 第一个实例在文件读取完后才执行程序， 第二个实例我们不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能。 因此，阻塞是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们就需要写在回调函数内。 为什么会先执行当前任务呢？我们将在下节介绍。 事件循环众所周知，JavaScript 是单线程的，Node.js 也是单进程单线程应用程序，那么他是怎么提高运行效率的呢？ 答案就是 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以效率相比普通的单线程大大提高。 事件驱动程序Node.js 使用事件驱动模型，每当 web server 接收到一个新的请求，触发了对应的事件，就会将请求放入事件队列中，然后继续按队列顺序处理。 这个模型非常高效可扩展性非常强，因为 web server 一直接受请求而不等待任何读写操作。（这也称之为非阻塞式IO或者事件驱动IO） 事件发生流程一般如下： 将回调函数绑定到事件上 触发某个事件 将回调函数放入事件队列中 按队列顺序执行 我们可以通过内置模块 events 来模拟这个事件的流程。 1234// 引入 events 模块var events = require('events');// 创建 eventEmitter 对象var eventEmitter = new events.EventEmitter(); 以下程序绑定事件处理程序： 12// 绑定事件及事件的处理程序eventEmitter.on('eventName', eventHandler); 我们可以通过程序触发事件： 12// 触发事件eventEmitter.emit('eventName'); 关于 events 模块，将在下一节详细介绍。 EventEmitterNode.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。 Node.js 里面的许多对象都会分发事件：一个 net.Server 对象会在每次有新连接时触发一个事件， 一个 fs.readStream 对象会在文件被打开的时候触发一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。 EventEmitter类Node.js 内置模块中含有一个名为 events 的模块，该模块向外 exports 了一个 events 对象，该对象包含一个名为 EventEmitter 的类。我们可以通过 require 命令来引入它。 1234// 引入 events 模块var events = require('events');// 创建 eventEmitter 对象var eventEmitter = new events.EventEmitter(); 接下来我们来解析一下上篇提到的代码。 12345678910111213141516171819202122232425262728// 引入 events 模块var events = require('events');// 创建 eventEmitter 对象var eventEmitter = new events.EventEmitter(); // 创建事件处理程序var connectHandler = function connected() &#123; console.log('连接成功。'); // 触发 data_received 事件 eventEmitter.emit('data_received');&#125; // 绑定 connection 事件处理程序eventEmitter.on('connection', connectHandler); // 使用匿名函数绑定 data_received 事件eventEmitter.on('data_received', function()&#123; console.log('数据接收成功。');&#125;);// 设置定时器在触发事件前setTimeout(()=&gt;console.log('定时器执行成功。'),0); // 触发 connection 事件 eventEmitter.emit('connection'); console.log("程序执行完毕。"); 执行结果： 12345$ node main.js连接成功。数据接收成功。程序执行完毕。定时器执行成功。 在上述代码中，我们创建了一个事件发生器，并通过 on 命令指定了两个事件及其回调，然后通过 emit 命令触发指定事件。 我们观察到，尽管先访问到了 setTimeout，但是其结果却在最后被打印，说明 eventEmitter 的执行逻辑与 setTimeout 并不相同。通过阅读源码，可知 eventEmitter 的执行方式类似于方法调用，此处暂略。 on 和 emit上文代码中我们用到了 on 和 emit 两个命令。现在来看看他们的方法原型。 12on(event,listener)event 要求为一个字符串，listener 要求为一个回调函数，表示在事件 event 的回调函数列表尾部插入 listener 12emit(event,[data])event 要求为一个字符串，[data] 为可选项，表示触发事件 event，将按顺序执行 event 回调函数列表中的每个回调函数，并向每个函数中都传入 data 这是 EventEmitter 两个最为重要的方法。 其余方法如下： 12addListener(event, listener)为指定事件添加一个监听器到监听器数组的尾部。与on命令相同。 12once(event, listener)为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。 1234removeListener(event, listener)移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。它接受两个参数，第一个是事件名称，第二个是回调函数名称。 12removeAllListeners([event])移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。 12setMaxListeners(n)默认情况下， EventEmitters 如果你添加的监听器超过 10 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。 12listeners(event)返回指定事件的监听器数组。 12listenerCount(event)返回指定事件的监听器数量。 以上是 EventEmitter 的方法，可以设置自定义事件。 EventEmitter 还有内置的事件。 12newListener该事件在添加新监听器时被触发。 12removeListener该事件在删除一个监听器时被触发。 12error该事件在发生错误时被触发。若没有为该事件绑定监听器，则程序会直接出错退出。 同步调用上文说到，eventEmitter 的执行逻辑与 setTimeout 并不相同。那么具体是如何执行的呢？我们需要阅读 eventEmitter 的源码，或者自己手写一个。此处选择手写一个作为示例。 12345678910111213141516171819202122232425262728293031323334class EventEmitter &#123; constructor() &#123; // 事件对象，存放订阅的名字和事件 如: &#123; click: [ handle1, handle2 ] &#125; this.events = &#123;&#125; &#125; // 订阅事件的方法 on(eventName, callback) &#123; if (!this.events[eventName]) &#123; this.events[eventName] = [callback] &#125; else &#123; this.events[eventName].push(callback) &#125; &#125; // 触发事件的方法 emit(eventName, ...rest) &#123; this.events[eventName] &amp;&amp; this.events[eventName].forEach(f =&gt; f.apply(this, rest)) &#125; // 移除订阅事件 remove(eventName, callback) &#123; if (this.events[eventName]) &#123; this.events[eventName] = this.events[eventName].filter(f =&gt; f != callback) &#125; &#125; // 只执行一次订阅的事件，然后移除 once(eventName, callback) &#123; // 绑定的时fn, 执行的时候会触发fn函数 const fn = () =&gt; &#123; callback() // fn函数中调用原有的callback this.remove(eventName, fn) // 删除fn, 再次执行的时候之后执行一次 &#125; this.on(eventName, fn) &#125;&#125; 可见，eventEmitter 是以类似方法调用的方式传递触发信号的，然后又以数组顺序为基础来进行顺序执行，所以整体上是同步执行的，不是 setTimeout 一样的异步执行。 比起一般的方法调用， eventEmitter 胜在一个入口可以调用多个（同一数组内）的方法。 模块系统模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。在模块系统的帮助下，Node.js的文件可以相互调用。 模块系统有两个重要动作：导入（require）和导出（exports）。 require我们可以通过 require 命令来引入一个模块，例如： 12var hello = require('./hello');hello.world(); 在 require 之后，可以对这个模块做出哪些操作，则取决于这个模块 exports 了什么东西。 exports对于任何一个模块，都可以通过操作内置对象 exports 来导出内容。 例如导出一个 function world，可以通过两种方案来实现。 exports.world = function (){} module.exports = function (){} 第一种方案，在 require 之后，主模块引入了一个来自从模块的对象，该对象包含一个名为 world 的方法。 第二种方案，在 require 之后，主模块只引入了一个方法，该方法的名字取决于主模块中所起的变量名。 一般不建议两种方案同时使用，因为阅读 require 源码可以发现，在 require 一个模块的时候，会先执行 exports.xxx 的赋值，最后才执行 module.exports 的赋值，这使得之前所做的赋值被完全覆盖了，只有最后的赋值才有效。 模块分类之前的章节中，我们使用了 http 模块，event 模块等。事实上，JavaScript 有 4 种模块，分为原生模块和 3 种文件模块，通过在 require 命令中指定的字符串不同而导入。 http、fs、path等，原生模块。 ./mod或../mod，相对路径的文件模块。 /pathtomodule/mod，绝对路径的文件模块。 mod，非原生模块的文件模块。 由于有多种模块，所以导入模块也有对应的优先级，如图。 web 模块使用 Node.js 创建 web 客户端需要引入 http 模块。 我们可以用 Node.js 搭建一个 web 服务器与一个客户端。 服务器代码 1234567891011121314151617181920212223242526272829303132333435var http = require('http');var fs = require('fs');var url = require('url'); // 创建服务器http.createServer( function (request, response) &#123; // 解析请求，包括文件名 var pathname = url.parse(request.url).pathname; // 输出请求的文件名 console.log("Request for " + pathname + " received."); // 从文件系统中读取请求的文件内容 fs.readFile(pathname.substr(1), function (err, data) &#123; if (err) &#123; console.log(err); // HTTP 状态码: 404 : NOT FOUND // Content Type: text/html response.writeHead(404, &#123;'Content-Type': 'text/html'&#125;); &#125;else&#123; // HTTP 状态码: 200 : OK // Content Type: text/html response.writeHead(200, &#123;'Content-Type': 'text/html'&#125;); // 响应文件内容 response.write(data.toString()); &#125; // 发送响应数据 response.end(); &#125;); &#125;).listen(8080); // 控制台会输出以下信息console.log('Server running at http://127.0.0.1:8080/'); 需要在服务器文件目录下创建一个 index.html 文件来配合。 1234567891011&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="utf-8"&gt;&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;我的第一个标题&lt;/h1&gt; &lt;p&gt;我的第一个段落。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 客户端代码 12345678910111213141516171819202122232425var http = require('http'); // 用于请求的选项var options = &#123; host: 'localhost', port: '8080', path: '/index.html' &#125;; // 处理响应的回调函数var callback = function(response)&#123; // 不断更新数据 var body = ''; response.on('data', function(data) &#123; body += data; &#125;); response.on('end', function() &#123; // 数据接收完成 console.log(body); &#125;);&#125;// 向服务端发送请求var req = http.request(options, callback);req.end(); Express 框架Express 是一个基于 Node.js 的 web 应用框架。 Express 框架的核心特性如下： 可以设置中间件来响应 HTTP 请求。 定义了路由表用于执行不同的 HTTP 请求动作。 可以通过向模板传递参数来动态渲染 HTML 页面。 express 可以通过 require(‘express’) 引入，暴露的是一个方法。使用例如下： 12345678910111213141516171819202122232425var express = require('express');var app = express();// 设置响应app.get('/', (req, res) =&gt; &#123; res.sendFile(__dirname + '/index.html');&#125;);// 设置静态资源目录app.use('/static', express.static('static'));// 设置 404 处理app.use((req, res) =&gt; &#123; res.status(404); res.send('你访问的页面不存在');&#125;);var server = app.listen(8888, () =&gt; &#123; var host = server.address().address; var port = server.address().port; console.log("启动于 http://%s:%s", host, port);&#125;) 从上述代码中，可以看到 app 有两个关键方法：get 和 listen get(url, func(request, response))，表示使用 http get 请求访问，第一个参数是访问的路径（可以是一个正则表达式，或是 Rest 风格的 url 字符串，详见下章），第二个参数是这个事件发生时的回调。其中回调含有 2 个参数：request 和 response，分别表示这个 http 请求的请求包体和响应包体。 listen(port, func)，返回一个 app 实例，监听来自端口 port 的所有请求，并在服务成功启动后调用指定的回调函数。 在 request 对象和 response 对象上，各自还有自己的对象方法。 Request 对象 - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有： req.app：当callback为外部文件时，用req.app访问express的实例 req.baseUrl：获取路由当前安装的URL路径 req.body / req.cookies：获得「请求主体」/ Cookies req.fresh / req.stale：判断请求是否还「新鲜」 req.hostname / req.ip：获取主机名和IP地址 req.originalUrl：获取原始请求URL req.params：获取路由的parameters req.path：获取请求路径 req.protocol：获取协议类型 req.query：获取URL的查询参数串 req.route：获取当前匹配的路由 req.subdomains：获取子域名 req.accepts()：检查可接受的请求的文档类型 req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码 req.get()：获取指定的HTTP请求头 req.is()：判断请求头Content-Type的MIME类型 Response 对象 - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有： res.app：同req.app一样 res.append()：追加指定HTTP头 res.set()在res.append()后将重置之前设置的头 res.cookie(name，value [，option])：设置Cookie opition: domain / expires / httpOnly / maxAge / path / secure / signed res.clearCookie()：清除Cookie res.download()：传送指定路径的文件 res.get()：返回指定的HTTP头 res.json()：传送JSON响应 res.jsonp()：传送JSONP响应 res.location()：只设置响应的Location HTTP头，不设置状态码或者close response res.redirect()：设置响应的Location HTTP头，并且设置状态码302 res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。 res.send()：传送HTTP响应 res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type res.set()：设置HTTP头，传入object可以一次设置多个头 res.status()：设置HTTP状态码 res.type()：设置Content-Type的MIME类型 静态文件可以使用形如 app.use(&#39;/public&#39;, express.static(&#39;public&#39;)); 的代码来设置静态文件路径。 该代码使用了 use 方法，该方法需要两个参数。 url，表示 http 请求需要访问的路径 express.static(localpath)，其中 localpath 表示存放静态文件的文件夹的本地路径 比如此时我在 public 文件夹下存放了一张图片，名为 hello.png，则我访问 http://localhost:port/public/hello.png 时，页面上就会返回这张图片。 Restful APIRestful API 是用 http 动词描述动作，用 URL 定位资源的 API 设计风格。在 Express 框架中，我们可以使用 Restful 默认的 4 个动词来定义 app 监听。 app.get(url, func(request, response)) app.post(url, func(request, response)) app.put(url, func(request, response)) app.delete(url, func(request, response)) 其中，绑定 url 时，要绑定指定的 id，可以使用形如 /user/:id 的 url，来访问路径上的动态参数。该写法在前端类似于 vue 的 router 绑定，在后端类似于 spring 的 @PathVariable MySQLNode.js 既然可以写后端，自然也可以连接 MySQL。容易想到，我们可以通过 require(‘mysql’) 来引入 mysql模块，不过需要先 npm install mysql 连接数据库12345678910111213141516171819202122232425262728var mysql = require('mysql'); var connection = mysql.createConnection(&#123; host : 'localhost', user : 'root', password : '123456', port: '3306', database: 'test' &#125;); connection.connect(); var addSql = 'INSERT INTO websites(Id,name,url,alexa,country) VALUES(0,?,?,?,?)';var addSqlParams = ['菜鸟工具', 'https://c.runoob.com','23453', 'CN'];//增connection.query(addSql,addSqlParams,function (err, result) &#123; if(err)&#123; console.log('[INSERT ERROR] - ',err.message); return; &#125; console.log('--------------------------INSERT----------------------------'); //console.log('INSERT ID:',result.insertId); console.log('INSERT ID:',result); console.log('-----------------------------------------------------------------\n\n'); &#125;); connection.end(); 通过向 createConnection 传入一个对象作为参数，来配置连接的必要参数。 之后可以通过 query 方法，来提交 sql 请求。query 方法包含 3 个参数。 query(sqlString, sqlParams, func(err, result)) 在 sqlString 中，可以留若干个？作为占位符，？会按顺序匹配 sqlParams 中的参数。 sql 请求成功返回后，使用 func 作为回调函数。该回调函数含有 2 个参数，第一个是报错信息，第二个是 sql 执行结果。若没有出错，则 err 为空。 sql 请求的返回值与 spring mapper 类似，select、insert 返回具体数据，update、delete 返回的 result 对象中只包含一个 affectedRows 字段，表示影响的行数。 Buffer/StreamBufferJavaScript 语言自身只有字符串数据类型，没有二进制数据类型。 但在处理像 TCP 流或文件流时，必须使用到二进制数据。因此在 Node.js 中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。 Buffer 在使用时需要指定字符编码。支持的编码如下： ascii - 仅支持 7 位 ASCII 数据。如果设置去掉高位的话，这种编码是非常快的。 utf8 - 多字节编码的 Unicode 字符。许多网页和其他文档格式都使用 UTF-8 。 utf16le - 2 或 4 个字节，小字节序编码的 Unicode 字符。支持代理对（U+10000 至 U+10FFFF）。 ucs2 - utf16le 的别名。 base64 - Base64 编码。 latin1 - 一种把 Buffer 编码成一字节编码的字符串的方式。 binary - latin1 的别名。 hex - 将每个字节编码为两个十六进制字符。 Buffer 具有类似数组的特性。重要的 API 如下。 创建 Buffer Buffer.alloc(size[, fill[, encoding]]) 返回一个指定大小的 Buffer 实例，如果没有设置 fill，则默认填满 0 Buffer.allocUnsafe(size) 返回一个指定大小的 Buffer 实例，但是它不会被初始化，所以它可能包含敏感的数据 Buffer.allocUnsafeSlow(size) Buffer.from(array) 返回一个被 array 的值初始化的新的 Buffer 实例（传入的 array 的元素只能是数字，不然就会自动被 0 覆盖） Buffer.from(arrayBuffer[, byteOffset[, length]]) 返回一个新建的与给定的 ArrayBuffer 共享同一内存的 Buffer。 Buffer.from(buffer) 复制传入的 Buffer 实例的数据，并返回一个新的 Buffer 实例 Buffer.from(string[, encoding]) 返回一个被 string 的值初始化的新的 Buffer 实例 写入 Buffer1buf.write(string[, offset[, length]][, encoding]) 参数参数描述如下： string - 写入缓冲区的字符串。 offset - 缓冲区开始写入的索引值，默认为 0 。 length - 写入的字节数，默认为 buffer.length encoding - 使用的编码。默认为 ‘utf8’ 。 根据 encoding 的字符编码写入 string 到 buf 中的 offset 位置。 length 参数是写入的字节数。 如果 buf 没有足够的空间保存整个字符串，则只会写入 string 的一部分。 只部分解码的字符不会被写入。 返回值返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。 实例1234buf = Buffer.alloc(256);len = buf.write("www.runoob.com");console.log("写入字节数 : "+ len); 执行以上代码，输出结果为： 12$node main.js写入字节数 : 14 其余与数组方法基本相同，详见 Node.js Buffer(缓冲区) | 菜鸟教程 StreamStream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个 Stream，还有stdout（标准输出）。 Node.js，Stream 有四种流类型： Readable - 可读操作。 Writable - 可写操作。 Duplex - 可读可写操作. Transform - 操作被写入数据，然后读出结果。 所有的 Stream 对象都是 EventEmitter 的实例。常用的事件有： data - 当有数据可读时触发。 end - 没有更多的数据可读时触发。 error - 在接收和写入过程中发生错误时触发。 finish - 所有数据已被写入到底层系统时触发。 主要有三种流： 写入流 管道流 链式流 详见 Node.js Stream(流) | 菜鸟教程 11-14 章 待写待续…… 参考文章https://www.runoob.com/nodejs/nodejs-tutorial.html https://blog.csdn.net/qq_39953537/article/details/102685328]]></content>
      <categories>
        <category>frontend</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu下使用Docker部署的办法]]></title>
    <url>%2Fdocker%2Fdocker%2F</url>
    <content type="text"><![CDATA[这年头不是全栈工程师，连中间件实验都做不了了 基本知识 docker 名词 java 名词 镜像 类 容器 对象 由镜像构建容器 new 一个某类的实例 docker build 设计一个class docker run new 列出镜像列表 查看所有类 列出所有容器 查看所有已经实例化的对象 停止容器 使得这个对象停止功能 删除容器 使得这个对象被释放（delete） ubuntu 安装 docker参考链接：https://www.runoob.com/docker/ubuntu-docker-install.html 预备先通过docker version查看本机上是否已经安装 docker，若是，则执行下述命令，卸载旧版本 docker sudo apt-get remove docker docker-engine docker.io containerd runc 安装首次安装时，需要设置仓库 指令 用途 sudo apt-get update 更新 apt 包索引 sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common 安装 apt 依赖包，用于通过 HTTPS 来获取仓库 curl -fsSL https://download.docker.com/linux/ubuntu/gpg &#124; sudo apt-key add - 添加 Docker 的官方 GPG 密钥 sudo add-apt-repository “deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable” 设置稳定版仓库 安装 Docker Engine-Community 指令 用途 sudo apt-get update 更新 apt 包索引 sudo apt-get install docker-ce docker-ce-cli containerd.io 安装最新版本的 Docker Engine-Community 和 containerd docker version 检查 docker 版本，验证是否安装成功 ubuntu 使用 docker 部署jar参考链接：https://blog.csdn.net/weixin_42054155/article/details/90815393 构建 docker 镜像 构造文件Dockerfile，这是一个无后缀文件 该文件内容如下 12345FROM java:8MAINTAINER RingoerADD demo-0.0.1-SNAPSHOT.jar demo.jarEXPOSE 8080ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;demo.jar&quot;] FROM 表示拉取一个 java 版本为 1.8 的 docker image（docker镜像） MAINTAINER 表示作者声明，后接作者名字 ADD 向镜像中加入文件，第一个参数是要加入的文件名，第二个参数是文件的重命名，表示它在 docker 镜像中的名字 EXPOSE 表示该镜像对外暴露的端口号（与 java 项目的端口号要相同） ENTRYPOINT 表示运行该镜像时执行的命令行参数，示例中给出的配置等效于执行命令java -jar demo.jar 向服务器上传 jar 包和 Dockerfile 文件，这两个文件要在同一个目录下 连接服务器终端，cd 进入该目录 执行命令 docker build -t demo . 构建镜像，其中 demo 是镜像名称。记得别漏了最后的一个点 操作镜像 运行容器 docker run -d --name demo1 -p 8080:8080 demo docker run 部分是不可变的 -d 指示了 docker 容器后台运行 –name 部分指示了新运行的容器实例的名称 -p 部分指示了两个端口号，用冒号隔开。其中前一个端口号表示暴露在公网的 ip，后一个表示容器暴露的 ip 最后一个参数是镜像名称，此处表示使用名为 demo 的镜像构建容器，容器名为 demo1 其余命令 命令 功能 docker pull [name] 根据名称获取镜像 docker images 查看所有镜像 docker rmi [name] 根据名称删除某个镜像 docker rmi $(docker images -q) 删除所有镜像 docker ps -a 查看所有容器 docker ps -aq 列出所有容器ID docker stop [name] 根据名称停止某个容器 docker stop $(docker ps -aq) 停止所有容器 docker rm [name] 根据名称删除某个容器 docker rm $(docker ps -aq) 删除所有容器 docker 部署基于 nginx 的前端项目参考链接： http://dockone.io/article/8834 https://www.cnblogs.com/littleorange7/p/12838101.html 在服务器上使用命令 docker pull nginx 下载 nginx 在服务器上为 vue 项目新建一个文件夹（假设命名为 vue） 在本地使用命令 npm run build 打包 vue 项目，打包完成后会在项目目录下产生一个 dist 文件夹。将该文件夹上传到服务器 不如说，几乎所有前端用的打包框架都是产生 dist 文件夹 在本地编写 Dockerfile 文件 文件内容如下，照抄即可 123FROM nginxCOPY dist/ /usr/share/nginx/html/COPY nginx/default.conf /etc/nginx/conf.d/default.conf 编写完毕后上传到服务器的 vue 文件夹 新建一个名为 nginx 的文件夹，在这个文件夹里新建一个名为 default.conf 的文件 文件内容如下 12345678910111213141516171819202122232425262728server &#123; listen 2222; server_name ali.ringoer.com; #charset koi8-r; access_log /var/log/nginx/host.access.log main; error_log /var/log/nginx/error.log error; location / &#123; root /usr/share/nginx/html; #index index.html index.htm; try_files $uri $uri/ /index.html; &#125; location /api/ &#123; proxy_pass http://ali.ringoer.com:9527/; proxy_redirect off; &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root /usr/share/nginx/html; &#125;&#125; 需要注意的字段如下 字段名 用途 listen 配置 nginx 的监听端口，要求与 vue 配置的端口号一致 server_name 前端访问的主机名，要求填写公网地址（域名或 ip） index 指示项目主页。此处注释掉是作为对比，原因见下一条 try_files 使用 index 进行配置时，会导致在非项目主入口刷新时，报 404 错误。所以使用 try_files 进行配置，使得刷新可以触发设定好的拦截，跳转至登录界面。照抄即可，注意是 uri，不是 url location /api/ {} 配置跨域请求，这里的 /api/ 与 vue 项目内部配置的 proxyTable 里所填前缀一致 proxy_pass 转发地址，与 vue 项目内部配置的 proxyTable 下的 target 所填内容一致。必须完整填写（包含 http 和斜杠），不然会报错 proxy_redirect 是否重定向，off 就行了 别的东西 都可以照抄 将 nginx 文件夹上传到服务器 vue 文件夹 现在服务器 vue 文件夹中有2个文件夹和1个文件 文件名 描述 dist vue 项目静态资源文件夹 nginx nginx 配置文件夹 Dockerfile docker 配置文件（不是文件夹） 其中 nginx 文件夹中还包含 default.conf 文件 接下来过程与部署 jar 包一致 部署命令顺序 通过 cd 命令进入服务器上 vue 文件夹后，按顺序执行下述命令 docker build -t [name] .，其中 [name] 是你所希望的镜像名称 末尾的一个点别漏了 docker run -d --name [name1] -p [port1]:[port2] [name2]，其中 字段名 描述 [name1] 你所希望的容器名称 [port1] 容器暴露在公网的端口号 [port2] nginx 监听的端口号，也是 vue 项目配置的端口号 [name2] 1中命令设置的镜像名称 现在，通过浏览器访问 [server_name]:[port1] 即可看到你的 vue 项目]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>ubuntu</tag>
        <tag>linux</tag>
        <tag>docker</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu服务器上的 Jar 包部署办法]]></title>
    <url>%2Fprograming%2Fdeploy-on-ubuntu%2F</url>
    <content type="text"><![CDATA[今天紧急学习了一下部署jar包的方法，特此存档 部署的流程主要分为2步。 向服务器上传jar包 使用服务器终端启动jar包 以下基于Windows10环境 向服务器上传jar包 下载安装WinSCP 点我下载 打开WinSCP，连接到服务器 连接设置如下图，默认SFTP协议和22端口即可 主机名填写服务器的ip地址 登录之后，如同在本机上一般，直接拖动本机jar包到服务器目录即可 注意，最好给每个jar包单独一个存放目录 使用服务器终端启动jar包 随意找个位置，通过右键菜单启动Git Bash Here 输入命令ssh root@ip 其中ssh是命令名，root是服务器用户名，ip是服务器地址 如ip为127.0.0.1，用户名为root，则连接命令为ssh root@127.0.0.1 输入用户名对应的密码，成功进入服务器终端 首先使用ls查看当前所在目录下的所有文件名，找到自己存放jar包的目录的父目录 然后不断cd进入下级目录，直到进入自己存放jar包的目录 输入命令nohup java -jar filename.jar &amp;即可启动jar包 其中filename更改为你的jar包名称 注意点 服务器所使用的java版本（一般是1.8）要与打包jar包时使用的版本一致 应时刻注意服务器资源使用情况，避免服务器宕机 使用free命令可以查看内存使用情况 使用df -hl命令可以查看磁盘使用情况]]></content>
      <categories>
        <category>programing</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Django建站初探]]></title>
    <url>%2Fprograming%2Fdjango%2F</url>
    <content type="text"><![CDATA[在使用 python 做爬虫或机器学习的时候，有时候需要浏览所得到的阶段性成果，这时候就需要一个前端。 本文所使用的示例代码：点我下载 环境： Windows10 VSCODE python 3.7 -为什么选择 django ？ -没有为什么，我高兴 准备工作安装 django在命令行中使用以下语句安装 django pip install django 或使用国内镜像 pip install -i https://pypi.douban.com/simple django 安装后可以在命令行中启动 python 以查看 django 是否安装成功 创建一个 django 新项目 启动命令行，进入你想放置该项目的目录 使用以下语句创建工程 django-admin startproject [projectname] 其中 [projectname] 可以按需要修改为自己的项目名 创建完成后，在命令行中进入该项目，输入以下语句启动测试页面 python manage.py runserver 如果启动成功，则可以访问以下网址查看测试页面 http://localhost:8000 测试页面如图 django 目录结构 如上图，一个默认的 django 项目包含如下文件树： ——sample ————sample（项目控制组件，用于控制项目的公有配置） ——————pycache（提供默认配置文件，不需要更改） ————————init.cpython-37.pyc ————————settings.cpython-37.pyc ————————urls.cpython-37.pyc ————————wsgi.cpython-37.pyc ——————init.py（提供默认配置文件，不需要更改） ——————asgi.py（提供默认配置文件，不需要更改） ——————settings.py（项目主配置文件） ——————urls.py（项目访问路径配置文件） ——————wsgi.py（提供默认配置文件，不需要更改） ————db.sqlite3（项目自带简易数据库，不需要更改，在第一次启动项目后才会生成） ————manage.py（项目主启动类，不需要更改） 可见，我们只有3种办法修改我们的项目： 修改settings.py 修改urls.py 添加新的目录 让我们先来认识一下项目控制组件下的2个配置文件 settings.py项目主配置文件，提供一些基本配置。 常用配置如下： BASE_DIR 指示项目的绝对位置 是项目所在的位置，不是项目控制组件所在的位置 会自动识别，不需修改 INSTALLED_APPS 创建了新的组件后，要在此处注册 ROOT_URLCONF 指示项目访问路径配置文件的位置 一般不需修改 TEMPLATES -&gt; DIRS 指示项目中引用的所有模板文件的绝对位置 请在项目中适用如下配置 通常为了方便使用，都会在项目目录下新建文件夹 template，并对 TEMPLATES 属性作如下修改 123456789101112131415TEMPLATES = [ &#123; 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR, 'templates').replace('\\', '/')], # 唯一修改的语句 'APP_DIRS': True, 'OPTIONS': &#123; 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], &#125;, &#125;,] STATIC_URL 指示项目中引用的所有静态文件的相对路径名 该属性可以含有如下子属性 STATIC_ROOT 指示项目中引用的所有静态文件的绝对位置 STATICFILES_DIRS 指示静态文件目录下的其它目录的绝对位置 请在项目中适用如下配置 通常为了方便使用，都会在项目目录下新建文件夹 static，且 static 文件夹包含3个子文件夹，分别为 css、images、js 并对 STATIC_URL 属性作如下修改 1234567STATIC_URL = '/static/'STATIC_ROOT = os.path.join(BASE_DIR, 'static').replace('\\', '/')STATICFILES_DIRS = ( ('css', os.path.join(STATIC_ROOT, 'css').replace('\\', '/')), ('images', os.path.join(STATIC_ROOT, 'images').replace('\\', '/')), ('js', os.path.join(STATIC_ROOT, 'js').replace('\\', '/')),) urls.py项目访问路径配置文件，用于控制访问路径。 一般只需修改 urlpatterns 属性。默认含有一条语句 path(&#39;admin/&#39;, admin.site.urls), 例如当添加一个名为 mytest 的新组件，且希望路径 /test 指向它时，可以向 urlpatterns 属性下添加如下语句 url(&#39;test/&#39;, include(&#39;mytest.urls&#39;)), 创建子组件在命令行中进入项目目录，执行以下语句 python manage.py startapp [appname] 其中 appname 即为你想新建的组件名 组件名不可以重名 子组件 hello 的目录结构如下 其中两个 init.py 文件是默认的配置文件，无需修改 apps.py指示本组件的名称，保持默认即可 tests.py为本组件创建测试 本教程不对此深入讨论 models.py在本文件中，程序员应该描述本组件包含的实体类的声明 横向对比来说，类似于 java 开发中的 domain 层 此处我们创建一个保存我们自己数据的 myData 类 1234567from django.db import models# Create your models here.class myData(models.Model): username = models.TextField() description = models.TextField() age = models.IntegerField() admin.py默认情况下包含如下代码 123from django.contrib import admin# Register your models here. 需要根据子组件的 models 来添加代码 比如，我们在上文中，在 hello 子组件中创建了 myData 类，那就需要修改本文件代码为如下模样 123456from django.contrib import adminfrom hello.models import myData# Register your models here.admin.site.register(myData) views.py用于组织本组件视图的文件，程序员应在其中写入对模板渲染时所需数据的预处理操作 本例中，我们将定义一个名为 helloworld 的方法来进行预处理 应添加在子组件中的非默认文件data.csv用于保存本组件所需数据的原始数据表。可以没有本项目 dataimport.py用于指示如何向项目主目录下的 db.sqlite3 数据库中注入 data.csv 当不存在 data.csv 时，也不需有本文件 现在，为了方便示例，让我们创建 data.csv，并向其中插入如下数据 username description age ringoer 从忘恩之地吹来的风 21 myname 测试用说说 100 并创建 dataimport.py，输入如下代码 12345678910111213141516171819202122232425#在自己脚本中使用django modelimport sys,ossys.path.append(os.path.abspath(os.path.dirname(os.path.dirname(__file__))))os.environ['DJANGO_SETTINGS_MODULE'] = 'sample.settings' # 配置系统变量import djangodjango.setup()import csvfrom hello.models import myData # 引入数据类型，与本组件的models中声明的类型相同# 从csv读取数据并存入models创建的表里# 此处路径是相对于项目主目录的data_path = 'hello/data.csv'with open(data_path, encoding = 'UTF-8') as f: reader = csv.reader(f) for i, row in enumerate(reader): mydata = myData() if i&gt;0: mydata.username = row[0] mydata.description = row[1] mydata.age = int(row[2]) mydata.save() 为了正常指向该组件，需要配置 该组件的 urls.py 项目控制组件中的 urls.py 项目控制组件中的 settings.py hello/urls.py用于指示本组件中的路由 但默认的代码使用的是 path 方法来指示路由，并不能正常工作，故本例中使用 url 方法来指示路由 本例中可以在该文件中写入如下代码 123456789from django.conf.urls import url, includefrom django.contrib import adminfrom django.contrib.staticfiles.urls import staticfiles_urlpatternsurlpatterns = [ url(r'^hello/', include('hello.urls')), url(r'^admin/', admin.site.urls),]urlpatterns += staticfiles_urlpatterns() sample/urls.py如果我们希望通过 hello 路径来访问 hello 组件，可以向该文件中插入如下语句 12import hellopath('hello/', hello.urls), 则该文件变为 123456789from django.contrib import adminfrom django.urls import pathimport hellourlpatterns = [ path('hello/', hello.urls), path('admin/', admin.site.urls),] 然后在项目控制组件的 settings.py 的 INSTALLED_APPS 属性中注册该组件，就可以正常路由了 123456789INSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'hello',] 创建页面文件并渲染只有路由没有页面，一样什么都显示不了，所以我们需要对组件内的 views.py 进行修改，使得其能渲染页面，并另外提供一个用于渲染的 html 模板 views.py默认情况下有如下代码 123from django.shortcuts import render# Create your views here. 本文中提供如下代码作为例子 123456789101112131415161718192021222324252627282930313233343536from django.shortcuts import renderfrom hello.models import myData# Create your views here.def helloworld(request): myData_list = myData.objects.all() # 分页算法 perpage = 10 maxPage = int((len(myData_list) - 1) / perpage + 1) page = request.GET.get('page') try: page = int(page) except: page = 1 if page &gt; maxPage: page = maxPage elif page &lt;= 0: page = 1 minIndex = (page - 1) * perpage maxIndex = page * perpage if maxIndex &gt; len(myData_list): maxIndex = len(myData_list) myData_list = myData_list[minIndex : maxIndex] # 提供给前端的内容 context = &#123; 'myData_list': myData_list, # 渲染表格用的列表 'page': page, # 页号 'message': 'helloworld!', # 传给前端的消息 &#125; return render(request, 'hello.html', context) # 第二参数是目标html文件名称，该html须在templates文件夹下 hello.html需要注意的模板语法有两条 1&#123;&#123; 变量名 &#125;&#125; 可以实现对变量取值 12345&#123;% for %&#125;（此处填写html语句）&#123;% endfor %&#125; 可以实现循环渲染 本例中的 html 代码如下 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html language="zh-cn"&gt; &lt;head&gt; &lt;link href="/static/css/style.css" rel="stylesheet" type="text/css" /&gt; &lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8"&gt; &lt;title&gt;hello&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;&#123;&#123; message &#125;&#125;&amp;emsp;第&#123;&#123; page &#125;&#125;页&lt;/h1&gt; &lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;td&gt;username&lt;/td&gt; &lt;td&gt;description&lt;/td&gt; &lt;td&gt;age&lt;/td&gt; &lt;/tr&gt; &#123;% for i in myData_list %&#125; &lt;tr&gt; &lt;td&gt;&#123;&#123; i.username &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; i.description &#125;&#125;&lt;/td&gt; &lt;td&gt;&#123;&#123; i.age &#125;&#125;&lt;/td&gt; &lt;/tr&gt; &#123;% endfor %&#125; &lt;/thead&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; 迁移数据到这里，试图 runserver 的时候，却发现应用跑不起来了。这是为什么呢？ 因为之前给 hello 组件准备的数据还没导入！ 让我们导入数据吧 执行语句 python manage.py makemigrations 创建迁移文件 执行语句 python manage.py migrate 完成迁移文件的导入 执行语句 python hello/dataimport.py 完成数据导入 需要注意的是，当数据量很大时，由于 python 语言性质，会导致导入速度非常慢，请耐心等待 验收成果经过这么长的教程，终于可以验收成果了！ 总结django 建站的步骤大致如下： 初始化项目，配置静态资源 构建若干子组件 为子组件构建实体类、数据、页面与页面渲染、路由 在配置文件中注册组件 迁移数据，导入数据]]></content>
      <categories>
        <category>programing</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mapper层配置]]></title>
    <url>%2FJ2EE%2Fmapper%2F</url>
    <content type="text"><![CDATA[和数据库直接联系的，重要的mapper层的配置。 依赖123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!-- mybatis --&gt;&lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.1.1&lt;/version&gt;&lt;/dependency&gt;&lt;!-- druid 数据库连接池 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.21&lt;/version&gt;&lt;/dependency&gt;&lt;!-- jdbc --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!-- mysql --&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;build&gt; &lt;plugins&gt; &lt;!-- 正常一定会有的 maven plugin --&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;!-- mybatis --&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.7&lt;/version&gt; &lt;configuration&gt; &lt;configurationFile&gt;mybatis-generator/generatorConfig.xml&lt;/configurationFile&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; application.yaml12345678910111213141516171819202122spring: application: name: USER-SERVICE profiles: # 为了便于管理，将具体的 datasource 配置放在另一个文件中 # 下方 active 属性名，设为dev，则spring会自动寻找和 application.yaml同一目录下的 application-dev.yaml # 也就是说，设为x，则会自动寻找application-x.yaml # 效果等同于将目标文件内的 datasource 配置直接写在当前文件中 active: devmybatis: # domain对象的包 type-aliases-package: xmu.oomall.user.domain # mapper.xml所在的位置 # 本项目的mapper放在 /resource/xmu.oomall.mapper 目录下 # 如果配置时索引不到mapper，可能是前置名称有问题 # 如该项目，mapper.xml所在的文件夹可以试试 /xmu.oomall.mapper 或者 /xmu/oomall/mapper mapper-locations: classpath:xmu.oomall.mapper/*.xml configuration: # 自动将SQL中查出来的带下划线的字段，转换为驼峰标志，再去匹配类中的属性 mapUnderscoreToCamelCase: true map-underscore-to-camel-case: true application-dev.yaml1234567891011121314151617181920212223242526spring: datasource: driver-class-name: com.mysql.cj.jdbc.Driver # 目标数据库地址 # jdbc开头，接数据库类型，接ip地址，接数据库名 url: jdbc:mysql://106.14.83.157:3306/oomall # 登录数据库 username: ooadUser password: ooad type: com.alibaba.druid.pool.DruidDataSource druid: # 初始化时建立物理连接的个数 initial-size: 3 # 最小连接池数量 min-idle: 3 # 最大连接池数量 max-active: 10 # 获取连接时最大等待时间 max-wait: 60000 filter: stat: # 是否开启慢sql查询监控 log-slow-sql: true # 慢SQL执行时间 slow-sql-millis: 100 validation-query: select 1 到这里，配置基本完成了，接下来开始写mapper UserMapper.java123456789101112131415161718192021222324252627282930313233343536373839404142434445464748package xmu.oomall.user.mapper;import org.apache.ibatis.annotations.Mapper;import xmu.oomall.user.domain.User;import java.util.List;/** * @author Ringoer * 必须是接口类型 * 必须有 @Mapper 注解 */@Mapperpublic interface UserMapper &#123; /** * 根据id返回用户信息 * @param id 用户id * @return 用户对象 */ User findUserById(Integer id); /** * 根据id返回用户信息 * @param name 用户名 * @return 用户对象 */ User findUserByName(String name); /** * 注册一个用户 * @param user 用户信息 * @return 行数 */ int addUser(User user); /** * 修改一个用户 * @param user 用户对象 * @return 修改影响的行数 */ int editUser(User user); /** * 返回用户列表 * @return 用户列表 */ List&lt;User&gt; findUsers();&#125; UserMapper.xml123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;!--namespace中填写对应的mapper接口位置及名称--&gt;&lt;mapper namespace="xmu.oomall.user.mapper.UserMapper"&gt; &lt;!--sql语句之select--&gt; &lt;!-- id 填写在接口中对应的方法名 --&gt; &lt;!-- parameterType 填写传入参数的类型，类型名称与java类型相同 --&gt; &lt;!-- resultType 填写返回参数的名称，类型名称与java类型相同，返回时会自动组装 --&gt; &lt;!-- 对于数据库保留字段，如 name ，不能直接查询，要使用 `` 包裹住才行（不是单引号） --&gt; &lt;!-- 对于传入参数，使用 #&#123;变量名&#125; 方式来取值，其中变量名与java中相同 --&gt; &lt;select id="findUserById" parameterType="Integer" resultType="User"&gt; select id, password, `name`, gender, birthday, mobile, nickname, rebate, avatar, role_id, last_login_time, last_login_ip, user_level, wx_open_id, session_key, gmt_create, gmt_modified, is_deleted as beDeleted from `oomall_user` where id = #&#123;id&#125;; &lt;/select&gt; &lt;!--sql语句之select--&gt; &lt;!-- resultType 填写返回参数的名称，类型名称与java类型相同，返回时会自动组装 --&gt; &lt;!-- 对于返回类型是List的情况，resultType中只需要填List中的单体的类型即可 --&gt; &lt;!-- 如该方法返回值是 List&lt;User&gt; ，但 resultType 只需要填写 User --&gt; &lt;select id="findUsers" resultType="User"&gt; select id, password, `name`, gender, birthday, mobile, nickname, rebate, avatar, role_id, last_login_time, last_login_ip, user_level, wx_open_id, session_key, gmt_create, gmt_modified, is_deleted as beDeleted from `oomall_user`; &lt;/select&gt; &lt;!--sql语句之select--&gt; &lt;select id="findUserByName" parameterType="String" resultType="User"&gt; select id, password, `name`, gender, birthday, mobile, nickname, rebate, avatar, role_id, last_login_time, last_login_ip, user_level, wx_open_id, session_key, gmt_create, gmt_modified, is_deleted as beDeleted from `oomall_user` where `name` = #&#123;name&#125;; &lt;/select&gt; &lt;!--sql语句之insert--&gt; &lt;!-- id 填写在接口中对应的方法名 --&gt; &lt;!-- parameterType 填写传入参数的类型，类型名称与java类型相同 --&gt; &lt;!-- useGeneratedKeys 表示在数据库中插入时是否使用自增主键。需要与 keyProperty 配合使用 --&gt; &lt;!-- 无 resultType ，因为sql中insert方法一定返回此次更新影响的行数，即resultType一定是Integer --&gt; &lt;!-- keyProperty 表示在数据库中的主键是哪个字段，字段名称与java中的相同。需要与 useGeneratedKeys 配合使用 --&gt; &lt;!-- 如果使用了 useGeneratedKeys 和 keyProperty ，则插入成功后jdbc会自动将生成的主键装配进传入的变量中，可以在java中直接获取 --&gt; &lt;!-- 对于传入参数，使用 #&#123;变量名&#125; 方式来取值，其中变量名与java中相同 --&gt; &lt;!-- 如果传入参数类型是一个包含多个字段的类，则依然使用 #&#123;变量名&#125; 方式来取值，此时变量名直接与类中字段名相同，不需要再次声明类名 --&gt; &lt;insert id="addUser" parameterType="User" useGeneratedKeys="true" keyProperty="id"&gt; insert into `oomall_user`( password, `name`, gender, birthday, mobile, nickname, rebate, avatar, role_id, last_login_time, last_login_ip, user_level, wx_open_id, session_key, gmt_create, gmt_modified, is_deleted) values ( #&#123;password&#125;, #&#123;name&#125;, #&#123;gender&#125;, #&#123;birthday&#125;, #&#123;mobile&#125;, #&#123;nickname&#125;, #&#123;rebate&#125;, #&#123;avatar&#125;, #&#123;roleId&#125;, #&#123;lastLoginTime&#125;, #&#123;lastLoginIp&#125;, #&#123;userLevel&#125;, #&#123;wxOpenId&#125;, #&#123;sessionKey&#125;, #&#123;gmtCreate&#125;, #&#123;gmtModified&#125;, #&#123;beDeleted&#125;); &lt;/insert&gt; &lt;!--sql语句之update--&gt; &lt;!-- id 填写在接口中对应的方法名 --&gt; &lt;!-- parameterType 填写传入参数的类型，类型名称与java类型相同 --&gt; &lt;!-- 无 resultType ，因为sql中update方法一定返回此次更新影响的行数，即resultType一定是Integer --&gt; &lt;!-- 本文章未提及delete操作，实际上delete操作的返回值也是行数 --&gt; &lt;update id="editUser" parameterType="User" &gt; update `oomall_user` set password=#&#123;password&#125;, `name`=#&#123;name&#125;, gender=#&#123;gender&#125;, birthday=#&#123;birthday&#125;, mobile=#&#123;mobile&#125;, nickname=#&#123;nickname&#125;, rebate=#&#123;rebate&#125;, avatar=#&#123;avatar&#125;, role_id=#&#123;roleId&#125;, last_login_time=#&#123;lastLoginTime&#125;, last_login_ip=#&#123;lastLoginIp&#125;, user_level=#&#123;userLevel&#125;, wx_open_id=#&#123;wxOpenId&#125;, session_key=#&#123;sessionKey&#125;, gmt_create=#&#123;gmtCreate&#125;, gmt_modified=#&#123;gmtModified&#125;, is_deleted=#&#123;beDeleted&#125; where id=#&#123;id&#125;; &lt;/update&gt;&lt;/mapper&gt; 使用mapper到这里，mapper的声明工作已经全部完成了，接下来需要在dao层调用mapper。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253package xmu.oomall.user.dao;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Repository;import xmu.oomall.user.domain.User;import xmu.oomall.user.mapper.UserMapper;import java.util.List;/** * @author Ringoer */@Repositorypublic class UserDao &#123; @Autowired private UserMapper userMapper; /** * 根据id返回用户信息 * @param id 用户id * @return 用户对象 */ public User findUserById(Integer id)&#123;return userMapper.findUserById(id);&#125; /** * 根据id返回用户信息 * @param name 用户名 * @return 用户对象 */ public User findUserByName(String name)&#123;return userMapper.findUserByName(name);&#125; /** * 注册一个用户 * @param user 用户信息 * @return 行数 */ public int addUser(User user)&#123;return userMapper.addUser(user);&#125; /** * 修改一个用户 * @param user 用户对象 * @return 行数 */ public int editUser(User user)&#123;return userMapper.editUser(user);&#125; /** * 返回用户列表 * @return 用户列表 */ public List&lt;User&gt; findUsers() &#123; return userMapper.findUsers(); &#125;&#125; 调用代码如上。 实际上只需要两行代码，就可以无缝使用mapper： 12@Autowiredprivate UserMapper userMapper; 以上即为通过jdbc的java与数据库连接方式。]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Spring Swagger 配置]]></title>
    <url>%2FJ2EE%2Fspring-swagger%2F</url>
    <content type="text"><![CDATA[Swagger好文明！！ 我再也不拿什么破python破postman调试了！！ 第一步，引入依赖 12345678910&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt;&lt;/dependency&gt; 当前版本2.9.2，以后看到这篇文章的同学记得更新版本 第二步，配置SwaggerConfig类 新建一个package，叫config，便于管理 新建一个Java Class，叫SwaggerConfig 配置如下代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647package xmu.oomall.user.config;//包名，可以修改import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.web.bind.annotation.RestController;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.service.ApiInfo;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spring.web.plugins.Docket;import springfox.documentation.swagger2.annotations.EnableSwagger2;import java.lang.reflect.Parameter;import java.util.ArrayList;import java.util.List;/** * @author Ringoer * @notice 下面两个注解一定不要漏了 */@Configuration@EnableSwagger2public class SwaggerConfig &#123; //这个方法不可以修改 @Bean public Docket createRestApi() &#123; return new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) .select() .apis(RequestHandlerSelectors.withClassAnnotation(RestController.class)) .paths(PathSelectors.any()) .build() .apiInfo(apiInfo()); &#125; //这个方法中所有的字符串都可以修改 private ApiInfo apiInfo() &#123; return new ApiInfoBuilder() .title("UserInfoService RESTful API") .description("3-1 oomall UserInfoService") .termsOfServiceUrl("") .version("1.0") .build(); &#125;&#125; 第三步，在主启动类上加入注解 123456789101112131415161718192021package xmu.oomall.user;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;import org.springframework.cloud.netflix.eureka.EnableEurekaClient;import org.springframework.cloud.openfeign.EnableFeignClients;import springfox.documentation.swagger2.annotations.EnableSwagger2;/** * @author Ringoer */@SpringBootApplication@EnableSwagger2public class UserApplication &#123; public static void main(String[] args) &#123; SpringApplication.run(UserApplication.class, args); &#125;&#125; 好了，直接运行，访问 http://{ip}:{port}/swagger-ui.html 即可看到好文明 可能出现的bug： 无法启动，报 1compatible version of org.springframework.plugin.core.PluginRegistry 如果出现这种情况，那就是因为依赖冲突，看看有没有下面这个依赖，有的话删掉即可 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-rest&lt;/artifactId&gt;&lt;/dependency&gt; 要不然，可以建个空项目，慢慢调节找哪个依赖冲突也可以 但反正绝对不是spring版本偏高，因为我现在运行的是2.2.2.RELEASE，也可以正常swagger 无法启动，报 1NoSuchMethodError 如果出现这种情况，那就是因为guava版本不对，需要手动指定guava版本 123456&lt;dependency&gt; &lt;groupId&gt;com.google.guava&lt;/groupId&gt; &lt;artifactId&gt;guava&lt;/artifactId&gt; &lt;version&gt;20.0&lt;/version&gt; &lt;scope&gt;compile&lt;/scope&gt;&lt;/dependency&gt; 可以启动，报一个弹窗： 1Unable to infer base url. This is common when using dynamic servlet registration or when the API is behind an API Gateway. The base url is the root of where all the swagger resources are served. For e.g. if the api is available at http://example.org/api/v2/api-docs then the base url is http://example.org/api/. Please enter the location manually: 如果出现这种情况，那就是因为配了spring security或者用的不是 @EnableSwagger2 注解 前者的话去掉security相关依赖，或者手动配置security config都可以 后者的话请回到文章开头重新配置]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20191230中间件相关]]></title>
    <url>%2Fprograming%2Fmiddleware-20191230%2F</url>
    <content type="text"><![CDATA[以下暂时还是一些链接 MQ消息最终一致性解决方案 mq 一致性 消息队列 中间件 常见的消息队列中间件介绍 线程池 消息队列 线程池和消息队列的一些理解 如何给老婆解释什么是RPC BFF——服务于前端的后端 基于NodeJS进行前后端分离 详解从NodeJS搭建中间层再谈前后端分离 纯前端开发眼里nodejs到底是什么？]]></content>
      <categories>
        <category>programing</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[oomall 商城系统 完工总结]]></title>
    <url>%2FJ2EE%2Foomall%2F</url>
    <content type="text"><![CDATA[2019-2020学年第一学期 oomall后端开发项目总结 项目简介全局设计用户需求分析领域模型分析对象模型分析Controller层API设计系统模块划分代码实现相关技术Vue.jsJSONXMLJAVAIDEA代码规范阿里巴巴 JAVA 开发规约 Spring BootMavenMaven中多项目管理方法Servlet并发机制缓存和消息队列SQLMySQLMybatisRedis微服务部署Docker容器Linux部署语句负载均衡Zuul网关Eureka注册中心RibbonNginx服务器详细设计商品服务订单服务用户服务运费服务分享服务个人感想项目源代码下载user 项目依赖123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;parent&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt; &lt;version&gt;2.2.1.RELEASE&lt;/version&gt; &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt; &lt;/parent&gt; &lt;groupId&gt;xmu.oomall&lt;/groupId&gt; &lt;artifactId&gt;user&lt;/artifactId&gt; &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt; &lt;name&gt;user&lt;/name&gt; &lt;description&gt;3-1 oomall user Service&lt;/description&gt; &lt;properties&gt; &lt;java.version&gt;11&lt;/java.version&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;!--normal--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web-services&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--sql--&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.1.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid&lt;/artifactId&gt; &lt;version&gt;1.1.21&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt; &lt;/dependency&gt; &lt;!--redis--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis-reactive&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--json--&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;version&gt;1.2.47&lt;/version&gt; &lt;/dependency&gt; &lt;!--configuration--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;!--junit--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.junit.vintage&lt;/groupId&gt; &lt;artifactId&gt;junit-vintage-engine&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;!--eureka-client--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt; &lt;version&gt;2.0.0.RELEASE&lt;/version&gt; &lt;/dependency&gt; &lt;!--feign--&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--logger--&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.25&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt; &lt;version&gt;1.7.5&lt;/version&gt; &lt;/dependency&gt; &lt;!--swagger--&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;version&gt;2.9.2&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;dependencyManagement&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt; &lt;version&gt;Finchley.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/dependencyManagement&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt; &lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt; &lt;version&gt;1.3.7&lt;/version&gt; &lt;configuration&gt; &lt;configurationFile&gt;mybatis-generator/generatorConfig.xml&lt;/configurationFile&gt; &lt;overwrite&gt;true&lt;/overwrite&gt; &lt;verbose&gt;true&lt;/verbose&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt;&lt;/project&gt;]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
        <tag>OOAD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Zuul IDEA配置]]></title>
    <url>%2FJ2EE%2Fzuul%2F</url>
    <content type="text"><![CDATA[关于注解@EnableZuulProxy的坑需要以下依赖：1234567891011121314151617&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-zuul&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-zuul&lt;/artifactId&gt; &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-config&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;&lt;/dependency&gt; 其中1&lt;version&gt;2.0.1.RELEASE&lt;/version&gt; 是重要的一环，因为查看spring官网及spring中央仓库可以发现，spring boot2.1.x及以后对应的cloud版本已经不推荐使用上述jar包，所以需要手动指明版本号]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20191128 oomall提交订单部分代码解读]]></title>
    <url>%2FJ2EE%2Foomall%2F</url>
    <content type="text"><![CDATA[20191128读邱明老师代码后的解读 前言本文章的代码基础：点我下载 本文章按照自底向上的顺序描述提交订单部分的代码逻辑 util工具类 Common 1public static String getRandomNum(int length) 传入想要的数字长度，生成唯一随机数 Config 1public Integer getMaxPayTime() 获得最长付款时间 实际上就是对于订单付款期限的全局设定 JacksonUtil 传入json字符串和file，在json字符串中，用field作为key，返回value 传入json字符串，返回json对象 传入json字符串，返回map 传入对象，返回json字符串 ResponseUtil描述了对于一个操作的响应 每个响应都是一个Map&lt;String, Object&gt;，包括3个字段： errno : 错误码 errmsg : 错误消息 data : 响应数据 该工具类存在的主要原因，是为了统一返回格式 domain负责描述所有类 所有实体类都包含通用的1-5，以下在每个实体类内均只描述其特性 包含表示一个类的若干字段 有非功能方法toString() 有重载方法equals，用于判定两个对象是否是同一对象 有重载方法hashCode，返回对该对象的id的哈希结果 各字段均包含public权限的get和set方法 cartCartItem此处与商品的关系表现在，一个CartItem内保存的是Product的id couponAbstractCouponStrategy一个抽象类，描述了计算一个订单优惠后的价格计算方法 只具体写了cacuDiscount方法,用于计算适用折扣后的OrderItem列表： 传入OrderItems和couponSn（优惠券序号） 判断优惠门槛 若满足门槛，计算优惠后的价格 将优惠减免金额平均分配到各商品 若理论总价与实际总价不符 寻找数量为1的Item，将差价补偿在该Item上 无数量为1的Item 将第一个Item拆开，变成两个Item，其中一个数量为n-1，另一个为1 将差价补偿在数量为1的Item上 返回该列表 要求子类实现： boolean isEnough方法，判断是否已经满足优惠门槛 BigDecimal getDealPrice方法，计算折扣后价格 BigDecimal getError方法，获得理论总价与实际总价的误差 CashOffStrategy策略为满X减Y 继承了AbstractCouponStrategy类，实现了其中要求的方法，成为实体类，负责计算优惠后的OrderItem列表 PercentageStrategy策略为满X减Y% 继承了AbstractCouponStrategy类，实现了其中要求的方法，成为实体类，负责计算优惠后的OrderItem列表 Coupon包含类内enum类型子类Status。该子类包含2个参数 String name，表示当前优惠券所处状态 Integer value，表示该状态的状态码 同时，有方法： 1public void cacuCouponPrice(Order order) 1234 借助[CouponRule](#domain-coupon-CouponRule)来计算CouponPrice 2. ```java public boolean isReadyToUse() 判断该优惠券当前是否可用 CouponRulePo描述了作为一个优惠券所需的全部静态信息 但由于优惠券适用的方法较多，所以方法拆开到另一个类中实现 CouponRule在类中声明一个realObj来与CouponRulePo建立联系 实现了能用于优惠券的各种方法: 1private List&lt;OrderItem&gt; getValidItems(List&lt;OrderItem&gt; items) 传入订单的子订单列表，返回可以适用所选当前CouponRule的子订单列表 1public AbstractCouponStrategy getStrategy() 获得当前CouponRule所属的折扣策略 1public void setStrategy(AbstractCouponStrategy strategy) 传入新的折扣策略方案，将当前CouponRule所属折扣测了更新 1public boolean isUsedOnGoods(Integer goodsId) 传入商品id，判断该商品是否能够使用当前CouponRule 1public List&lt;Integer&gt; getGoodsIds() 获得当前CouponRule所适用的商品id列表 1public void setGoodsIds(List&lt;Integer&gt; goodsIds) 传入商品id列表，更新当前CouponRule所适用的商品id列表 1public void cacuCouponPrice(Order order, String couponSn) 传入订单和使用的优惠券序号，借助CashOffStrategy，更新订单Items为适用了优惠券策略后的订单Items goodsAbstractPaymentStrategy仅定义了 活动付款策略 的接口 Goods含有字段products，以此与Product建立联系 Product无特性 PromotionPo描述一个商品的优惠活动策略 无方法 Promotion实现了PromotionPo需要的方法 对于PromotionPo和Promotion，看代码完成度，认为应该是未实现 参考Coupon内的策略写法，应该还有 填充完整的抽象付款策略类 未给出的策略类，继承了抽象付款策略类 orderOrder包含类内enum类型子类Status。该子类包含2个参数 String name，表示当前订单所处状态 Integer value，表示该状态的状态码 含有4种方法： 构造函数 有2种方案 不传参数 传入user和address 计算价格 先执行 1public void cacuDealPrice() 借助Coupon算出使用的优惠券情况 再执行 1private void cacuTotal() 算出订单总价 反向绑定。 在OrderItem中绑定Order的id 借助Payment计算付款方式 OrderItem继承自Cloneable类，这意味着该类实例可以被克隆 冗余存储productName 含有2种方法： 构造函数 不传参数 传入cartItem 重载的clone方法，指示了如何克隆该类的实例 userAddress无特性 User无特性 GrouponOnRule无特性 GrouponOnStrategy无特性（该模块代码未完成） Payment包含类内enum类型子类Status。该子类包含2个参数 String name，表示当前payment所处状态 Integer value，表示该状态的状态码 含有一个不传参数的构造函数 mapper负责直接和数据库交互 以下各个Mapper均由java文件和xml文件构成，其中： java文件定义为接口，提供若干方法 xml文件用xml语言描述了java文件中的方法的sql实现 每个类都要加上 @Mapper 注解 CartItemMapper提供了2个方法 传入购物车对象id，以id获得购物车明细 传入购物车对象列表，删除购物车中指定的项目 CouponMapper提供了2个方法 传入优惠券对象id，以id获得一张优惠券的明细 传入优惠券对象id，以id获得该优惠券所属规则的明细 GoodsMapper提供了2个方法 传入product对象id，以id获得product明细 传入商品对象id，以id获得商品明细 OrderMapper提供了3个方法 传入订单id，以id获得订单明细 传入订单对象，新增一个订单 传入子订单列表，新增订单中的所有明细 dao负责数据的交流 对service层表现为数据来源，对mapper层表现为数据调用者 每个类都要加上 @Repository 注解 以下均只描述提供的方法 CartItemDao借助CartItemMapper读取数据 用id返回购物车明细 CouponDao借助CouponMapper读取数据 用id返回优惠券明细 GoodsDao借助GoodsMapper读取数据 用id返回product明细 OrderDao借助OrderMapper读取数据 用id返回order明细 service负责业务的具体实现，需要数据的时候均访问dao层 每个Service都是先提供一个接口，然后写具体的实现（impl） 每个类都要加上 @Service 注解 以下省略对接口的描述，直接描述实现 CartItemServiceImpl 1public CartItem findCartItemById(Integer id) 根据cartItem id，借助CartItemDao，返回该cartItem的明细 1public void clearCartItem(List&lt;CartItem&gt; cartItems) 根据传入的cartItem列表，借助CartItemMapper，清除原购物车中的cartItems CouponServiceImpl 1public Coupon findCouponById(Integer id) 根据coupon id，借助CouponDao，返回该coupon明细 GoodsServiceImpl 1public Product findProductById(Integer id) 根据product id，借助GoodsDao，返回该product明细 OrderServiceImpl 1public Order submit(Order order, List&lt;CartItem&gt; cartItems) 传入空订单和cartItems 组装订单 借助CartItemServiceImpl，清除原购物车中在该订单内选中的商品 使用Order的cacuDealPrice方法计算优惠价 使用Order的cacuPayment方法计算订单总价 返回组装完成的订单 controller负责描述用例 OrderSubmitVO 该VO类内有4个字段 cartItems，是Integer类型的List，保存订单内所选中的商品的id address，是Address类型，保存订单内选中的地址id couponId，是Integer类型，保存订单内选中的优惠券id 这也意味着一个订单只能使用一张优惠券 message，是String类型，保存别的消息信息，起到一个备用的作用 同时，有一个非功能方法：toString() 4个字段各自有public权限的get和set方法，用于给Controller使用 该VO只用于承接前端提交的订单信息，无其它功能 OrderController 声明Controller为RestController，设置RMap 定义需要使用的服务类的实体，自动装配（Controller内公用） OrderService CartService CouponService 进入具体行为（Post）及实现方法submit submit方法在此处定义为Object类型，表示要返回一个对象。可以看到在该方法结尾有一个return ResponseUtil.ok(retOrder)语句，说明返回到前端的对象就是ResponseUtil.ok(retOrder)的返回值 ResponseUtil类 回到submit方法，参数列表有1个参数，带有@RequestBody注解，表明参数来自前端传值；同时参数声明为OrderSubmitVo类型，表明前端传值到达后端后先拼装为一个OrderSubmitVo的实例 进入方法，可以看到在方法刚开始和即将结束之处都有logger.debug语句，生成调试日志。此处与主要功能无关 获得生成一个订单的各种主要信息，包括： user address coupon cartitems 其中coupon需要判空，cartItems则因为前端只传回了cartItems的id，所以需要CartItemServiceImpl来获得每个cartitem的具体信息 新建一个空订单，保存除了商品之外的信息（第58行） 新建一个用商品装填好的订单。此处使用OrderServiceImpl的submit方法装填，传入参数为空订单和cartitem列表 构造返回对象，返回到前端，订单提交结束 Controller完毕]]></content>
      <categories>
        <category>J2EE</category>
      </categories>
      <tags>
        <tag>J2EE</tag>
        <tag>OOAD</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190926 随录]]></title>
    <url>%2Fdiary%2F20190926%2F</url>
    <content type="text"><![CDATA[记一次由一句注释引发的三小时惨案…… 今天想着玩玩spring boot，遂搭了个hello spring的demo 然后想试试dao和thymeleaf，于是什么都玩玩 然后发现了这篇文章： https://www.jianshu.com/p/efdd7c92640c 其中有段代码： 123456789@Controllerpublic class UserController &#123; @Autowired private UserService userService; @RequestMapping("/index") public String index(ModelMap modelMap) &#123; modelMap.addAttribute("host","www.baidu.com"); return "index"; &#125; 照抄之后，我暂时没有UserService类，所以先把1private UserService userService; 给注释掉了 然后惨案就发生了…… 在build的时候，IDEA不停报错，说 Consider defining a bean of type &#39;org.springframework.ui.ModelMap&#39; in your configuration. 为了de这个bug，不停地来往于baidu和google，发现根本没有人遇到和我一样的情况。这是什么意思？？？ 于是一口闷气在我胸口淤积…… 甚至对照了以前的项目也没发现什么问题，External Libraries甚至都是一模一样的…… 差点血都吐出来了，心情差得很 经过3个小时的思考与辨析，终于发现—————————— 我因为注释掉了那句定义，导致@Autowired影响到了下面的方法！！！！ 因为@Autowired的影响，所以IDEA才会一直问我要Model的bean的definition！！！ 删掉@Autowired和注释后终于正常build了，然后发现返回的是字符串index…… 思考了一下，@RestController是不能返回页面的，想返回页面只能是@Controller，修改之后正常了…… 然而我今天也无心搞下去了，明天再说吧……]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[课程表存档]]></title>
    <url>%2Fothers%2Fschedule-of-classes%2F</url>
    <content type="text"><![CDATA[用来给自己的课程表存档。 目前仅大学课程表。 2020-2021-schedule-1 2019-2020-schedule-3 2019-2020-schedule-2 2019-2020-schedule-1 2018-2019-schedule-3 2018-2019-schedule-2 2018-2019-schedule-1 2017-2018-schedule-3 2017-2018-schedule-2 2017-2018-schedule-1]]></content>
      <categories>
        <category>others</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Keras试用 二元线性回归]]></title>
    <url>%2FmachineLearning%2Fkeras-2%2F</url>
    <content type="text"><![CDATA[尝试了二元线性回归。 只有代码和注释。 12345678910111213141516171819202122232425262728import kerasfrom keras.models import Sequentialfrom keras.layers import Denseimport numpy as np#期望平面z=-6x+y+8trX = np.random.uniform(-100, 100, size=1001)trY = np.random.uniform(-100, 100, size=1001)trZ = 8 - 6 * trX + trY + np.random.randn(*trX.shape) * 0.2trXY = np.array(list(zip(trX,trY)))model = Sequential()#模型实现输入[x,y]，输出对应的z，属于2个输入决定一个输出，所以#第一层Dense的input_dim=2#最后一层Dense的output_dim=1model.add(Dense(input_dim=2, output_dim=200, init='uniform', activation='linear'))model.add(Dense(input_dim=200, output_dim=1, init='uniform', activation='linear'))model.compile(optimizer='adam', loss='mse')model.fit(trXY, trZ, nb_epoch=200, verbose=1)testX = [3,4,0]testY = [1,0,4]testXY = np.array(list(zip(testX,testY)))res = model.predict(testXY)print(testXY)print(res) 关于zip()方法 设有 123&gt;&gt;&gt; a=[1,4,7]&gt;&gt;&gt; b=[2,5,8]&gt;&gt;&gt; c=[3,6,9] 则有以下结果：12345678&gt;&gt;&gt; d=zip(a,b,c)&gt;&gt;&gt; d&lt;zip object at 0x0000019C55381848&gt;&gt;&gt;&gt; list(d)[(1, 2, 3), (4, 5, 6), (7, 8, 9)]&gt;&gt;&gt; d=[list(i) for i in zip(a,b,c)]&gt;&gt;&gt; d[[1, 2, 3], [4, 5, 6], [7, 8, 9]] 可见zip()方法的参数列表是可变参数列表，可以传入n个参数]]></content>
      <categories>
        <category>machineLearning</category>
      </categories>
      <tags>
        <tag>Keras</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Keras试用 线性回归]]></title>
    <url>%2FmachineLearning%2Fkeras-1%2F</url>
    <content type="text"><![CDATA[第一次入门TensorFlow，然后先搞搞Keras。 装环境： 1pip install tensorflow 没有合适版本的话，检查一下自己的pip是不是最新版的，python是32位还是64位。 入门代码：线性回归12345678910111213141516171819202122232425262728293031323334353637383940import kerasfrom keras.models import Sequentialfrom keras.layers import Denseimport numpy as np#生成训练集#trX和trY表示训练用的1000个点二维坐标的x和y，类型是nparray#trX中，有1000组数据，每组数据只有1个元素，所以下文中Dense的input_dim=1trX = np.random.uniform(-100, 100, size=1000) #生成1000个在-100~100之间的随机数，返回一个nparraytrY = 5 * trX + 6 + np.random.randn(*trX.shape) * 0.2 #期望y=5x+6，并加入一点点随机波动#实例化model为层次模型model = Sequential()#为模型添加layer#本示例是RNN，所以使用Dense作为layer#前一个Dense的output_dim必须和后一个的input_dim相同#第一个Dense的input_dim必须等于训练集输入的每组元素数#最后一个的output_dim必须等于训练集输出输出的每组元素数model.add(Dense(input_dim=1, output_dim=200, init='uniform', activation='linear'))model.add(Dense(input_dim=200, output_dim=1, init='uniform', activation='linear'))#编译模型，准备训练#optimizer是优化器，一般选adam#loss是损失函数，一般使用mse（均方误差）即可#loss越小，说明训练效果越好，但要小心过拟合model.compile(optimizer='adam', loss='mse')#训练#trX处填写训练集输入，trY处填写训练集输出#nb_epoch是迭代次数，verbose=1表示在控制台输出每次epoch的信息model.fit(trX, trY, nb_epoch=200, verbose=1)#np.array()要求传入一个list，返回一个nparray#arr.tolist()要求arr是一个nparray，返回一个list#model.predict要求传入一个nparrayl = np.array([3,1,-5,-23,-42,52]) #测试集res = model.predict(l) #结果print(l)print(res)]]></content>
      <categories>
        <category>machineLearning</category>
      </categories>
      <tags>
        <tag>Keras</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20190715 Python学习随录]]></title>
    <url>%2Fpython%2Fpython-20190715%2F</url>
    <content type="text"><![CDATA[学习随录系列 功能：实现对一个由若干行组成、每行均为[0.xxx, 0.xxx, …]格式的json文件的裁剪 README 在同一目录下新建一个input.txt，其中存放需要转换的文件名。 ！仅文件名，无后缀名，无路径 在该目录下放置同名的json文件 在该目录启动cmd，运行该py文件 本代码只注重效率，未考虑文件读取失败的问题，故请确保有合法输入文件 代码：1234567891011121314151617181920212223242526272829303132333435363738394041import sysimport ionumbers = [2,3,5] #只保留numbers[i]的整数倍行with open('input.txt', 'rb') as input_file: #读取文件名 files = input_file.read().decode('utf-8').split('\r') #读取.解码.分割 for filename in files: #遍历 if filename == '\n' or filename == '\r': break #防止空行异常跳出 if filename[0] == '\n': filename = filename[1:] #防止前导换行符 if filename[len(filename)-1] == '\n': filename = filename[:len(filename)-1] #防止后置换行符 infile = filename + '.' + 'json' #构造输入文件名 for n in numbers: #遍历切割依据 outfile = filename + '-' + str(n) + '.' + 'json' #构造输出文件名 with open(infile, 'rb') as fr: #打开输入文件 file_str = fr.read().decode('utf-8').split('[') #读取.解码.分割 with open(outfile, 'wb') as fw: #打开输出文件 ans = file_str[0] + '[' #预置 i = n + 1 #取数 while i &lt; len(file_str): #取所需行 ans += '[' + file_str[i] #构造输出文件 i += n if ans[len(ans)-1] != '&#125;': #防止异常结束 i = len(ans) - 1 while ans[i] != ',': i -= 1 ans = ans[:i] + ']&#125;' fw.write(ans.encode('utf-8')) #写文件]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[千鈴めい视频合集]]></title>
    <url>%2Fvtuber%2Fchisuzumei%2F</url>
    <content type="text"><![CDATA[千鈴めい视频合集 仅下载链接 #00 打招呼 【千铃鸣】千铃要初次直播了哦 【千铃鸣】0416初配信节选 夜明けと蛍 【千铃鸣】【熟肉】来决定问候语吧！ 【神回/熟肉】【千铃鸣】试着召唤古守了（事故联动回+迫害帕里妈妈 千铃鸣直播生肉合集 【千铃鸣】休息是大事哦 【神回/熟肉】我家千铃是极道大小姐 【千铃鸣】音酱解剖 【千铃鸣】【新OP ED注意】イェイ！イェイ！イェイ！ 【手书/千铃鸣】祝·收益化—千铃鸣来了哦！ 【千铃鸣】和有栖mana酱双龙联动 【千铃鸣】收益化庆祝回 【千铃鸣】介绍下我家的执事 【千铃鸣】猫又少女的奥数魔刃 【千铃鸣】在寻找古守的家时发现meruto酱 【千铃鸣】和吉他打好关系吧！ 【千铃鸣】QWOP Part 1 【CCさくら】CLEAR_千鈴めい【歌ってみた】 【千铃鸣】最终配信]]></content>
      <categories>
        <category>vtuber</category>
      </categories>
      <tags>
        <tag>vtuber</tag>
        <tag>千铃鸣</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[用 WinPCAP 监听并解析 FTP 口令]]></title>
    <url>%2Fexperiment%2FWinPCAP-FTP%2F</url>
    <content type="text"><![CDATA[计算机网络实验4 实验目的用 WinPCAP 监听并分析 FTP 协议并记录 IP、用户名、密码和登陆是否成功。 实验环境Windows10 C# 实验结果wireshark部分连接 本机向ftp服务器申请连接，flag=SYN ftp服务器回复本机，flag=SYN，ACK 本机收到，向ftp服务器答复，flag=ACK ftp服务器收到，向本机发送数据，flag=PSH，ACK 断开 本机向ftp服务器申请断开，flag=FIN，ACK ftp服务器收到申请，向本机返信，flag=ACK ftp服务器已经断开与本机的连接，向本机发信，flag=FIN，ACK 本机收到，断开与ftp服务器连接，向ftp服务器返信，flag=ACK 监听部分 实验总结大部分与实验三相同。以下解释不同的部分。 全局变量 用FTPmode来表示现在处于解析ftp口令的哪个阶段。取值范围为{“”,”NOW”,”END”} 用MyDiary数组来保存一整次解析中，生成日志所需的数据。 用MyXML来保存一整次解析中，生成XML文档所需的数据 收包动作 当一整次FTP口令解析完成时，生成日志和XML 在get_frame函数中 录入生成日志所需的信息，然后读取用户信息 按照COMMAND获取口令 保存 停止侦听时询问保存]]></content>
      <categories>
        <category>experiment</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[日本語動詞変化式]]></title>
    <url>%2Fjapanese%2Fdoushihenkashiki%2F</url>
    <content type="text"><![CDATA[本文为动词变形备查表格。 在本文，以及本博客的整个日语教程中，都有以下全局设定： 五段活用动词的动词原形是去掉ます的部分 示例：思（おも）います中，认为 思い 是动词原形 一段活用动词的动词原形是去掉ます的部分 示例：食（た）べます中，认为 食べ 是动词原形 サ変動詞的动词原形是去掉します的部分 示例：散歩（さんぽ）します中，认为 散步 是动词原形 对于カ変動詞，因为 来 这个汉字有不同发音，故另做处理 注意，此处认为的动词原形，和动词连用形略有区别。 五段活用动词对于あ行来说，对应あ段的变形，本来应该变为あ，但其实不是，应该变为わ。 以下用到的单词： 单词 意思 買（か）います 购买 書（か）きます 写 脱（ぬ）ぎます 脱 立（た）ちます 站立 話（はな）します 说话 呼（よ）びます 称为、呼喊 死（し）にます 死亡 読（よ）みます 读 売（う）ります 卖 变形方式 敬体形 就是ます形。 连用形 与动词原形相同。 简体形 将动词原形结尾的假名，变更为其对应う段。 示例：死にます，原形部分结尾的假名是に，对应う段是ぬ，所以死にます的简体形是死ぬ。 可能形 将动词原形结尾的假名，变更为其对应え段，再加ます/る。 新词变形与一段活用动词相同。 示例：死にます，原形部分结尾的假名是に，对应え段是ね，所以死にます的可能形是死ねます/死ねる。 使役态将动词原形结尾的假名，变更为其对应あ段，再加せ，再加ます/る。 新词变形与一段活用动词相同。 示例：死にます，原形部分结尾的假名是に，对应あ段是な，所以死にます的使役态是死なせます/死なせる。 被动态 将动词原形结尾的假名，变更为其对应あ段，再加れ，再加ます/る。 新词变形与一段活用动词相同。 示例：死にます，原形部分结尾的假名是に，对应あ段是な，所以死にます的使役态是死なれます/死なれる。 使役被动态 将动词原形结尾的假名，变更为其对应あ段，再加され，再加ます/る。 新词变形与一段活用动词相同。 示例：死にます，原形部分结尾的假名是に，对应あ段是な，所以死にます的使役态是死なされます/死なされる。 假定形 将动词原形结尾的假名，变更为其对应え段，再加ば。 示例：死にます，原形部分结尾的假名是に，对应え段是ね，所以死にます的假定形是死ねば。 命令形 将动词原形结尾的假名，变更为其对应え段。 示例：死にます，原形部分结尾的假名是に，对应え段是ね，所以死にます的假定形是死ね。 意志形 将动词原形结尾的假名，变更为其对应お段，再加う。 示例：死にます，原形部分结尾的假名是に，对应お段是の，所以死にます的假定形是死のう。 ない形 将动词原形结尾的假名，变更为其对应あ段，再加ない。 新词变形与イ形容词相同。 示例：死にます，原形部分结尾的假名是に，对应あ段是な，所以死にます的ない形是死なない。 动词て形 根据动词原形结尾假名不同，分为以下5种情况： 1. き结尾，将き变为いて 2. ぎ结尾，将ぎ变为いで 3. ち、り、い结尾，结尾假名变为って 4. び、み、に结尾，结尾假名变为んで 5. し结尾，结尾假名变为して *特别的，行く的て形是行って 动词た形 将て形中的て变为た、で变为だ即可 变形表格除第一列为敬体形参照，假定形、命令形、意志形、ない形、て形、た形均采用其原样，其它列均采用简体形表示。 *五段活用动词在变为可能形、使役态、被动态、使役被动态时，可适用一段活用动词的敬体形、简体形变形方式。 敬体形 書きます 脱ぎます 立ちます 売ります 買います 呼びます 読みます 死にます 話します 连用形 書き 脱ぎ 立ち 売り 買い 呼び 読み 死に 話し 简体形 書く 脱ぐ 立つ 売る 買う 呼ぶ 読む 死ぬ 話す 可能形 書ける 脱げる 立てる 売れる 買える 呼べる 読める 死ねる 話せる 使役态 書かせる 脱がせる 立たせる 売らせる 買わせる 呼ばせる 読ませる 死なせる 話させる 被动态 書かれる 脱がれる 立たれる 売られる 買われる 呼ばれる 読まれる 死なれる 話される 使役被动态 書かされる 脱がされる 立たされる 売らされる 買わされる 呼ばされる 読まされる 死なされる 話さされる 假定形 書けば 脱げば 立てば 売れば 買えば 呼べば 読めば 死ねば 話せば 命令形 書け 脱げ 立て 売れ 買え 呼べ 読め 死ね 話せ 意志形 書こう 脱ごう 立とう 売ろう 買おう 呼ぼう 読もう 死のう 話そう ない形 書かない 脱がない 立たない 売らない 買わない 呼ばない 読まない 死なない 話さない て形 書いて 脱いで 立って 売って 買って 呼んで 読んで 死んで 話して た形 書いた 脱いだ 立った 売った 買った 呼んだ 読んだ 死んだ 話した 时态、语气表格此处只给出简体形部分，敬体形参看本链接 以「死にます」为例 时态 语气 表达 一般现在时 肯定式 死ぬ 一般现在时 否定式 死なない（ない形） 一般过去时 肯定式 死んだ（た形） 一般过去时 否定式 死ななかった（ない形，按イ形容词变化而成的过去式） 一段活用动词以下用到的单词： 食（た）べます，吃 变形方式 敬体形 就是ます形。 连用形 与动词原形相同。 简体形 动词原形+る。 可能形 动词原形+られ，再加ます/る。 新词变形与一段活用动词相同。 使役态 动词原形+させ，再加ます/る。 新词变形与一段活用动词相同。 被动态 动词原形+られ，再加ます/る。 新词变形与一段活用动词相同。 使役被动态 动词原形+させられ，再加ます/る。 新词变形与一段活用动词相同。 假定形 动词原形+れば。 命令形 动词原形+ろ。 意志形 动词原形+よう。 ない形 动词原形+ない。 动词て形 动词原形+て。 动词た形 动词原形+た。 变形表格 敬体形 食べます 连用形 食べ 简体形 食べる 可能形 食べられる 使役态 食べさせる 被动态 食べられる 使役被动态 食べさせられる 假定形 食べれば 命令形 食べろ 意志形 食べよう ない形 食べない て形 食べて た形 食べた 时态、语气表格此处只给出简体形部分，敬体形参看本链接 时态 语气 表达 一般现在时 肯定式 食べる 一般现在时 否定式 食べない（ない形） 一般过去时 肯定式 食べた（た形） 一般过去时 否定式 食べなかった（ない形，按イ形容词变化而成的过去式） サ変動詞以下用到的单词： 散歩（さんぽ）します，散步 变形方式 敬体形 就是ます形。 连用形 动词原形+し。 简体形 动词原形+する。 可能形 动词原形+でき，再加ます/る。 新词变形与一段活用动词相同。 使役态 动词原形+させ，再加ます/る。 新词变形与一段活用动词相同。 被动态 动词原形+され，再加ます/る。 新词变形与一段活用动词相同。 使役被动态 动词原形+させられ，再加ます/る。 新词变形与一段活用动词相同。 假定形 动词原形+すれば。 命令形 动词原形+しろ。 意志形 动词原形+しよう。 ない形 动词原形+しない。 动词て形 动词原形+して。 动词た形 动词原形+した。 变形表格 敬体形 散歩します 连用形 散歩し 简体形 散歩する 可能形 散歩できる 使役态 散歩させる 被动态 散歩される 使役被动态 散歩させられる 假定形 散歩すれば 命令形 散歩しろ 意志形 散歩しよう ない形 散歩しない て形 散歩して た形 散歩した 时态、语气表格此处只给出简体形部分，敬体形参看本链接 时态 语气 表达 一般现在时 肯定式 散歩する 一般现在时 否定式 散歩しない（ない形） 一般过去时 肯定式 散歩した（た形） 一般过去时 否定式 散歩しなかった（ない形，按イ形容词变化而成的过去式） カ変動詞カ変動詞只有一个，就是： 来（き）ます，来 且几乎每种变形都有一个读音，需要牢记。 变形方式 敬体形 来（き）ます 连用形 来（き） 简体形 来（く）る 可能形 来（こ）られ，再加ます/る。 新词变形与一段活用动词相同。 使役态 来（こ）させ，再加ます/る。 新词变形与一段活用动词相同。 被动态 来（こ）られ，再加ます/る。 新词变形与一段活用动词相同。 使役被动态 来（こ）させられ，再加ます/る。 新词变形与一段活用动词相同。 假定形 来（く）れば 命令形 来（こ）い 意志形 来（こ）よう ない形 来（こ）ない 动词て形 来（き）て 动词た形 来（き）た 变形表格 敬体形 きます 连用形 き 简体形 くる 可能形 こられる 使役态 こさせる 被动态 こられる 使役被动态 こさせられる 假定形 くれば 命令形 こい 意志形 こよう ない形 こない て形 きて た形 きた 时态、语气表格此处只给出简体形部分，敬体形参看本链接 时态 语气 表达 一般现在时 肯定式 くる 一般现在时 否定式 こない（ない形） 一般过去时 肯定式 きた（た形） 一般过去时 否定式 こなかった（ない形，按イ形容词变化而成的过去式）]]></content>
      <categories>
        <category>japanese</category>
      </categories>
      <tags>
        <tag>日语教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[日语入门向基本文法]]></title>
    <url>%2Fjapanese%2Fkihonbunpou%2F</url>
    <content type="text"><![CDATA[日语入门向基本文法 词性名词太简单，此处只说明疑问词。 何 翻译为：什么 单字读作なに。 在句子中时，根据以下规则有变： “何”后面的助词是が、ま、か行的助词时，读なに “何”后面的助词是な、だ、た行的助词时，读なん 不符合1、2时，读なに 誰（だれ） 翻译为：谁 何時（なんじ） 翻译为：什么时候 一般指精确到时分秒程度的时间 何処（どこ） 翻译为：哪里 いつ 翻译为：什么时候一般指精确到年月日程度的时间 助词 は 常用于提示主语 复合句中主句主语用は 做助词时读wa が 常用于提示主语 复合句中从句主语用が を 常用于有动词的句子中，形式为 【宾语（名词）】を【动词】 表示对【宾语】进行【动词】所表示的动作 做助词时读o へ 常用于有移动目标的句子中，形式为 【目的地】へ【（表示移动的）动词】 表示向着【目的地】进行【动词】所表示的动作 此处【（表示移动的）动词】一般需要是能表示”从A到B”这样的感觉的动词 做助词时读e の 常用于表示从属关系，形式为 【名词1】の【名词2】 表示【名词2】是属于【名词1】的类别的 一般有两种用法： 生徒会長（せいとかいちょう）の彼（かれ） 译作”身为学生会长的他” 此时，表示”他”属于”学生会长”这个类别，具有”学生会长”这个属性 彼のもの 译作”他的东西” 此时，表示”东西”属于”他”这个类别，即为”属于他的东西” 此时，の译作”的” と 常用于： 连接两个名词，形式为 【名词1】や【名词2】 此时连接而成的这个短语可以作为某个句子中的主语组分或宾语组分等 翻译为：和 在特定语法中充当连接成分，如： 小句 + と思（おも）います 此时不译 や 常用于连接两个名词，形式为 【名词1】や【名词2】 连接而成的这个短语可以作为某个句子中的主语组分或宾语组分等 此时翻译为：或 も 常用于替代は或が 前接名词 此时翻译为：也 に 并不基本，以后提到再学习 で 并不基本，以后提到再学习 语气词语气词一般放在句尾。 常见语气词如下： よ ～哟 有以下作用： 表示主张、叮嘱、或引起对方注意。 例：あなたが行かなくても、私は行くよ。 表示怀疑，责难的语气。 例：なぜ、ぼくに教えてくれなかったんだよ。 表示命令，请求，接在动词和动词活用形助动词的命令形后面，或接在表示禁止和命令的な后面，一般是男性用语。 例：遅くなるから、早く行けよ。 表示劝诱，恳求，接在助动词“う，よう”后面。 例：さあ、遅れないように早く行こうよ。 ね ～呢 有以下作用： 表示轻微的感叹。 例：やあ、ずいぶんきれいな部屋だね。 いいお天気だね。 表示轻微的主张或叮嘱的心情。 例：あの人はきっと成功すると思いますね。 征求同意，或希望对方确认，促使对方回答。 例：もう一度行きましょうね。 表示疑问，责问。男性用语。 例：私にはよく読めないが、ここになんと書いてあるね。 よね 是「よ」和「ね」的复合性终助词。 有以下作用： 要求对方同意自己的观点 表明自己同意对方的观点 わ 主要是女性使用，语调偏高，男性也有用的，但要降调。 有以下作用： 表示强调，用来调整或加强语气。 例：私はこれが好きだわ。 あそこに田中さんがいるわ。 用わよ、わね的形式，前者强调自己的主张，后者希望别人赞成或证实自己的看法。、 ​ 例：今度の旅行には、私も行くわよ。 ​ あの花、本当にきれいだわね。 表示惊奇，感叹的语气。 例：まあ、きれいだわ。 雨がまた降り出しましたわ。 の 主要是女性和儿童使用。 表示断定，语气较亲密。读降调。 例：とてもいやなの。 今おなかがいっぱいなので、何も食べたくないの。 表示叮嘱的语气，常用のね的形式。 例：きっと引き受けてくれるのね。 明日は必ず来てくれるのね。待ってますよ。 表示命令，语气较强，发音要重。 例：ご飯は黙って食べるの。 表示质问，疑问。读升调。 例：きれいな着物を着て、どこへ行くの。 ぞ 一般由男性使用，表示一种强调和肯定的判断，有一种大男子主义的语气。 な 表示说话人再次确认自己的感情等。 一般是男性使用。 ぜ 用于说话人单方面向听话人传达语句的内容。想要改变听话人对某事情认识的意图并不强。 一般是男性使用。 さ 表示说话人并非对所作的判断负责，而是作为理所当然的事情或暂且的判断表示提示。 一般是男性使用。 かな 是「か」和「な」的复合性终助词，后面一般接「思う」之类的动词。一般是男性使用。 かしら かな的女性版。 动词五段活用动词/一类动词五段活用，指因为该动词的动词原形结尾有五种情况，所以有五种变形 き ぎ ち、り、い び、み、に し 无特殊说明的情况下，符合上述形态的动词都是五段活用动词 一段活用动词/二类动词与五段活用相对，一段活用，指该动词不论动词原形结尾是什么形态，都只有一种变形 无特殊说明的情况下，不是五段活用动词或サ変动词、カ変动词的动词，就是一段活用动词 サ変动词、カ変动词/三类动词 サ変动词 无特殊说明的情况下，符合”名词+します”的动词就是サ変动词 因为这类动词的变形集中在对后面的”します”进行变形，而不管怎么变，这一部分的第一个假名都是さ行的，所以称之为サ変动词 カ変动词 只有一个单词，就是来（き）ます 因为这个单词的几种变形中，汉字”来”虽然读音不尽相同，但都属于か行，所以称之为カ変动词 形容词イ形容词无特殊说明的情况下，以い结尾的形容词就是イ形容词 ナ形容词/形容动词无特殊说明的情况下，不以い结尾的形容词就是ナ形容词 因为该类形容词在使用时通常要加上な，所以称之为ナ形容词 副词一般副词主要有三种： 天生就是副词，如ごろごろ：无所事事 イ形容词中，结尾的い变为く ナ形容词+に 敬体形、简体形敬体形一般陈述句 时态 语气 表达 一般现在时 肯定式 です 一般现在时 否定式 ではありません（此处は读wa） 一般过去时 肯定式 でした 一般过去时 否定式 ではありませんでした 一般动词句 时态 语气 表达 一般现在时 肯定式 ます 一般现在时 否定式 ません 一般过去时 肯定式 ました 一般过去时 否定式 ませんでした 一般形容词句イ形容词与一般陈述句相同 ナ形容词与一般陈述句相同 简体形一般陈述句 时态 语气 表达 一般现在时 肯定式 だ 一般现在时 否定式 ではない（此处は读wa） 一般现在时 否定式 じゃない（ではない的口语化） 一般过去时 肯定式 だった 一般过去时 否定式 ではなかった 一般过去时 否定式 じゃなかった 一般动词句参看本链接 一般形容词句イ形容词イ形容词的变形体现在对于单词结尾的い的变形 时态 语气 表达 一般现在时 肯定式 ～い 一般现在时 否定式 ～くない 一般过去时 肯定式 ～かった 一般过去时 否定式 ～くなかった ナ形容词与一般陈述句相同 句型一般陈述句 【名词1】は【名词2】です。 【名词1】是【名词2】 其中【名词1】是已知的，【名词2】是新引入的。 示例： それはリンゴです。 那是苹果。（先看到那里有个物件，然后才认出是苹果） 【名词1】が【名词2】です。 【名词1】是【名词2】 其中【名词2】是已知的，【名词1】是新引入的。 示例： それがリンゴです。 那是苹果。（先知道有苹果这么一个东西，然后四下张望，看到一个物件） です的变形 默认的です表达一般现在时，有以下变形。对于每个变形，若无特殊说明，使用时直接替换です即可。 一般疑问句直接在小句后加か即可，结尾用句号。 也可直接问号，但此时有惊叹的效果，故而一般不用。 示例： それはリンゴですか。 那是苹果吗？ 有疑问词的句子，发问时只能使用以下句式。 【疑问词】が【名词】ですか 不能用は 一般存在句 有主观意识的存在 【名词】が【地点】にいます。 示例： 猫がそこにいます 地点成分在句子中可以提前，如： そこに猫がいます 没有主观意识的存在 【名词】が【地点】にあります。 示例： 花がそこにあります 地点成分在句子中可以提前，如： そこに花があります 区别 有生命的存在，不一定有主观意识。 如动物有意识，植物没有。 没有生命的存在，则一定没有意识。 います和あります的变形 います和あります均为动词。 います的简体形为いる，其它变形与一段活用动词相同。 あります的简体形为ある，其它变形与五段活用动词相同。 一般动词句【主语】は【宾语】を【动词】ます 表示【主语】对【宾语】做出了【动词】所表示的动作。 一般形容词句イ形容词 【名词】は【イ形容词】です 表示【名词】是【イ形容词】的。 示例： 彼女は美しいです 她是美丽的 【名词】が【イ形容词】です 表示【名词】是【イ形容词】的。 此处的【イ形容词】是【名词】的固有属性。 示例： 太陽が丸いです 太阳是圆的 ナ形容词 【名词】は【ナ形容词】です 表示【名词】是【ナ形容词】的。 示例： その山は有名です 那座山是有名的 【名词】が【ナ形容词】です 表示【名词】是【ナ形容词】的。 此处的【ナ形容词】是【名词】的固有属性。 示例： その花がきれいです 那朵花是漂亮的 惯用句以下句子中，小括号表示对读音的注释。 若无小括号，则按一般规则处理。 句子 意思 备注 こんにちは(wa) 你好 常用于白天 こんばんは(wa) 晚上好 おはようございます 早上好 おはよう 早上好 是上一句的缩写 ありがとうございます 谢谢 ありがとう 谢谢 是上一句的缩写 すみません 对不起 较正式 すいません 对不起 是上一句的口语形式 ごめんなさい 对不起 较随意，常用于熟人 ごめん 对不起 是上一句的缩写 申(もう)し訳(わけ)ございません 对不起 最为郑重的说法 更多句子待更新…]]></content>
      <categories>
        <category>japanese</category>
      </categories>
      <tags>
        <tag>日语教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[汉明码]]></title>
    <url>%2Fknowledge%2FHammingCode%2F</url>
    <content type="text"><![CDATA[汉明码编码方式详解 确定位数已知有n位信息码，k位校验码，则在汉明码的构造规则中，应满足：2^k&gt;=n+k+1其中k位校验码应至少有n+k种状态，用来表达n+k位的错误，还有1位用来表示整个代码正确无误。故通常有下表。 n k（最小） 1 2 2~4 3 5~11 4 12~26 5 27~57 6 58~120 7 … … 构造序列设n+k位序列每一位编号分别为1,2,3,…,n+k，k位汉明码分别为C1、C2、C4、…、C2^(k-1)，则对于任意i(1&lt;=i&lt;=k)，C2^(i-1)应放在序列中第i号位置上。示例：现有n=4的信息码，由上表可得k=3，则n+k位序列编号为1~7，k位汉明码编号为C1、C2、C4。同时，设信息码的4位分别为b4、b3、b2、b1，则有下表序列。 二进制序号 1 2 3 4 5 6 7 名称 C1 C2 b4 C4 b3 b2 b1 以此类推。此时，对于任意i(1&lt;=i&lt;=k)，C2^(i-1)负责检测的范围为[i+m*i*2，i*2-1+m*i*2]，m&gt;=0且m为整数以上表为例，则有：C1负责检测1,3,5,7位C2负责检测2,3,6,7位C4负责检测4,5,6,7位 奇偶校验设C2^(i-1)负责检测t位，若为偶校验，则这t位相加，所得结果应为偶数，即二进制为最后一位为0；若为奇校验，则这t位相加，所得结果应为奇数，即二进制位最后一位为1。以上表为例，则有：第1,3,5,7位相加为偶数，C1在第1位，所以C1=(第3位+第5位+第7位)的和取二进制最后一位，简写为C1=3位 + 5位 + 7位，即C1=b4 + b3 + b1第2,3,6,7位相加为偶数，C2在第2位，所以C2=3位 + 6位 + 7位，即C2=b4 + b2 + b1第4,5,6,7位相加为偶数，C4在第4位，所以C4=5位 + 6位 + 7位，即C4=b3 + b2 + b1 若设信息码为0101，采用偶校验，则C1=0+1+1=0C2=0+0+1=1C4=1+0+1=0所以信息码0101对应的汉明码为0100101 纠错过程前面说到，对于任意i(1&lt;=i&lt;=k)，C2^(i-1)负责检测的范围为[i+m*i*2，i*2-1+m*i*2]，m&gt;=0且m为整数。则收信一方只需要按该规则重新计算即可。于是，设对于任意i(1&lt;=i&lt;=k)，已知C2^(i-1)负责检测t位，则有P2^(i-1)=∑这t位（包括C2^(i-1)所在位）。接上例，则有：P4=4位 + 5位 + 6位 + 7位P2=2位 + 3位 + 6位 + 7位P1=1位 + 3位 + 5位 + 7位若全0，则表示信息完全正确 若此时设收到的码字为0100111，则通过计算，得：P4=0+1+1+1=1P2=1+0+1+1=1P1=0+0+1+1=0说明C1负责的分组没错，C2和C4负责的分组有错。经检查发现，只有计算结果110对应第110位（也就是第6位）有错。此时计算机会直接修改第110位，于是完成纠错。 又若正确码字为0100101，收到码字为1100101，则通过计算，得：P4=0+1+0+1=0P2=1+0+0+1=0P1=1+0+1+1=1此时P4P2P1=001，所以第1位出错，应该修改第1位。但因为第1位是C1所在地，是校验位，对信息码没有影响，故一般不纠正此处错误。 以上，就是汉明码的工作过程。]]></content>
      <categories>
        <category>knowledge</category>
      </categories>
      <tags>
        <tag>汉明码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[日语入门向基本单词]]></title>
    <url>%2Fjapanese%2Fkihontango%2F</url>
    <content type="text"><![CDATA[日语入门向基本单词 人称我 单词 通常适用范围 私（わたし） 共通 俺（おれ） 男性 僕（ぼく） 男性 吾輩（わがはい） 文人/咒术师等等 あたし 女性 うち 女性 没有绝对的情况，想用什么其实都可以，只不过别人可能觉得你有点奇怪 你 单词 通常适用范围 君（きみ） 对同辈、晚辈 貴方（あなた） 对陌生人，或女人称呼丈夫 お前（まえ） 对同辈、晚辈。比较不礼貌 貴様（きさま） 一般用于斥责 ～さん 「～」处填入对方姓名，共通 ～くん 「～」处填入对方姓名，男性 ～ちゃん 「～」处填入对方姓名，女性 他/她/它 单词 通常适用范围 彼（かれ） 男性 彼女（かのじょ） 女性 あの～ 「～」处填入「它」的种类 ～们一般用「～たち」或者「～ら」表示。 以下为示例。 中文 日文 我们 私たち 你们 君たち 他们 彼たち 那些猫 あの猫たち 方位 单词 通常适用范围 ここ 这里（离说话人更近） そこ 那里（离听话人更近） あそこ 那里（离双方都远） こちら ここ的较为尊敬的说法 そちら そこ的较为尊敬的说法 あちら あそこ的较为尊敬的说法 こっち こちら的口语形式 そっち そちら的口语形式 あっち あちら的口语形式 中（なか） 中间 前（まえ） 前面 後（うし）ろ 后面 上（うえ） 上面 下（した） 下面 左（ひだり） 左边 右（みぎ） 右边 内（うち） 里边 外（そと） 外边 数字 单词 读音 0 れい/ぜろ 1 いち 2 に 3 さん 4 し/よん 5 ご 6 ろく 7 しち/なな 8 はち 9 きゅう/く 10 じゅう 11 じゅういち 20 にじゅう 40 しじゅう 70 しちじゅう 90 きゅうじゅう 100 ひゃく 200 にひゃく 300 さんびゃく 400 よんひゃく 600 ろっぴゃく 700 ななひゃく 800 はっぴゃく 1000 いちせん 10000 いちまん 一億 いちおく 数～ すう～ 何～ なん～ 「数～」的示例： 数年（すうねん），几年。 与英语 some years 相同。 「何～」的示例： 何年（なんねん），几年。 与英语 what year 相同。 没提及的可以按照规律推算，比如11是10的读音和1的读音拼起来，那么12就是10和2拼起来，变成じゅうに。 其中7做个位时，读しち或者なな都可以，做高位时，读しち。4、9同理。 拼接亦可用于多个不同等级数字间，如837=800+30+7，则读音为 はっぴゃくさんじゅうしち 个数 单词 读音 意思 一つ ひとつ 一个 二つ ふたつ 两个 三つ みっつ 三个 四つ よっつ 四个 五つ いつつ 五个 六つ むっつ 六个 七つ ななつ 七个 八つ やっつ 八个 九つ ここのつ 九个 十つ とおつ 十个 何つ なんつ 几个 人数 单词 读音 意思 一人 ひとり 一个人 二人 ふたり 两个人 三人 さんにん 三个人 四人 よんにん 四个人 五人 ごにん 五个人 六人 ろくにん 六个人 七人 しちにん 七个人 八人 はちにん 八个人 九人 きゅうにん 九个人 十人 じゅうにん 十个人 何人 なんにん 几个人 时间时/分/秒 时 直接数字+時（じ）即可 示例：7時（しちじ）-&gt;7点 分 单词 读音 单词 读音 单词 读音 1分 いっぷん 2分 にふん 3分 さんぷん 4分 よんぷん 5分 ごふん 6分 ろっぷん 7分 ななふん 8分 はちふん/はっぷん 9分 きゅうふん 10分 じっぷん/じゅっぷん 秒 除了下面几个特殊的以外，其余均为数字读法+秒（びょう） 单词 读音 4秒 よんびょう 7秒 ななびょう 9秒 きゅうびょう 一天的变化 单词 读音 意思 朝 あさ 早上 午前 ごぜん 早上（可用于与时分秒搭配） 昼 ひる 中午 午後 ごご 下午（可用于与时分秒搭配） 夕方 ゆうがた 傍晚 晩 ばん 晚上（稍早些） 夜 よる 夜晚（稍晚些） 星期 单词 读音 意思 月曜日 げつようび 周一 火曜日 かようび 周二 水曜日 すいようび 周三 木曜日 もくようび 周四 金曜日 きんようび 周五 土曜日 どようび 周六 日曜日 にちようび 周日 何曜日 なんようび 星期几 四季 单词 读音 意思 春 はる 春天 夏 なつ 夏天 秋 あき 秋天 冬 ふゆ 冬天 春季 しゅんき 春季 夏季 かき 夏季 秋季 しゅうき 秋季 冬季 とうき 冬季 年/月/日期 年 直接数字+年（ねん）即可 示例：7年（しちねん） 月 直接数字+月（がつ）即可 示例：7月（しちがつ） 注：作为“几月”的一部分时，月读がつ；其他时候一般读げつ 单词 读音 单词 读音 单词 读音 单词 读音 1日 ついたち 2日 ふつか 3日 みっか 4日 よっか 5日 いつか 6日 むいか 7日 なのか 8日 ようか 9日 ここのか 10日 とおか 11日 じゅういちにち 12日 じゅうににち 13日 じゅうさんにち 14日 じゅうよっか 15日 じゅうごにち 16日 じゅうろくにち 17日 じゅうしちにち 18日 じゅうはちにち 19日 じゅうくにち 20日 はつか 21日 にじゅういちにち 22日 にじゅうににち 23日 にじゅうさんにち 24日 にじゅうよっか 25日 にじゅうごにち 26日 にじゅうろくにち 27日 にじゅうしちにち 28日 にじゅうはちにち 29日 にじゅうくにち 30日 さんじゅう 31日 さんじゅういちにち 何日 なんにち 时段 对于年/时/分/秒，直接数字+間（かん）即可 示例：7年間（しちねんかん）-&gt;7年 对于月，用数字+月間（げつかん）即可 对于日，用数字+日間（にちかん）即可 多久以前 单词 读音 意思 ～前 ～ぜん 前接时间，表示多长时间以前 ～後 ～ご 前接时间，表示多长时间以后 示例：三年前（さんねんぜん） 今天/本周/本月/本年 单词 读音 意思 一昨日 おととい 前天 昨日 きのう 昨天 今日 きょう 今天 明日 あした/あす 明天 明後日 あさって 后天 先々周 せんせんしゅう 上上周 先周 せんしゅう 上周 今周 こんしゅう 本周 来周 らいしゅう 下周 再来周 さらいしゅう 下下周 先々月 せんせんげつ 上上个月 先月 せんげつ 上个月 今月 こんげつ 本月 来月 らいげつ 下个月 再来月 さらいげつ 下下个月 前年 ぜんねん 前年 一昨年 おととし 前年 去年 きょねん 去年 昨年 さくねん 去年 今年 ことし 今年 来年 らいねん 明年 再来年 さらいねん 后年]]></content>
      <categories>
        <category>japanese</category>
      </categories>
      <tags>
        <tag>日语教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[五十音图]]></title>
    <url>%2Fjapanese%2Fgojuuonzu%2F</url>
    <content type="text"><![CDATA[五十音图详解 五十音图基本图样 平假名 片假名 罗马音 平假名 片假名 罗马音 平假名 片假名 罗马音 平假名 片假名 罗马音 平假名 片假名 罗马音 あ行 あ ア a い イ i う ウ u え エ e お オ o か行 か カ ka き キ ki く ク ku け ケ ke こ コ ko た行 た タ ta ち チ chi つ ツ tsu て テ te と ト to さ行 さ サ sa し シ shi/si す ス su せ セ se そ ソ so は行 は ハ ha ひ ヒ hi ふ フ fu/hu へ ヘ he ほ ホ ho な行 な ナ na に ニ ni ぬ ヌ nu ね ネ ne の ノ no ま行 ま マ ma み ミ mi む ム mu め メ me も モ mo ら行 ら ラ ra り リ ri る ル ru れ レ re ろ ロ ro や行 や ヤ ya ゆ ユ yu よ ヨ yo わ行 わ ワ wa を ヲ wo ん行 ん ン n が行 が ガ ga ぎ ギ gi ぐ グ gu げ ゲ ge ご ゴ go だ行 だ ダ da ぢ ヂ di づ ヅ du で デ de ど ド do ざ行 ざ ザ za じ ジ ji/zi ず ズ zu ぜ ゼ ze ぞ ゾ zo ば行 ば バ ba び ビ bi ぶ ブ bu べ ベ be ぼ ボ bo ぱ行 ぱ パ pa ぴ ピ pi ぷ プ pu ぺ ペ pe ぽ ポ po 五十音图附加部分（拗音） 平假名 片假名 罗马音 平假名 片假名 罗马音 平假名 片假名 罗马音 か行 きゃ キャ kya きゅ キュ kyu きょ キョ kyo が行 ぎゃ ギャ gya ぎゅ ギュ gyu ぎょ ギョ gyo た行 ちゃ チャ cha ちゅ チュ chu ちょ チョ cho だ行 でゃ デャ dha でゅ デュ dhu でょ デョ dho さ行 しゃ シャ sha しゅ シュ shu しょ ショ sho ざ行 じゃ ジャ ja じゅ ジュ ju じょ ジョ jo は行 ひゃ ヒャ hya ひゅ ヒュ hyu ひょ ヒョ hyo ば行 びゃ ビャ bya びゅ ビュ byu びょ ビョ byo ぱ行 ぴゃ ピャ pya ぴゅ ピュ pyu ぴょ ピョ pyo な行 にゃ ニャ nya にゅ ニュ nyu にょ ニョ nyo ま行 みゃ ミャ mya みゅ ミュ myu みょ ミョ myo ら行 りゃ リャ rya りゅ リュ ryu りょ リョ ryo 促音/长音 促音（っ或ッ） 示例：はっきり 罗马音：ha kki ri 意思：清楚、明朗 要点： 写罗马音时，促音的标记与后一个音的第一个字母一致 读的时候，发音的位置要停半个字符的时间 唱歌的时候，有时候明显地停顿半个字符的话会显得很奇怪，此时促音的读音应该和前一个假名的最后一个字母一致 长音 在一个平假名单词中，如果前一个音以i结尾且后一个是い，或以e结尾且后一个是え，或以o结尾且后一个是う，此时对于这些い、え、う，不单独发音，而是发长音 在一个片假名单词中，如果出现一条横线，就意味着长音 示例：誓（ちか）おう 罗马音：chi ka o u 意思：（主观上想要）起誓 要点： 写罗马音时，长音的标记是自己原本的标记 读的时候，长音的发音与前一个假名的最后一个字母一致，且不停顿，相当于前一个假名发音时长增加一个字符的时间 相关软件下载以下软件至少适用于Windows环境 五十音图（仅清音） 日语五十音测试 说明读音 按谐音方法（全都读第一声）： 罗马音 对应谐音 a 啊 i 衣 u 呜 e 诶 o 哦 表格中标注的罗马音，若有斜杠分割的，说明这两个音都可以 书写请注意区分以下几个假名： 片假名tsu（ツ）和片假名shi（シ） ツ是从上向下的一撇，シ是从下往上 片假名so（ソ）和片假名n（ン） ソ是从上向下的一撇，ン是从下往上 平假名he（へ）和片假名he（ヘ） 平假名的へ在书写时，向下的一划与水平方向夹角较小，片假名的较大 片假名ra（ラ）和片假名（ヲ） 变音在作助词时，以下平假名会发生变音： 假名 原罗马音 变音后罗马音 は ha wa へ he e を wo o 打字要点希望打出以下罗马音所对应的假名时，需要注意打字的方法 罗马音 对应平假名 对应片假名 打字变化 n ん ン nn ぁ ァ la/xa 变小的假名只要在原读音前面加上l或x就行，建议用x]]></content>
      <categories>
        <category>japanese</category>
      </categories>
      <tags>
        <tag>日语教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[捕获并分析帧和IP报文]]></title>
    <url>%2Fexperiment%2Finterception%2F</url>
    <content type="text"><![CDATA[计算机网络实验3 实验目的 捕获并分析以太网的帧，获取目标与源网卡的MAC 地址 获取本机地址 获取远端MAC地址 实验环境 Windows 10 C# Visual Studio 2017 实验结果测试时，设置为超过10000Bps就会报警 实验总结全局初始化安装WinPcap和SharpPcap 查看网卡信息通过调用ipconfig.exe实现 适配器 计时动作 载入适配器列表 载入适配器信息 开始侦听 收包动作 成帧 成帧时修改流量统计 监视流量 暂停侦听 继续侦听 停止侦听 保存日志 退出程序 技术细节计算流量的方法构建新结构体（mac + ip +mode）放进dictionary当key，各key累计收发包大小当value。 新建线程，每隔1s遍历各来源的收发流量，超过1MB的，可以认为在这1s内平流量达到1MBps以上，故而给本机警告 遍历dictionary因为多线程同时在访问dictionary，所以会出现在一个线程遍历dictionary的时候，另一个线程正在新增dictionary的项。此时采用foreach遍历会报错，因为foreach要求正在遍历的对象不能有变化 有网络但侦听不到包体如果确认程序没错，那么可能是 选错网卡，要注意选一个有网络的网卡 当前的网络收发包类型不是ip and tcp，应该是filter的问题，关掉filter即可 BitConverter会反向获取。 如，现有byte[] test={0x01,0x10,0x0f,0xff}; 二进制为00000001 00010000 00001111 11111111 十进制为17829887 此时进行uint ans=BitConverter.ToUInt32(test,0); 会得到ans= 4279177217 十六进制为ff0f1001 二进制为11111111 00001111 00010000 00000001 可见不能得到想要的结果，因为BitConverter会反向转换所给的byte数组 所以应该先将要转换的数组反向，再使用BitConverter 参考链接SharpPcap]]></content>
      <categories>
        <category>experiment</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[模拟RS-232接口双机互联编程]]></title>
    <url>%2Fexperiment%2FRS-232%2F</url>
    <content type="text"><![CDATA[计算机网络实验2 实验目的实现两台计算机通过串口通信 实验环境本机Windows10 虚拟机系统VirtualBox 虚拟机1 Windows7 虚拟机2 Windows7 C# Visual Studio 2017 实验结果 启动应用，得到如图界面。因为每个空格都会在确定了前一个空格后变为可编辑，而且会给出相应的默认值，所以可以一直点击确定，直到所有设置都被确定 设置完成后得到如图情况，此时点击“启动服务” 正常启动服务后收到提示 双机互联时应有如图态势 实验总结基于VirtualBox 配置两台虚拟机时，应选择相同的串口 端口模式选择“主机管道”，路径/地址格式为\\.\pipe\xxxx，其中xxxx可以任意填写，但要保证两台虚拟机一致 对于选项“连接至现有通道或套接字”，其中一台虚拟机不勾选，称为pc1，另一台勾选，称为pc2 启动时，应先启动pc1，再启动pc2，否则会报如下错误 软件层面通信前应确保两台虚拟机上的软件都已经成功启动服务，否则不能互联 配置属性 接收 发送 退出]]></content>
      <categories>
        <category>experiment</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[日本語教程索引]]></title>
    <url>%2Fjapanese%2FJapaneseMenu%2F</url>
    <content type="text"><![CDATA[只是想写一个日语教程，为了将来方便给云霄一中日语部教学。 于是这里就当成目录吧。 五十音图日语入门向基本单词]]></content>
      <categories>
        <category>japanese</category>
      </categories>
      <tags>
        <tag>日语教程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[制作网线]]></title>
    <url>%2Fexperiment%2Fmakereticle%2F</url>
    <content type="text"><![CDATA[计算机网络实验1 制作网线时应注意将线插到水晶头底部]]></content>
      <categories>
        <category>experiment</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数据库系统实验报告-实验1 oracle 11g的安装、配置和使用]]></title>
    <url>%2Fexperiment%2Fdb-ex1%2F</url>
    <content type="text"><![CDATA[只是一篇实验报告。 实验目的 掌握Oracle 11g Server的安装 掌握Oracle的监听与网络配置 掌握Oracle数据库的启动与关闭 掌握Oracle的交互式开发环境、工具及常用管理操作命令 实验内容/步骤 安装Oracle 11g（服务器版本） 理解安装过程中各选项的含义及作用 了解内置用户的登录和服务器预定义角色 安装完成后以OEM方式登录、管理数据库 创建以自己学号为账号的新用户(S+自己学号)。 对账号做相应授权。 使用网络配置工具进行网络配置 存在的问题及解决方案 Windows10安装障碍（不满足最低配置） 提取iso中所有文件 记事本打开\stage\cvu\cvu_prereq.xml 修改如图字段，重点修改6.2以及Windows 10 参考链接 Environment Variable: “PATH” 失败 打开环境变量配置，选择PATH 先备份PATH，之后删除一部分PATH项，直到不会报错 正常安装，结束后恢复原PATH列表 参考链接 以OEM方式登录 访问 localhost:1158/em/console/logon/logon 创建新用户 打开SQL Plus 新建数据表空间，语句如下： 123create tablespace dbsp_2 datafile 'url\filename.dbf'size 10mextent management local autoallocate; 其中单引号内链接自行指定，注意指定的文件夹应是已创建的，且新建的文件后缀名为.dbf 新建用户，语句如下 1create user username identified by password 其中username为用户名，by后面为密钥 授权，语句格式如下： 1grant connect,resource,dba to username; 可以是如下形式： 1grant [权限] to [用户名]; 参考链接 配置网络 运行Net Configuration Assist 选择“本地网络服务名配置” 选择“添加” 这一步要求输入你要访问的数据库的“全局数据库名”，“全局数据库名”在安装数据库时指定，默认为name.domain（即：数据库名+数据库域名），当然也可以根据自己喜好随意命名，可以通过select * from global_name;进行查询。 *可以直接命名为myorcl 选择网络语数据库的通信协议，默认TCP即可 主机名填写127.0.0.1用以访问本地数据库，并选择“使用标准端口号1521” 选择“是，进行测试” 默认的测试使用Oracle的Scott用户，因为用户被锁或口令不对，一般情况都会测试不成功，这时候可以通过“更改登录”重新输入数据库的用户/口令来进行测试是否连接成功 网络服务名，即为该远程连接配置命名。默认即可。 至此，如果不需要再配置其他的网络服务，则该网络服务名配置完毕。 参考链接]]></content>
      <categories>
        <category>experiment</category>
      </categories>
      <tags>
        <tag>数据库系统实验</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[哈夫曼树]]></title>
    <url>%2Falgorithm%2FHuffmanTree%2F</url>
    <content type="text"><![CDATA[一棵裸的哈夫曼树，看点可能在于封装（ 嘛，反正是留档给自己看的 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;string&gt;#include&lt;queue&gt;#include&lt;map&gt;#include&lt;vector&gt;using namespace std;typedef char Type;typedef struct NODE&#123; Type data; int weight; NODE* Lchild; NODE* Rchild; NODE* Parent;&#125;NODE,*node;//树的结点 struct cmp&#123; Type data; int weight; node selfroot; friend bool operator &gt;(const cmp&amp; a,const cmp&amp; b) &#123; return a.weight&gt;b.weight; &#125;&#125;;//为了使用优先队列，必须重载大于号，而重载大于号不能针对指针，故有此类型 class HuffmanTree&#123; private: int n; node root; cmp temp[100]; map&lt;string,char&gt;m;//序列对字符的映射 void print(char x,string y) &#123; cout&lt;&lt;x&lt;&lt;" "&lt;&lt;y&lt;&lt;endl; &#125; void cal(node T,string num) &#123; if(n==1) &#123; print(root-&gt;data,"0"); return; &#125; if(T-&gt;data=='#') &#123; cal(T-&gt;Lchild,num+"0"); cal(T-&gt;Rchild,num+"1"); return; &#125; print(T-&gt;data,num); m[num]=T-&gt;data; &#125; void destroy(node T) &#123; if(T-&gt;Lchild!=NULL) destroy(T-&gt;Lchild); if(T-&gt;Rchild!=NULL) destroy(T-&gt;Rchild); delete T; &#125; public: HuffmanTree() &#123; root=NULL; &#125; void init() &#123; cout&lt;&lt;"请输入字符个数n（n&lt;100）。接下来n行，每行输入一个字符及其权重。（输入的字符不可以是#）\n"; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) &#123; cin&gt;&gt;temp[i].data&gt;&gt;temp[i].weight; temp[i].selfroot=new NODE; node p=temp[i].selfroot; p-&gt;data=temp[i].data; p-&gt;weight=temp[i].weight; p-&gt;Lchild=p-&gt;Rchild=p-&gt;Parent=NULL; &#125; &#125; void build() &#123; priority_queue&lt;cmp,vector&lt;cmp&gt;,greater&lt;cmp&gt; &gt;q; for(int i=0;i&lt;n;i++) q.push(temp[i]); while(!q.empty()) &#123; cmp p1=q.top(); q.pop(); if(q.empty()) &#123; root=p1.selfroot; break; &#125; cmp p2=q.top(); q.pop(); cmp tmp; tmp.data='#'; tmp.weight=p1.weight+p2.weight; tmp.selfroot=new NODE; node kp=tmp.selfroot; kp-&gt;data=tmp.data; kp-&gt;weight=tmp.weight; kp-&gt;Parent=NULL; p1.selfroot-&gt;Parent=p2.selfroot-&gt;Parent=kp; if(p1.weight&lt;p2.weight) &#123; kp-&gt;Lchild=p1.selfroot; kp-&gt;Rchild=p2.selfroot; &#125; else &#123; kp-&gt;Rchild=p2.selfroot; kp-&gt;Lchild=p1.selfroot; &#125; q.push(tmp); &#125; &#125; void show() &#123; cout&lt;&lt;"所求出的对应编码表如下（不按顺序）：\n"; cal(root,""); cout&lt;&lt;endl; &#125; void solve() &#123; string str,ans=""; cout&lt;&lt;"请输入待解码的合法01序列\n"; cin&gt;&gt;str; int len=str.length(); for(int i=0;i&lt;len;i++) &#123; int cnt=1; string tmp=str.substr(i,1); map&lt;string,char&gt;::iterator it=m.find(tmp); while(it==m.end()) &#123; cnt++; if(i+cnt&gt;len) &#123; cout&lt;&lt;"输入序列不合法！\n"; return; &#125; tmp=str.substr(i,cnt); it=m.find(tmp); &#125; ans+=m[tmp]; i+=cnt-1; &#125; cout&lt;&lt;"解码后的序列为："&lt;&lt;ans&lt;&lt;endl&lt;&lt;endl; &#125; void del() &#123; destroy(root); cout&lt;&lt;"该哈夫曼树已经成功销毁！\n"; &#125;&#125;;int main()&#123; HuffmanTree ht; ht.init(); ht.build(); ht.show(); ht.solve(); ht.del(); return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>哈夫曼树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[职业测试结果-UX课程要求]]></title>
    <url>%2Fothers%2Fux%2F</url>
    <content type="text"><![CDATA[物流师 ISTJ ISTJ人格类型被认为是数量最多的，大约占人口总数的13%。他们明显的正直，实际，奉献的优点使他们成为很多家庭以及拥护传统，规则，标准的组织的重要一员，比如律所，监管部门和军队。ISTJ类型的人愿意为自己的行为负责，为努力完成目标所做的事感到骄傲。ISTJ会毫不吝啬时间和精力来准确和耐心地完成每个任务。 ISTJ不喜欢做假设，而是分析周围环境，根据事实来找到最实际的做法。ISTJ从不废话，当他们做了决定时，会把取得目标需要的所有信息传播给别人，期待他人立刻掌握情况马上行动。ISTJ不能容忍犹豫不决，在自己的决定受到不切实际，尤其是忽略事实的理论的挑战时会很快失去耐心。如果这些挑战变成了浪费时间的辩论，截止日期越近他们就会变得越发气愤。 如果你尊重你的名誉，就结交那些优秀的人 ISTJ说做就做，不惜一切完成任务，那些不同样说话算话的人使他们感到困惑。如果再加上懒惰和虚伪就最为ISTJ所不齿。因为这样，ISTJ通常更喜欢独自工作，或至少要建立明确的等级制度，使他们可以计划并完成目标而不用为别人的不可靠所扰。 ISTJ有敏锐的建立在事实上的思维，与依靠别人相比更愿意自给自足。对别人的依赖在他们看来是弱点，他们对责任的热情，可靠，和正直的人格不允许他们落入这样的陷阱。 正直的人格对ISTJ很重要，他们不论代价遵守已经建立的规则和准则，时刻报告自己的错误，实话实说，即使这样做有灾难性的后果。对ISTJ来说，诚信比感性思考重要得多，他们直截了当的方式可能让别人误解他们冷漠，机械化。这种类型的人很难对外表达自己的情绪和好感，但是说他们没感情甚至没人性会让他们很受伤。 与不合适的人在一起还不如独自一人 ISTJ的尽心尽力是很好的品质，使得他们能成就许多，但同时也是能被一些不严谨的人利用的弱点。ISTJ寻求安全和稳定，把平缓的运营看作自己的责任，他们可能发现同事和爱人把他们的责任转移给自己，因为自己总会接受。ISTJ趋向于保留自己的看法用事实说话，但要等观察得到的证据解释一切可能需要很长时间。 ISTJ需要记得照顾自己，他们对稳定和高效顽固的尽心尽力可能使一些长期目标变得困难，因为别人会更加依赖他们，使ISTJ产生一些可能很多年都不会表现出来的情绪压力，在表现出来时通常为时已晚。如果他们能找到真正感激和赞扬他们的品质，享受他们的聪慧清晰和可靠的同事或配偶，ISTJ会发现他们使事情稳定的角色是很有满足感的，因为自己是一个完美运行的系统的一部分。]]></content>
      <categories>
        <category>others</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[HDU P1166 敌兵布阵 题解]]></title>
    <url>%2Fanswer%2Fhdu-p1166%2F</url>
    <content type="text"><![CDATA[HDU P1166 敌兵布阵 题解 Problem DescriptionC国的死对头A国这段时间正在进行军事演习，所以C国间谍头子Derek和他手下Tidy又开始忙乎了。A国在海岸线沿直线布置了N个工兵营地,Derek和Tidy的任务就是要监视这些工兵营地的活动情况。由于采取了某种先进的监测手段，所以每个工兵营地的人数C国都掌握的一清二楚,每个工兵营地的人数都有可能发生变动，可能增加或减少若干人手,但这些都逃不过C国的监视。 中央情报局要研究敌人究竟演习什么战术,所以Tidy要随时向Derek汇报某一段连续的工兵营地一共有多少人,例如Derek问:“Tidy,马上汇报第3个营地到第10个营地共有多少人!”Tidy就要马上开始计算这一段的总人数并汇报。但敌兵营地的人数经常变动，而Derek每次询问的段都不一样，所以Tidy不得不每次都一个一个营地的去数，很快就精疲力尽了，Derek对Tidy的计算速度越来越不满:”你个死肥仔，算得这么慢，我炒你鱿鱼!”Tidy想：“你自己来算算看，这可真是一项累人的工作!我恨不得你炒我鱿鱼呢!”无奈之下，Tidy只好打电话向计算机专家Windbreaker求救,Windbreaker说：“死肥仔，叫你平时做多点acm题和看多点算法书，现在尝到苦果了吧!”Tidy说：”我知错了。。。”但Windbreaker已经挂掉电话了。Tidy很苦恼，这么算他真的会崩溃的，聪明的读者，你能写个程序帮他完成这项工作吗？不过如果你的程序效率不够高的话，Tidy还是会受到Derek的责骂的. Input第一行一个整数T，表示有T组数据。 每组数据第一行一个正整数N（N&lt;=50000）,表示敌人有N个工兵营地，接下来有N个正整数,第i个正整数ai代表第i个工兵营地里开始时有ai个人（1&lt;=ai&lt;=50）。 接下来每行有一条命令，命令有4种形式： (1) Add i j,i和j为正整数,表示第i个营地增加j个人（j不超过30） (2)Sub i j ,i和j为正整数,表示第i个营地减少j个人（j不超过30）; (3)Query i j ,i和j为正整数,i&lt;=j，表示询问第i到第j个营地的总人数; (4)End 表示结束，这条命令在每组数据最后出现; 每组数据最多有40000条命令 Output对第i组数据,首先输出“Case i:”和回车, 对于每个Query询问，输出一个整数并回车,表示询问的段中的总人数,这个数保持在int以内。 Sample Input123456789101101 2 3 4 5 6 7 8 9 10Query 1 3Add 3 6Query 2 7Sub 10 2Add 6 3Query 3 10End Sample Output1234Case 1:63359 显然是线段树题，而且还是单点修改的……把 luogu 3372 的 AC Code 改一下就完事了。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;string&gt;#include&lt;vector&gt;#include&lt;queue&gt;using namespace std;typedef long long ll;ll ans[1000010],tag[1000010],a[1000010],n,m;inline ll ls(ll p)&#123; return p&lt;&lt;1;&#125;inline ll rs(ll p)&#123; return p&lt;&lt;1|1;&#125;inline void push_up(ll p)&#123; ans[p]=ans[ls(p)]+ans[rs(p)];&#125;void build(ll p,ll l,ll r)&#123; tag[p]=0; if(l==r) &#123; ans[p]=a[l]; return; &#125; ll mid=(l+r)&gt;&gt;1; build(ls(p),l,mid); build(rs(p),mid+1,r); push_up(p);&#125;inline void f(ll p,ll l,ll r,ll k)&#123; ans[p]+=k*(r-l+1); tag[p]+=k;&#125;inline void push_down(ll p,ll l,ll r)&#123; ll mid=(l+r)&gt;&gt;1; f(ls(p),l,mid,tag[p]); f(rs(p),mid+1,r,tag[p]); tag[p]=0;&#125;void update(ll x,ll y,ll l,ll r,ll p,ll k)&#123; if(x&lt;=l&amp;&amp;r&lt;=y) &#123; ans[p]+=k*(r-l+1); tag[p]+=k; return; &#125; push_down(p,l,r); ll mid=(l+r)&gt;&gt;1; if(x&lt;=mid) update(x,y,l,mid,ls(p),k); if(y&gt;mid) update(x,y,mid+1,r,rs(p),k); push_up(p);&#125;ll query(ll x,ll y,ll l,ll r,ll p)&#123; ll tmp=0,mid=(l+r)&gt;&gt;1; if(x&lt;=l&amp;&amp;r&lt;=y) return ans[p]; push_down(p,l,r); if(x&lt;=mid) tmp+=query(x,y,l,mid,ls(p)); if(y&gt;mid) tmp+=query(x,y,mid+1,r,rs(p)); return tmp;&#125;int main()&#123; int T; cin&gt;&gt;T; for(int CASE=1;CASE&lt;=T;CASE++)&#123; printf("Case %d:\n",CASE); ll x,y,k,t; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) scanf("%lld",&amp;a[i]); build(1,1,n); string command; while(cin&gt;&gt;command) &#123; if(command=="End") break; if(command=="Add")&#123; scanf("%lld %lld",&amp;x,&amp;k); update(x,x,1,n,1,k);//在luogu P3372这里是对[x,y]区间修改，现在改成对[x,x]就是单点了（ &#125; else if(command=="Sub")&#123; scanf("%lld %lld",&amp;x,&amp;k); update(x,x,1,n,1,-k); &#125; else if(command=="Query")&#123; scanf("%lld %lld",&amp;x,&amp;y); printf("%lld\n",query(x,y,1,n,1)); &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>题解</tag>
        <tag>HDU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[排序专题]]></title>
    <url>%2Falgorithm%2Fsort%2F</url>
    <content type="text"><![CDATA[排序专题 基本题面： 设有n个正整数，保证n不大于100且这n个数都不大于1000，对其进行从小到大的排序。 选择排序123456789101112131415161718192021222324#include&lt;iostream&gt;using namespace std;int main()&#123; int n,a[100]; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i]; for(int i=0;i&lt;n;i++)//依次确定应该填在下标为i的位置的数 &#123; for(int j=i+1;j&lt;n;j++)//将下标i上保存的数依次与其后所有数字比较 &#123; if(a[i]&gt;a[j]) &#123; int temp=a[i]; a[i]=a[j]; a[j]=temp; &#125; &#125; &#125; for(int i=0;i&lt;n;i++) cout&lt;&lt;a[i]&lt;&lt;" "; return 0;&#125; 冒泡排序123456789101112131415161718192021222324#include&lt;iostream&gt;using namespace std;int main()&#123; int n,a[100]; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i]; for(int i=0;i&lt;n;i++)//通过第i次交换，能确定下标为i的位置所应该填写的数 &#123; for(int j=n-1;j&gt;i;j--)//每次把最小的交换到最前面 &#123; if(a[j-1]&gt;a[j])//比较相邻两个 &#123; int temp=a[j-1]; a[j-1]=a[j]; a[j]=temp; &#125; &#125; &#125; for(int i=0;i&lt;n;i++) cout&lt;&lt;a[i]&lt;&lt;" "; return 0;&#125; 桶排序桶排序有其缺点： 1、必须全是整数（负数可以平移数轴） 2、必须知道数字最大不超过多少 3、所开数组不得超过题目的内存限制 需要以上三点同时满足，否则不可以使用桶排序 1234567891011121314151617181920212223242526272829#include&lt;iostream&gt;using namespace std;int main()&#123; int n,a[100]; int bucket[1000]=&#123;0&#125;;//用bucket[i]表示数字i出现的次数，初始化为0 //因为题目中说了都是正整数而且均小于1000，所以数组开到1000 cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i]; for(int i=0;i&lt;n;i++) &#123; int number=a[i]; bucket[number]++;//每当数字i出现，就令其出现次数+1 &#125; for(int i=0;i&lt;1000;i++)//因为题目中说了都是正整数而且均小于1000，所以循环小于1000 &#123; if(bucket[i]!=0)//如果bucket[i]==0，则表示数字i没有出现过，就不需要输出了 &#123; for(int j=0;j&lt;bucket[i];j++) &#123; //因为数字出现了bucket[i]次，所以需要循环bucket[i]次 //否则会造成重复数字只会输出一个 cout&lt;&lt;i&lt;&lt;" "; &#125; &#125; &#125; return 0;&#125; sort函数sort函数默认是从小到大排序的。123456789101112131415#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;int main()&#123; int n,a[100]; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i]; sort(a,a+n); for(int i=0;i&lt;n;i++) cout&lt;&lt;a[i]&lt;&lt;" "; return 0;&#125; 如果要令sort函数实现从大到小排序，可以写作如下程序段。1234567891011121314151617181920#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;bool cmp(int a,int b)&#123; if(a&gt;b) return true; else return false;&#125;int main()&#123; int n,a[100]; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i]; sort(a,a+n,cmp); for(int i=0;i&lt;n;i++) cout&lt;&lt;a[i]&lt;&lt;" "; return 0;&#125; 其中cmp函数因为bool类型的特性，又可简写，变为如下程序段。12345678910111213141516171819#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;bool cmp(int a,int b)&#123; return a&gt;b;&#125;int main()&#123; int n,a[100]; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i]; sort(a,a+n,cmp); for(int i=0;i&lt;n;i++) cout&lt;&lt;a[i]&lt;&lt;" "; return 0;&#125; 还可以有不写cmp函数，而使用重载运算符的方法。此处不做介绍，详见C++语言-9-结构体。 堆排序堆排序需要使用优先队列，开始学习队列后才需要学习。 优先队列默认是最大堆，也就是说最大的数在队首。要实现从小到大排序的话只能写作如下程序段。 12345678910111213141516171819202122#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;int main()&#123; int n; priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt;q; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) &#123; int t; cin&gt;&gt;t; q.push(t); &#125; for(int i=0;i&lt;n;i++) &#123; cout&lt;&lt;q.top()&lt;&lt;" "; q.pop(); &#125; return 0;&#125; 而若要用优先队列实现从大到小排序，只需写作如下程序段。12345678910111213141516171819202122#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;int main()&#123; int n; priority_queue&lt;int&gt;q; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) &#123; int t; cin&gt;&gt;t; q.push(t); &#125; for(int i=0;i&lt;n;i++) &#123; cout&lt;&lt;q.top()&lt;&lt;" "; q.pop(); &#125; return 0;&#125; 快速排序快速排序是分治算法的入门题，开始学分治算法后才需要学习。123456789101112131415161718192021222324252627282930313233#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;void kuai(int l,int r)//每次确定区间最中间的数字&#123; int i=l,j=r,mid=a[(l+r)/2]; while(i&lt;=j) &#123; while(a[i]&lt;mid) i++; while(a[j]&gt;mid) j--; if(i&lt;=j) &#123; int tmp=a[i]; a[i]=a[j]; a[j]=tmp; i++; j--; &#125; &#125; if(l&lt;j) kuai(l,j);//排序左区间 if(r&gt;i) kuai(i,r);//排序右区间&#125;int main()&#123; int n,a[100]; cin&gt;&gt;n; for(int i=0;i&lt;n;i++) cin&gt;&gt;a[i]; kuai(0,n-1); for(int i=0;i&lt;n;i++) cout&lt;&lt;a[i]&lt;&lt;" "; return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最短路三大算法核心程序段]]></title>
    <url>%2Falgorithm%2FShortestPath%2F</url>
    <content type="text"><![CDATA[以下第1和第2均假设起点为1号点，终点为n号点。 Dijkstra等待重写 SPFA适用于单源最短路，可以处理负权边，不能处理负环。思路：从起点开始寻找起点能到达的结点，然后按次序将结点入队，每当入队时标记入队，每当出队取消标记，重复处理，直到队列为空。重点：和Dijkstra相比就是多了v数组用来保存结点是否在队列里，其结果导致同一个结点可以重复入队。而Dijkstra中所有结点都只能入队一次。1234567891011121314151617181920212223242526int e[1010][1010],ans[1010],v[1010],n;//取e[a][b]=w表示存在一条从a通向b的道路，道路长度为w，其值应该在main中已经处理好//取ans[i]表示从起点到结点i的距离为ans[i]//取v[i]表示结点i是否在队列中queue&lt;int&gt;q;void spfa()&#123; while(!q.empty()) q.pop();//清空队列 memset(v,0,sizeof(v));//初始化v数组 memset(ans,0,sizeof(ans));//初始化ans数组 q.push(1);//起点入队 v[1]=1;//起点标记为已经在队列中 while(!q.empty())//当队列非空时 &#123; int st=q.front();//取队头元素 q.pop();//弹出 v[st]=0;//标记队头元素为不在队列中 for(int i=1;i&lt;=n;i++)//枚举所有点 &#123; if(i==1) continue;//如果i是起点，跳过 int p=0;//取变量p来记录是否发生更优解的更新 if(e[st][i]&amp;&amp;(!ans[i]||ans[i]&gt;ans[st]+e[st][i])) ans[i]=ans[st]+e[st][i],p=1;//发生更优解的更新，p=1 if(p&amp;&amp;!v[i]) q.push(i),v[i]=1;//如果发生更优解的更新，且结点i未入队，则结点i入队，标记为已入队 &#125; &#125;&#125; Floyd适用于求所有结点间的最短路径。12345int d[100][100];//用d[i][j]表示从i到j的最短路径for(int k=0;k&lt;n;k++) for(int i=0;i&lt;n;i++) for(int j=0;j&lt;n;j++) d[i][j]=min(d[i][j],d[i][k]+d[k][j]);]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1880 [NOI1995]石子合并 题解]]></title>
    <url>%2Fanswer%2Fluogu-p1880%2F</url>
    <content type="text"><![CDATA[Luogu P1880 [NOI1995]石子合并 题解 请先掌握区间dp。 题目描述在一个圆形操场的四周摆放N堆石子,现要将石子有次序地合并成一堆.规定每次只能选相邻的2堆合并成新的一堆，并将新的一堆的石子数，记为该次合并的得分。 试设计出1个算法,计算出将N堆石子合并成1堆的最小得分和最大得分. 输入输出格式输入格式数据的第1行试正整数N,1≤N≤100,表示有N堆石子.第2行有N个数,分别表示每堆石子的个数. 输出格式输出共2行,第1行为最小得分,第2行为最大得分. 输入输出样例输入样例#1： 1244 5 9 4 输出样例#1： 124354 典型的环形dp题。 思路见注释。 代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;using namespace std;#define INF (1&lt;&lt;30)#define maxn(a,b) (a&gt;b)?a:b#define minn(a,b) (a&lt;b)?a:bint a[110],f[110][110][2],n,ma,mi;//用f[i][j][0]表示合并从i到j的最小花费，f[i][j][1]表示合并从i到j的最大花费int sum(int i,int j)&#123; int ans=0; while(i&lt;=j) ans+=a[i++]; return ans;&#125;//计算合并从i到j（含i和j）的总费用void solve()&#123; for(int t=1;t&lt;n;t++) &#123; for(int i=0;i&lt;n-t;i++) &#123; int j=i+t; f[i][j][0]=INF; f[i][j][1]=-INF; int tmp=sum(i,j); for(int k=i;k&lt;j;k++) &#123; if(f[i][j][0]&gt;f[i][k][0]+f[k+1][j][0]+tmp) f[i][j][0]=f[i][k][0]+f[k+1][j][0]+tmp; if(f[i][j][1]&lt;f[i][k][1]+f[k+1][j][1]+tmp) f[i][j][1]=f[i][k][1]+f[k+1][j][1]+tmp; &#125; &#125; &#125; mi=minn(mi,f[0][n-1][0]); ma=maxn(ma,f[0][n-1][1]);&#125;int main()&#123; cin&gt;&gt;n; ma=-INF;mi=INF;//初始化最大值为极小值，最小值为极大值 memset(f,0,sizeof(f)); for(int i=0;i&lt;n;i++) scanf("%d",&amp;a[i]); solve();//先按原顺序计算一遍 for(int i=1;i&lt;n;i++) &#123; memset(f,0,sizeof(f)); int tmp=a[0]; for(int j=0;j&lt;n-1;j++) a[j]=a[j+1]; a[n-1]=tmp;//第一个数移到最后，其余每个数向前移动一位 solve();//重算 //环形dp的重点在于变更原有顺序重算 &#125; cout&lt;&lt;mi&lt;&lt;endl&lt;&lt;ma; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>Luogu</tag>
        <tag>题解</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3366 【模板】最小生成树 题解]]></title>
    <url>%2Fanswer%2Fluogu-p3366%2F</url>
    <content type="text"><![CDATA[Luogu P3366 【模板】最小生成树 题解 题目描述如题，给出一个无向图，求出最小生成树，如果该图不连通，则输出orz 输入输出格式输入格式：第一行包含两个整数N、M，表示该图共有N个结点和M条无向边。（N&lt;=5000，M&lt;=200000） 接下来M行每行包含三个整数Xi、Yi、Zi，表示有一条长度为Zi的无向边连接结点Xi、Yi 输出格式：输出包含一个数，即最小生成树的各边的长度之和；如果该图不连通则输出orz 输入输出样例输入样例#1：1234564 51 2 21 3 21 4 32 3 43 4 3 输出样例#1：17 说明时空限制：1000ms,128M 数据规模： 对于20%的数据：N&lt;=5，M&lt;=20 对于40%的数据：N&lt;=50，M&lt;=2500 对于70%的数据：N&lt;=500，M&lt;=10000 对于100%的数据：N&lt;=5000，M&lt;=200000 最小生成树板子题，没什么好说的…… 算法说明： 以下两个算法都基于贪心实现。 kruskal算法采用并查集思想。步骤如下： 把每个点单独拆分，使得每个点的父亲都是它自己，即每个点单独成一个连通块。 每次取最短边，如果边两端的点处于同一个连通块，则pop掉，再取最短的边，直到边两端的点不处于同一个连通块为止。 合并两个点所在的连通块，并且ans+=两个点的距离。 重复2和3，共n-1遍。 prim算法采用遍历。步骤如下： 初始把1号点标记为已经使用过，并将与其相连的所有边加入队列。 每次取最短边，如果边的终点已使用过，则pop掉，再取最短的边，直到边的终点未使用过为止， 将边的终点标记为已经使用过，并且ans+=该边长度，再将与该边终点相连的所有边加入队列。 重复2和3，共n-1遍。*因为每次选择可用的新边时，该边起点都是已经使用过的（所以该边才有加入队列），所以只要判断该边终点即可。 代码： kruskal算法： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;struct edge&#123; int u,v,w;&#125;;int n,m,f[5010],v[5010];priority_queue&lt;edge,vector&lt;edge&gt;,greater&lt;edge&gt; &gt;q;bool operator &gt;(const edge &amp;a,const edge &amp;b)&#123; return a.w&gt;b.w;&#125;int find(int x)&#123; if(x==f[x]) return x; return f[x]=find(f[x]);&#125;inline void join(int x,int y)&#123; f[x]=y;&#125;long long kruskal()&#123; long long ans=0; for(int x=1;x&lt;n;x++) &#123; edge temp=q.top(); while(find(temp.u)==find(temp.v)) &#123; q.pop(); temp=q.top(); &#125; q.pop(); int tu=find(temp.u),tv=find(temp.v); join(tu,tv); ans+=temp.w; &#125; return ans;&#125;int main()&#123; cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=n;i++) f[i]=i; while(m--) &#123; int x,y,z; scanf("%d %d %d",&amp;x,&amp;y,&amp;z); v[x]=v[y]=1; edge temp; temp.u=x; temp.v=y; temp.w=z; q.push(temp); &#125; for(int i=1;i&lt;=n;i++) if(!v[i])&#123; cout&lt;&lt;"orz"; return 0; &#125; cout&lt;&lt;kruskal(); return 0;&#125; prim算法：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;vector&gt;#include&lt;queue&gt;using namespace std;struct edge&#123; int v,w;&#125;;int n,m;bool v[5010]=&#123;false&#125;;vector&lt;edge&gt;G[5010];priority_queue&lt;edge,vector&lt;edge&gt;,greater&lt;edge&gt; &gt;q;bool operator &gt;(const edge &amp;a,const edge &amp;b)&#123; return a.w&gt;b.w;&#125;long long prim()&#123; long long ans=0; v[1]=1; for(vector&lt;edge&gt;::iterator i=G[1].begin();i!=G[1].end();i++) q.push(*i); int x=1; while(x++&lt;n)&#123; edge temp=q.top(); while(v[temp.v])&#123; q.pop(); temp=q.top(); &#125; ans+=temp.w; v[temp.v]=1; for(vector&lt;edge&gt;::iterator i=G[temp.v].begin();i!=G[temp.v].end();i++) q.push(*i); &#125; return ans;&#125;int main()&#123; cin&gt;&gt;n&gt;&gt;m; for(int i=0;i&lt;m;i++)&#123; int x,y,z; scanf("%d %d %d",&amp;x,&amp;y,&amp;z); edge temp; temp.v=y; temp.w=z; G[x].push_back(temp); temp.v=x; G[y].push_back(temp); &#125; for(int i=1;i&lt;=n;i++)&#123; if(G[i].empty())&#123; cout&lt;&lt;"orz"; return 0; &#125; &#125; cout&lt;&lt;prim(); return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>Luogu</tag>
        <tag>题解</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年4月月赛 Day2 Violet 题解]]></title>
    <url>%2Fanswer%2Fyxyz201804-0203%2F</url>
    <content type="text"><![CDATA[2018年4月月赛 Day2 Violet 题解 题目背景少佐在哪！！别拦着我！！我要去找少佐！！ 自从那天的别离之后，Violet和少佐已经分别许久。就在Violet从昏迷中恢复意识的那一刻起，Violet一直在计划着去寻找少佐。 现在，时机成熟了。 题目描述Violet只能确定少佐在n个城市中的某一个，却不知道具体在哪一个，而从疗养院所在地s去到任意一个城市，都需要经过若干城市之间的若干有向道路。这些道路错综复杂，Violet想尽快赶到。 请你帮她算算到各个城市的最短时间吧。 输入输出格式输入格式第一行包含三个整数N、M、S，分别表示点的个数、有向边的个数、出发点的编号。 接下来M行每行包含三个整数Fi、Gi、Wi，分别表示第i条有向边的出发点、目标点和长度。 输出格式一行，包含N个用空格分隔的整数，其中第i个整数表示从点S出发到点i的最短路径长度（若S=i则最短路径长度为0，若从点S无法到达点i，则最短路径长度为2147483647） 输入输出样例输入样例#1： 12345674 6 11 2 22 3 22 4 11 3 53 4 31 4 4 输出样例#1： 10 2 4 3 说明1&lt;=N&lt;=10000，1&lt;=M&lt;=500000 邻接表板子题…… 可类比Luogu P3371 代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;vector&gt;#include&lt;queue&gt;using namespace std;struct edge&#123;int next,dis;&#125;; vector&lt;edge&gt; e[10010];int ans[10010];bool v[10010]=&#123;false&#125;;queue&lt;int&gt;q;inline void addedge(int f,int g,int w)&#123; edge x; x.next=g; x.dis=w; e[f].push_back(x);&#125;void spfa()&#123; while(!q.empty()) &#123; int t=q.front(); q.pop(); v[t]=false; for(vector&lt;edge&gt;::iterator i=e[t].begin();i!=e[t].end();i++) &#123; int tmp=ans[t]+i-&gt;dis,ttt=i-&gt;next; if(tmp&lt;ans[ttt]) &#123; ans[ttt]=tmp; if(!v[ttt]) &#123; q.push(ttt); v[ttt]=true; &#125; &#125; &#125; &#125;&#125;int main()&#123; int n,m,s; cin&gt;&gt;n&gt;&gt;m&gt;&gt;s; for(int i=1;i&lt;=n;i++) ans[i]=2147483647; ans[s]=0; for(int i=0;i&lt;m;i++) &#123; int f,g,w; scanf("%d %d %d",&amp;f,&amp;g,&amp;w); addedge(f,g,w); &#125; q.push(s); v[s]=true; spfa(); for(int i=1;i&lt;=n;i++) printf("%d ",ans[i]); return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>SPFA</tag>
        <tag>云霄一中月赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年4月月赛 Day2 工作分配问题 题解]]></title>
    <url>%2Fanswer%2Fyxyz201804-0202%2F</url>
    <content type="text"><![CDATA[2018年4月月赛 Day2 工作分配问题 题解 题目描述设有 n 件工作分配给 n 个人。将工作 i 分配给第 j 个人所需的费用为c[i][j] 。试设计一个算法，为每一个人都分配 1 件不同的工作，并使总费用达到最小。 输入输出格式输入格式第一行有 1 个正整数 n 。接下来的 n 行，每行 n 个正整数，表示工作费用。 输出格式一行，包含一个正整数，为计算出的最小总费用。 输入输出样例输入样例#1： 1234310 2 32 3 43 4 5 输出样例#1： 19 说明对于100%的数据，1&lt;=n&lt;=20，1&lt;=c[i][j]&lt;=100。 1月月赛的原题。 本题除了一月月赛中已经给出的dfs解，还可以有mcmf解。 代码： dfs解： 1234567891011121314151617181920212223242526272829303132333435363738394041#include&lt;cstdio&gt;#include&lt;iostream&gt;using namespace std;bool v[30]=&#123;false&#125;;long long ans=0;int c[30][30],n;void dfs(int x,int sum)&#123; if(x&gt;n) &#123; if(sum&lt;ans) ans=sum; return; &#125; if(ans&gt;sum) &#123; for(int i=1;i&lt;=n;i++) &#123; if(!v[i]) &#123; v[i]=true; dfs(x+1,sum+c[x][i]); v[i]=false; &#125; &#125; &#125;&#125;int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) &#123; for(int j=1;j&lt;=n;j++) &#123; cin&gt;&gt;c[i][j]; ans+=c[i][j]; &#125; &#125; dfs(1,0); cout&lt;&lt;ans; return 0;&#125; 感谢cyy dalao支援的MCMF解。 MCMF解： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include &lt;bits/stdc++.h&gt;using std::queue;using std::min;const int maxe = 2510;const int maxn = 55;const int inf = 0x3f3f3f3f;struct Edge&#123; int u,v,f,c; int next;&#125;e[maxe];int head[maxn];int ecnt;void _AddEdge(int u,int v,int f,int c) &#123; e[ecnt].u = u; e[ecnt].v = v; e[ecnt].f = f; e[ecnt].c = c; e[ecnt].next = head[u]; head[u] = ecnt; ecnt ++;&#125;void AddEdge(int u,int v,int f,int c) &#123; _AddEdge(u,v,f,c); _AddEdge(v,u,0,-c);&#125;bool inq[maxn];int dis[maxn];int pre[maxn];bool spfa(int s,int t) &#123; queue &lt;int&gt; q; memset(dis,0x3f,sizeof(dis)); memset(inq,false,sizeof(inq)); memset(pre,-1,sizeof(pre)); dis[s] = 0; inq[s] = true; q.push(s); while (!q.empty()) &#123; int cur = q.front(); q.pop(); inq[cur] = false; for (int i=head[cur];~i;i=e[i].next) &#123; if (e[i].f &gt; 0 &amp;&amp; dis[cur] + e[i].c &lt; dis[e[i].v]) &#123; dis[e[i].v] = dis[cur] + e[i].c; pre[e[i].v] = i; if (!inq[e[i].v]) &#123; q.push(e[i].v); inq[e[i].v] = true; &#125; &#125; &#125; &#125; return dis[t] != inf;&#125;void MCMF(int s,int t,int &amp;flow,int &amp;cost) &#123; flow = 0; cost = 0; while (spfa(s,t)) &#123; int curFlow = inf; for (int i=pre[t];~i;i=pre[e[i].u]) curFlow = min(curFlow,e[i].f); for (int i=pre[t];~i;i=pre[e[i].u]) &#123; e[ i ].f -= curFlow; e[i^1].f += curFlow; &#125; cost += curFlow * dis[t]; &#125;&#125;/*编号规则：源点：0汇点：1人：2*n任务：2*n+1*/int main() &#123; memset(head,-1,sizeof(head)); int n; scanf("%d",&amp;n); for (int i=1;i&lt;=n;i++) &#123; AddEdge( 0 ,2*i,1,0); AddEdge(2*i+1, 1 ,1,0); for (int j=1;j&lt;=n;j++) &#123; int t; scanf("%d",&amp;t); AddEdge(2*i,2*j+1,1,t); &#125; &#125; int f,c; MCMF(0,1,f,c); printf("%d\n",c); return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>云霄一中月赛</tag>
        <tag>dfs</tag>
        <tag>MCMF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年4月月赛 Day2 携带 题解]]></title>
    <url>%2Fanswer%2Fyxyz201804-0201%2F</url>
    <content type="text"><![CDATA[2018年4月月赛 Day2 携带 题解 题目描述一般的九键手机的键盘是这样的： &nbsp; &nbsp; &nbsp; 1 2 abc 3 def 4 ghi 5 jkl 6 mno 7 pqrs 8 tuv 9 wxyz * 0 # 要按出英文字母就必须要按数字键多下。例如要按出x就得按9三下，第一下会出9，第二下会出w，而第三下会把w变成x。0键按两下会出一个空格。 你的任务是读取一个句子，求出要在手机上打出这个句子至少需要按多少下键盘。 输入输出格式输入格式一行一个句子，只包含英文小写字母、数字、空格、星号(*)和井号(#)，且不超过200个字符。 输出格式一行一个整数，表示按键盘的总次数。 输入输出样例输入样例#1： 1i have a dream 输出样例#1： 137 大模拟。 可类比Luogu P1765 代码： 12345678910111213141516171819202122232425#include&lt;iostream&gt;#include&lt;map&gt;#include&lt;cstring&gt;using namespace std;map&lt;char,int&gt;m;void set()&#123; m['*']=m['#']=1; for(char i='0';i&lt;='9';i++) m[i]=1; m['a']=m['d']=m['g']=m['j']=m['m']=m['p']=m['t']=m['w']=2; m['b']=m['e']=m['h']=m['k']=m['n']=m['q']=m['u']=m['x']=3; m['c']=m['f']=m['i']=m['l']=m['o']=m['r']=m['v']=m['y']=4; m['s']=m['z']=5; m[' ']=2;&#125;int main()&#123; set(); string s; getline(cin,s); int ans=0,len=s.length(); for(int i=0;i&lt;len;i++) ans+=m[s[i]]; cout&lt;&lt;ans; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>模拟</tag>
        <tag>云霄一中月赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年4月月赛 Day1 游艇 题解]]></title>
    <url>%2Fanswer%2Fyxyz201804-0103%2F</url>
    <content type="text"><![CDATA[2018年4月月赛 Day1 游艇 题解 题目描述长江游艇俱乐部在长江上设置了n 个游艇出租站1，2，…，n。游客可在这些游艇出租站租用游艇，并在下游的任何一个游艇出租站归还游艇。游艇出租站i 到游艇出租站j 之间的租金为r(i,j),1&lt;=i&lt;=j&lt;=n。试设计一个算法，计算出从任意游艇出租站i到任意游艇出租站j所需的最少租金。保证i严格小于j。 对于给定的游艇出租站i 到游艇出租站j 之间的租金为r(i,j),1&lt;=i&lt;j&lt;=n。 保证计算过程中任何时刻数值都不超过10^6 输入输出格式输入格式第1 行中有1 个正整数n，表示有n个游艇出租站。 接下来的n-1 行,第i行第j个元素表示从i号游艇出租站到j号游艇出租站(1&lt;=i&lt;j&lt;=n)的租金价格r。 输出格式共n-1行，第i行输出i-1个数，每行第j个数表示从i号游艇出租站出发到达第j号游艇出租站的最少租金。 输入输出样例输入样例#1： 12335 157 输出样例#1： 125 127 说明1&lt;=n&lt;=200 Floyd板子题…… 代码： 12345678910111213141516171819202122232425#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;int n,d[210][210];void floyd()&#123; for(int k=1;k&lt;=n;k++) for(int i=1;i&lt;=k;i++) for(int j=k+1;j&lt;=n;j++) if(d[i][j]&gt;d[i][k]+d[k][j]) d[i][j]=d[i][k]+d[k][j];&#125;int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;n;i++) for(int j=i+1;j&lt;=n;j++) scanf("%d",&amp;d[i][j]); floyd(); for(int i=1;i&lt;n;i++) &#123; for(int j=i+1;j&lt;=n;j++) cout&lt;&lt;d[i][j]&lt;&lt;" "; cout&lt;&lt;endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>云霄一中月赛</tag>
        <tag>Floyd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年4月月赛 Day1 亲属关系 题解]]></title>
    <url>%2Fanswer%2Fyxyz201804-0102%2F</url>
    <content type="text"><![CDATA[2018年4月月赛 Day1 亲属关系 题解 题目描述若某个家族人员过于庞大，要判断两个是否是亲属，确实还很不容易，现在给出某个亲属关系图，求任意给出的两个人是否具有亲属关系。 规定：x和y是亲属，y和z是亲属，那么x和z也是亲属。如果x,y是亲属，那么x的亲属都是y的亲属，y的亲属也都是x的亲属。 输入输出格式输入格式第一行：三个整数n,m,p，分别表示有n个人，m个亲属关系，询问p对亲属关系。 以下m行：每行两个数Mi，Mj，1&lt;=Mi，Mj&lt;=N，表示Mi和Mj具有亲属关系。 接下来p行：每行两个数Pi，Pj，询问Pi和Pj是否具有亲属关系。 输出格式P行，每行一个’Yes’或’No’。表示第i个询问的答案为“具有”或“不具有”亲属关系。 输入输出样例输入样例#1： 1234567896 5 31 21 53 45 21 31 42 35 6 输出样例#1： 123YesYesNo 说明1&lt;=n,m,p&lt;=5000。 并查集板子题…… 可类比Luogu P3367 代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;using namespace std;int p,n,m,q,d[10100];int find(int x)&#123; int r=x; while(d[r]!=r) r=d[r]; int i=x,j; while(i!=r) &#123; j=d[i]; d[i]=r; i=j; &#125; return r;&#125;int join(int x,int y)&#123; int fx=find(x),fy=find(y); if(fx!=fy) d[fx]=fy; return 0;&#125;int main()&#123; for(int i=1;i&lt;10100;i++) d[i]=i; scanf("%d%d%d",&amp;n,&amp;m,&amp;p); while(m--) &#123; int x,y; scanf("%d%d",&amp;x,&amp;y); join(x,y); &#125; for(int i=1;i&lt;=n;i++) find(i); while(p--) &#123; int x,y; scanf("%d%d",&amp;x,&amp;y); if(d[x]==d[y]) printf("Yes\n"); else printf("No\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>并查集</tag>
        <tag>云霄一中月赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年4月月赛 Day1 哥德巴赫猜想 题解]]></title>
    <url>%2Fanswer%2Fyxyz201804-0101%2F</url>
    <content type="text"><![CDATA[2018年4月月赛 Day1 哥德巴赫猜想 题解 题目背景要想证明哥德巴赫猜想，首先需要知道足够大的素数。求一下试试吧！ 题目描述如题，给定一个范围N，你需要处理M个某数字是否为质数的询问（每个数字均在范围[1,N]内） 输入输出格式输入格式第一行包含两个正整数N、M，分别表示查询的范围和查询的个数。 接下来M行每行包含一个不小于1且不大于N的整数，即询问该数是否为质数。 输出格式输出包含M行，每行为Yes或No，即依次为每一个询问的结果。 输入输出样例输入样例#1： 123456100 52349197 输出样例#1： 12345YesYesNoNoYes 说明1&lt;=N&lt;=10000000，1&lt;=M&lt;=100000 样例说明： N=100，说明接下来的询问数均属于[1,100]。 所以2、3、97为质数，4、91非质数。 故依次输出Yes、Yes、No、No、Yes。 筛法求素数的板子题，没什么说的。 可类比Luogu P3383 代码： 12345678910111213141516171819202122232425262728293031#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;bool ans[10000010]=&#123;false&#125;;int n,m,x,t;void set()&#123; cin&gt;&gt;n&gt;&gt;m; t=n&gt;&gt;1; ans[1]=true; for(int i=2;i&lt;=t;i++) &#123; if(ans[i]) continue; for(int j=i&lt;&lt;1;j&lt;=n;j+=i) ans[j]=true; &#125;&#125;void solve()&#123; while(m--) &#123; cin&gt;&gt;x; if(ans[x]) cout&lt;&lt;"No\n"; else cout&lt;&lt;"Yes\n"; &#125;&#125;int main()&#123; set(); solve(); return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>数论</tag>
        <tag>云霄一中月赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3367 【模板】并查集 题解]]></title>
    <url>%2Fanswer%2Fluogu-p3367%2F</url>
    <content type="text"><![CDATA[Luogu P3367 【模板】并查集 题解 题目描述如题，现在有一个并查集，你需要完成合并和查询操作。 输入输出格式输入格式：第一行包含两个整数N、M，表示共有N个元素和M个操作。 接下来M行，每行包含三个整数Zi、Xi、Yi 当Zi=1时，将Xi与Yi所在的集合合并 当Zi=2时，输出Xi与Yi是否在同一集合内，是的话输出Y；否则话输出N 输出格式：如上，对于每一个Zi=2的操作，都有一行输出，每行包含一个大写字母，为Y或者N 输入输出样例输入样例#1：123456784 72 1 21 1 22 1 21 3 42 1 41 2 32 1 4 输出样例#1：1234NYNY 说明时空限制：1000ms,128M 数据规模： 对于30%的数据，N&lt;=10，M&lt;=20； 对于70%的数据，N&lt;=100，M&lt;=1000； 对于100%的数据，N&lt;=10000，M&lt;=200000。 从100%数据的范围来看，显然不可能暴搜。所以为解决此题，我们采用基于树的数据结构——并查集。 基本并查集应该提供两个操作：查询（最大祖先）操作和合并操作。 详情见代码注释。 代码： 1234567891011121314151617181920212223242526272829303132#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;int n,m,f[10010];int find(int x)&#123; if(x==f[x]) return x;//边界 return f[x]=find(f[x]);//递归查找结点x的最大祖先y，同时通过路径压缩令x与y之间的所有结点，最大祖先都置为y&#125;inline void join(int x,int y)&#123; f[x]=y;&#125;int main()&#123; cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=n;i++) f[i]=i;//初始化令所有结点的最大祖先都是自己 while(m--) &#123; int x,y,z,tx,ty; scanf("%d %d %d",&amp;z,&amp;x,&amp;y); ty=find(y);//寻找y的最大祖先ty tx=find(x);//寻找x的最大祖先tx if(z==1) join(tx,ty);//现在tx是ty家里的人了 else &#123; if(tx==ty) printf("Y\n");//如果是同一家的 else printf("N\n"); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>Luogu</tag>
        <tag>题解</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20180417 Python学习随录]]></title>
    <url>%2Fpython%2Fpython-20180417%2F</url>
    <content type="text"><![CDATA[学习随录系列 基本原理Python使用缩进来示意作用域，效果同C++的函数大括号 Python不需要定义变量，任何合理的、未有重复的变量名均可直接使用，使用过程中也可以更改其类型。任意变量默认类型为字符串。 I/O123s=input().split(' ')#Python中一次均读取整行#本代码中，split括号中的内容为一个空格，表示s以空格为界断开成为一个列表 12print(s)#自带回车 语句选择结构123456if A1: 代码块1)elif A2: (代码块2)else: (代码块3) 同理C++参考： 123456if(A1)&#123;(代码块1)&#125;else if(A2)&#123;(代码块2)&#125;else&#123;(代码块3)&#125; 循环结构12345678910111213for x in range(1,5): (代码块)#范围为[1,5)也就是[1,4]#当range写成range(5)的时候范围为[0,5)#默认自加1while x&lt;n: (代码块)#若把x强制类型转换为int类型，写法如下# int(x)#调用int()函数把x转换为int类型#转换为其它类型，有同理操作 成分len(x)函数，可以求x字符串的长度，或x元组/列表…等等的元素数量，等等 元组(tuple) 使用小括号声明，指向成员地址不可变。可以使用数组下标访问其中元素 1s=('1','2','3') 此时 s[0]=’1’，输出时也会自带一对单引号 *声明一个元素的元组时，应加上逗号，以区别(1)的数学意义。此时输出也会自动输出逗号 *无成员函数 1s=('1',) 列表(list) 使用中括号声明，指向成员地址可变。可理解为C++中的数组。可以使用数组下标访问其中元素 1s=['1','2','3'] *与元组相比，单个元素不需强调 *带有成员函数 x.append(y)、x.pop(z)、x.insert(u,v) 和 x.sort()，其中 y 是元素，z、u 是下标，v是元素。 z置空时默认为弹出列表尾部元素 u置空时默认为在列表尾部插入元素v 字典(dict) 使用大括号声明，声明方法为： 1s=&#123;A1:B1,A2:B2,A3:B3&#125; 此时 s[A1]=B1，即自定义数组下标及其元素，使用方法同 C++ 的 map *具有list所有成员函数 *还具有 s.get(A1,x)，若在字典s中存在以 A1 为下标的组合，则返回其对应值 B1，否则返回 x，当只写 s.get(A1)，即忽略 x 时，x 自动设为 None。Python 不会输出 None 集合(set) 使用小括号和中括号声明 12s1=set(\['1','2'\])s2=set(\['2','3'\]) *自动筛除重复元素 *自带并集、交集操作 s1 &amp; s2返回’1’,’2’,’3’ s1 | s2返回’2’ *成员函数 s.add(x)，将 x 添加进集合 s 中。 *成员函数 s.remove(x)，将集合 s 中的 x 删除。]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P3373 【模板】线段树 2 题解]]></title>
    <url>%2Fanswer%2Fluogu-p3373%2F</url>
    <content type="text"><![CDATA[阅读本篇题解之前，请先完成Luogu P3372。 题目描述如题，已知一个数列，你需要进行下面三种操作： 将某区间每一个数乘上x 将某区间每一个数加上x 求出某区间每一个数的和输入输出格式输入格式：第一行包含三个整数N、M、P，分别表示该数列数字的个数、操作的总个数和模数。 第二行包含N个用空格分隔的整数，其中第i个数字表示数列第i项的初始值。 接下来M行每行包含3或4个整数，表示一个操作，具体如下： 操作1： 格式：1 x y k 含义：将区间[x,y]内每个数乘上k 操作2： 格式：2 x y k 含义：将区间[x,y]内每个数加上k 操作3： 格式：3 x y 含义：输出区间[x,y]内每个数的和对P取模所得的结果 输出格式：输出包含若干行整数，即为所有操作3的结果。 输入输出样例输入样例#1：12345675 5 381 5 4 2 32 1 4 13 2 51 2 4 22 3 5 53 1 4 输出样例#1：12172 说明时空限制：1000ms,128M 数据规模： 对于30%的数据：N&lt;=8，M&lt;=10 对于70%的数据：N&lt;=1000，M&lt;=10000 对于100%的数据：N&lt;=100000，M&lt;=100000 （数据已经过加强^_^） 样例说明： 故输出应为17、2（40 mod 38=2） 对比P3372，本题的提升在于，多了对乘法的要求（大家都看见了啊喂）。 不过，这一看起来小小的要求，真的要实现的时候，才发现真的难写。果然加了这一条就从P3372的绿题变成蓝题了。 在P3372中，区间修改仅要求了加法，因而每次下放lazy标记的时候只需要暴力下放，也就是ans[p]+和tag[p]+。然鹅，在本题中因为多了乘法，lazy标记在下放时就出现了一个问题：先下放加法lazy标记(addtag)还是乘法lazy标记(multag)？ 答案就是先下放multag，再下放addtag。 为什么呢？因为在四则运算中，加法优先级较低，乘法较高，故乘法会影响加法，在下放multag的时候不仅要ans[p]+，还要addtag[p]+，还要multag[p]+（三个p均为同一子结点）。这样，之后在下放addtag的时候才能加出正常数值。 还有就是，时刻注意取模。 附代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;typedef long long ll;ll ans[1000010],addtag[1000010],multag[1000010],a[1000010],n,m,ppp;inline ll ls(ll p)&#123; return p&lt;&lt;1;&#125;//同P3372inline ll rs(ll p)&#123; return p&lt;&lt;1|1;&#125;//同P3372inline void push_up(ll p)&#123; ans[p]=(ans[ls(p)]+ans[rs(p)])%ppp;&#125;//注意取模void build(ll p,ll l,ll r)&#123; multag[p]=1;//乘法tag应为1，若为0则造成一旦发生乘法，数值即刻归零 addtag[p]=0;//其余同P3372 if(l==r) &#123; ans[p]=a[l]; return; &#125; ll mid=(l+r)&gt;&gt;1; build(ls(p),l,mid); build(rs(p),mid+1,r); push_up(p);&#125;inline void f(ll p,ll l,ll r,ll addv,ll mulv)&#123; ans[p]=(ans[p]*mulv)%ppp; addtag[p]=(addtag[p]*mulv)%ppp; multag[p]=(multag[p]*mulv)%ppp;//先下放multag ans[p]=(ans[p]+addv*(r-l+1))%ppp; addtag[p]=(addtag[p]+addv)%ppp;//再下放addtag&#125;inline void push_down(ll p,ll l,ll r)&#123; ll mid=(l+r)&gt;&gt;1; f(ls(p),l,mid,addtag[p],multag[p]); f(rs(p),mid+1,r,addtag[p],multag[p]); addtag[p]=0; multag[p]=1;&#125;void add(ll x,ll y,ll l,ll r,ll p,ll k)&#123; if(x&lt;=l&amp;&amp;r&lt;=y) &#123; ans[p]=(ans[p]+k*(r-l+1))%ppp; addtag[p]=(addtag[p]+k)%ppp; return; &#125; if(multag[p]!=1||addtag[p]) push_down(p,l,r); ll mid=(l+r)&gt;&gt;1; if(x&lt;=mid) add(x,y,l,mid,ls(p),k); if(y&gt;mid) add(x,y,mid+1,r,rs(p),k); push_up(p);&#125;void mul(ll x,ll y,ll l,ll r,ll p,ll k)&#123; if(x&lt;=l&amp;&amp;r&lt;=y) &#123; ans[p]=(ans[p]*k)%ppp; addtag[p]=(addtag[p]*k)%ppp; multag[p]=(multag[p]*k)%ppp; return; &#125; if(multag[p]!=1||addtag[p]) push_down(p,l,r); ll mid=(l+r)&gt;&gt;1; if(x&lt;=mid) mul(x,y,l,mid,ls(p),k); if(y&gt;mid) mul(x,y,mid+1,r,rs(p),k); push_up(p);&#125;ll query(ll x,ll y,ll l,ll r,ll p)&#123; ll tmp=0,mid=(l+r)&gt;&gt;1; if(x&lt;=l&amp;&amp;r&lt;=y) return ans[p]%ppp; if(multag[p]!=1||addtag[p]) push_down(p,l,r); if(x&lt;=mid) tmp+=query(x,y,l,mid,ls(p)); if(y&gt;mid) tmp+=query(x,y,mid+1,r,rs(p)); return tmp%ppp;&#125;int main()&#123; ll x,y,t,k; cin&gt;&gt;n&gt;&gt;m&gt;&gt;ppp; for(int i=1;i&lt;=n;i++) scanf("%lld",&amp;a[i]); build(1,1,n); while(m--) &#123; scanf("%lld",&amp;t); switch(t) &#123; case 1: &#123; scanf("%lld %lld %lld",&amp;x,&amp;y,&amp;k); mul(x,y,1,n,1,k); break; &#125; case 2: &#123; scanf("%lld %lld %lld",&amp;x,&amp;y,&amp;k); add(x,y,1,n,1,k); break; &#125; case 3: &#123; scanf("%lld %lld",&amp;x,&amp;y); printf("%lld\n",query(x,y,1,n,1)); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>Luogu</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[线段树(Segment Tree)]]></title>
    <url>%2Falgorithm%2FSegmentTree%2F</url>
    <content type="text"><![CDATA[阅读本文基础知识：二分思想，二叉树，位运算。 本文适用于解决Luogu P3372 代码： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;typedef long long ll;ll ans[1000010],tag[1000010],a[1000010],n,m;//ans为各节点保存值，tag为各节点的lazy标记，a为各节点初始值inline ll ls(ll p)&#123; return p&lt;&lt;1;//求左儿子的编号&#125;inline ll rs(ll p)&#123; return p&lt;&lt;1|1;//求右儿子的编号&#125;inline void push_up(ll p)&#123; ans[p]=ans[ls(p)]+ans[rs(p)];//更新p的保存值为p的左儿子保存值加上p的右儿子保存值&#125;void build(ll p,ll l,ll r)&#123; tag[p]=0;//初始化lazy标记 if(l==r)//递归边界 &#123; ans[p]=a[l];//初始化p的保存值 return; &#125; ll mid=(l+r)&gt;&gt;1; build(ls(p),l,mid);//构建左子树 build(rs(p),mid+1,r);//构建右子树 push_up(p);//求和，作为p的保存值&#125;inline void f(ll p,ll l,ll r,ll k)&#123; ans[p]+=k*(r-l+1);//更新p的保存值为原值加上该区间长度乘以变化量 tag[p]+=k;//更新lazy标记&#125;inline void push_down(ll p,ll l,ll r)&#123; ll mid=(l+r)&gt;&gt;1; f(ls(p),l,mid,tag[p]); f(rs(p),mid+1,r,tag[p]); tag[p]=0;//重置lazy标记&#125;void update(ll x,ll y,ll l,ll r,ll p,ll k)&#123; if(x&lt;=l&amp;&amp;r&lt;=y)//递归边界 &#123; ans[p]+=k*(r-l+1);//更新p的保存值为原值加上该区间长度乘以变化量 tag[p]+=k;//更新lazy标记 return; &#125; push_down(p,l,r);//下放lazy标记 ll mid=(l+r)&gt;&gt;1; if(x&lt;=mid) update(x,y,l,mid,ls(p),k);//如果所求区间左端点小于当前区间中点，则所求区间与当前区间的左半区间仍然有重叠，需要更新左子树 if(y&gt;mid) update(x,y,mid+1,r,rs(p),k);//若...（参照左子树说明），更新右子树 push_up(p);//求和&#125;ll query(ll x,ll y,ll l,ll r,ll p)&#123; ll tmp=0,mid=(l+r)&gt;&gt;1; if(x&lt;=l&amp;&amp;r&lt;=y) return ans[p];//递归边界 push_down(p,l,r);//下放lazy标记 if(x&lt;=mid) tmp+=query(x,y,l,mid,ls(p));//若...（参照update里的说明），对左子树求和 if(y&gt;mid) tmp+=query(x,y,mid+1,r,rs(p));//同上，对右子树求和 return tmp;&#125;int main()&#123; ll x,y,k,t; cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=n;i++) scanf("%lld",&amp;a[i]); build(1,1,n);//建树 while(m--) &#123; scanf("%lld",&amp;t); switch(t) &#123; case 1: &#123; scanf("%lld %lld %lld",&amp;x,&amp;y,&amp;k); update(x,y,1,n,1,k);//更新 break; &#125; case 2: &#123; scanf("%lld %lld",&amp;x,&amp;y); printf("%lld\n",query(x,y,1,n,1));//求值 break; &#125; &#125; &#125; return 0;&#125; 对于递归边界的说明： l==r 我们在build函数中，用[l,r]表示一段区间，显然l==r时该区间内只有一个元素，故可以直接返回。所以此处以l==r作为递归边界。 x&lt;=l&amp;&amp;r&lt;=y 在此种情况中，[x,y]表示所求区间，[l,r]表示当前通过递归来到的区间。若满足x&lt;=l&amp;&amp;r&lt;=y，则表示[l,r]完全包含于[x,y]内部，此时不论如何二分递归[l,r]，子区间都是完全包含于[x,y]内部的，故可以直接返回。所以此处以x&lt;=l&amp;&amp;r&lt;=y作为递归边界。 给萌新看的代码：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;vector&gt;#include&lt;queue&gt;using namespace std;long long ans[1000010],tag[1000010],a[1000010],n,m;long long ls(long long p)&#123; return p*2;&#125;long long rs(long long p)&#123; return p*2+1;&#125;void push_up(long long p)&#123; ans[p]=ans[ls(p)]+ans[rs(p)];&#125;void build(long long p,long long l,long long r)&#123; tag[p]=0; if(l==r) &#123; ans[p]=a[l]; return; &#125; long long mid=(l+r)/2; build(ls(p),l,mid); build(rs(p),mid+1,r); push_up(p);&#125;void f(long long p,long long l,long long r,long long k)&#123; ans[p]+=k*(r-l+1); tag[p]+=k;&#125;void push_down(long long p,long long l,long long r)&#123; long long mid=(l+r)/2; f(ls(p),l,mid,tag[p]); f(rs(p),mid+1,r,tag[p]); tag[p]=0;&#125;void update(long long x,long long y,long long l,long long r,long long p,long long k)&#123; if(x&lt;=l&amp;&amp;r&lt;=y) &#123; ans[p]+=k*(r-l+1); tag[p]+=k; return; &#125; push_down(p,l,r); long long mid=(l+r)/2; if(x&lt;=mid) update(x,y,l,mid,ls(p),k); if(y&gt;mid) update(x,y,mid+1,r,rs(p),k); push_up(p);&#125;long long query(long long x,long long y,long long l,long long r,long long p)&#123; long long tmp=0,mid=(l+r)/2; if(x&lt;=l&amp;&amp;r&lt;=y) return ans[p]; push_down(p,l,r); if(x&lt;=mid) tmp+=query(x,y,l,mid,ls(p)); if(y&gt;mid) tmp+=query(x,y,mid+1,r,rs(p)); return tmp;&#125;int main()&#123; long long x,y,k,t; cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=n;i++) scanf("%lld",&amp;a[i]); build(1,1,n); while(m--) &#123; scanf("%lld",&amp;t); switch(t) &#123; case 1: &#123; scanf("%lld %lld %lld",&amp;x,&amp;y,&amp;k); update(x,y,1,n,1,k); break; &#125; case 2: &#123; scanf("%lld %lld",&amp;x,&amp;y); printf("%lld\n",query(x,y,1,n,1)); break; &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>Luogu</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年2/3月月赛 Day2 愤怒的瓦里安 题解]]></title>
    <url>%2Fanswer%2Fyxyz201802-0203%2F</url>
    <content type="text"><![CDATA[2018年2/3月月赛 Day2 愤怒的瓦里安 题解 题目描述传奇国王，暴风城主瓦里安·乌瑞恩的儿子安度因又跑到酒馆里和人打牌，还用的是十分肮脏的套牌（脏牧去死啦）。瓦里安听了十分愤怒，掰了筷子就杀了过去。安度因十分慌张，连忙找一起打牌的萨尔帮忙。充满绿色能量的萨尔答应帮安度因破坏一条道路来帮他开溜。但是智商为0的安度因并不知道到底能拖延多长时间。好吧，你写个程序帮他算算咯。（已知萨尔的智商很高，破坏的道路能最大程度上拖延瓦里安的到来） 输入输出格式输入格式第一行有两个用空格隔开的数n和m，分别表示道路节点的数量以及道路的数量。道路节点用数字1至n标识，瓦里安的出发地暴风城在节点1，安度因打牌的酒馆在节点n。 接下来的m行中每行包含三个用空格隔开的数u，v和w。这些数字表示在节点u和节点v中间有一条道路，并且花费w的时间通过。 输出格式输出瓦里安到达酒馆所需要的最短时间。 输入输出样例输入样例#1： 12345678910111213141510 141 2 71 9 107 9 17 3 132 3 22 4 152 8 65 9 74 8 38 5 16 8 35 6 206 10 55 10 60 输出样例#1： 174 说明对于100%的数据，1&lt;=n&lt;=1000，1&lt;=m&lt;=n*(n-1)/2，1&lt;=u,v&lt;=n，1&lt;=w&lt;=1000。 对于本样例，原本走1-&gt;2-&gt;8-&gt;6-&gt;10为最短路，时间为21。但萨尔破坏了6-&gt;10的路径，使得最短路变为了1-&gt;2-&gt;8-&gt;5-&gt;10，时间变为74。可以证明破坏其它道路时所得到的最短路径长度均小于本方案。 通过题意可初步分析为最短路问题的变种，且有明确的起点和终点，又数据较大，故必然使用广搜。 分析题意后可知，可以枚举所有边，逐一删除，再寻找最短路。但边数巨大，逐一枚举必然超时，故采用优化方法：先计算不删边的最短路，并记录该路径，之后枚举该路径上每条边，进行逐一删除，计算，恢复的过程，取最短路最大值即可。此处不证明该算法的正确性。 代码： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;iostream&gt;#include&lt;queue&gt;using namespace std;int e[1010][1010]=&#123;0&#125;,ans[1010]=&#123;0&#125;,v[1010]=&#123;0&#125;,f[1010]=&#123;0&#125;,maxn=0,n,m;queue&lt;int&gt;q;void bfs()&#123; while(!q.empty()) q.pop(); memset(v,0,sizeof(v)); memset(ans,0,sizeof(ans)); v[1]=1; q.push(1); while(!q.empty()) &#123; int st=q.front(); q.pop(); v[st]=0; for(int i=2;i&lt;=n;i++) &#123; int p=0; if(e[st][i]&amp;&amp;(!ans[i]||ans[i]&gt;ans[st]+e[st][i])) ans[i]=ans[st]+e[st][i],p=1; if(p&amp;&amp;!v[i]) q.push(i),v[i]=1; &#125; &#125;&#125;int main()&#123; cin&gt;&gt;n&gt;&gt;m; for(int i=0;i&lt;m;i++) &#123; int a,b; scanf("%d%d",&amp;a,&amp;b); scanf("%d",&amp;e[a][b]); e[b][a]=e[a][b]; &#125; v[1]=1; q.push(1); while(!q.empty()) &#123; int st=q.front(); q.pop(); v[st]=0; for(int i=2;i&lt;=n;i++) &#123; int p=0; if(e[st][i]&amp;&amp;(!ans[i]||ans[i]&gt;ans[st]+e[st][i])) ans[i]=ans[st]+e[st][i],p=1,f[i]=st; if(p&amp;&amp;!v[i]) q.push(i),v[i]=1; &#125; &#125; int t=n,tmp,temp; while(t!=1) &#123; tmp=f[t]; temp=e[t][tmp]; e[t][tmp]=e[tmp][t]=0; bfs(); e[t][tmp]=e[tmp][t]=temp; if(ans[n]&gt;maxn) maxn=ans[n]; t=f[t]; &#125; cout&lt;&lt;maxn; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>SPFA</tag>
        <tag>云霄一中月赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年2/3月月赛 Day2 石化 题解]]></title>
    <url>%2Fanswer%2Fyxyz201802-0202%2F</url>
    <content type="text"><![CDATA[2018年2/3月月赛 Day2 石化 题解 题目背景漫长战斗终于分出胜负了。 “喂，我可没听说非拼成这样才赢得了。” 七道亡国级禁咒，十一把开刃到自毁程度的帕西瓦尔系列，甚至青年本身没资格动用的勇者剑技最终奥义都已经强行祭出。 假如这样还不能将其灭绝，也无计可施了。 「真是惊天动地啊。身为无力的凡人之躯，却能独自使出此等力量吗？实在可怕。不过，看来要发挥那样的力量，实在不可能毫无代价。」 “啪”的一声，青年脚踝前面的部分已经变成粗糙的石块了。 又是好几声脆响重叠在一起，灰色面积开始沿着他的身体往上蔓延扩散，到了膝盖，到了腿，到了腰，还在继续往上。 题目描述威廉即将在t个单位时间内完全石化，现在他对往事无限怀念，希望尽可能多的想起重要的人。 威廉有n个重要的人，而每个单位时间里他同时只能想一个人。 在此时此刻，回想第i个重要的人有关的事情都要消耗p[i]的时间，且只有时间p[i]完全经过才算确实回想起这个人。 威廉该按什么顺序回想，才能尽可能多的回顾和重要的人经历的事情呢？ 输入输出格式输入格式第一行，包含两个正整数t,n。 接下来n行，每行包含一个字符串和一个正整数p[i]。其中字符串表示第i个重要的人的姓名。 输出格式输出按最佳回想顺序能想起的人数。 输入输出样例输入样例#1： 12345 3Ri-ria 3Naiguranto 5Arumaria 2 输出样例#1： 12 输入样例#2： 12345610 5Chtholly 2Nephren 5Ithea 3Rhantolk 6Lakhesh 4 输出样例#2： 13 说明每个字符串均不超过50个字符。 对于100%的数据，1&lt;=t&lt;=10000000,1&lt;=n&lt;=500000,1&lt;=p[i]&lt;=1000。 通过题目中描述，可知姓名是无用参数，不需保存处理；且仅有时间一种属性，可定性为dp的特例：贪心。当然用dp做也可以得出正解。 贪心做法： sort之后从小到大开始算。 dp做法： 同背包问题。 代码： 123456789101112131415161718192021222324#include&lt;cstdio&gt;#include&lt;algorithm&gt;using namespace std;char s[50];int a[500000],sum=0;int main()&#123; int t,n,i,j; scanf("%d%d",&amp;t,&amp;n); for(i=0;i&lt;n;i++) scanf("%s %d",s,&amp;a[i]); sort(a,a+n); for(i=0;i&lt;n;i++) &#123; t-=a[i]; if(t&lt;0) &#123; if(!i) printf("0"); break; &#125; sum++; &#125; if(i) printf("%d",sum); return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>dp</tag>
        <tag>云霄一中月赛</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年2/3月月赛 Day2 被7整除 题解]]></title>
    <url>%2Fanswer%2Fyxyz201802-0201%2F</url>
    <content type="text"><![CDATA[2018年2/3月月赛 Day2 被7整除 题解 题目描述输出从1~n有多少个整数满足2^n-n^2能被7整除。 输入输出格式输入格式一行，包含一个整数n。 输出格式一行，包含一个整数x，表示从1~n有x个整数满足2^n-n^2能被7整除。 输入输出样例输入样例#1： 12 输出样例#1： 11 输入样例#2： 14 输出样例#2： 12 说明对于100%的数据，1&lt;=n&lt;=1000000。 定性为数论题。 通过打表可发现有周期为21的规律。 只能打表自行找规律，没有别种办法。 找不出规律也可暴力，不过会超时。 代码： 12345678910111213#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;#define ll long longint main()&#123; int num[30]=&#123;0,0,1,1,2,3,4,4,4,4,5,5,5,5,5,6,6,6,6,6,6,6&#125;; int n; cin&gt;&gt;n; int k=n/21,q=n%21; cout&lt;&lt;k*6+num[q]; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>数论</tag>
        <tag>云霄一中月赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年2/3月月赛 Day1 胜利大逃亡 题解]]></title>
    <url>%2Fanswer%2Fyxyz201802-0103%2F</url>
    <content type="text"><![CDATA[原题，不再赘述。详见本链接]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>SPFA</tag>
        <tag>云霄一中月赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年2/3月月赛 Day1 疯狂的机器人 题解]]></title>
    <url>%2Fanswer%2Fyxyz201802-0102%2F</url>
    <content type="text"><![CDATA[2018年2/3月月赛 Day1 疯狂的机器人 题解 题目描述MH：“前几个月给一个机器人写了段代码，发现它只能往两个方向走，不能回退，而且还是随机的，真是无语…” CL：“我看你也够随机的，最后那家伙竟然疯了一样，在上下左右四个方向乱走了，可真是吓死我了” MH：“是啊是啊。我记下了它当时的所在的地图，希望能找到它最远可能从哪里来的” 还是机智的你，知道这个机器人最远可能从哪里来的吗？ 输入输出格式输入格式第一行两个正整数n,m，表示机器人所在地图的规模。 第2行到第n+1行，每行m个数字，分别是0,1,-1三种之一。 其中，0表示可以行走的路，1表示墙壁，-1表示机器人所在的坐标。 输出格式一行，包含一个数字。若能有最远可到达的地方，输出该距离，否则输出0。 输入输出样例输入样例#1： 123454 51 0 0 0 10 1 0 1 01 1 0 1 00 -1 0 0 0 输出样例#1： 15 输入样例#2： 123454 51 0 0 0 10 1 0 1 01 1 0 1 00 0 1 -1 0 输出样例#2： 13 说明对于100%的数据，1&lt;=n,m&lt;=50。 定性为搜索题，搜索所有点中到起点走最短路仍最远的地方，也就是求起点到所有点的最短距离的最大值。 此处采用dfs。使用bfs的话需要有明确的终点，而本题没有固定终点，因此不适合bfs。 代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;int n,m,final=0,d[60][60],ans[60][60]=&#123;0&#125;,stx,sty;void dfs(int x,int y)&#123; for(int i=x-1;i&lt;=x+1;i++) &#123; if(i&lt;0||i&gt;=n) continue; for(int j=y-1;j&lt;=y+1;j++) &#123; if(j&lt;0||j&gt;=m) continue; if(i==stx&amp;&amp;j==sty) continue; if(i==x&amp;&amp;y==j) continue; if(i!=x&amp;&amp;y!=j) continue; if(d[i][j]) continue; int &amp;t=ans[i][j]; if(!t||(t&amp;&amp;t&gt;ans[x][y]+1)) &#123; t=ans[x][y]+1; dfs(i,j); &#125; &#125; &#125;&#125;int main()&#123; cin&gt;&gt;n&gt;&gt;m; for(int i=0;i&lt;n;i++) &#123; for(int j=0;j&lt;m;j++) &#123; cin&gt;&gt;d[i][j]; if(d[i][j]==-1) &#123; stx=i; sty=j; &#125; &#125; &#125; dfs(stx,sty); for(int i=0;i&lt;n;i++) for(int j=0;j&lt;m;j++) if(final&lt;ans[i][j]) final=ans[i][j]; cout&lt;&lt;final; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>云霄一中月赛</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年2/3月月赛 Day1 行军（改） 题解]]></title>
    <url>%2Fanswer%2Fyxyz201802-0101%2F</url>
    <content type="text"><![CDATA[2018年2/3月月赛 Day1 行军（改） 题解 题目背景再过十几天，人类远征军就要出发去讨伐星神(visitor)了。 正规勇者莉莉娅·阿斯普雷伊及一众准勇者们正在为行军问题而焦头烂额。 “这么多的粮草，还有那么远的路，这该怎么办啊？”莉莉娅抱怨道。 你能帮帮莉莉娅吗？ 题目描述从皇都到达星神居住地，这之间有无数座城市和无数条道路，将会消耗很多时间。 而为了保证军士们的生活，需要带上足够的粮草。 皇都共有n堆粮草可供选择，每堆粮草有重量p，体积q和价值w，而为了便于行军，莉莉娅只能选择不超过u重量且不超过v体积的粮草带走。 输入输出格式输入格式第一行，包含三个正整数，分别为粮草数量n,最大载重量u,最大体积v。 接下来n行，每行包含三个正整数p[i]、q[i]和w[i]。 第i+1行的p[i]表示第i堆粮草的重量，q[i]表示第i堆粮草的体积，w[i]表示第i堆粮草的价值。 输出格式一行，输出能载的粮草的最大价值。 输入输出样例输入样例#1： 12345676 10 101 1 12 3 13 2 12 5 15 2 14 3 1 输出样例#1： 14 输入样例#2： 123456789101110 16 242 9 45 6 53 7 36 2 97 6 57 5 63 3 81 4 19 5 99 7 6 输出样例#2： 126 说明1&lt;=n&lt;=1000,1&lt;=u&lt;=1000,1&lt;=v&lt;=1000 所有数据不大于maxint 非常简单的一个二维约束的背包问题。解题方法详见这里 数据较大，最好scanf输入。 代码： 123456789101112131415161718192021222324#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;int n,u,v;int p[1010],q[1010],w[1010],f[1010][1010]=&#123;0&#125;;int main()&#123; int i,j,k; cin&gt;&gt;n&gt;&gt;u&gt;&gt;v; for(i=1;i&lt;=n;i++) scanf("%d%d%d",&amp;p[i],&amp;q[i],&amp;w[i]); for(i=1;i&lt;=n;i++) &#123; for(j=u;j&gt;=p[i];j--) &#123; for(k=v;k&gt;=q[i];k--) &#123; int temp=f[j-p[i]][k-q[i]]+w[i]; if(f[j][k]&lt;temp) f[j][k]=temp; &#125; &#125; &#125; cout&lt;&lt;f[u][v]; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>dp</tag>
        <tag>云霄一中月赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[背包问题专项]]></title>
    <url>%2Falgorithm%2Fknapsack%2F</url>
    <content type="text"><![CDATA[背包问题专项 01背包问题每种物品只能拿一个的问题称为01背包问题。 对于一维约束的情况，先正向枚举数量，再反向枚举约束条件。 核心代码： 1234for(int i=1;i&lt;=n;i++) for(int j=m;j&gt;=v[i];j--) if(!ans[j]||ans[j]&gt;ans[j-v[i]]+w[i]) ans[j]=ans[j-v[i]]+w[i]; 上述代码中设n为数量，m为最大重量，v[i]为第i个物品重量，w[i]为第i个物品价值。 对于二维约束的情况，只需要改用二维数组，并再加一个for即可。 核心代码： 12345for(int i=1;i&lt;=n;i++) for(int j=m;j&gt;=v[i];j--) for(int k=u;k&gt;=p[i];k--) if(!ans[j][k]||ans[j][k]&gt;ans[j-v[i]][k-p[i]]+w[i]) ans[j][k]=ans[j-v[i]][k-p[i]]+w[i]; 上述代码中设n为数量，m为最大重量，u为最大体积，v[i]为第i个物品重量，p[i]为第i个物品体积，w[i]为第i个物品价值。 对于更多维约束条件，可参照二维约束外推。 完全背包问题每种物品可以拿无限个的问题称为完全背包问题。 对于一维约束的情况，先正向枚举数量，再正向枚举约束条件。（01背包是反向枚举约束条件） 核心代码： 1234for(int i=1;i&lt;=n;i++) for(int j=v[i];j&lt;=m;j++) if(!ans[j]||ans[j]&gt;ans[j-v[i]]+w[i]) ans[j]=ans[j-v[i]]+w[i]; 上述代码中设n为数量，m为最大重量，v[i]为第i个物品重量，w[i]为第i个物品价值。 对于二维约束的情况，只需要改用二维数组，并再加一个for即可。 核心代码： 12345for(int i=1;i&lt;=n;i++) for(int j=v[i];j&lt;=m;j++) for(int k=p[i];k&lt;=u;k++) if(!ans[j][k]||ans[j][k]&gt;ans[j-v[i]][k-p[i]]+w[i]) ans[j][k]=ans[j-v[i]][k-p[i]]+w[i]; 上述代码中设n为数量，m为最大重量，u为最大体积，v[i]为第i个物品重量，p[i]为第i个物品体积，w[i]为第i个物品价值。 对于更多维约束条件，可参照二维约束外推。 多重背包问题01背包问题是每种物品只能拿一个，完全背包问题是每种物品可以拿无限个，而多重背包就是每种物品可以取一个或多个，但绝对是有限个，不可能无限取。 解决此类问题，只需把每种物品拆成单个即可。如第i种物品有j个，单个重量为v[i]，价值为w[i]，那就可以拆分成j的单个重量为v[i]，价值为w[i]的物品。 拆单之后，即可使用01背包问题的解法来解决。 混合三种背包问题顾名思义，混合三种背包问题就是以上三种的混合。每种物品既可能只有1个，又可能有多个，还可能有无数个。 对于该类问题，先按多重背包问题的解法，将有多个的物品全部拆单，使得混合三种背包问题简化为01背包和完全背包的混合；再正向枚举每件物品，按每件物品所属性质不同而决定采用正向枚举约束条件还是反向。 核心代码： 12345678910111213for(int i=1;i&lt;=n;i++) if(f[i]==1) &#123; for(int j=m;j&gt;=v[i];j--) if(!ans[j]||ans[j]&gt;ans[j-v[i]]+w[i]) ans[j]=ans[j-v[i]]+w[i]; &#125; else &#123; for(int j=v[i];j&lt;=m;j++) if(!ans[j]||ans[j]&gt;ans[j-v[i]]+w[i]) ans[j]=ans[j-v[i]]+w[i]; &#125; 上述代码中设n为数量，m为最大重量，v[i]为第i个物品重量，w[i]为第i个物品价值，f[i]=1表示第i个物品属于01背包，否则属于完全背包。对于二维约束的情况，只需要改用二维数组，并再加一个for即可。核心代码：123456789101112131415for(int i=1;i&lt;=n;i++) if(f[i]==1) &#123; for(int j=m;j&gt;=v[i];j--) for(int k=u;k&gt;=p[i];k--) if(!ans[j][k]||ans[j][k]&gt;ans[j-v[i]][k-p[i]]+w[i]) ans[j][k]=ans[j-v[i]][k-p[i]]+w[i]; &#125; else &#123; for(int j=v[i];j&lt;=m;j++) for(int k=p[i];k&lt;=u;k++) if(!ans[j][k]||ans[j][k]&gt;ans[j-v[i]][k-p[i]]+w[i]) ans[j][k]=ans[j-v[i]][k-p[i]]+w[i]; &#125; 上述代码中设n为数量，m为最大重量，u为最大体积，v[i]为第i个物品重量，p[i]为第i个物品体积，w[i]为第i个物品价值，f[i]=1表示第i个物品属于01背包，否则属于完全背包。 对于更多维约束条件，可参照二维约束外推。]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1126 机器人搬重物 题解]]></title>
    <url>%2Fanswer%2Fluogu-p1126%2F</url>
    <content type="text"><![CDATA[Luogu P1126 机器人搬重物 题解 题目描述机器人移动学会（RMI）现在正尝试用机器人搬运物品。机器人的形状是一个直径1.6米的球。在试验阶段，机器人被用于在一个储藏室中搬运货物。储藏室是一个N*M的网格，有些格子为不可移动的障碍。机器人的中心总是在格点上，当然，机器人必须在最短的时间内把物品搬运到指定的地方。机器人接受的指令有：向前移动1步（Creep）；向前移动2步（Walk）；向前移动3步（Run）；向左转（Left）；向右转（Right）。每个指令所需要的时间为1秒。请你计算一下机器人完成任务所需的最少时间。 输入输出格式输入格式输入的第一行为两个正整数N,M（N,M&lt;=50） 下面N行是储藏室的构造，0表示无障碍，1表示有障碍，数字之间用一个空格隔开 接着一行有四个整数和一个大写字母，分别为起始点和目标点左上角网格的行与列，起始时的面对方向（东E，南S，西W，北N），数与数，数与字母之间均用一个空格隔开。终点的面向方向是任意的。 输出格式一个整数，表示机器人完成任务所需的最少时间。如果无法到达，输出-1。 输入输出样例输入样例#1： 12345678910119 100 0 0 0 0 0 1 0 0 00 0 0 0 0 0 0 0 1 00 0 0 1 0 0 0 0 0 00 0 1 0 0 0 0 0 0 00 0 0 0 0 0 1 0 0 00 0 0 0 0 1 0 0 0 00 0 0 1 1 0 0 0 0 00 0 0 0 0 0 0 0 0 01 0 0 0 0 0 0 0 1 07 2 2 7 S 输出样例#1： 112 本题思路不难，无非就是广搜的一步变成123步或者转向而已，麻烦的是对地图的理解……本人写的时候卡了2小时在地图的处理，然后才A掉。 还有坑点，就是起点可能和终点重合，需要特判。 对地图的理解： 一开始我采用了化格子为点的做法，先弄个可行点地图再搞，然而WA了，只好换。 后来我用的就是AC的做法，在图上制造虚空点，每个点四周的4个格子都得是0才能通过，只要有一个是1就过不了。 附代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;struct node&#123; int x,y,face; friend bool operator ==(const node a,const node b) &#123; if(a.x!=b.x) return false; if(a.y!=b.y) return false; if(a.face!=b.face) return false; return true; &#125;&#125;st,di,fx[4];queue&lt;node&gt;q;char dire;int n,m,ans[60][60]=&#123;0&#125;;bool d[60][60]=&#123;false&#125;,v[60][60][4]=&#123;false&#125;;void spfa()&#123; int &amp;sum=ans[di.x][di.y]; q.push(st); v[st.x][st.y][st.face]=true; while(!q.empty()) &#123; node t=q.front(); q.pop(); v[t.x][t.y][t.face]=false; for(int i=0;i&lt;4;i++) &#123; int ti; node tmp=t; tmp.face=i; if(tmp.face+t.face==3) ti=2; else if(tmp.face==t.face) ti=0; else ti=1; ti++; for(int j=0;j&lt;3;j++) &#123; tmp.x+=fx[i].x; tmp.y+=fx[i].y; if(tmp.x&lt;1||tmp.y&lt;1||tmp.x&gt;=n||tmp.y&gt;=m) break; if(d[tmp.x][tmp.y]||d[tmp.x-1][tmp.y]||d[tmp.x][tmp.y-1]||d[tmp.x-1][tmp.y-1]) break; if(tmp.x==st.x&amp;&amp;tmp.y==st.y) continue; int temp=ans[t.x][t.y]+ti; if(sum&amp;&amp;temp&gt;=sum) break; if(!ans[tmp.x][tmp.y]||temp&lt;ans[tmp.x][tmp.y]) &#123; ans[tmp.x][tmp.y]=temp; if(!v[tmp.x][tmp.y][tmp.face]) &#123; v[tmp.x][tmp.y][tmp.face]=true; q.push(tmp); &#125; &#125; &#125; &#125; &#125;&#125;void set()&#123; fx[0].x=-1,fx[0].y=0; fx[1].x=0,fx[1].y=-1; fx[2].x=0,fx[2].y=1; fx[3].x=1,fx[3].y=0; cin&gt;&gt;n&gt;&gt;m; for(int i=0;i&lt;n;i++) for(int j=0;j&lt;m;j++) scanf("%d",&amp;d[i][j]); cin&gt;&gt;st.x&gt;&gt;st.y&gt;&gt;di.x&gt;&gt;di.y&gt;&gt;dire; if(dire=='N') dire=0; else if(dire=='W') dire=1; else if(dire=='E') dire=2; else if(dire=='S') dire=3; di.face=st.face=dire;&#125;int main()&#123; set(); if(st==di) &#123; cout&lt;&lt;0; return 0; &#125; spfa(); if(ans[di.x][di.y]) cout&lt;&lt;ans[di.x][di.y]; else cout&lt;&lt;-1; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>Luogu</tag>
        <tag>题解</tag>
        <tag>bfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ノーゲームノーライフ ゼロ 观影体验]]></title>
    <url>%2Fdiary%2F20180311%2F</url>
    <content type="text"><![CDATA[「向遗志起誓」 啊啊，怎么说呢，算是从寒假开始就想看了吧。但是拖到这周周二才把动画本编补完，小说也堪堪起步。本来昨天就打算腾出 2 小时的时间来看的，但是林林总总事情不少（详见上一篇文章），于是便拖到了今天。再加上我妹这两天体调不佳，于是便与她一起，下午用 2 小时（她没看过本编要我慢慢解释）的时间看完了该剧场版。 那么，以下有剧透，未看过的各位请慎重往下看。 这是未看过小说，仅看过动画本编的人，的视角。 故事开始便是男主利库（人类）被毁了家乡，然后与女主休比（机凯种）远距离相看见。这该是最初的相遇了，也与后面女主自称是毁了男主家乡的罪魁祸首相呼应。 之后开始解释本片视角，原来是唯一神特图在向兽人种的伊纲陈述这个故事，这个发生在 6000 年前，悠久大战终结之时的故事。 叙述的开篇，利库等 3 人遇到了地精种的特殊设备，在记录过程中却有危险来临，不得不命令一人去死。回据点后，该死去的人是一个萝莉的父亲，利库遭到了萝莉的怨恨发言，回屋后自己也是很难过，在为自己的无能而发怒。 之后，利库在探险过程中偶然来到森精种旧都（就是被吉普莉尔一个天击毁掉的地方），在这里发生了男女主第一次正式相遇。结果刚一相遇就爆发了重大糟糕台词啊2333，有兴趣的请自行观看，太糟糕了不便透露。 然后休比申请对局（结果当然输了），于是被利库带回人类据点。然后又是一堆污的事情……不对，是休比向利库陈述了自己的目的——了解「心」。接下来有一起洗澡，呸，是利库给休比擦澡。期间利库的姐姐进了房间，发现了一根休比遗留的头发，扯不断。此时姐姐应该已经发现休比是机凯种了。 三个字，瞬间一年后。 利库和休比一同前往相遇的地方，在那里却遭遇了森精种研发的「虚空第零加护」，休比被打中，之后却复制了该招式接近 10% 的威力打破了关上的门成功和利库一起逃出。然后就是卿卿我我的狗粮，期间利库也渐渐打开内心。 回据点之后利库开始和休比研究地图，企图搞点大新闻。 好景不长，在地精种对龙精种的攻击中，人类受到了波及。结果利库还趁机套路了一把他姐姐，真是这种时候还有这种闲心啊2333 利库把首领大位交给姐姐后，开始和其他人谋划「幽灵」行动，引导上位种族休战，并引导其在指定地点开战，计划利用 32 个『典开』「通行规制」把能量引导到贯穿星球，然后利库取得「星杯」来结束这场悠久之战。 宣布完此事，本片开始最后一段不虐的狗粮——利库向休比求婚了！求婚了！！！ 然后利库向兽人种透露了地精种拥有「水爆」的事情，又去森精种那里下棋，故意输掉讨取情报。但为了不被森精种发现自己是人类，用了很多「黑灰」来掩盖自己的精灵回廊气息，让森精种的克莱布误以为自己是上位种族，不敢贸然动武。 顺利讨取情报后，利库却因黑灰在身上过久而被侵染严重，不得不截肢了。 在临时营地里利库过于劳累晕倒了，醒来后休比依旧劝他休息，一来二去利库就睡了。 这是利库和休比的永别。高虐开始。 休比为了节约时间，一个人去设置『典开』「通行规制」，结果只设置了一个（目前共24个）就被吉普莉尔发现了，打了起来，休比不敌，开始申请和连接体同步数据，却一直被驳回，隔了好一会才被接受了。于是休比开大，立志坚持 251 秒到同步结束。最终还是被吉普莉尔打爆了，在最后关头同步完成，休比被「天击」秒了。 这段别看我简单描述过去了，其实是因为太虐了！！！简直就是吉普莉尔掉粉时间啊！！！高虐！！！ 因为休比挂了，利库也十分难受，要自杀的时候，机凯种中连接体的一员来到利库面前，声明剩余8个不可能设置完成，请求修正策略。利库做出了决定。 机凯种在僵持之处模仿天翼种使用「天击」诱发各方全弹发射，并成功引导能量偏移。机凯种使用第十一连接体全员4807体承接了这股能量，并将其同步给利库所在的『真典』「弑星者」，成功贯穿星球，使得星杯显现，利库的身体却因消耗过度了，被星杯周围的黑灰所侵蚀，不能靠近。绝望之下利库只得祈祷，人生第一次，也是最后的祈祷，祈祷游戏之神能现身取得星杯。最终的最终，游戏之神因为利库的信仰而成形，取得星杯，成为唯一神，重塑世界。 这段也是巨虐啊！ 啊，到此为止了，真是让我和我妹都哭惨了。 向全体机凯种致以最高的敬意。 以下是部分个人感想吧。 利库和休比，怎么看都是空白的前世啊。（虽然作者说不是不过不瞎都能看出来吧） 想看动画第二季啊，也想补小说，但是作业还没写完，还是省省吧2333 好，到此为止吧。 「向盟约起誓」]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[20180310 随录]]></title>
    <url>%2Fdiary%2F20180310%2F</url>
    <content type="text"><![CDATA[今日早上8点起床了。 哎呀，前一天是真的累，结果还折腾到快1点，所以早上不得不睡到8点再起来了。 然后日常，吃完饭后就去公寓305准备面试了。结果到场才不到8点40分，只有lyh在场，又等了很久才等到游神等。 9点就开始面试了。我还是第一个啊2333被问了基础、时间安排，甚至还有梦想之类的xs 然后9点5分就出来了，发生了一点小意外——居然碰到了自主招生的时候同组的同学，不仅面试同组体测也同组的xsj同学。他现在在信科。机缘巧合之下居然在之前就加好了qq。他还高呼“原来cgp就是你啊”。缘分啊缘分。 之后回寝室，居然忘记充电了，结果60多的电到中午2点多点就没电了哭哭。 10点多和wise相约一起去前一天和同年几位约好的芙蓉湖小广场，结果发现哇游客真的多，周六周日恐怖如斯。之后等几位，陈总没空来，一盆基本上踩点，之后是琛，再是弘哥。然后说人太多了，于是先去吃饭。 出了西村校门，来到富万邦，然后决定吃杨国福。但是好像没什么东西能吃啊，还不如云霄的，随便点点21块就完了。 然后去未开放的南校门（不同于大南校门），但是没地方摆手机，于是又前往化院校门，进去一看是上弦场的一边（另一边靠白城）。真是打开了新世界的大门。 然后在上弦场的中轴线录像，录了一会，聊了会天，wise就去做家教了。剩下的我们就去经院咖啡厅休息，我还点了卡布奇诺，15块啊。不过总算明白经院咖啡厅怎么识别同学和游客了——只能校园卡支付，不支持其它方式。 啊，3点多就各自散了，4点刚过的时候到了寝室，然后休息，一不小心就5点半多了，去二期吃晚饭，紫菜汤好料啊，还有辣包菜。 晚上就休闲了，也没什么大事，摸了。]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1388 算式 题解]]></title>
    <url>%2Fanswer%2Fluogu-p1388%2F</url>
    <content type="text"><![CDATA[Luogu P1388 算式 题解 题目描述给出N个数字，不改变它们的相对位置，在中间加入K个乘号和N-K-1个加号，（括号随便加）使最终结果尽量大。因为乘号和加号一共就是N-1个了，所以恰好每两个相邻数字之间都有一个符号。例如： N=5, K=2，5个数字分别为1、2、3、4、5，可以加成： 1*2*(3+4+5)=24 1*(2+3)*(4+5)=45 (1*2+3)*(4+5)=45 …… 输入输出格式输入格式输入文件共有二行，第一行为两个有空格隔开的整数，表示N和K，其中(2&lt;=N&lt;=15, 0&lt;=K&lt;=N-1)。第二行为 N个用空格隔开的数字（每个数字在0到9之间）。 输出格式输出文件仅一行包含一个整数，表示要求的最大的结果 最后的结果&lt;=maxlongint 输入输出样例输入样例#1： 125 21 2 3 4 5 输出样例#1： 1120 如果可以改变顺序，一个最大堆就解决了。 奈何不能改变相对顺序，于是采用dp。 用ans[i][j]表示在前i个数的序列中插入j个乘号的最优解。由于乘号和加号数量之和为n-1，所以当乘号数量确定后，加号数量也唯一确定。 之后可以发现，因为不能改变顺序，所以在前i个数中插入乘号后，剩下的连续序列必然相加。故有状态转移方程： 1ans[i][j]=max(ans[i][j],ans[t][j-1]*(a[i]-a[t])) 其中t表示前i个数中某个小于i的位置，ans[t][j-1]表示在前i个数构成的序列中的一段由前t个数构成的子序列里插入j-1个乘号的最优解。 附代码 1234567891011121314151617181920#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;int main()&#123; int n,k,a[20],ans[20][20]=&#123;0&#125;; cin&gt;&gt;n&gt;&gt;k; for(int i=1;i&lt;=n;i++) &#123; cin&gt;&gt;a[i]; if(i-1) a[i]+=a[i-1]; ans[i][0]=a[i]; &#125; for(int i=2;i&lt;=n;i++) for(int j=1;j&lt;=min(k,i-1);j++) for(int t=j;t&lt;i;t++) ans[i][j]=max(ans[i][j],ans[t][j-1]*(a[i]-a[t])); cout&lt;&lt;ans[n][k]; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>Luogu</tag>
        <tag>题解</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2085 最小函数值 题解]]></title>
    <url>%2Fanswer%2Fluogu-p2085%2F</url>
    <content type="text"><![CDATA[Luogu P2085 最小函数值 题解 题目描述有n个函数，分别为F1,F2,…,Fn。定义Fi(x)=Ai*x^2+Bi*x+Ci (x∈N*)。给定这些Ai、Bi和Ci，请求出所有函数的所有函数值中最小的m个（如有重复的要输出多个）。 输入输出格式输入格式第一行输入两个正整数n和m。以下n行每行三个正整数，其中第i行的三个数分别位Ai、Bi和Ci。Ai&lt;=10，Bi&lt;=100，Ci&lt;=10 000。 输出格式输出将这n个函数所有可以生成的函数值排序后的前m个元素。这m个数应该输出到一行，用空格隔开。 输入输出样例输入样例#1： 12343 104 5 33 4 51 7 1 输出样例#1： 19 12 12 19 25 29 31 44 45 54 说明数据规模：n,m&lt;=10000 方案1：暴力枚举。数据小了能过，但是肯定会T几个点。 方案2：采用最小堆。 保存每个函数的fi(1)值为sum，num为fi(x)中的i，step为fi(x)中的x。全部入队。 每次取队首元素，保存为t，然后pop()。 输出t.sum（此时已经是最小），t.step++（自变量+1）， t.sum=a[t.num]t.stept.step+b[t.num]*t.step+c[t.num];（求值），push(t); 重复，直到执行了m次。 值得注意的是，此处采用了自定义类型，但普通优先队列并不支持自定义类型，只支持基本类型。此时需要重载运算符。1friend bool operator&lt;(const rbq u,const rbq o)&#123;return u.sum&gt;o.sum;&#125; 附代码12345678910111213141516171819202122232425262728293031#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;queue&gt;using namespace std;struct rbq&#123; int num,sum,step; friend bool operator&lt;(const rbq u,const rbq o)&#123;return u.sum&gt;o.sum;&#125;&#125;t;priority_queue&lt;rbq&gt;q;int n,m,a[10010],b[10010],c[10010];int main()&#123; cin&gt;&gt;n&gt;&gt;m; for(int i=0;i&lt;n;i++) &#123; scanf("%d %d %d",&amp;a[i],&amp;b[i],&amp;c[i]); t.num=i;t.sum=a[i]+b[i]+c[i];t.step=1; q.push(t); &#125; while(m--) &#123; t=q.top(); q.pop(); cout&lt;&lt;t.sum&lt;&lt;" "; t.step++; t.sum=a[t.num]*t.step*t.step+b[t.num]*t.step+c[t.num]; q.push(t); &#125; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>Luogu</tag>
        <tag>题解</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HDU P1253 胜利大逃亡 题解]]></title>
    <url>%2Fanswer%2Fhdu-p1253%2F</url>
    <content type="text"><![CDATA[HDU P1253 胜利大逃亡 题解 卡常数神题 Problem DescriptionIgnatius被魔王抓走了,有一天魔王出差去了,这可是Ignatius逃亡的好机会. 魔王住在一个城堡里,城堡是一个A*B*C的立方体,可以被表示成A个B*C的矩阵,刚开始Ignatius被关在(0,0,0)的位置,离开城堡的门在(A-1,B-1,C-1)的位置,现在知道魔王将在T分钟后回到城堡,Ignatius每分钟能从一个坐标走到相邻的六个坐标中的其中一个.现在给你城堡的地图,请你计算出Ignatius能否在魔王回来前离开城堡(只要走到出口就算离开城堡,如果走到出口的时候魔王刚好回来也算逃亡成功),如果可以请输出需要多少分钟才能离开,如果不能则输出-1. Input输入数据的第一行是一个正整数K,表明测试数据的数量.每组测试数据的第一行是四个正整数A,B,C和T(1&lt;=A,B,C&lt;=50,1&lt;=T&lt;=1000),它们分别代表城堡的大小和魔王回来的时间.然后是A块输入数据(先是第0块,然后是第1块,第2块……),每块输入数据有B行,每行有C个正整数,代表迷宫的布局,其中0代表路,1代表墙.(如果对输入描述不清楚,可以参考Sample Input中的迷宫描述,它表示的就是上图中的迷宫) 特别注意:本题的测试数据非常大,请使用scanf输入,我不能保证使用cin能不超时.在本OJ上请使用Visual C++提交. Output对于每组测试数据,如果Ignatius能够在魔王回来前离开城堡,那么请输出他最少需要多少分钟,否则输出-1. Sample Input123456789101113 3 4 200 1 1 10 0 1 10 1 1 11 1 1 11 0 0 10 1 1 10 0 0 00 1 1 00 1 1 0 Sample Output111 从50*50*50的范围来看，显然dfs是不现实的，故采用bfs。那既然都用bfs了，当然是祭出spfa大法。 本题最大坑点在于，要么高度耦合，要么要内联，总之就是常数要优化到极致，不然就T，果断T。说明已附在code里。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include&lt;iostream&gt;#include&lt;cstdio&gt;#include&lt;cstring&gt;#include&lt;queue&gt;using namespace std;queue&lt;int&gt;qa,qb,qc;bool d[60][60][60],v[60][60][60];int ans[60][60][60],k,a,b,c,t;//50*50*50，故开60*60*60 inline void add(int aa,int bb,int cc)&#123; qa.push(aa); qb.push(bb); qc.push(cc);//入队 v[aa][bb][cc]=true;//标记已用 &#125;inline void cut(int aa,int bb,int cc)&#123; qa.pop(); qb.pop(); qc.pop();//出队 v[aa][bb][cc]=false;//取消标记 &#125;inline bool check(int aa,int bb,int cc,int sum)&#123; if(!aa&amp;&amp;!bb&amp;&amp;!cc) return false;//1、不是起点 if(aa&lt;0||bb&lt;0||cc&lt;0) return false;//2、不能向下越界 if(aa&gt;=a||bb&gt;=b||cc&gt;=c) return false;//3、不能向上越界 if(v[aa][bb][cc]) return false;//4、不能是已经使用过的点 if(d[aa][bb][cc]) return false;//5、不能是墙 int tmp=ans[aa][bb][cc]; if(tmp&amp;&amp;sum&gt;=tmp) return false;//6、目前计算所得值必须比已有最优解更优，否则走人 return true;//都通过了，合格了 &#125;inline void direct(int aa,int bb,int cc,int sum)&#123; if(!check(aa,bb,cc,sum)) return;//如果不可行，不再计算 ans[aa][bb][cc]=sum;//更新值 if(!(aa==a-1&amp;&amp;bb==b-1&amp;&amp;cc==c-1)) add(aa,bb,cc);//如果被更新点不是终点，入队 &#125;void spfa()&#123; while(!qa.empty())//当队列非空 &#123; int ta=qa.front(),tb=qb.front(),tc=qc.front();//取值 cut(ta,tb,tc);//出队 int sum=ans[ta][tb][tc]+1;//计算当前最优解 direct(ta-1,tb,tc,sum); direct(ta+1,tb,tc,sum); direct(ta,tb-1,tc,sum); direct(ta,tb+1,tc,sum); direct(ta,tb,tc-1,sum); direct(ta,tb,tc+1,sum);//判断6个方向 &#125;&#125;int main()&#123; freopen("in.txt","r",stdin);//文件读入，节省调试时输入的时间 scanf("%d",&amp;k);//输入数据组数 while(k--)//循环k次 &#123; memset(v,0,sizeof(v));//初始化标记数组 memset(d,0,sizeof(d));//初始化地图 memset(ans,0,sizeof(ans));//初始化答案数组 scanf("%d %d %d %d",&amp;a,&amp;b,&amp;c,&amp;t);//输入 for(int i=0;i&lt;a;i++) for(int j=0;j&lt;b;j++) for(int z=0;z&lt;c;z++) scanf("%d",&amp;d[i][j][z]);//输入 add(0,0,0);//将起点入队 spfa();//搜索 int answer=ans[a-1][b-1][c-1];//取终点答案，直接访问三维数组耗时太长，故新建一个变量用于保存 if(!answer||answer&gt;t) printf("-1\n");//如果答案还是初始值，或答案大于规定时间，则无法 else printf("%d\n",answer);//输出可行答案 &#125; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>HDU</tag>
        <tag>SPFA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[20180304 随录]]></title>
    <url>%2Fdiary%2F20180304%2F</url>
    <content type="text"><![CDATA[啊，又是回校的日子了。 周末做了什么？似乎也没做什么，无非是打打隔膜，氪氪金，不得已时候写写作业，睡个好觉，如是而已。 下周就acm面试了，不能回家。还好妹妹也开学了，也算有个照应（虽然远了点）。 该做什么呢？ 写个爬七天的爬虫，写个爬本网站、提供更新信息的爬虫，好好准备六级，好好学习数学。 该是这样了吧。]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[20180303 随录]]></title>
    <url>%2Fdiary%2F20180303%2F</url>
    <content type="text"><![CDATA[啊，好想学习啊。 其实还是想打4y。 不过总是要认真学习吧？2333]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[狗年元宵随录]]></title>
    <url>%2Fdiary%2F20180302%2F</url>
    <content type="text"><![CDATA[啊，这是狗年的第一次发文吧。 也是，我天天摸鱼，哪来的时间刷题写题解之类的啊2333 开学的第一周要过去了，今天周五，也是元宵节，正好应该回去过节了。 差点买不到票啊……不过还好用转车之法多花点钱还能回去，不然就独在异乡为异客了2333 周五，没发生什么大事。最大的感受，可能就是设计心理学真好玩，软件竞赛渣渣，略略略。 上学期的排名昨天也出了，顺位92%，绝了啊，不过卓越毕竟还是看专业和数学，问题不大（ 艾尔基本也都99了，活动也打完了，我也该休息一下，留给妹妹玩吧。 啊啊，好像也没什么说的了。 诸君，学习吧。 我也去写大物和微积分了。]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[20180211 随录]]></title>
    <url>%2Fdiary%2F20180211%2F</url>
    <content type="text"><![CDATA[一点点记录 cbs 超越 5/5 5/20 98 约一半 dw 超越 5/5 0/20 97 约一半 交织together 约50s 伟明家走了一圈 kf家走了一圈]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[2018年1月月赛 工作分配问题 题解]]></title>
    <url>%2Fanswer%2Fyxyz201801-04%2F</url>
    <content type="text"><![CDATA[2018年1月月赛 工作分配问题 题解 题目描述设有 n 件工作分配给 n 个人。将工作 i 分配给第 j 个人所需的费用为c[i][j] 。试设计一个算法，为每一个人都分配 1 件不同的工作，并使总费用达到最小。 输入输出格式输入格式第一行有 1 个正整数 n 。接下来的 n 行，每行 n 个正整数，表示工作费用。 输出格式一行，包含一个正整数，为计算出的最小总费用。 输入输出样例输入样例#1： 1234310 2 32 3 43 4 5 输出样例#1： 19 说明对于100%的数据，1&lt;=n&lt;=20，1&lt;=c[i][j]&lt;=100。 分析数据，发现最大数据为所有c[i][j]的和。而格子数最大只有n*n=400，每个c[i][j]最大只有100，故最大数据不大于40000，可以采用int类型。 本题也有网络流解法，但网络流解法思维难度过大，不予讨论。 采用dfs解决本问题。 代码：1234567891011121314151617181920212223242526272829303132333435363738394041#include&lt;cstdio&gt;#include&lt;iostream&gt;using namespace std;bool v[30]=&#123;false&#125;;long long ans=0;int c[30][30],n;void dfs(int x,int sum)&#123; if(x&gt;n) &#123; if(sum&lt;ans) ans=sum; return; &#125; if(ans&gt;sum) &#123; for(int i=1;i&lt;=n;i++) &#123; if(!v[i]) &#123; v[i]=true; dfs(x+1,sum+c[x][i]); v[i]=false; &#125; &#125; &#125;&#125;int main()&#123; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) &#123; for(int j=1;j&lt;=n;j++) &#123; cin&gt;&gt;c[i][j]; ans+=c[i][j]; &#125; &#125; dfs(1,0); cout&lt;&lt;ans; return 0;&#125; 采用ans先存储所有c[i][j]的和，这里也可以将ans初始化为一个远大于40000的值。 用v数组保存工作分配情况，v[i]=true表示第i件工作已经被分配，v[i]=false表示第i件工作未被分配。 用dfs函数来执行深搜。dfs函数带有两个参量，其中x表示现在正在被分配工作的人的编号，sum表示目前总花费。 当x&gt;n时表示人已经被枚举完了，此时判断sum是否小于已有答案ans，若是，则表示产生了更优解，更新ans的值。 如果数据简单的话，到这里就可以过了。但本题数据较为复杂，需要剪枝。 不论当前枚举到第几个人，只要当前sum&gt;=ans，就表示最终的sum不会比ans小，不会产生更优的解答。所以当且仅当ans&gt;sum的时候继续递归。]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>云霄一中月赛</tag>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年1月月赛 子数整数 题解]]></title>
    <url>%2Fanswer%2Fyxyz201801-03%2F</url>
    <content type="text"><![CDATA[2018年1月月赛 子数整数 题解 题目背景zc趁着大家都在hanoi，偷偷跑来研究五位数了！ 题目描述对于一个五位数a1a2a3a4a5，可将其拆分为三个子数： sub1=a1a2a3 sub2=a2a3a4 sub3=a3a4a5 例如，五位数20207可以拆分成 sub1=202 sub2=020（=20） sub3=207 现在给定一个正整数K，要求你编程求出10000到30000之间所有满足下述条件的五位数，条件是这些五位数的三个子数sub1，sub2，sub3都可被K整除。 输入输出格式输入格式一行，包含一个正整数K。 输出格式输出的每一行为一个满足条件的五位数，要求从小到大输出。不得重复输出或遗漏。 如果无解，则输出”No”。 输入输出样例输入样例#1： 115 输出样例#1： 123422555255552855530000 说明对于100%的数据，1&lt;=k&lt;=1000。 枚举10000~30000之间的所有整数，并将其拆分成三块，逐块判断即可。 代码：12345678910111213141516171819202122232425262728#include&lt;cstdio&gt;#include&lt;iostream&gt;using namespace std;int main()&#123; bool p=true; int k; cin&gt;&gt;k; for(int i=10000;i&lt;=30000;i++) &#123; int s1=i/100,s2=i/10%1000,s3=i%1000; if(s1%k) &#123; i+=99; continue; &#125; if(s2%k) &#123; i+=9; continue; &#125; if(s3%k) continue; cout&lt;&lt;i&lt;&lt;endl; p=false; &#125; if(p) cout&lt;&lt;"No"; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>模拟</tag>
        <tag>云霄一中月赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年1月月赛 复仇的汉诺塔 题解]]></title>
    <url>%2Fanswer%2Fyxyz201801-02%2F</url>
    <content type="text"><![CDATA[2018年1月月赛 复仇的汉诺塔 题解 题目背景汉诺塔觉得自己不被mh和cl尊重，决定发动复仇！ 它把mh和cl困在了古印度圣庙中，并告诉wy，如果不能输出最少搬动的方案，那mh和cl就再也出不来了！ 题目描述题目的要求是输出最少搬动方案。 输入输出格式输入格式一行，包含一个整数n，即为盘子数n，n为正整数，且最大值为10 输出格式若干行。每一行格式如下： Step i:X -&gt; Y 其中，i为第i步，从1开始计算。 X，Y为A、B、C中某一个值。 输入输出样例输入样例#1： 11 输出样例#1： 1Step 1:A -&gt; C 说明对于100%的数据，1&lt;=n&lt;=20。 裸的递归，没什么好说的。 代码：12345678910111213141516171819202122#include&lt;cstdio&gt;#include&lt;iostream&gt;using namespace std;int sum=1;void move(char x,char y)&#123;printf("Step %d:%c -&gt; %c\n",sum++,x,y);&#125;void hanoi(int n,char from,char temp,char destination)&#123; if(n==1) move(from,destination); else &#123; hanoi(n-1,from,destination,temp); move(from,destination); hanoi(n-1,temp,from,destination); &#125;&#125;int main()&#123; int n; cin&gt;&gt;n; hanoi(n,'A','B','C'); return 0;&#125; 在上述代码中，我们在hanoi函数里定义了剩余盘子数量n，起始盘子位置from，中转盘子位置temp，目标盘子位置destination。 在每一步移动中，都可以分成两部分，一部分是最下面的那个盘子，一部分是剩下的盘子。每一步都可以看成先将剩下的盘子全部移动到其中转位置，再将最下面的盘子移动到其目标位置。每当发生最下面的盘子被移动到其目标位置时就输出。递归操作即可。]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>模拟</tag>
        <tag>云霄一中月赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年1月月赛 打卡的汉诺塔 题解]]></title>
    <url>%2Fanswer%2Fyxyz201801-01%2F</url>
    <content type="text"><![CDATA[2018年1月月赛 打卡的汉诺塔 题解 题目背景比赛总是需要打卡题~~ 题目描述mh和cl最近玩起了汉诺塔。 相传在古印度圣庙中，有一种被称为汉诺塔(Hanoi)的游戏。该游戏是在一块铜板装置上，有三根杆(编号A、B、C)，在A杆自下而上、由大到小按顺序放置64个金盘。 游戏的目标：把A杆上的金盘全部移到C杆上，并仍保持原有顺序叠好。 操作规则：每次只能移动一个盘子，并且在移动过程中三根杆上都始终保持大盘在下，小盘在上，操作过程中盘子可以置于A、B、C任一杆上。现有n个盘子，有A、B、C三个柱子。 mh认为汉诺塔有最优解，而cl认为没有，这可怎么办呢？请你帮忙算算吧。 输入输出格式输入格式一行，包含一个正整数n，表示A柱子上有的盘子数量。 输出格式一行，包含一个整数，表示最少需要的步数。 输入输出样例输入样例#1： 12 输出样例#1： 13 说明对于60%的数据，1&lt;=n&lt;=32。 对于100%的数据，1&lt;=n&lt;=64。 样例说明： 按A-&gt;B，A-&gt;C，B-&gt;C的方式即可三步完成。 通过手推n=1,2,3,4的情况，可以发现ans=pow(2,n)-1，故答案最大为2^64-1。 观察数据范围，发现n&lt;=64。 因为int范围-2^31~2^31-1 long long范围-2^63~2^63-1 unsigned long long范围0~2^64-1 所以选用unsigned long long。 但又因为pow函数返回值为double类型，浮点数类型在数字很大时会发生浮点误差，因此用pow只能80分。故采用循环。 代码：123456789101112#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;int main()&#123; unsigned long long ans=1,n; cin&gt;&gt;n; for(int i=1;i&lt;=n;i++) ans*=2; ans--; cout&lt;&lt;ans; return 0;&#125; 在上述代码中，我们发现，极端情况时ans=2^64，超过unsigned long long的0~2^64-1的范围，发生向上溢出（上溢），此时变为(2^64)-1-(2^64-1)=0。 之后又发生ans–，ans本该变为-1，但因为超过unsigned long long的0~2^64-1的范围，发生向下溢出（下溢），此时变为(-1)+1+(2^64-1)=2^64-1，即是答案。]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>题解</tag>
        <tag>数论</tag>
        <tag>云霄一中月赛</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P1001 A+B Problem Python 题解]]></title>
    <url>%2Fanswer%2Fluogu-p1001%2F</url>
    <content type="text"><![CDATA[A+B没什么好说的…… 直接上Code 12a,b=(int(x) for x in input().split(' '))print (a+b)]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Luogu</tag>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2017へのさよなら]]></title>
    <url>%2Fdiary%2Fend-of-2017%2F</url>
    <content type="text"><![CDATA[2017也算是过去了，聊表感想。 PART1不知不觉 2017 已经过去了。 实话实说，2017年，真是对我来说人生中重要的一年。经历了严酷的高三总复习，参加了大大小小的模拟考试（省质检一竟然还漏题了，笑），直到高考，直到来到 XMU，直到…… 也算是命中注定吧，为了冲 XMU 经院，放着自招 20 分不用，报了普通本一批，第一志愿经院，第二志愿软院。但是在 FJ，经院收到 597 分，而我才考了 596，因而还是来了软院。 若是我当时多考一分，现在又如何呢？ PART2除了正式的学业之外，我还参加了一些可做可不做的事。 云一 OI 培训 云一日语部 N3 考试 等等 但是结果？ NOIP2017 无人通过初赛 集训学员学习热情忽高忽低 日语部成员竟然因为一个人退部了就热情降到冰点 N3 考试尚无结果 又有什么事情成功了呢？只是我的一厢情愿吗？ PART3在XMU软院，似乎借着 FJTG2= 的基础，大有风生水起之势。但 lyh，YJQAQ，hiijar，都能在专业水平方面甩我若干条街。我能做些什么？怕是只有学习。 即使是学习，也面临我长期以来的问题：听不下课。 小学时期，我发现课不难，上课写作业的话回家可以有更多时间玩。于是一发不可收拾，直到高中毕业我都贯彻落实这一点。这直接造成我现在只有在上课时候才能写作业，也只有写作业才能保证清醒，否则我一旦认真听课，立刻睡着。 长期以来的习惯，如今被婊了。 我曾经也试过改，然后就睡着了，根深蒂固。 但是我能怎么办呢？我就想上课睡觉吗？我就不想改吗？ PART412.30 去了上海，在浦东赶星尘宝宝的演唱会，然后去松江找同学玩。 从松江到外滩，真的蛮久的，用时好像在 2 小时？结果见到了重度污染的东方明珠，还因为地铁要封站而匆匆赶回。次日早上兜兜转转，虽然中午开心地聚餐了，但是飞机险些来不及，唉，虹桥居然提前 20 分钟截停，还是高崎 15 分钟截停好。 只有照片，留下了一点回忆。 PART5想起一句名言？也许不算名言。 “未来永远在手中，手中抓不住的是过去”。 似乎没什么事情的 2017，已经抓不住了。 那么，再见。]]></content>
      <categories>
        <category>diary</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[本站建站指导]]></title>
    <url>%2Fothers%2FMyWebsiteGuide%2F</url>
    <content type="text"><![CDATA[本站建站指导 安装本地配置 注册 github 账号，并新建一个 github 仓库（Repositories） 该仓库命名为你的 github 用户名+.github.io 比如我的 github 用户名是 Ringoer，那我的仓库名就叫 Ringoer.github.io 如果不这么写，你的博客会被放到子路径下，不能使用根路径直接访问 下载 node.js。 https://nodejs.org/en/download/ 安装 git。 https://git-for-windows.github.io/ 鼠标右键安装 node.js 的地方，进入 nodemudule 文件夹，选择 Git Bash，使用以下命令安装 hexo 12npm install hexo-cli -gnpm install hexo-deployer-git --save 最新版 nodejs 不需要 –save 参数 创建放置博客文件的文件夹：hexo 文件夹，如 E:\hexo。最好不在中文目录下。 注意：以后进行 hexo 操作都要进入到此文件夹中；对于 git 操作，若无特殊说明，则也进入到此文件夹中（在此文件夹中启动 Git Bash） 进入 E:\hexo文件夹，鼠标右键选择“Git Bash”，执行以下命令，初始化 hexo，这时候会在该文件夹中创建网站所需要的文件 123hexo initnpm installhexo g 此时已经可以在本地访问。在Git Bash中输入命令： 1hexo s 访问 127.0.0.1:4000 或 localhost:4000 即可看到网页预览。 布置到 github 上。 启动 Git Bash，输入以下命令： 12git config --global user.name "your name"git config --global user.email your_email@youremail.com 其中每条命令的最后一个参数修改为自己的数据 输入命令： 1ssh-keygen -t rsa -C ringoer@qq.com 此时会生成 ssh 密钥。命令中邮件地址替换为自己的。 输入命令： 1cat ~/.ssh/id_rsa.pub 此时会在控制台显示一串密钥，复制下来。 打开 github，打开 settings，选择 SSH and GPG keys，选择New SSH key。 title 随便写，key 的文本则填写刚才复制出来的密钥，然后 add key。 输入命令： 1ssh -T git@github.com 上述命令不可修改 打开 hexo 文件夹中的 _config.yml，修改文档末尾的 deploy，示例如下： 因为 zzzq，现在新建的 repository 的默认 branch 已经变成 main 了，记得检查一下是 master 还是 main 其中蓝色部分应替换成自己的链接。链接来源参考自己 github 仓库的链接（如图）： 注意：hexo 的配置文件中任何:后面都是带一个空格的。 输入命令 hexo g 和 hexo d 生成页面并部署到 github 上 绑定自己的域名 在 /hexo/source 文件夹中新建一个 CNAME 文件，然后里面添加自己的网站域名。 可以在 github 的 setting 中查看是否发布成功。 到自己的域名解析中添加 CNAME 值，解析到 username.github.io. (注意最后面有点) 个性化 下载主题。可以前往 Themes | Hexo 选择主题。 此处我选用 next 主题，Pisces 主题风格（默认为 Muse）。 修改 /themes/next 下的配置文件中的 schemes 字段。 取消需要的主题风格前的井字号，然后在之前的主题风格前加入井字号即可。 之后配置网站信息，如图。 底部信息。修改 /themes/next 下的配置文件中的 footer 字段。 文章缩略。修改 /themes/next 下的配置文件中的 auto_excerpt 字段。 enable 改成 true 即可。 也可以手动在每篇文章中添加 &lt;!--more--&gt; 字段，在该字段后的部分会被隐藏。 修改导航栏。修改 /themes/next 下的配置文件中的menu字段。 想要什么选项，就去掉其之前的井字号，或自己新加入一个。 ||左边是该项所用的路径 ||右边是该项所用的图标 菜单项图标。在 http://www.fontawesome.com.cn/icons-ui/ 中选择。取用时要去掉前缀 fa-。修改 /themes/next 下的配置文件中的menu字段。 取消页面动画。修改 /themes/next 下的配置文件中的 motion 字段。 enable: false即可 设置头像。修改 /themes/next 下的配置文件中的 avatar 字段。 须确认有 /source/images 文件夹（如没有则应新建），后在其中添加图片，如图写入路径即可。 该路径也可以是来自网络的图片路径。 设置社交媒体。修改 /themes/next 下的配置文件中的 social 字段。 icons_only 默认为 false，会显示各个图标的名字。若为 true 则仅有图标。 顶部加载进度条。修改 /themes/next 下的配置文件中的 pace 字段。 文章结尾标识。分为以下三个步骤。 打开 \themes\next\layout_macro 文件夹，新建文件 passage-end-tag.swig，向其中写入以下片段。 12345&lt;div&gt; &#123;% if not is_index %&#125; &lt;div style="text-align:center;color: #ccc;font-size:14px;"&gt;-------------It's the end.&lt;i class="fa fa-life-ring"&gt;&lt;/i&gt;Thanks for your read.-------------&lt;/div&gt; &#123;% endif %&#125;&lt;/div&gt; 打开 \themes\next\layout_macro\post.swig 文件，进行如图操作。 插入的文本如下： 12345&lt;div&gt; &#123;% if not is_index %&#125; &#123;% include 'passage-end-tag.swig' %&#125; &#123;% endif %&#125;&lt;/div&gt; 在 /themes/next 下的配置文件中加入以下字段。 123# 文章末尾添加“本文结束”标记passage_end_tag: enabled: true 添加外链网易云音乐。分为以下两个步骤。 访问网页版网易云，找到合适的歌曲/歌单，生成分享外链，复制 html 代码。 找到合适的位置插入这段代码。本博客插入在 \source\about\index.md 中图片的后面（如图）。 本地可视化编辑文章。启动 git bash，执行以下命令。 1npm i hexo-admin –save 之后执行 hexo s 时，访问 localhost:4000/admin 即可进入文章后台。 此处文章编辑使用 markdown。 文章置顶。把需要置顶的文章的发布时间改到200年之后（233333333）。 修改菜单中的选项名称。打开 \themes\next\language\zh-Hans.yml，找到 menu 字段，进行如图配置。 迁移 拷贝原有 hexo 文件夹至新电脑 重新配置 git 和 node.js 安装 hexo 1npm install hexo-cli -g 进入 hexo 文件夹，执行以下指令 1234npm installnpm install hexo-deployer-git --savenpm install hexo-generator-feed --savenpm install hexo-generator-sitemap --save 重新配置SSH密钥 正常使用 参考链接https://blog.csdn.net/qq_27754983/article/details/76143478https://www.jianshu.com/p/21c94eb7bcd1https://www.jianshu.com/p/393d067dba8dhttps://www.jianshu.com/p/9f0e90cc32c2https://blog.csdn.net/eternity1118_/article/details/71194395?ref=myread]]></content>
      <categories>
        <category>others</category>
      </categories>
      <tags>
        <tag>建站指导</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Luogu P2308 添加括号 题解及心得]]></title>
    <url>%2Fanswer%2Fluogu-p2308%2F</url>
    <content type="text"><![CDATA[Luogu P2308 添加括号 题解及心得 题目背景给定一个正整数序列a(1)，a(2)，…，a(n),(1&lt;=n&lt;=20) 不改变序列中每个元素在序列中的位置，把它们相加，并用括号记每次加法所得的和，称为中间和。 例如: 给出序列是4，1，2，3。 第一种添括号方法: ((4+1)+(2+3))=((5)+(5))=(10) 有三个中间和是5，5，10，它们之和为:5+5+10=20 第二种添括号方法 (4+((1+2)+3))=(4+((3)+3))=(4+(6))=(10) 中间和是3，6，10，它们之和为19。 题目描述现在要添上n-1对括号，加法运算依括号顺序进行，得到n-1个中间和，求出使中间和之和最小的添括号方法。 输入输出格式输入格式共两行。 第一行，为整数n。(1&lt; =n&lt; =20) 第二行，为a(1),a(2),…,a(n)这n个正整数，每个数字不超过100。 输出格式输出3行。 第一行，为添加括号的方法。 第二行，为最终的中间和之和。 第三行，为n-1个中间和，按照从里到外，从左到右的顺序输出。 输入输出样例输入样例#1： 1244 1 2 3 输出样例#1： 123(4+((1+2)+3))193 6 10 显然加括号过程是依赖最小中间和的，而最小中间和势必从一个区间中得出，故不难看出这是一个区间dp。 不难得出状态转移方程： 1f[i][j]=min(f[i][j],f[i][k]+f[k+1][j]+sum[j]-sum[i-1]) 解题思路： 先区间dp，逆向枚举i，正向枚举j，阶段k=i,k&lt;j。由于括号添加时要尽可能靠左，所以当新值&lt;=f[i][j]时即发生更新。 //求最小值时i逆序j正序，最大值时都正序 1234567891011for(i=n-1;i;i--)&#123; for(j=i+1;j&lt;=n;j++) &#123; for(k=i;k&lt;j;k++) &#123; int t=f[i][k]+f[k+1][j]+sum[j]-sum[i-1]; if(t&lt;=f[i][j]) f[i][j]=t,g[i][j]=k; &#125; &#125;&#125; 为了能解决第二问和第三问，令g[i][j]=k保存从下标i~j之间断点k的位置。 对于第二问，递归查找每个点左边有多少个左括号，右边有多少个右括号，然后输出。 12345678910111213141516void search(int x,int y)&#123; if(x==y) return; l[x]++; r[y]++; search(x,g[x][y]); search(g[x][y]+1,y);&#125;for(i=1;i&lt;=n;i++)&#123; for(j=0;j&lt;l[i];j++) printf("("); printf("%d",a[i]); if(r[i]==0&amp;&amp;i&lt;n) printf("+"); for(j=0;j&lt;r[i];j++) printf(")"); if(r[i]&gt;0&amp;&amp;i&lt;n) printf("+");&#125; 对于第三问，递归求每个中间和，然后输出。 1234567void dfs(int x,int y)&#123; if(x==y) return; dfs(x,g[x][y]); dfs(g[x][y]+1,y); ans[top++]=sum[y]-sum[x-1];&#125; 心得：虽然大部分区间dp是在最外层枚举阶段，但是偶尔也要像这题这样最内层枚举阶段吧。//还有可能是我没想到最外层枚举阶段的做法（小声）。 总之，終わり！ &lt;附送全篇代码&gt; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;stdio.h&gt;#include&lt;math.h&gt;#include&lt;string.h&gt;#include&lt;stdbool.h&gt;#define maxn(a,b) (a&gt;b)?a:b#define minn(a,b) (a&lt;b)?a:b#define maxnn(a,b,c) (a&gt;b&amp;&amp;a&gt;c)?a:((b&gt;a&amp;&amp;b&gt;c)?b:c)#define ll long longint a[30]=&#123;0&#125;,f[30][30],g[30][30],sum[30]=&#123;0&#125;,l[30],r[30],ans[30],top;void search(int x,int y)&#123; if(x==y) return; l[x]++; r[y]++; search(x,g[x][y]); search(g[x][y]+1,y);&#125;void dfs(int x,int y)&#123; if(x==y) return; dfs(x,g[x][y]); dfs(g[x][y]+1,y); ans[top++]=sum[y]-sum[x-1];&#125;int main()&#123; int n,i,j,k; while(scanf("%d",&amp;n)!=EOF) &#123; top=0; memset(ans,0,sizeof(ans)); memset(sum,0,sizeof(sum)); memset(a,0,sizeof(a)); memset(l,0,sizeof(l)); memset(r,0,sizeof(r)); memset(g,0,sizeof(g)); memset(f,1,sizeof(f)); for(i=1;i&lt;=n;i++) &#123; scanf("%d",&amp;a[i]); f[i][i]=0; &#125; for(i=1;i&lt;=n;i++) sum[i]=a[i]+sum[i-1]; for(i=n-1;i;i--) &#123; for(j=i+1;j&lt;=n;j++) &#123; for(k=i;k&lt;j;k++) &#123; int t=f[i][k]+f[k+1][j]+sum[j]-sum[i-1]; if(t&lt;=f[i][j]) f[i][j]=t,g[i][j]=k; &#125; &#125; &#125; search(1,n); for(i=1;i&lt;=n;i++) &#123; for(j=0;j&lt;l[i];j++) printf("("); printf("%d",a[i]); if(r[i]==0&amp;&amp;i&lt;n) printf("+"); for(j=0;j&lt;r[i];j++) printf(")"); if(r[i]&gt;0&amp;&amp;i&lt;n) printf("+"); &#125; printf("\n%d\n",f[1][n]); dfs(1,n); for(i=0;i&lt;top;i++) &#123; if(i&lt;top-1) printf("%d ",ans[i]); else printf("%d",ans[i]); &#125; printf("\n"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>answer</category>
      </categories>
      <tags>
        <tag>Luogu</tag>
        <tag>题解</tag>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++语言-11-竞赛相关的其余操作及编程时应有的良好习惯]]></title>
    <url>%2Fcpp%2Fcpp-11%2F</url>
    <content type="text"><![CDATA[待更新 缩进 高内聚，低耦合 freopen inline]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++语言-10-指针]]></title>
    <url>%2Fcpp%2Fcpp-10%2F</url>
    <content type="text"><![CDATA[待更新 地址（分配地址，取地址符号，取值符号） (*p)++ *p++ 结构体指针（->） 链表]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++语言-9-结构体与运算符重载]]></title>
    <url>%2Fcpp%2Fcpp-9%2F</url>
    <content type="text"><![CDATA[本章学习结构体与运算符重载。 在各路题目中，我们有时候会看到，一个主体有很多个属性。比如你是一个学生，你可以被拆分为以下属性的集合体： 姓名 性别 年龄 年级 班级…… 而且，其余的学生也都是跟你一样有这些属性。那么，我们现在假设一个年级有1000人，难道我们要针对每个属性都开一个1000单位的数组吗？ 这时候我们就可以使用结构体，把这些属性整合，产生一个新的类型。 比如上文中的属性，我们就可以整合为一个student类型。写法如下： 123456789101112struct student//struct是必须的，不可更改；后面的student则可以自定义&#123; string name;//用一个名为name的字符串保存姓名 char sex;//假设我们用M和W来表示Man和Woman，那么可以用一个字符型来保存 int age; int grade; int class;//分别用三个int类型变量来保存年龄，年级和班级 void show() &#123; cout&lt;&lt;name&lt;&lt;” ”&lt;&lt;sex&lt;&lt;” ”&lt;&lt;age&lt;&lt;” ”&lt;&lt;grade&lt;&lt;” “&lt;&lt;class&lt;&lt;endl; &#125;//该函数可以输出5个变量&#125;;//注意这里有个分号，不要漏了 通过上文的代码段，我们就建立了一个结构体类型，类型名称为student。其下属有5个变量，我们称之为“成员变量”，又叫“成员表”；还有1个函数，我们称之为“成员函数”。 这样，我们就可以总结一个格式： 12345struct 类型名称&#123; 成员表 成员函数&#125;; 没有严格的顺序，但一般成员函数写在成员表之后，因为变量/数组等必须先定义才能调用。注意结构体的右大括号后必须有个分号，不要漏掉。 那么，我们如何使用结构体？ 结构体类型，俗称自定义类型。因此，可以效仿其它类型的定义方法。如上文中的student，此时就可以用作数据类型。如，我们称int a;为定义一个名为a的int类型变量。同样的，我们可以student a;来定义一个名为a的student类型变量。 因此，我们可以写出如下代码：12345678910111213#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;struct student&#123; string name; int age;&#125;;int main()&#123; student a,b;//定义两个student类型的变量，分别名为a和b return 0;&#125; 定义student类型的变量也可以写在struct student的右大括号后分号前。写法如下：12345678910111213#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;struct student&#123; string name; int age;&#125;a,b;//定义两个student类型的变量，分别名为a和bint main()&#123; return 0;&#125; 如果采取上述方法定义结构体变量，还可以不写结构体类型的类型名称。如下：12345678910111213#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;struct&#123; string name; int age;&#125;a,b;//定义两个student类型的变量，分别名为a和bint main()&#123; return 0;&#125; 此时该结构体类型是一次性类型，因为没有填写结构体类型名称，所以不可以被再次使用。 讲完了结构体类型变量的定义，现在我们来讲一下如何访问结构体变量的成员。 假设我们有如下结构体及变量定义：123456789struct student &#123; string name; int age; void show() &#123; cout&lt;&lt;name&lt;&lt;” ”&lt;&lt;age &lt;&lt;endl; &#125; &#125;a; 则我们可以通过“.”，就是跟小数点一样的那个点，来访问结构体变量的成员。 示例： 123456789101112131415161718#include&lt;iostream&gt;#include&lt;string&gt;using namespace std;struct student &#123; string name; int age; void show() &#123; cout&lt;&lt;name&lt;&lt;” ”&lt;&lt;age &lt;&lt;endl; &#125; &#125;a;int main()&#123; cin&gt;&gt;a.name&gt;&gt;a.age;//分别输入student类型变量a的成员变量name和age a.show();//调用student类型变量a的成员函数show return 0;&#125; 如上示例中，我们可以通过“.”来访问结构体变量的成员。此时“.”叫做“成员访问符”。访问到成员变量或成员数组或成员函数的时候，可以如同一般的变量/数组/函数一般使用。 对于结构体类型，我们还可以对其进行运算符重载。 如，设有以下结构体类型及变量定义： 1234struct complex//complex表示复数&#123; int a,b;//a表示实部，b表示虚部&#125;x,y,z; 关于复数 显然，我们不能直接使用+号来做到z=x+y;只能分别写z.a=x.a+y.a;和z.b=x.b+y.b;这样就显得很繁琐。 那么，该如何才能用+号直接操作呢？ 我们可以在struct complex中进行对于+号的重载，格式如下： 1234567891011struct complex//complex表示复数&#123; int a,b;//a表示实部，b表示虚部 friend complex operator +(const complex&amp; p,const complex&amp; q) &#123; complex ans; ans.a=p.a+q.a; ans.b=p.b+q.b; return ans; &#125;&#125;x,y,z; 这样就可以在程序的其余位置，对complex类型的变量使用+号直接操作了。 同理，除加号外，“-”，“*”，“/”，“%”也可以采用这样的方式重载，格式为： 1234friend 类型名 operator 符号(const 类型名&amp; a,const 类型名&amp; b)&#123; &#125; 以上，是对算术运算符的重载。 再设有以下结构体类型及变量定义：1234struct student&#123; double chinese,math;//用来表示语文成绩和数学成绩&#125;a,b; 这样虽然可以使用==和!=来判断a和b是否相等（所有成员变量的值完全相同与否），但不能直接使用大于号或小于号来判断a和b谁大谁小，因为它不知道要用哪个来判断。所以我们需要重载一下，告诉程序怎么处理。示例：123456789struct student&#123; double chinese,math;//用来表示语文成绩和数学成绩 friend bool operator &gt;(const student&amp; p,const student&amp; q) &#123; if(p.chinese!=q.chinese) return p.chinese&gt;q.chinese; return p.math&gt;q.math; &#125;&#125;a,b; 这样就可以使得大于号能判断a和b的大小（小于号还是不行）：在判断是否a&gt;b时，先判断a的语文成绩是否比b高，若是则a大；若语文成绩相等则判断数学成绩，若a数学成绩较高则a大；数学成绩也相等则a不比b大。 同理，可以对其它逻辑符号进行重载，格式为： 1234friend bool operator 符号(const 类型名&amp; a,const 类型名&amp; b)&#123; &#125; 以上，是对逻辑运算符的重载。 再设有以下结构体类型及变量定义：12345struct student &#123; string name; int age; &#125;a; 这样我们是不能使用cin和cout直接输入和输出的，需要重载流插入符合流输出符才行。示例：12345678910111213141516171819202122232425#include&lt;iostream&gt;#include&lt;string&gt; using namespace std;struct student &#123; string name; int age; friend istream&amp; operator &gt;&gt;(istream&amp; in,student&amp; x) &#123; in&gt;&gt;x.name&gt;&gt;x.age; return in; &#125;//对输入的重载，使得可以使用cin直接输入student类型的变量 friend ostream&amp; operator &lt;&lt;(ostream&amp; out,student&amp; x) &#123; out&lt;&lt;x.name&lt;&lt;" "&lt;&lt;x.age; return out; &#125;//对输出的重载，使得可以使用cout直接输出student类型的变量 //为了符合一般的使用习惯，endl一般不写在对&lt;&lt;的重载中&#125;a;int main()&#123; cin&gt;&gt;a; cout&lt;&lt;a&lt;&lt;endl; return 0;&#125; 以上便是对输入和输出的重载。格式为： 对输入重载： 12345friend istream&amp; operator &gt;&gt;(istream&amp; in,类型名&amp; x)&#123; in&gt;&gt;变量1&gt;&gt;变量2;//可以更多 return in;&#125; 对输出重载：12345friend ostream&amp; operator &lt;&lt;(ostream&amp; out,类型名&amp; x)&#123; out&lt;&lt;变量1&lt;&lt;” “&lt;&lt;变量2;//可以更多 return out;&#125; 以上，是对输入输出运算符的重载。 还可以对=,(),[],->四种运算符进行重载，但这已经严重超纲，有兴趣的同学可以自行百度一下。 第九章到此结束。]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++语言-8-递归与递推]]></title>
    <url>%2Fcpp%2Fcpp-8%2F</url>
    <content type="text"><![CDATA[本章学习递归/递推相关知识。 首先，请大家熟悉对于斐波那契数列第n项的定义。 斐波那契数列 接下来，我们将借助斐波那契数列来说明递归和递推。 递归在上一章中我们学习了自定义函数，知道可以在主函数中，或其它函数中调用自定义函数。但其实，不止不同函数之间可以相互调用，函数自己也可以调用自己。这个过程称之为递归。 递归的示例程序如下： 123456789101112131415#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;int f(int x)&#123; if(x==1||x==2) return 1; else return f(x-1)+f(x-2);&#125;int main()&#123; int x; cin&gt;&gt;x; cout&lt;&lt;f(x); return 0;&#125; 可以看到，在函数f中又调用了函数f。函数f内部的运行可以解释为下述过程： 判断x是否与1相等或x是否与2相等，若是，则函数返回值为1 若1中的判断失败，则函数返回值为【参数为x-1的函数f的返回值】与【参数为x-2的函数f的返回值】之和。 如x=4，则调用过程如图所示：1234567 f(4) f(3) f(2)f(2) f(1) 11 1 也就是说，函数首先发现要计算f(4)，但此时x=4，不满足x与1相等或x与2相等，所以将f(4)展开为f(3)和f(2)，先计算f(3)和f(2)的值，再相加后，作为f(4)的返回值。 接下来根据从左往右执行的规则，函数要计算f(3)。计算f(3)的过程仍然与上述过程类似，展开为f(2)和f(1)后求和。 接下来求解由f(3)展开而得到的f(2)，发现符合x与2相等，因此f(2)返回1 求解由f(3)展开而得的的f(1)也同理返回1，因此f(3)=1+1=2，返回2 现在f(3)求解完成，再求解由f(4)展开的f(2)，得1，所以f(4)=f(3)+f(2)=2+1=3，因此f(4)最终返回值为3。 需要注意的是，在使用递归的时候，我们一定要给函数一个边界，让它不会在无限的自调用中迷失。该边界称为递归边界，没有边界的递归将如无限循环一般，必然造成超时。 以上就是斐波那契数列的递归过程。 但是在实际运行的时候我们发现，当求解斐波那契数列的项数较高的时候会卡在运行中很久，造成超时（TLE）。为什么呢？从上文我们对f(4)的分析就可以看出，f(2)被计算了2次。由此可以推断，当求解f(10)甚至f(100)的时候，会产生大量重复的计算过程，无意义地消耗了时间。此时，我们采用递归求解便不再合理，应该换用递推。 递推在上文中，求斐波那契数列第n项，我们采用的是从f(n)开始，一层层向下展开。而根据斐波那契数列的特点，我们其实可以从第1项开始向上推，直到第n项。代码如下：1234567891011121314#include&lt;iostream&gt;#include&lt;cstdio&gt;using namespace std;int main()&#123; int x,f[1000]; cin&gt;&gt;x; f[1]=1; f[2]=1; for(int i=3;i&lt;=x;i++) f[i]=f[i-1]+f[i-2]; cout&lt;&lt;f[x]; return 0;&#125; 对于上述代码，求解f[4]的过程就变为如下描述： 已知x==1或x==2时，f[x]=1，所以初始化令f[1]=1,f[2]=1。 因为f[1]和f[2]都已经赋值，所以接下来从f[3]开始计算就可以。枚举f[3]~f[x]的每个单位，根据f[x]=f[x-1]+f[x-2]来求解。此处f[x]=f[x-1]+f[x-2]称为递推式。 求解完成，输出f[x]。 可以发现，递推求解是需要数组配合的。与递归不同的是，递推是采用空间换时间的做法，将每次求出来的f[x]保存下来，避免了重复求解，大大节约了时间。 以上，就是对递归和递推的基本描述。 第八章到此结束。 本章练习： T17548 斐波那契数列 T17551 Pell数列 P1028 数的计算 P1036 选数 P1217 回文质数 Prime Palindromes P1706 全排列问题]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++语言-7-函数的自定义与函数的类型]]></title>
    <url>%2Fcpp%2Fcpp-7%2F</url>
    <content type="text"><![CDATA[本章学习函数相关知识。 采用以下程序段进行说明： 1234567891011121314#include&lt;iostream&gt;using namespace std;int f(double x)&#123; int a=x; return a;&#125;int main()&#123; double a; cin&gt;&gt;a; cout&lt;&lt;f(a); return 0;&#125; 样例输入1：1.1 样例输出1：1 样例输入2：0.9 样例输出2：0 可以看出，我们在公共域（又称全局）里定义了两个函数，一个是int类型的f（自带一个参数，是double类型的x），另一个就是main。 main就不多说了，毕竟int main()是强制要求，不能改动。但是这个f就很有意思了。 首先，我们学到过在公共域直接int f的话表示定义一个int类型的名为f的变量，但现在为什么是个函数呢？那就是因为f后面的小括号了。那么就有以下定义及使用规范四点。 满足形如【数据类型 名称(参数列表)】的程序段，就是函数。 自定义函数的函数体只能写在公共域或自定义类型内。其中，当自定义函数的函数体写在公共域内时： 若自定义函数的函数体写在main函数之前，则可以不在main函数里写其定义语句，因为其函数体那边就已经定义了。 若自定义函数的函数体写在main函数之后，则必须在main函数里写其定义语句。总之就是必须满足先定义再使用。 只要是函数，就必须使用大括号来告诉程序哪些语句属于这个函数。 小括号里可以放空，也可以不放空，定义若干个参数。 前3点都是很好懂的，主要是这个第4点了。 在文章开头的程序段中，我在f后面的空格里定义了一个double类型的x作为f的自带参数（当然也可以定义多个，中间用逗号隔开就行了），在main里定义了一个double类型的a，在f里int了一个a（根据变量的作用域，这个a属于不同的域，是不算重复的）。并且，在输入a之后，我让程序输出了f(a)的值。过程如下： cout检查到要输出f(a)。 按照填写的先后顺序访问填入f后面的括号中的变量所对应的值，并填入对应的位置（这个过程叫传递参数）。在本例中是访问main中a的值，填入f的括号中，使f的double类型的x等于main的double类型的a，并执行f。 进入f，定义一个属于f的int类型的a，使这个a等于x。 使f(x)返回a的值，并且此值重置为int类型。 返回main，输出f(a)此时的值。 关于第2点，举个例子。比如int f(int x,int y,int z)，那么main里如果定义了a，b，c三个变量的话，cout&lt;&lt;f(a,b,c);就是输出当f中的x等于main的a，f中的y等于main的b，f中的z等于main中的c时，f(x,y,z)返回的值。 在上述过程中，第二步所提到的那些值里，在main中填入f函数括号内的，称为“实际参数”；而在传递到f函数，开始执行f函数时，f函数中的x称为“形式参数”。 回到本文的例子，在返回f(x)的值之前，程序中经历了以下3次的数据类型转换： 获得double类型的待传递参数的值，转换为被传递参数的double类型，并填入被传递参数。 获得double类型的f里的x的值，转换为int类型的值，并赋值给f里的a。 因为函数f返回f里a的值，所以获得int类型的f里的a的值，转换为int类型的值，并赋值给整个函数f，然后结束f。（如果你这时return 0的话，函数f一定就返回0，那输出也就是0了） 简而言之，在return某个值之前，每个自定义函数都和main一样，可以执行程序语句，不过main以外的其它自定义函数需要被某个正在执行的函数调用就是了。而一旦return某个值，函数就相当于变量，产生一个确定的值，但这个值是一次性的，下次函数再被调用时，依然要重新经过一遍语句的执行来得出一个新的结果。 以上就是函数的自定义了。那么，函数的类型又是什么呢？ 有的时候，你自定义一个函数，是为了让它执行一段语句，并不是为了让它返回一个值。这时，函数的类型可以都使用int，结尾都写return 0；也可以令函数的类型为void（英文翻译：虚空，此处用作“空类型”之意），结尾不写return 0; 需要注意的是，void类型只能用于自定义函数，不可用于main函数，更不可用于一般变量/数组等等。且void类型的函数也可以强制退出，即，使用return;语句。此时return后不能写值，应该直接写分号，当void类型函数在执行中遇到return;时即结束。 但是，更多的时候，你是为了让这个自定义函数返回一个值。这时候，函数的类型必须要与你要得到的值相同。如果你想让函数返回一个double类型的值，就必须定义函数为double类型，不可以是float类型，更别说int了。 不过，函数后面的括号里的自带参量的类型，就没有特别要求，依你的需要而定。 那么，又是什么时候要使用自定义函数呢？这就涉及到编程时的一个重要思想：高内聚，低耦合。 高内聚，就是相同或相似功能的语句块尽可能集中在一起。 低耦合，就是功能差异较大的语句块尽可能不要集中在一起。 那么，我们就需要用自定义函数，来表示一个功能。这个把功能实现为自定义函数的过程，叫做“封装”。 这大概可以理解为，你手里有一件事情，这件事可以分解为几个不同的步骤，不同的步骤可以起到不同的效果（功能）。然后你把这几件事分配给另外的人（自定义函数），让他们替你去做。再结合上文的话，你要告诉他具体步骤怎么做，这就是他的函数体；还要告诉他应该用什么东西来做，这就是他的参数。大概就是这样了。 接下来，如何使用自定义函数呢？ 在之前的学习中，我们已经使用过诸如pow等数学函数。自定义函数也可以如同数学函数一般调用。如同本文开头的程序段，我们在主函数中输出语句处调用了自定义函数f。自然的，我们也可以在主函数其它区域调用自定义函数。这些地方都属于主函数的函数体。 那么我们可以给出总结：可以在任意函数体内的任意合理位置调用任意函数（主函数除外）。 比如，我们可以在自定义函数中输出helloworld，如下文代码： 1234567891011#include&lt;iostream&gt;using namespace std;void pr()&#123; cout&lt;&lt;"helloworld"&lt;&lt;endl;&#125;int main()&#123; pr(); return 0;&#125; 在上述代码段中，我们定义了一个自定义函数pr。因为它不需要返回值，所以可以使用void类型；又因为它只是用来输出一个字符串常量，所以不需要参数，因此参数列表为空。 如上，即是自定义函数的使用方法。 第七章到此结束。]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++语言-6-变量和语句的作用域]]></title>
    <url>%2Fcpp%2Fcpp-6%2F</url>
    <content type="text"><![CDATA[本章学习作用域相关知识。 采用以下程序段进行说明： 1234567891011121314151617181920#include&lt;iostream&gt;using namespace std;int x=1;int main()&#123; int a=1; while(a&lt;10) &#123; int b=3; a++; while(b&lt;5) &#123; int c=2; if(c&gt;=4) break; b++; c+=b; &#125; &#125; return 0;&#125; 先说明一下，a++的效果等于a+=1等于a=a+1，不过a++的执行速度比a=a+1快就是了。同理c+=b是等于c=c+b的。 我们可以看到，在本程序段中有4个变量，分别是x，a，b，c，定义的位置各不相同，甚至x是定义在int main()之外的。这是什么意思呢？ 原来，变量不是定义了之后就通用的，而是有所属范围的。 定义在int main外的，不属于任何函数的x，是可以在本程序所有函数中调用的。它定义的位置叫做公共域。而定义在int main里的a，是属于main而不是公共域的。它在main结束时就会清空，不能再访问。也就是说，x可以在程序的任何函数中被访问和修改，而a只能在main里被访问和修改。 但是b，c去哪了？我们可以看到，在进入第1个while之后，b才被定义，而c更是定义在第2个while里，且这两个while都属于main，第2个while又属于第1个while。 所以，变量b只能在第1个while中被访问和修改，变量c只能在第2个while中被修改。 又因为第2个while属于第1个while，所以它能访问和修改变量b，而两个while都属于main，所以能访问和修改变量a。但反过来，不在第1个while里的话，main和其它定义在公共域的函数是不能访问和修改变量b的。同理，不是在第2个while里的话，即使是第1个while里的其它语句，也不能访问和修改变量c。 至此，我们能得到一个上下级关系： 1234程序本体——main————while——————while 下级可以访问和修改上级中已经定义的变量，而上级不可以访问和修改定义在下级中的变量。 根据这套理论，你能猜到第2个while里的break作用范围有多大了吗？就是只能跳出第2个while而已，对第1个while半毛钱影响都没有。continue也是一样的。 但是return 0不能乱写，这是特例，所有int类型的函数，比如main，在碰到return 0时会直接结束这个函数自身，跳过下面的所有语句。基于这个特性，也可以用return 0来当程序断点，用来检测当编译成功却运行时错误时哪些语句有问题。 当然，不止是return 0，事实上自定义函数和main，碰到return时，不管return是什么都会结束函数。只不过main要求一定要return 0罢了。 第六章到此结束。]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++语言-5-字符型，字符数组与字符串]]></title>
    <url>%2Fcpp%2Fcpp-5%2F</url>
    <content type="text"><![CDATA[本章学习字符相关内容。 让我们从介绍字符型（char）开始。 字符型字符型，顾名思义，就是可以保存字符的数据类型，与int、double等保存数字的略有区别。什么区别呢？ 表示上的区别 比如我们要表示数字1，则int a=1;即可。 而若要表示字符1，则需要char a=&#39;1&#39;; 注意到字符1被单引号所围住。这就是表示字符的方法。 若写char a=1;则会令a被赋值为一个与字符1毫无关系的符号。 使用上的区别 首先声明三个概念：数字、数值、字符。 毋庸置疑的是，在计算机内部，不论是数字还是字符，都是转化为数值进行处理的。 显然，数字1的数值也是1，以此类推。 但是字符1的数值就不是1了，而是49。 为什么呢？可以查询一下ASCII码，此处不多解释。 常见的字符与其数值： ‘0’=48,’1’=49，以此类推 ‘A’=65,’B’=66，以此类推 ‘a’=97,’b’=98，以此类推 但有时候我们还会经常看到’\n’,’\0’之类的。这些是什么呢？这些叫转义字符。其中，’\0’表示空字符，’\n’表示换行符。 *printf(“\n”);与cout&lt;&lt;endl;一致。 数值匹配如下： ‘\0’=0 ‘\n’=10 查看数值匹配的方法： cout&lt;&lt;int(‘0’);可以查看字符0的ascii码（数值） printf(“%d”,’0’);也可以实现1的效果 cout&lt;&lt;char(48);可以查看数值48对应的字符 printf(“%c”,48);也可以 以上，就是字符型的简单表示。 接下来是字符数组。 字符数组在前几章中，我们已经学习了数组的相关知识。那么很显然，字符数组的声明应该满足下述格式： char str[100]; 本语句声明了一个名为str的char类型数组，有100个单位可供使用。 我们知道，对于数组，其内部存储的时候是一个个值连续存储的。那么对于字符数组，因为字符型的值是字符，所以字符数组内部就是一个个字符连续存储的。如将“helloworld”保存在上述字符数组str内，则内部表示为’h’,’e’,’l’,’l’,’o’,’w’,’o’,’r’,’l’,’d’，如同一连串的字符，此时便可称之为字符串。 对于字符数组的初始化，除了前述的对于数组的通用初始化方法，还可以使用双引号，也就是用字符串常量直接初始化。如： 采用通用方法：char str[100]={&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39;w&#39;,&#39;o&#39;,&#39;r&#39;,&#39;l&#39;,&#39;d&#39;}; 采用双引号：char str[100]=&quot;helloworld&quot;; 注意到采用通用方法时，需要大括号，而采用字符串常量时不需要大括号。 上面我们为str数组开设了100个单位，并且注意到”helloworld”只有10个字符。那么我们可不可以只开10个单位呢？问题可以转化成，以下两种写法可不可行？ 采用通用方法：char str[10]={&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39;w&#39;,&#39;o&#39;,&#39;r&#39;,&#39;l&#39;,&#39;d&#39;}; 采用双引号：char str[10]=&quot;helloworld&quot;; 答案是，两种都不可行。 在第一种中，虽然我们显式指定了str数组各个位上的值，但编译时其会在结尾补一个空字符’\0’，导致其最终有11个元素，超出了str数组10个元素的限制，引起访问错误。所以，在使用通用方法进行对字符数组的初始化时，应该预留足够的位置，至少应该是显示指定的字符数+1。 在第二种中，我们直接使用字符串常量来对字符数组进行初始化，依然会有第一种的问题，所以仍然需要多留一位。但要注意的是，第一种引发的是运行时的紊乱，而第二种引发的是编译错误，相比第一种更加容易发现。 特殊的，可以采用这样的写法来对字符数组进行初始化：char str[]=&quot;helloworld&quot;; 这样的写法可以不指定数组的长度，其内部会自动适配长度。但仅仅在对字符数组使用字符串常量进行初始化时可以不指定数组长度，其它类型/写法均不可以。 *仅在定义的时候可以用字符串常量对其进行赋值，在之后便不再可行，会引发编译错误。后续要操作的话只能按普通数组的方法。 对于二维数组，可以采用下述方法进行初始化： char a[][10]={&quot;hello&quot;,&quot;hi&quot;}; 第一维可以放空，若填写则不得少于字符串数量。 第二维必填，不得少于最长的字符串长度+1。 一般不需要使用更多维的char数组。 在cstring头文件中，提供了下列函数来对字符数组进行操作。 基本假设：设有char a[20]=&quot;hello&quot;,b[20]=&quot;hi&quot;; strcpy(目标，来源); 此函数为复制函数，能将来源的字符串复制给目标。 示例：strcpy(a,b); 运行后a数组和b数组都将等于”hi”。 strcat(目标，来源); 此函数为拼接函数，能将来源的字符串拼接到目标字符串后面。 示例：strcat(a,b); 运行后a数组将等于”hellohi”，b数组不变。 strlen(数组名称); 此函数可以求出字符串长度（直到’\0’）。 示例：strlen(a); 求出来的值是”hello”的长度5。因为a数组内部有赋值的部分是’h’,’e’,’l’,’l’,’o’,’\0’，strlen会从下标0开始往后计算直到第一个’\0’之前。 *若令a[2]=&#39;\0&#39;，则a数组内部有赋值的部分变为’h’,’e’,’\0’,’l’,’o’,’\0’，将导致strlen所求得的值变为2。 *若令a[0]=&#39;\0&#39;，则a数组内部有赋值的部分变为’\0’,’e’,’l’,’l’,’o’,’\0’，将导致strlen所求得的值变为0。 strcmp(数组1名称，数组2名称); 此函数可以按字典序比较数组1中的字符串1与数组2中的字符串2的大小。若字符串1大则返回正数，小则返回负数，一样大则返回0。 *字典序的比较方法： 设有char a[]=&quot;13&quot;,b[]=&quot;120&quot;; 字典序是逐位比较的。先比较下标0的位置，发现字符串1和2的该位置都是’1’，则继续比较下标1的位置，发现字符串1的该位置是’3’而字符串2的该位置是’2’，因为’3’&gt;’2’，所以字符串1比字符串2大。 再设有char a[]=&quot;12&quot;,b[]=&quot;120&quot;; 先比较下标0的位置，发现字符串1和2的该位置都是’1’，则继续比较下标1的位置，发现字符串1和2的该位置都是’2’，则继续比较下标2的位置，发现字符串1的该位置是’\0’而字符串2的该位置是’0’，因为’\0’&lt;’0’，所以字符串1比字符串2小。 以上就是对于字符数组的相关描述。对字符串的了解有没有清晰一些呢？现在开始介绍string类型，也即字符串类型。 字符串类型使用string类型需要包含string头文件。 上面说到，一个一维字符数组可以表示一个字符串。那么对于string类型，该如何表示一个字符串呢？答案是一个变量即可。string在有string头文件的情况下可以如int等类型一般使用。 示例：string str=&quot;helloworld&quot;; 对于string类型，无需指定字符串长度，其内部会自动适配。且string类型可以在任意时候更改其赋值。如，可以在上述已有定义的情况下，令str=”hi”，则str会变成字符串”hi”。 尽管我们上述声明的str仅仅是一个变量，不是数组，但因为它是string类型，所以我们也可以使用下标来访问它内部的字符。如在string str=”helloworld”的基础上，我们可以访问str[4]得到其第五个字符’o’，也可以令str[4]=’r’使得str变为”hellrworld”。 同样的，对于string类型，我们也可以使用数组。如string str[2]={&quot;hi&quot;,&quot;helloworld&quot;};可以通过str[i]来访问在str数组中下标为i的字符串，也可以通过str[i][j]来访问在str数组中下标为i的字符串的下标为j的位置。更多维数组同理。 在string头文件中，提供了下列成员函数来对string类型变量进行操作。 基本假设：设有string a=&quot;hello&quot;,b=&quot;hi&quot;; （以下基于与上文中适用于字符数组的函数的对比） a=b; 可以直接令a的值等于b的值，使用赋值符号即可。 a=a+b; 可以直接令字符串a和字符串b拼接在一起产生一个新的字符串，然后再把这个新的字符串赋值给a。 length(); 可以求得字符串a的长度（求值方法与strlen一致）。 直接使用运算符进行比较。比较方法仍然是根据字典序（详见上文）。 以上，我们可以显而易见地发现，使用string类型比使用char数组更为方便。故实际使用时，若无特殊要求，一般建议使用string类型。 第五章到此结束。 本章练习： P1055 ISBN号码 P1200你的飞碟在这儿Your Ride Is Here P1308 统计单词数 P1914 小书童——密码 P1553 数字反转（升级版）]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++语言-4-数组]]></title>
    <url>%2Fcpp%2Fcpp-4%2F</url>
    <content type="text"><![CDATA[本章学习数组的定义及使用方式。 数组，实际上就是一段连续的存储区间，概念上就是一个变量（元素）的集合。 以变量作为例子，每定义一个变量，就相当于为这个变量声明了一个存储空间，用来保存它的值。而当你声明了很多变量时，比如你声明了10个不同变量，那就在内存里占用了10个单位的存储空间。但是，如果你使用数组的话，声明长度为10的数组，也相当于占用了10个单位的存储空间，且是连续的，所以又叫存储区间。 语句就是： 类型 名称[长度]; 如： int a[10]; 其中数组名称的命名要求也与变量一致。 设名称为a，长度为n，用一张表格来表示的话，就是下面这样。 a0 a1 a2 … a(n-2) a(n-1) 值1 值2 值3 … 值n-1 值n 这样的一张表格，就表示一个数组。有0~n-1一共n个元素，每个元素对应一个值，并且每个元素都可以完全像变量一样使用。 也可以用一个0~n-1的整数坐标轴来表示，每个整数点上有一个值。 效果就相当于你定义了a0，a1，a2，…，an-1一共n个变量。 简单说，就是： 可以当做变量使用。 是一个有n个不同下标的元素的集合。 如上，这是一维数组。那么二维数组怎么表示呢？ int a[n][m]; 这样就是定义了一个n*m个单位的二维数组。表格形式如下。 a 0 1 2 … m-2 m-1 0 … 1 … 2 … … … n-2 … n-1 … 每个元素属于某一行某一列，设i表示行，j表示列，则当i和j确定时，所对应的元素唯一确定。 以此类推，还有三维数组，四维五维……不过常用的就是一维和二维了。 当一个数组定义后，我们可以通过“数组下标”来访问数组内的元素。所谓“数组下标”就是数组后中括号里填的东西。如，假设我们现在有一个定义：int a[100];则我们可以使用a[i]来访问a数组中下标为i的元素，i的范围为0-99。 发现了吧？假设数组被定义的长度为n，则可以使用的下标范围就是0~n-1，这正是上文中之所以写a0,a1,…,an-1的原因。这不以编程人员的意志为转移。哪怕你不使用下标为0的位置，它还是在那里，你最大可使用下标还是n-1。 所以，设有int a[100];则对于每一个a[i]，都可以像普通变量一样使用。a[i]可以参与运算，也可以在等式左边来接受一个值。如int b=a[1];表示定义一个int类型变量b，并令其等于a数组第二个元素的值。同样的，也可以写a[10]=100;表示令a数组的第十一个元素的值等于100。 同理，对于二维数组，可以使用a[i][j]来访问a数组中第i行第j列的元素。两个维度的下标范围各自分离。如有int a[n][m];则在a数组中第一维下标范围为0~n-1，第二维的下标范围为0~m-1。二维数组的a[i][j]，就如同一维数组的a[i]，就如同普通变量，可以参与运算或在等式左边来接受一个值。 更多维数组可以以此类推。 但是数组只是定义的话，依然也是如同定义的变量一样，初始是未赋值状态。已知我们可以int a=0;来定义一个int类型的变量a，并对其赋初始值0。那么我们想对数组也进行每个位都赋初始值，该怎么做呢？可以写成如下形式： int a[100]={0}; 如上语句声明了一个int类型的数组a，有100个单位，将其每个单位都赋值为初始值0。 但要注意的是，如果想赋初始值1，这样写是不行的： int a[100]={1}; 这样将导致只有a[0]的值被初始化为1，其余位仍然都是0。 我们称这个1为显式指定的初始值。当使用大括号初始化时，数组会按顺序分配所有显式指定的初始值，而对没有显式指定的其余位置均分配为0。 例如，int a[100]={3,1,2,4};这样会按顺序令a[0]=3,a[1]=1,a[2]=2,a[3]=4，之后令其余位置均赋初始值为0。 所以，如果想全部初始化为1，则要么手写n个1在大括号里，要么用循环令a[i]=1。 而对于多维数组，我们则需要使用嵌套大括号。假设有int a[2][3];则可以以如下方式初始化： 1int a[2][3]=&#123;&#123;3,4,5&#125;,&#123;1,2,3&#125;&#125;; 因为数组第一维的容量是2，所以在最外层大括号中嵌套两层大括号，表示分别对第一维的每一行的三列进行初始化。而因为数组第二维容量是3，所以在每个第二级大括号里写3个数。 上述声明执行过后，会令a[0][0]=3,a[0][1]=4,a[0][2]=5,a[1][0]=1,a[1][1]=2,a[1][2]=3。但其实写成这样：int a[2][3]={3,4,5,1,2,3};结果也与上述写法相同，只是对于人类来说没有那么直观。 为什么会一样呢？因为数组内部在分配顺序的时候，是从最后一维开始分配的，比如有三维数组a[2][2][2]，则顺序是a[0][0][0],a[0][0][1],a[0][1][0],a[0][1][1],a[1][0][0],a[1][0][1],a[1][1][0],a[1][1][1]。可见，顺序的规则是恒定不变的，需要的是程序员来调整初始化数值的顺序。 需要注意的是，如果不采用嵌套大括号，则必然是按顺序初始化。而采用嵌套大括号的话，可以按需求针对不同维度进行初始化。示例如下： 假设有二维数组: 1int a[4][4]; 则我可以写: 1int a[4][4]=&#123;&#123;0,1,1&#125;,&#123;1,2&#125;,&#123;3,1,4,5&#125;,&#123;6&#125;&#125;; 进行初始化。初始化的结果为：1234a[0][0]=0,a[0][1]=1,a[0][2]=1a[1][0]=1,a[1][1]=2a[2][0]=3,a[2][1]=1,a[2][2]=4,a[2][3]=5a[3][0]=6 其余单位因为没有显式指定而均为0。 第四章到此结束。 本章练习： P1046 陶陶摘苹果 P1427 小鱼的数字游戏 P1428 小鱼比可爱 P1567 统计天数 P1047 校门外的树 P2141 珠心算测验]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++语言-3-循环语句及选择语句]]></title>
    <url>%2Fcpp%2Fcpp-3%2F</url>
    <content type="text"><![CDATA[本章学习循环结构和选择结构的基本用法。 循环语句while语句while语句实现”当型”循环，它的一般格式为： 1234while (判断条件)&#123; 循环体&#125; 当判断条件成立时，循环执行大括号中语句。并且初始化部分和迭代部分是任选的。 while语句首先检查判断条件，当条件满足时，才去执行循环中的语句。这是”当型”循环的特点。 do-while语句do-while语句实现”直到型”循环，它的一般格式为： 1234do&#123; 循环体&#125;while (判断条件); do-while语句首先执行循环体，然后检查判断条件，若成立，则循环执行大括号中的语句，直到判断条件不成立。 与while语句不同的是，do-while语句的循环体至少执行一次，是”直到型”循环的特点。 for语句for语句也用来实现”当型”循环，它的一般格式为： 1234for (初始化操作;判断条件;迭代部分)&#123; 循环体&#125; for语句执行时，首先执行初始化操作，然后检查判断条件是否满足，如果满足，则执行循环体中的语句，最后执行迭代部分。完成一次循环后，重新判断终止条件。 可以在for语句的初始化部分声明一个变量，它的作用域为一个for语句。 for语句通常用来执行循环次数确定的情况(如对数组元素进行操作)，也可以根据循环结束条件执行循环次数不确定的情况。 在初始化部分和迭代部分可以使用逗号语句，来进行多个动作。逗号语句是用逗号分隔的语句序列。例如： 1234for(i=0,j=10;i&lt;j;i++,j--)&#123; 循环体&#125; 初始化、终止以及迭代部分都可以为空语句，且只要判断条件为空，就相当于一个无限循环，如： 1234for(i=0;;i++)&#123; 循环体&#125; 循环语句的控制 break 跳出当前所在循环，忽略break以下的所有语句。 continue 直接执行下一次循环，忽略continue以下的所有语句。 条件语句if-else语句一般格式为： 12345678if(判断条件)&#123; 语句1&#125;else&#123; 语句2&#125; 当判断条件成立时，执行语句1，否则执行语句2。 switch语句一般格式为： 123456789101112switch(变量)&#123;case 值1: 语句1; break;case 值2: 语句2; break;default: 语句3; break;&#125; 当变量为值1时执行语句1，当为值2时执行语句2，当不为已给出的任何情况时执行default的语句3。 case可以无限添加，不只限2个。 需要注意的是，当你没有break时，会一直向下执行。如以下程序段，若变量为值1，则语句1,2,3都将被执行。 12345678910switch(变量)&#123;case 值1: 语句1;case 值2: 语句2;default: 语句3; break;&#125; 逻辑判断符号小于：&lt; 大于：&gt; 等于：==（两个等号） 小于等于：&lt;= 大于等于：&gt;= 不等于：!= 特别的，计算时用的等于只有一个等号，判断时才用两个等号。 逻辑联结符号 且：&amp;&amp; 或：|| 或的符号由两个竖线组成，竖线可以由回车上方的那个键打出。 如： 1234if(((x&gt;1||x&lt;-1)&amp;&amp;y&gt;2)||(x&lt;-9&amp;&amp;y&gt;0))&#123; sum=sum+1;&#125; 这样表示当满足以下两种情况之一时，sum的值+1。 x大于1且y大于2，或x小于-1且y大于2时。 x小于-9且y大于0时。 特别的，使用if(条件1||条件2)的时候，如果条件1成立，则不会判断条件2是否成立，直接进入if的语句块。 上述两种符号也属于运算符。 使用逻辑符号时的要点 *不可以写连等式，如： 如果x大于0小于100，不可以写if(0&lt;x&lt;100)，必须拆开，写成if(0&lt;x&amp;&amp;x&lt;100)。其余逻辑符号同理。 第三章到此结束。 本章练习： 选择语句：P1422 小玉家的电费 P1085 不高兴的津津 P1089 津津的储蓄计划 P1909 买铅笔 T16594 小明的四则运算 循环语句： P1008 三连击 P1035 级数求和 P1423 小玉在游泳 P1424 小鱼的航程(改进版) P1980 计数问题 T17068 有多少平方数 T17072 是质数吗？ T17073 什么？！n！ T17071 四个数的2nd问题]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++语言-2-数据类型与输入输出]]></title>
    <url>%2Fcpp%2Fcpp-2%2F</url>
    <content type="text"><![CDATA[本章将学习基本数据类型与输入输出的方法。 首先，请大家先熟悉下面的计算指定的a+b的和并输出的代码。 1234567891011#include&lt;iostream&gt;using namespace std;int main()&#123; int a,b,c; cin&gt;&gt;a&gt;&gt;b; c=a+b; cout&lt;&lt;c; system("pause"); return 0;&#125; 样例输入：2 3 样例输出：5 在前一篇中讲过的部分就不再赘述，直接从第五行开始讲起。 第五行int a,b,c; 定义三个变量，分别叫做a,b,c，返回int类型（整型），句末要有分号。可以在定义里赋值，如int a=1,b=1,c=1;。int后面要有一个空格。 常用数据类型： short有符号（即表示有正负，下同）短整型，范围-32768~32767（-2^15~2^15-1），只支持整数。 unsigned short无符号短整型，范围0~65535（2^16-1），只支持整数。 int有符号整型，范围-2147483648~2147483647（-2^31~2^31-1），只支持整数。 unsigned int无符号整型，范围0～4294967295（2^32-1），只支持整数。 long long有符号长整型，范围-9223372036854775808~9223372036854775807（-2^63~2^63-1），只支持整数。 unsigned long long无符号长整型，范围0~18446744073709551615（2^64-1），只支持整数。 float单精度，支持小数，有效数字约8位，范围-3.40(10的38次方)~3.40(10的38次方)。 double双精度，支持小数，有效数字约16位，范围-1.79(10的308次方)~1.79(10的308次方)。 char有符号字符型，不支持字符串，范围-128~127。 unsigned char无符号字符型，不支持字符串，范围0~255。 string字符串，在第五章中有具体说明。 bool布尔型，范围true或false，即非0或0。 *当遇见有的程序只写一个unsigned时，默认是unsigned int。 *在没有特殊强调时，整数类型一般用int，超过int的范围时可以使用long long或unsigned long long，别的一般不常用；浮点数类型一般用double，少用float。 标识符： 上文中提到的变量，就是标识符的一种。 对于所有的标识符，均需要满足如下名称要求： 只能是字母或下划线开头，严格区分大小写。 不可以包含数字或字母或下划线以外的其余符号。 不可以是系统正在使用的名称。如在linux系统中time是一个系统变量，则不可以使用time作为变量名称。 变量定义的写法： 定义一个int类型的变量a，写作int a; 定义一个long long类型的变量a，写作long long a; 定义一个float类型的变量a，写作float a; 定义一个double类型的变量a，写作double a; 定义一个char类型的变量a，写作char a; 定义一个string类型的变量a，写作string a; *string在编程环境中不会变色，但仍是可用类型。 *要使用string类型，需要#include&lt;string&gt;。 *string的具体用法在第五章中有具体说明。 *定义里可以直接赋值，如int a=123; *定义里一句可以写多个变量，如int a,b,c; *如在定义时直接对变量赋值，需要对每个想赋值的变量都赋值。 &ensp;如：int a,b=1;则a是未赋值变量，b被赋值为1 &ensp;再如：int a=2,b=1;则a被赋值为2，b被赋值为1 第六行cincin&gt;&gt;a&gt;&gt;b; 按顺序输入一个变量a和一个变量b。cin包含在iostream中。句末有分号。 *每输入一个变量都需要写两个&gt;符号（该符号是半角大于号），箭头指向要输入的变量。 *cin和cout会自动识别输入/输出的值的类型，无需特意说明。 *若是使用cstdio头文件的话，需要写成scanf(“%d%d”,&amp;a,&amp;b);句末有分号，在变量前需加&amp;这个符号，相邻变量以逗号隔开。&quot;%d&quot;的意思是按整型来操作，有两个变量所以写两个%d。 *scanf会比cin快一些，在输入量很大（大于10万个数据）时建议使用scanf。printf同理。 scanf对于scanf和printf，其均满足以下写法： scanf(格式说明字符串,操作数); printf(格式说明字符串,操作数); 其中，scanf和printf均可以只写格式说明字符串而不写操作数。当且仅当格式说明字符串中出现格式说明符（又叫占位符）时，才填写操作数。 并且，scanf和cin一样，均会自动跳过回车，且在格式说明符不为%c和%s时均会跳过空格。 示例： 仅格式说明字符串： scanf(&quot;a=b=&quot;); 当输入是a=b=时可以正常执行 printf(&quot;a=b=&quot;); 输出字符串a=b= 仅占位符： scanf(&quot;%d%d&quot;,&amp;a,&amp;b); 当输入仅有两个数字时可以正常执行，按格式说明符%d来操作变量a和b printf(&quot;%d&quot;,c); 按格式说明符%d来操作变量c 混用： scanf(&quot;a=%d,b=%d&quot;,&amp;a,&amp;b); 当输入格式满足例如a=1,b=2时（就连逗号也不能漏掉），输入取得值1和2，分别赋值给a和b printf(&quot;c=%d&quot;,c); 将会原样输出c=，之后将变量c的值按格式说明符%d操作后，输出值 又如，本文开头的代码段可以转化为如下代码段，样例也可转化为对应样例：1234567891011#include&lt;iostream&gt;using namespace std;int main()&#123; int a,b,c; scanf(“a=%d,b=%d”,&amp;a,&amp;b); c=a+b; printf(“c=%d”,c); system("pause"); return 0;&#125; 样例输入： a=2,b=3 样例输出： c=5 注意到上文中，scanf的操作数前有加”&amp;”符号，而printf的操作数前没有。关于&amp;，将会在第十章中说明。 附，常见格式说明符： %d，表示按int类型处理 %lld，表示按long long类型处理 %ull，表示按unsigned long long类型处理 %c，表示按char类型处理 %s，表示按char数组来进行处理（关于数组，后续章节会讲到） %f，表示按float类型处理 %lf，表示按double类型处理（因为double本质上是long float，所以其格式操作符取long float的缩写） 上述格式操作符均会跳过空格和换行符。也就是说，在使用cin、或在scanf中使用上述格式操作符时，输入的不同值可以使用空格或换行符隔开。 关于格式操作符的特殊操作（以下仅1可以适用于scanf，其余均仅适用于printf）： 1、按照指定宽度保留数字的方法： 如对int类型保留4个数字的位宽，格式操作符可选用%4d *当数字的实际宽度大于要保留的位宽时，按照原宽度输出。所以若是%0d，就是按原宽度输出 *当数字的实际宽度小于要保留的位宽时，将数字右对齐，并在左边补空格填充 2、保留指定位数的小数（直接舍去，并不四舍五入）的方法： 如对double类型保留两位小数，格式操作符可选用%0.2lf 对其中0的说明，参加第1条；而小数点后的2，就表示保留两位小数 此种情况下，0可以省略，如%0.2lf与%.2lf等效 *内部操作是先计算保留小数，再计算保留位宽 *对于小数，小数点也占一个位宽，所以如对于2.15使用格式说明符%4.1lf的话，会因为先计算保留1位小数而变为2.1，此时位宽为3。再因为保留4个位宽，而在2.1前补一个空格后输出 3、可以使用0来代替空格进行填充（填充后需符合保留小数位数的要求，以及不能改变原数字大小）： 如对于int类型数字100，使用格式操作符%4d，本来是在左边填充一个空格，如果改用格式操作符%04d的话，就会变成在左边填充一个0，这样执行printf(&quot;%04d&quot;,100);就会输出0100 4、可以使用-来实现左对齐 如对于int类型数字100，使用格式操作符%-4d，就会在100右边填充一个空格后输出 但如果使用格式操作符%-04d，并不会在右边填充一个0，因为这样会改变100原本的值，所以输出会是100和一个空格 综上，如果想对一个double类型的变量a，保留5位位宽，保留1位小数，用0填充空位，实现左对齐的话，可以写成：printf(&quot;%-05.1lf&quot;,a); 第七行c=a+b; 本句的执行过程是，先计算a+b的值，再赋值给c。本语句称之为赋值语句。赋值语句的等号左边必须是一个可以被赋值的对象。 其中，对于+号，=号，我们均称之为运算符。 常见运算符有： +,-,*,\，分别表示加减乘除 =，表示赋值，先计算等式右边的值，再赋值给左边的对象 %，表示取模，功能类似于取余数。如int a=100%7;最终c的值将等于100除以7的余数2 +=，表示自加运算。如i+=2，表示i=i+2。其它的-=，*=，/=，%=同理 ++，表示自加1运算。如i++，表示i=i+1。三个或更多加号则不成立，只有两个+号的++可以表示自加运算。 *特别的，++有前置和后置两种写法，如i++和++i，最终都会导致i=i+1。 *当i++或++i单独存在时，它们并无区别。但当它们处于赋值语句中时，会引发差别。 i++是先取得i的值，再自加；++i是先自加，再取得i的值。 如，现在有int i=1,a;然后令a=i++，则先取得i的值1，赋值给a，然后i再自加，i变成2，所以执行完后a=1，i=2。 相对的，如现在有int i=1,a;然后令a=++i，则i先自加，i变成2，再取得i的值2，赋值给a，所以执行完后a=,2，i=2。 –与++同理。只有加减有这种写法，别的没有。 第二章到此结束。 感谢PTW对本文的援助。 本章练习： P1001 A+B Problem P1421 小玉买文具 P1425 小鱼的游泳时间]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++语言-1-入门篇]]></title>
    <url>%2Fcpp%2Fcpp-1%2F</url>
    <content type="text"><![CDATA[本章用以给新手入门。 首先，请大家先熟悉下面的，输出一串字符”helloworld”的代码。 12345678#include&lt;iostream&gt;using namespace std;int main()&#123; cout&lt;&lt;”helloworld”&lt;&lt;endl; return 0;&#125;//这是一句注释 该代码编译运行后，显示的结果如下面这一行： 1helloworld 现在开始逐行解释。 #include#include&lt;iostream&gt;，这句的意思是程序中包含一个叫做iostream的头文件，格式是#include&lt;&gt;，头文件名称填在单书名号中。单书名号结尾不需要加分号。需要包含多个头文件时换行写即可。 例： #include&lt;iostream&gt; #include&lt;cstdio&gt; 也有用双引号的，如#include&quot;cstdio&quot;，虽然这样也可以，不过建议写单书名号。区别在于双引号的是查找自己编写的类库（头文件），而单书名号是查找编译环境自带的类库。 常用头文件有： iostream，这个单词由in/out stream组成，是标准输入输出流。 cstdio，这个单词由c++ standard in/out组成，是标准输入输出。 cmath，这个单词由c++ math组成，是数学库。 cstring，这个单词由c++ string组成，是与字符处理有关的头文件。 string，这个单词本身就存在，翻译名为“字符串”，使用string类型时需要包含该头文件。 algorithm，这个单词本身就存在，翻译名为“算法”，主要包含一些现成的函数。 有时候也会见到如”stdio.h”的头文件，这是C语言的头文件，不用管。请大家按C++写法写头文件。 usingusing namespace std; 这句话，称为“使用(using)命名空间(namespace)std”，其中namespace就是“姓名”和“空间”两个单词的组合，称为“命名空间”。而std是standard的缩写，表示“标准的”。 这句话写在所有include之后，不可修改。这是硬性规定，不做赘述。句末要有分号。不论包含多少头文件，都只需写一次。 mainint main() main()表示主函数，括号不可丢，句末无分号。前面的int表示main函数返回int类型。这句其实也是硬性规定。 函数体左大括号，与第8行的右大括号匹配，构成一个封闭区域，表示main函数的函数体。 大括号是函数的界限，表示这一组大括号里面的所有内容都属于这个函数。括号是一一匹配的，不会重复匹配，且每个左大括号只会匹配到离自己最近的且未被匹配的右大括号。 coutcout&lt;&lt;&quot;helloworld&quot;&lt;&lt;endl; 输出一个句子并换行。 表示输出的是”cout”，是c++ out的缩写。要使用cout，需要包含iostream头文件。 这个“句子”的专业表述为“字符串”，因为每个句子实际上都是由一串字符构成的。输出时，在输出的内容中没有双引号。 endl是end line的缩写，表示一个换行符。所谓的换行符，就是通常意义上的回车。在输出换行符后，字符串末尾将如同被按下一个回车，光标会来到下一行。 *每输出一个变量都需要写两个单书名号，箭头指向cout。 &ensp;如cout&lt;&lt;a&lt;&lt;b&lt;&lt;c;//按先后顺序输出三个变量a，b，c。 *直接按此方法输出时三个变量会连在一起，如a=1，b=2，c=3时，输入为123，这时需要手动添加空格作为分隔符，代码更改为cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;&quot; &quot;&lt;&lt;c;输出变更为1 2 3。 *cout支持两种换行符，endl和”\n”，如cout&lt;&lt;endl;或cout&lt;&lt;&quot;\n&quot;;都可以做到换行。 *endl中是小写的L，而不是数字1。 既然cout是输出，相对的，就有输入。 表示输出的是”cin”，是c++ in的缩写。要使用cin，需要包含iostream头文件。 cin的用法，将在下一篇章中说明。 returnreturn 0; 表示正常结束程序。主函数的最后必须有这一句话，句末有分号，写在主函数中时不可改动。 不论写在主函数的何处，只要程序执行时遇到这句话，都将使得程序正常结束。 函数体结束右大括号，与第4行的左大括号匹配，构成一个封闭区域，表示main函数的函数体。 大括号是函数的界限，表示这一组大括号里面的所有内容都属于这个函数。括号是一一匹配的，不会重复匹配，且每个右大括号只会匹配到离自己最近的且未被匹配的左大括号。 注释两个除号，//，表示注释，程序将会忽视在//之后的这一行的所有内容 如果需要多行注释，可以选择/*内容*/的方式，程序将会忽略/*和*/之间的所有内容。 示例： 123这里还没被忽略 //这句会被忽略这句也没被忽略 1234/*我们这几行全都被忽略了*/ 以上，就是对于本篇开头的代码段的完整解释。 至此，可以总结出一个C++程序的基本框架。写程序时可以先打好该框架，然后再继续填充。 框架如下： 1234567#include&lt;iostream&gt;using namespace std;int main()&#123; return 0;&#125; 到此，第一章结束！ 感谢PTW对本文的援助。]]></content>
      <categories>
        <category>cpp</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fothers%2Fhello-world%2F</url>
    <content type="text"><![CDATA[这篇文章是Hexo自带的文章，有兴趣的各位可以浏览。 Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>others</category>
      </categories>
  </entry>
</search>
