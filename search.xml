<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Welcome to No. 68 Floating Island</title>
      <link href="/uncategorized/mainpage/"/>
      <url>/uncategorized/mainpage/</url>
      
        <content type="html"><![CDATA[<p></p><p align="center"><b><font size="6">Are You Going To Scarborough Fair ?</font></b></p><br><img src="http://pic.ringoer.com/id63819688.png" alt="id=63819688" title="id=63819688"><p></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML重要标签</title>
      <link href="/frontend/html-tags/"/>
      <url>/frontend/html-tags/</url>
      
        <content type="html"><![CDATA[<p>施工中</p>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frontend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML入门</title>
      <link href="/frontend/html-introduction/"/>
      <url>/frontend/html-introduction/</url>
      
        <content type="html"><![CDATA[<p>HTML入门</p><a id="more"></a><p>阅读本文，建议使用的编辑器为 VSCODE</p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>HTML的英文全称是 Hyper Text Markup Language，即超文本标记语言</p><p>HTML是由Web的发明者 Tim Berners-Lee于1990年创立的一种标记语言</p><h1 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h1><p>首先来看看HTML板子长什么样子</p><p>打开 VSCODE，新建一个 html 文件，在其中打入一个英文的感叹号 <code>!</code>，会弹出一个选框，选择一个感叹号的选项。如果选了三个感叹号的选项，只会给出文档头</p><p>自动打板后效果如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是此时还不够完善，让我们先去改了默认的板子</p><h2 id="修改默认打板"><a href="#修改默认打板" class="headerlink" title="修改默认打板"></a>修改默认打板</h2><p>上面不够完善的部分，是 meta 标签中的 content 部分</p><p>先不要管起了什么作用，改完了再说</p><p>修改步骤如下</p><ol><li>打开 VSCODE 所在目录，进入 <code>./resources/app/extensions/emmet/dist/node</code> 目录</li><li>打开 <code>emmetNodeMain.js</code> 文件，搜索 <code>meta:vp</code></li><li>如无意外，会有两个设置项，两个引用项。确定两个设置项</li><li>设置项形如 <code>&quot;meta:vp&quot;:&quot;meta[name=viewport content=&#39;width=${1:device-width}, initial-scale=${2:1.0}&#39;]&quot;</code></li><li>改为 <code>&quot;meta:vp&quot;:&quot;meta[name=viewport content=&#39;width=${1:device-width}, initial-scale=${2:1.0}, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no&#39;]&quot;</code></li></ol><p>改完后重新打板，效果如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="底板解释"><a href="#底板解释" class="headerlink" title="底板解释"></a>底板解释</h2><ol><li><p>第一行是文档声明，声明该文档为 html 文档</p><p>注意感叹号是英文感叹号，DOCTYPE 大写，html 小写</p></li><li><p>第二行是根元素，含有 lang 属性，用于指定文档语言</p></li><li><p>第三行是文档头，包含了表示元数据的 meta 标签和表示页面标题的 title 标签</p></li><li><p>文档头之后是文档体，用于书写页面正文</p></li></ol><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><h2 id="基本标签"><a href="#基本标签" class="headerlink" title="基本标签"></a>基本标签</h2><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td>html</td><td>根元素</td></tr><tr><td>head</td><td>文档头</td></tr><tr><td>body</td><td>文档体</td></tr><tr><td>title</td><td>页面标题</td></tr><tr><td>meta</td><td>元数据</td></tr><tr><td>link</td><td>链接外部资源</td></tr><tr><td>style</td><td>内部样式</td></tr><tr><td>script</td><td>内部脚本或链接到外部脚本</td></tr></tbody></table><h2 id="文章标签"><a href="#文章标签" class="headerlink" title="文章标签"></a>文章标签</h2><p>最早，HTML是用来在网上展示文章信息的，所以有了如下文章标签</p><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td>article</td><td>文章</td></tr><tr><td>section</td><td>章节</td></tr><tr><td>h[1…6]</td><td>标题</td></tr><tr><td>p</td><td>段落</td></tr><tr><td>header</td><td>头部</td></tr><tr><td>footer</td><td>脚部</td></tr><tr><td>main</td><td>主要内容</td></tr><tr><td>aside</td><td>分支内容</td></tr><tr><td>div</td><td>块</td></tr></tbody></table><h2 id="内容标签"><a href="#内容标签" class="headerlink" title="内容标签"></a>内容标签</h2><p>有了文章结构，自然还要写文章内容，于是又有了内容标签</p><p>但是有的标签相当重要，需要单独说明，故而会在下个章节给出</p><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td>ol</td><td>有序列表</td></tr><tr><td>ul</td><td>无序列表</td></tr><tr><td>li</td><td>列表项</td></tr><tr><td>dl</td><td>描述列表</td></tr><tr><td>dt</td><td>描述标题</td></tr><tr><td>dd</td><td>描述项</td></tr><tr><td>pre</td><td>预览</td></tr><tr><td>code</td><td>代码</td></tr><tr><td>q</td><td>引用（此项为内联元素</td></tr><tr><td>blockquote</td><td>引用（此项为块级元素</td></tr><tr><td>em</td><td>斜体（语气上强调</td></tr><tr><td>strong</td><td>粗体（实际上重要</td></tr><tr><td>hr</td><td>分隔线</td></tr><tr><td>br</td><td>换行符</td></tr></tbody></table><h2 id="重要标签"><a href="#重要标签" class="headerlink" title="重要标签"></a><span id="important">重要标签</span></h2><p>此处仅给出这些标签，具体的部分请点击超链接查看</p><table><thead><tr><th>标签</th><th>含义</th></tr></thead><tbody><tr><td><a href="https://ringoer.com/frontend/html-tags#table" target="_blank" rel="noopener">table</a></td><td>表格</td></tr><tr><td><a href="https://ringoer.com/frontend/html-tags#form" target="_blank" rel="noopener">form</a></td><td>表单</td></tr><tr><td><a href="https://ringoer.com/frontend/html-tags#a" target="_blank" rel="noopener">a</a></td><td>超链接</td></tr><tr><td><a href="https://ringoer.com/frontend/html-tags#img" target="_blank" rel="noopener">img</a></td><td>图片</td></tr><tr><td><a href="https://ringoer.com/frontend/html-tags#video" target="_blank" rel="noopener">video</a></td><td>视频</td></tr><tr><td><a href="https://ringoer.com/frontend/html-tags#audio" target="_blank" rel="noopener">audio</a></td><td>音频</td></tr><tr><td><a href="https://ringoer.com/frontend/html-tags#canvas" target="_blank" rel="noopener">canvas</a></td><td>画图</td></tr><tr><td><a href="https://ringoer.com/frontend/html-tags#svg" target="_blank" rel="noopener">svg</a></td><td>矢量图</td></tr></tbody></table><h2 id="其余标签"><a href="#其余标签" class="headerlink" title="其余标签"></a>其余标签</h2><p>其余标签并不是很重要，有兴趣的话可以 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/HTML/HTML5/HTML5_element_list" target="_blank" rel="noopener">点我查看</a></p><h1 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h1><p>刚才说到根元素有 lang 属性，用于指明文档语言</p><p>显然不同的标签有共通属性，也有专有属性</p><h2 id="全局属性"><a href="#全局属性" class="headerlink" title="全局属性"></a>全局属性</h2><table><thead><tr><th>属性名</th><th>含义</th></tr></thead><tbody><tr><td>class</td><td>css 类</td></tr><tr><td>hidden</td><td>visible=hidden，此时有渲染，但无事件</td></tr><tr><td>id</td><td>声明全局唯一 id，但需要程序员手动控制</td></tr><tr><td>style</td><td>内联样式</td></tr><tr><td>tabindex</td><td>指定 tab 的顺序，使用正整数，越小越优先；=0则最后；=-1则不会被 tab 访问</td></tr><tr><td>title</td><td>指定所在元素的说明，在鼠标放置在该元素上时会显示浮窗</td></tr></tbody></table><h2 id="专有属性"><a href="#专有属性" class="headerlink" title="专有属性"></a>专有属性</h2><p>请前往 <a href="#important">重要标签</a> 查看，或查阅 MDN</p><p>谢谢阅读</p>]]></content>
      
      
      <categories>
          
          <category> frontend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frontend </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图解非对称加密</title>
      <link href="/algorithm/rsa/"/>
      <url>/algorithm/rsa/</url>
      
        <content type="html"><![CDATA[<p>学习 HTTPS 必备的 RSA 算法的基础</p><a id="more"></a><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>所谓非对称加密，就是服务器和客户端，在不直接互通私钥的情况下，通过公钥和互相发送的密文，推出本次连接使用的密钥</p><p>非对称加密涉及的数学原理非常多，想了解的可以看 <a href="https://blog.csdn.net/wjiabin/article/details/85228078" target="_blank" rel="noopener">非对称加密算法–RSA加密原理</a></p><p>本文不解释数学原理，只讲解加密的具体流程</p><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><p>首先看下图，下图对流程作出了简单描述</p><p><img src="https://pic.ringoer.com/RSA%E5%9B%BE%E8%A7%A3.png" alt="RSA图解"></p><p>接下来开始具体描述</p><ol><li>设服务器有一组公钥 [k1,k2] 和一个取余公式 <code>p=&gt;k1**p%k2</code>，其中 k1、k2、p 均要求是质数</li><li>服务器收到了客户端的连接请求，将公钥发给客户端</li><li>服务器产生一个<strong>随机质数</strong> p，代入公钥求得密文 m1，发送给客户端</li><li>客户端也产生一个<strong>随机质数</strong> q，代入公钥求得密文 m2，发送给服务器</li><li>服务器和客户端各自使用自己收到的密文，取代公钥中的 k1，求得结果就是共同的密钥</li><li>往后的通信中，双方均使用该密钥，进行对称加密通信</li></ol><p>显然 k2 要尽可能大，才能尽可能减小碰撞</p><p>现在代入值计算一下是否正确</p><ol><li>设 k1=13，k2=31，p=23，q=19</li><li><code>m1 = 13**23%31 =24</code>，<code>m2 = 13**19%31 = 21</code></li><li><code>21**23%31 = 17</code>，<code>24**19%31 = 17</code></li><li>验证完毕</li></ol><p>感兴趣的朋友可以自行验证一下，面试的时候能答出上述流程就行了</p><p>至于数学原理，我不知道你能不能看懂，反正我看不懂，2333</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git远程操作</title>
      <link href="/programing/remoteGit/"/>
      <url>/programing/remoteGit/</url>
      
        <content type="html"><![CDATA[<p>有了本地操作，肯定还得保存到云端</p><a id="more"></a><h1 id="配置连接"><a href="#配置连接" class="headerlink" title="配置连接"></a>配置连接</h1><p>默认 <a href="https://ringoer.com/programing/localGit/" target="_blank" rel="noopener">本地操作</a> 中的配置已经完成了</p><p>以下命令全部都在 bash 中执行</p><h2 id="ssh-原理"><a href="#ssh-原理" class="headerlink" title="ssh 原理"></a>ssh 原理</h2><p>ssh 是基于非对称加密的 RSA 算法，<a href="https://ringoer.com/algorithm/rsa/" target="_blank" rel="noopener">算法流程请点我</a></p><p>通过 ssh 加密，使得本地和远程可以安全地通信</p><h2 id="生成-ssh-密钥"><a href="#生成-ssh-密钥" class="headerlink" title="生成 ssh 密钥"></a>生成 ssh 密钥</h2><p>执行命令 <code>ssh-keygen -t rsa -C ringoer@qq.com</code></p><p>此时会生成ssh密钥。命令中邮件地址替换为自己的</p><h2 id="查看密钥"><a href="#查看密钥" class="headerlink" title="查看密钥"></a>查看密钥</h2><p>执行命令 <code>cat ~/.ssh/id_rsa.pub</code></p><p>此时会在控制台显示一串密钥，复制下来</p><h2 id="设置密钥"><a href="#设置密钥" class="headerlink" title="设置密钥"></a>设置密钥</h2><p>打开 github，打开 settings，选择 SSH and GPG keys，选择 New SSH key</p><p>title 随便写，key 的文本则填写刚才复制出来的密钥，然后 add key</p><p>一台电脑只需要一个密钥</p><h2 id="测试配对"><a href="#测试配对" class="headerlink" title="测试配对"></a>测试配对</h2><p>执行命令 <code>ssh -T git@github.com</code></p><p>如遇询问 yes or no，请输入 yes 并继续</p><h2 id="设置目标仓库"><a href="#设置目标仓库" class="headerlink" title="设置目标仓库"></a>设置目标仓库</h2><p>在 github 上新建一个 repository，然后复制其 ssh 地址，形如 <a href="mailto:`git@github.com" target="_blank" rel="noopener">`git@github.com</a>:Ringoer/xxx.git`</p><p>注意不要复制到 HTTPS 地址</p><p>然后在本地执行命令 <code>git remote add origin git@github.com:Ringoer/xxx.git</code></p><p>执行后会在本地仓库创建一个名为 origin 的仓库，指向目标远程仓库</p><p>理论上可以随意命名这个仓库，不叫 origin 也可以，但是业界潜规则就是第一个仓库要叫 origin。如果以后新建了其它仓库，可以自己尝试叫别的名字</p><p>如果忘记自己配置了哪些远程仓库，可以通过命令 <code>git remote -v</code> 来查看在当前本地仓库配置的所有远程仓库及其别名</p><p>创建完成后，就可以直接通过 origin 操作远程仓库了</p><p>然后就又是我们熟悉的 CRUD 了</p><p>但是在 Git 远程操作中，略有些变化，大致如下表</p><table><thead><tr><th>动作</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td>push</td><td>推送本地仓库代码到远程仓库</td><td>会在远程仓库强制创建分支</td></tr><tr><td>pull</td><td>从远程仓库拉取指定分支的代码到本地</td><td>要求本地已有对应分支</td></tr><tr><td>clone</td><td>从远程仓库克隆指定分支的代码到本地</td><td>最好在空目录下克隆，否则会覆盖已有内容</td></tr></tbody></table><h1 id="push"><a href="#push" class="headerlink" title="push"></a>push</h1><p>通过命令 <code>git push</code> 可以上传本地仓库的代码到远程仓库</p><p>该命令有如下变体</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>git push -u origin master</td><td>推送本地仓库的 master 分支到远程仓库的 master 分支，并将该远程仓库设置为上传流（upstream）</td></tr><tr><td>git push</td><td>推送本地仓库所有修改到被设置为 upstream 的远程仓库</td></tr><tr><td>git push origin master</td><td>推送本地仓库的 master 分支到远程仓库的 master 分支</td></tr><tr><td>git push origin master:child</td><td>推送本地仓库的 master 分支到远程仓库的 child 分支，格式是 本地:远程</td></tr></tbody></table><h1 id="clone"><a href="#clone" class="headerlink" title="clone"></a>clone</h1><p>通过命令 <code>git clone</code> 可以拉取远程仓库代码到本地仓库</p><p>该命令有如下变体</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>git clone [git]</td><td>拉取指定 git 地址对应的仓库的所有分支代码，到新目录中，新目录与远程 repository 的名字相同</td></tr><tr><td>git clone [git] .</td><td>拉取指定 git 地址对应的仓库的所有分支代码，到当前目录中</td></tr><tr><td>git clone [git] [folderName]</td><td>拉取指定 git 地址对应的仓库的所有分支代码，到指定名字目录中，若该目录不存在会被新建，否则已有内容会被覆盖</td></tr></tbody></table><p>注意，执行 clone 之后不会自动进入新文件夹，需要手动进入</p><h1 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h1><p>通过命令 <code>git pull</code> 可以拉取远程仓库代码到本地仓库已有分支</p><p>该命令可能会产生冲突</p><p>该命令有如下变体</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>git pull</td><td>拉取 upstream 仓库的，与当前所在分支相同的分支的所有内容到本地</td></tr><tr><td>git pull origin master:child</td><td>拉取 origin 仓库的，master 分支的代码到本地 child 分支</td></tr></tbody></table><p>在该命令中如果想回避冲突，可以使用 <code>git stash</code> 和 <code>git stash pop</code> 组合命令</p><h1 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h1><h2 id="压栈"><a href="#压栈" class="headerlink" title="压栈"></a>压栈</h2><p>通过命令 <code>git stash</code> 可以将本地仓库已经标记但还未 commit 的文件隐藏进缓存栈中</p><p>此时执行 <code>git pull</code> 不会与缓存栈中文件作对比</p><p>可以多次执行命令 <code>git stash</code> 来不断压栈</p><h2 id="弹出"><a href="#弹出" class="headerlink" title="弹出"></a>弹出</h2><p>当 pull 完成后可以通过命令 <code>git stash pop</code> 来弹出栈顶内容</p><p>可以根据需要来弹出，但因为栈的特性，必然是只能按顺序弹出</p><p>该操作可能会引起冲突</p><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>可以通过命令 <code>git stash list</code> 来查看当前缓存栈中保存的内容</p><h2 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h2><p>可以通过命令 <code>git stash clear</code> 来清空缓存栈中所需内容</p><p>注意，该操作不可复原</p><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a><span id="other">其它</span></h1><h2 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h2><p>可以通过 <code>code ~/.bashrc</code> 命令，通过 vscode 打开 bash 配置文件</p><p>然后通过 alias 指令，指定缩写</p><p>如 <code>alias ga=&quot;git add&quot;</code> 来令缩写命令 ga 等效于 git add 命令</p><p>不止 git 命令，其它 bash 命令也可以通过这种方法设置缩写</p><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p>可以通过 <code>git rebase</code> 命令来为 git log 指定排版</p><p>假设现在有三个版本，版本号如图</p><table><thead><tr><th>版本</th><th>版本号</th></tr></thead><tbody><tr><td>1</td><td>bikh345</td></tr><tr><td>2</td><td>12jop3i</td></tr><tr><td>3（最新）</td><td>u09dsf3</td></tr></tbody></table><p>现在想合并已有版本1和2，使得日志缩短，可以通过命令 <code>git rebase -i u09dsf3</code> 来告诉 git，我想对 u09dsf3 之前的版本进行修改</p><p>此时 git 会弹出默认编辑器，向你请求修改，同时会给出帮助，按帮助修改即可</p><p>修改完毕后，保存，关闭这个文件，git 就会开始处理你的修改</p><p>在处理完成之前，如果你反悔了，可以通过命令 <code>git rebase --abort</code> 来取消这次 rebase</p><p>如果又反悔了（什么人啊这是），可以通过命令 <code>git rebase --continue</code> 来继续这次 rebase</p><p>rebase 也有可能出错，看看日志解决即可</p><p>大概就这些</p><p>感谢饥人谷对 <a href="#other">其它</a> 部分的帮助</p>]]></content>
      
      
      <categories>
          
          <category> programing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> programing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git本地操作</title>
      <link href="/programing/localGit/"/>
      <url>/programing/localGit/</url>
      
        <content type="html"><![CDATA[<p>关于提交到 github 之前，在本地仓库的操作</p><a id="more"></a><p>在使用 Git 之前，要先配置一下本地的 Git Bash</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>一般来说，有如下6行配置，是建议运行的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name [yourName]</span><br><span class="line">git config --global user.email [yourEmail]</span><br><span class="line">git config --global push.default simple</span><br><span class="line">git config --global core.quotepath <span class="literal">false</span></span><br><span class="line">git config --global core.editor <span class="string">"code --wait"</span></span><br><span class="line">git config --global core.autocrlf input</span><br></pre></td></tr></table></figure><h2 id="user"><a href="#user" class="headerlink" title="user"></a>user</h2><p>这两行是必须执行的，用于告诉 Git 你的个人信息</p><p>例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name Ringoer</span><br><span class="line">git config --global user.email ringoer@qq.com</span><br></pre></td></tr></table></figure><h2 id="push-default"><a href="#push-default" class="headerlink" title="push.default"></a>push.default</h2><p>这个参数有两个可取的值，具体如下</p><table><thead><tr><th>参数值</th><th>版本</th><th>行为</th></tr></thead><tbody><tr><td>matching</td><td>1.x 版本默认</td><td>上传本地所有分支</td></tr><tr><td>simple</td><td>2.x 版本默认</td><td>上传本地当前分支</td></tr></tbody></table><p>建议手动执行一下该命令，以免出现意外的上传</p><h2 id="core-quotepath"><a href="#core-quotepath" class="headerlink" title="core.quotepath"></a>core.quotepath</h2><p>用于配置是否开启路径转义，默认值是 true，表示中文路径名或文件名要自动转义为形如 <code>\xx\xx</code> 的类似 unicode 的形式</p><h2 id="core-editor"><a href="#core-editor" class="headerlink" title="core.editor"></a>core.editor</h2><p>用于指定当 Git 希望打开一个文本编辑器时，执行的命令行。默认值是 vi，表示启动 vim</p><h2 id="core-autocrlf"><a href="#core-autocrlf" class="headerlink" title="core.autocrlf"></a>core.autocrlf</h2><p>首先了解一下 CRLF、CR、LF 分别是什么</p><table><thead><tr><th>参数值</th><th>对应转义字符</th></tr></thead><tbody><tr><td>CRLF</td><td>\r\n</td></tr><tr><td>CR</td><td>\r</td></tr><tr><td>LF</td><td>\n</td></tr></tbody></table><p><code>core.autocrlf</code> 用于指定行结束符 LF 和 CRLF 之间的转换，具体如下</p><table><thead><tr><th>参数值</th><th>提交（commit）行为</th><th>签出（checkout）行为</th></tr></thead><tbody><tr><td>true（默认）</td><td>CRLF 转换为 LF</td><td>LF 转换为 CRLF</td></tr><tr><td>input</td><td>CRLF 转换为 LF</td><td>不转换</td></tr><tr><td>false</td><td>不转换</td><td>不转换</td></tr></tbody></table><p>鉴于 Windows 下的行结束符通常是 CRLF，Mac 和 Linux 下通常是 LF，所以最好是选择 input 参数值，以免产生跨平台协作问题</p><p>说到 Git 本地操作，那必然也是对某目标的 CRUD。是什么目标呢？是分支</p><h1 id="分支（Branch）"><a href="#分支（Branch）" class="headerlink" title="分支（Branch）"></a>分支（Branch）</h1><p>首先要了解什么是分支</p><p>每当我们想保存代码的时候，往往有很多文件，组成一个项目。这个项目此时此刻的所有状态，合称为一个<strong>版本</strong>，而这个项目的所有版本，都处于同一个<strong>分支</strong>之中</p><h1 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h1><p>一般有两种新增</p><ul><li>初始化本地仓库时，新增默认的分支</li><li>已有分支的情况下，新增新的分支</li></ul><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>首先通过 <code>cd</code> 命令进入项目所在目录，然后使用 <code>git init</code> 来完成本地仓库的初始化</p><p>初始化完成之后，会在该目录中产生一个 <code>.git</code> 文件夹，这个就是本地仓库</p><p>默认分支是 <code>master</code>，但由于 zzzq 等原因，现在默认分支改名叫 <code>main</code></p><p>初始化完成后，<code>.git</code> 目录下会有一个名为 <code>.gitignore</code> 的文本文档，里面用类正则表达式写法，指明了在提交操作中应该忽略哪些文件</p><h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><p>现在我们已经有一个 <code>master</code> 分支了，想要新增一个分支</p><p>可以使用 <code>git branch [branchName]</code> 命令来新增分支</p><p>假设新分支名为 <code>child</code>，那么命令就是 <code>git branch child</code>，此时就新建了一个名为 <code>child</code> 的新分支</p><p>注意该操作仅创建了分支，不会自动移动到新分支</p><h1 id="Retrieve"><a href="#Retrieve" class="headerlink" title="Retrieve"></a>Retrieve</h1><h2 id="查看所有分支情况"><a href="#查看所有分支情况" class="headerlink" title="查看所有分支情况"></a>查看所有分支情况</h2><p>可以使用 <code>git branch</code> 查看本地仓库中的所有分支名称</p><h2 id="查看当前分支情况"><a href="#查看当前分支情况" class="headerlink" title="查看当前分支情况"></a>查看当前分支情况</h2><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><p>可以通过 <code>git status</code> 命令查看当前分支的状态</p><p>通常会显示以下种内容</p><ol><li>还未执行 <a href="#add">标记</a> 的文件列表</li><li>已经执行 <a href="#add">标记</a> ，还未执行 <a href="#commit">提交</a>  的文件列表</li><li>存在 <a href="#conflict">冲突</a> 的文件列表</li></ol><p>可以通过 <code>-sb</code> 选项简化显示的内容（只显示文件列表）</p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>日志有两种，log 和 reflog，关于其差别请阅读 <a href="#reset">重置</a> 部分内容</p><p>每条日志都记录了一次提交，包括这次提交的版本号、理由等</p><p>可以通过 <code>git log</code> 命令查看当前分支的局部日志（不包括重置操作）</p><p>可以通过 <code>git reflog</code> 命令查看当前分支的所有日志（包括重置操作）</p><h1 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h1><p>要让增删有意义，那么自然是要进行符合我心意的修改了</p><p>此处的修改分支，是指修改本地仓库内保存的分支内容</p><h2 id="提交"><a href="#提交" class="headerlink" title="提交"></a><span id="commit">提交</span></h2><p>初始化的分支，或是新建的分支，里面都是没有内容的。如何让它充实呢？</p><p>可以通过 <code>git commit</code> 命令让它充实。</p><p>但是仅仅是 <code>git commit</code> 来上传新版本的话，以后无法查询版本更新信息，所以我们需要 -m 和 -v 参数</p><h3 id="m"><a href="#m" class="headerlink" title="-m"></a>-m</h3><p><code>git commit -m [string]</code> 表示将 -m 选项后的字符串作为本次提交的理由（备注），使得后续可以查看该版本提交时的相关信息</p><p>但是 -m 因为是在命令行中直接给出，人在潜意识影响下会倾向于写短理由，不利于以后查询，所以有了 -v 选项</p><h3 id="v"><a href="#v" class="headerlink" title="-v"></a>-v</h3><p><code>git commit -v</code> 可以打开 Git 默认的文本编辑器（默认是 vim）来等待用户写入提交理由，直到用户在新打开的文件中写完理由并保存后才会继续提交</p><p>因为是在新文件中书写理由，视野比较开阔，会更容易写出更易阅读的理由，所以推荐手动上传时，使用 -v 选项，自动上传时才选择 -m 选项</p><p>但是 Git 怎么知道你要上传哪些内容呢？万一你只修改了部分文件，只想上传这一部分，怎么办呢</p><h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a><span id="add">标记</span></h2><p>可以通过 <code>git add [filename]</code> 命令来标记要提交的文件</p><p>可以用 <code>git add .</code> 来标记目录下的所有文件（注意点号）</p><p>此处的标记，指的是“将要同步到本地仓库当前分支的更新”，一般有三种情况</p><table><thead><tr><th>文件状态</th><th>释义</th><th>commit 后的行为</th></tr></thead><tbody><tr><td>New</td><td>新建</td><td>向本地仓库当前分支中 <strong>添加</strong> 该文件</td></tr><tr><td>Modified</td><td>更新</td><td><strong>修改</strong> 本地仓库当前分支中的对应文件</td></tr><tr><td>Deleted</td><td>删除</td><td>从本地仓库当前分支中 <strong>删除</strong> 该文件</td></tr></tbody></table><p>可见，虽然命令中采用的是 <code>add</code> 短语，但实际上表达的意思是“添加标记”，而不是单纯的“新增”</p><p>只有当文件被标记后，才可以在下一次 commit 操作中被提交到本地仓库</p><p>怎么办，代码写着写着，发现以前的某个版本更优秀，我想回去————</p><h2 id="重置"><a href="#重置" class="headerlink" title="重置"></a><span id="reset">重置</span></h2><p>可以通过 <code>git reset --hard [version]</code> 来切换版本</p><p>版本号可以打完整，也可以打前缀，一般选择7位前缀</p><p>查看版本号，可以通过 <code>git log</code> 或 <code>git reflog</code> 来查看，或前往 github 网站，通过可视化界面查看</p><p>假设现在是版本4，想切换到版本2，那么切换后，log 里只会保留如下内容（简单说法）</p><ol><li>commit 版本1</li><li>commit 版本2</li></ol><p>而 reflog 里会保留所有内容</p><ol><li>commit 版本1</li><li>commit 版本2</li><li>commit 版本3</li><li>commit 版本4</li><li>reset 版本2</li></ol><p>注意一旦切换版本，将会丢失当前所有修改，请确保备份</p><p>如果不想重置所有修改，也可以选择回滚部分事务</p><h2 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h2><p>可以通过 <code>git revert [version]</code> 来回滚当前分支上的某次提交事务</p><p>可能产生 <a href="#conflict">冲突</a></p><h1 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h1><p>可以通过 <code>git branch -d [branchName]</code> 来删除指定分支</p><p>注意删除后该分支所以内容都会从本地消失，请确保已经备份</p><p>有很多操作会产生冲突，怎么办呢？</p><h1 id="冲突"><a href="#冲突" class="headerlink" title="冲突"></a><span id="conflict">冲突</span></h1><p>当发生冲突的时候，首先要找到冲突</p><p>前述的 <code>git status</code> 命令，就可以找到现在有冲突的文件</p><p>然后我们需要手动解决冲突</p><p>假设有文件 1.txt，里面的原内容是 <code>今天是2020年11月16日</code>，新内容是 <code>今天是1970年1月1日</code></p><p>当要将新内容同步到 1.txt 时，就会发生冲突</p><p>此时 1.txt 内容变更为类似如下模样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD(当前更改)</span><br><span class="line">今天是2020年11月16日</span><br><span class="line">=======</span><br><span class="line">今天是1970年1月1日</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; child(传入的更改)</span><br></pre></td></tr></table></figure><p>可见冲突的格式是以 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code> 开头，以 <code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code> 结尾，以 <code>=======</code> 分隔</p><p>所以当我们打开一个可能有冲突的文件时，可以搜索 <code>=======</code> 来快速定位冲突在文件中的位置</p><p>此时我们怎么处理这个冲突呢？</p><p>可以选择性保留我们想要的字段，假设保留新内容，那么可以对 1.txt 作出如下操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; master(当前更改) 【删除该行】</span><br><span class="line">今天是2020年11月16日     【删除该行】</span><br><span class="line">=======                  【删除该行】</span><br><span class="line">今天是1970年1月1日</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; child(传入的更改)【删除该行】</span><br></pre></td></tr></table></figure><p>只保留我们需要的部分，其余部分删除</p><p>那刚才创建的新分支又有什么用呢？</p><h1 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h1><h2 id="检出"><a href="#检出" class="headerlink" title="检出"></a>检出</h2><p>可以通过 <code>git checkout [branchName]</code> 命令来改变 Git 当前所在的分支</p><p>该操作称之为 <strong>检出</strong></p><p>当执行该命令时，会将指定分支的最后一次提交的内容同步到当前目录下</p><p>该操作可能会产生冲突</p><p>若同步前的文件内容与将要同步下来的内容无冲突，则保留同步前的文件；若冲突，则需要先解决冲突，解决冲突后<strong>不需要</strong>再次检出</p><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p>可以通过 <code>git merge [branchName]</code> 命令来将目标分支的内容合并到当前分支下</p><p>该操作在完成后，会自动向本地仓库中提交合并的结果，且理由自动设定为 <code>Merge branch [branchName]</code>，表示此次提交是因为合并而产生的</p><p>该操作可能会产生冲突</p><p>当产生冲突时，需要按顺序完成以下步骤以完成合并流程</p><ol><li>解决冲突</li><li><code>git add [冲突的文件]</code></li><li><code>git commit</code>（不需要填写理由）</li></ol><p>如上，即是 Git 本地操作中最常用的部分内容</p><p>谢谢阅读</p>]]></content>
      
      
      <categories>
          
          <category> programing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> programing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用命令行合集</title>
      <link href="/programing/commandLine/"/>
      <url>/programing/commandLine/</url>
      
        <content type="html"><![CDATA[<p>20201113命令行总结</p><a id="more"></a><p>首先我们要打开命令行，应该使用 <code>git bash</code> 而不是 Windows cmd，因为命令行实际上就是 bash 脚本语言</p><p>关于安装命令行，可以参考 <a href="https://ringoer.com/others/MyWebsiteGuide/" target="_blank" rel="noopener">本站建站指导</a></p><p>命令行的默认目录一般是形如 <code>C:\Users\Ringoer</code> ，这里被称之为用户目录，可以缩写为英文波浪线 <code>~</code></p><p>然后我们可能要先切换目录到达目标目录</p><h1 id="切换目录"><a href="#切换目录" class="headerlink" title="切换目录"></a>切换目录</h1><p>要切换到根目录（盘符的上级目录）的话，非常容易，只需要 <code>cd /</code> 就行了，此处 <code>/</code> 表示系统根目录</p><p>切换盘符的话，也挺简单的，直接在命令行输入盘符+冒号即可。例如 <code>D:</code> 可以切换到 D 盘</p><p>切换目录使用命令 <code>cd</code> ，是 <code>change directory</code> 的缩写。使用方法一般有两种</p><ul><li>绝对目录</li><li>相对目录</li></ul><h2 id="绝对目录"><a href="#绝对目录" class="headerlink" title="绝对目录"></a>绝对目录</h2><p>一般指从盘符开始的目录描述，比如 <code>C:\Users\Ringoer</code> 就是一个标准的绝对目录</p><p>需要注意，上面说到用户目录缩写是 <code>~</code> ，所以 <code>~</code> 也是一个绝对目录</p><h2 id="相对目录"><a href="#相对目录" class="headerlink" title="相对目录"></a>相对目录</h2><p>相对目录的写法一般根据当前目录决定。</p><p>首先我们可以在命令行上看到自己当前所在的目录，也可以使用命令 <code>pwd</code> 来显示当前目录</p><p>然后，我们可以选择前往上一级目录，此时可以使用命令 <code>cd ..</code> ，注意一定是两个点表示上级目录，如果是一个点则表示当前目录</p><p>不知道要去哪个目录怎么办？没关系，可以使用命令 <code>ls</code> （注意是字母 L 的小写）来查看当前目录下的所有子目录或文件，然后 <code>cd 子目录名称</code> 或 <code>cd ./子目录名称</code> 即可进入目标子目录</p><p>说到命令行，那最大的用处，肯定是对文件 CRUD 啦</p><h1 id="Create-新增"><a href="#Create-新增" class="headerlink" title="Create-新增"></a>Create-新增</h1><p>创建一个新文件，一般有两种类型</p><ul><li>从零创建</li><li>从已有创建</li></ul><h2 id="从零创建"><a href="#从零创建" class="headerlink" title="从零创建"></a>从零创建</h2><p>一般使用 <code>touch [...filename]</code> 来创建文件</p><p>其中 <code>...</code> 是 spread 语法，表示不定长参数列表，下同</p><p>若目标文件不存在，则在当前目录创建这个文件</p><p>若目标文件已经存在，则更新最后更新时间</p><h2 id="从已有创建"><a href="#从已有创建" class="headerlink" title="从已有创建"></a>从已有创建</h2><p>一般使用 <code>cp [filename1] [filename2]</code> 来复制文件</p><p>将 文件1 的内容全数复制到 文件2 中</p><h2 id="文件夹"><a href="#文件夹" class="headerlink" title="文件夹"></a>文件夹</h2><p>文件夹也有如上两种情况，分别采用</p><ul><li><code>mkdir [...directoryName]</code></li><li><code>cp -r [directoryName1] [directoryName2]</code></li></ul><p>来创建文件夹</p><p>其中参数 -r 表示 递归地复制，概念与 js 中的深度拷贝相同</p><h1 id="Retrieve-查询"><a href="#Retrieve-查询" class="headerlink" title="Retrieve-查询"></a>Retrieve-查询</h1><p>一般有 4 种查询语句</p><table><thead><tr><th>语句</th><th>描述</th></tr></thead><tbody><tr><td>cat […filename]</td><td>全量查看文件</td></tr><tr><td>head -n [line] […filename]</td><td>查看文件前 n 行</td></tr><tr><td>tail -n [line] […filename]</td><td>查看文件后 n 行</td></tr><tr><td>less [filename]</td><td>分页查看文件</td></tr></tbody></table><h1 id="Update-修改"><a href="#Update-修改" class="headerlink" title="Update-修改"></a>Update-修改</h1><p>显然修改文件和文件夹是不一样的</p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>查询中前三种语句，都是有确定的返回内容的，此时可以通过 <code>&gt; [filename]</code> 将返回内容导入到新的文件中。该命令会覆盖目标文件原有内容</p><p>例如，<code>cat 1.txt 2.txt &gt; 3.txt</code> ，将 1.txt 和 2.txt 的内容都全量导出，然后拼接在一起，之后保存到 3.txt 中</p><p>也可以通过 <code>&gt;&gt; [filename]</code> 将返回内容导入到新的文件中。该命令会将新内容拼接到目标文件原有内容末尾</p><p>例如，<code>cat 1.txt 2.txt &gt;&gt; 3.txt</code> ，将 1.txt 和 2.txt 的内容都全量导出，然后拼接在一起，之后拼接到 3.txt 的末尾</p><p>刚才说到”确定的返回内容”，就不得不说说回显命令 <code>echo [body]</code> ，用于将参数体的内容原封不动回显到标准输出中。显然，echo 命令也可以通过 <code>&gt; [filename]</code> 和 <code>&gt;&gt; [filename]</code> 重定向到文件中</p><p>echo 还可以输出 bash 脚本代码，实际上就是输出字符串，需要双引号</p><p>例如 <code>echo &quot;hello world&quot;</code> ，英文引号，懂得都懂</p><h2 id="文件夹-1"><a href="#文件夹-1" class="headerlink" title="文件夹"></a>文件夹</h2><p>修改文件夹是什么意思呢？对比修改文件是指修改其中保存的内容，那修改文件夹显然就是修改文件夹中保存的文件列表</p><p>我们可以通过 <code>mv [...filename] [directoryName]</code> 命令来将文件移动到目标文件夹中</p><p>其中文件可以指定不少于 1 的任意多个，但目标文件夹只能有一个</p><p>mv，实际上是 <code>move</code> 的缩写。</p><h2 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h2><p>说到这里，肯定会有同学想问，如何重命名呢？这就需要我们刚刚说的 <code>mv</code> 命令了</p><p><code>mv [file1] [file2]</code> 可以实现将文件1重命名为文件2</p><p><code>mv [directory1] [directory2]</code> 可以实现将文件夹1重命名为文件夹2</p><p>如果文件2已经存在会怎么样呢？</p><p>那么文件1会改名为文件2，而文件2会被删除</p><h1 id="Delete-删除"><a href="#Delete-删除" class="headerlink" title="Delete-删除"></a>Delete-删除</h1><p>删除一个文件，一般使用 <code>rm [filename]</code> 来删除，其中 <code>rm</code> 是 <code>remove</code> 的缩写</p><p>如果删除目标是一个文件夹，一般使用 <code>rm -r [directoryName]</code> 来删除，其中参数 -r 同上</p><p>有时候要删除某个文件或文件夹的时候，会触发警告，此时可以通过 <code>-f</code> 来强制删除文件或 <code>-rf</code> 来强制删除文件夹，这也是 <code>rm -rf /</code> 删库跑路的来源。但此举非常不推荐，否则很容易就把重要文件删了导致系统崩溃</p><p>但是测试 CRUD 的时候，总是要重复运行很多代码，好烦啊，有没有方便的办法呢？</p><h1 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h1><p>显然我们在上面测试的时候，经常会重复运行代码，输入内容等等。比如下方代码就是一个可能的情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"Waiting..."</span> &gt; 1.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello world"</span> &gt;&gt; 1.txt</span><br><span class="line"></span><br><span class="line">cp 1.txt 2.txt</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"success"</span> &gt;&gt; 2.txt</span><br><span class="line"></span><br><span class="line">cat 1.txt 2.txt &gt; 3.txt</span><br><span class="line"></span><br><span class="line">mkdir <span class="built_in">test</span></span><br><span class="line">mv 1.txt 2.txt 3.txt <span class="built_in">test</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">tail -n 4 3.txt &gt; 4.txt</span><br><span class="line"></span><br><span class="line">less 4.txt</span><br></pre></td></tr></table></figure><p>但是我们总不能每一次测试都手打一遍？所以我们要将它保存为一个单独的 bash 代码文件，称之为 bash 脚本，它一旦运行起来，就可以帮助我们运行设定好的代码。</p><p>假设我们把它保存为 <code>node.exe</code>，或者干脆不要 exe，直接叫做 <code>node</code> </p><p>实际上，对于系统来说，文件后缀是不是 exe 并不是很重要，只要是机器能读懂的语言，都是可执行文件</p><p>如果你不是 windows 系统，需要先执行 <code>chmod +x [filename]</code> 命令，来赋予文件执行的权能</p><p>然后一般有三种方法运行你的可执行文件。假设此处运行当前目录下的 <code>node</code>，它是一个删除了 exe 后缀的原 exe 文件</p><ol><li><code>./node</code>，其中单个 <code>.</code> 表示当前目录</li><li><code>sh node</code>，其中 <code>sh</code> 表示将其当作 bash 脚本启动</li><li><code>node</code></li></ol><p>第一种和第二种没有什么区别，主要是第三种</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>前面我们讲过可以通过 <code>ls</code> 查看当前目录下的文件列表，那系统怎么知道 ls 是什么命令呢？答案就在系统环境变量 PATH 中</p><p>因为 PATH 中登记了 ls 所在的目录，所以系统能找到 ls 的指向</p><p>那么答案就很明确了，我们可以把我们现在的运行目录也登记到 PATH 中，就可以通过 <code>node</code> 直接运行我们的可执行文件了</p><h2 id="命名冲突"><a href="#命名冲突" class="headerlink" title="命名冲突"></a>命名冲突</h2><p>但是大家电脑上都已经安装了 nodejs 了吧？这时如果直接在命令行中执行 <code>node</code> 命令，往往会启动了 nodejs 的 node.exe 。那怎么让我们的 node 文件更优先呢？</p><p>答案还是在 PATH 身上</p><p>刚才设置 PATH 的时候，可以注意到，PATH 列表右侧有”上移””下移”按钮，可以推测目录在 PATH 中的注册顺序是影响调用决策的重要条件。那么我们把我们的工作目录上移到比 nodejs 目录更上方的位置</p><p>此时如果你不是 windows 环境，应该可以看到命令行正常输出了你的 node 文件的内容了。但如果是 windows 环境……还有一个坑点，那就是 windows 环境在决策时 exe 后缀的文件优先级更高。那么把你的 node 文件改名为 node.exe，ok，大功告成！</p><p>好了，关于命令行，我暂且只有这些想说的，谢谢你看到这里，快回去自己动手试验一下吧！</p>]]></content>
      
      
      <categories>
          
          <category> programing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> commandLine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置HTTPS方案</title>
      <link href="/https/https/"/>
      <url>/https/https/</url>
      
        <content type="html"><![CDATA[<p>HTTPS配置方案</p><a id="more"></a><p>本文基于腾讯云的域名配置，以及七牛云CDN和自建CDN两种情况</p><h1 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h1><ol><li><p>打开腾讯云，找到SSL证书</p><p><img src="https://pic.ringoer.com/https-1.png" alt="SSL"></p></li><li><p>选择申请免费证书</p><p><img src="https://pic.ringoer.com/https-2.png" alt="申请免费证书"></p></li><li><p>填写要配置https的域名，最好是已经配置云解析的域名</p><p><img src="https://pic.ringoer.com/https-3.png" alt="填写信息"></p></li><li><p>等待10分钟左右，之后下载</p><p><img src="https://pic.ringoer.com/https-4.png" alt="下载"></p></li><li><p>下载完成，解压后，得到如图目录</p><p><img src="https://pic.ringoer.com/https-5.png" alt="下载"></p><p>其中Apache内容</p><p><img src="https://pic.ringoer.com/https-apache.png" alt="下载"></p><p>Nginx内容</p><p><img src="https://pic.ringoer.com/https-nginx.png" alt="下载"></p></li></ol><h1 id="七牛云CDN"><a href="#七牛云CDN" class="headerlink" title="七牛云CDN"></a>七牛云CDN</h1><ol><li>打开七牛云SSL证书服务</li></ol><p><img src="https://pic.ringoer.com/https-7.png" alt=""></p><ol start="2"><li><p>上传已有证书</p><p><img src="https://pic.ringoer.com/https-8.png" alt="下载"></p></li><li><p>打开下载好的证书的Apache文件夹，找到同名但后缀不同的两个文件，然后贴入文本框中</p><p><img src="https://pic.ringoer.com/https-9.png" alt="下载"></p></li><li><p>上传完毕后可在我的证书中看到，点击部署CDN</p><p><img src="https://pic.ringoer.com/https-10.png" alt="下载"></p></li><li><p>如果你的证书名称和域名一样，那么点击部署即可一键升级HTTPS，然后等待半小时，收到邮件即是升级成功</p><p><img src="https://pic.ringoer.com/https-11.png" alt="下载"></p></li></ol><h1 id="自建CDN"><a href="#自建CDN" class="headerlink" title="自建CDN"></a>自建CDN</h1><ol><li><p>打开Nginx文件夹，将crt和key都上传到服务器的nginx文件夹中</p><p><img src="https://pic.ringoer.com/https-6.png" alt="下载"></p></li><li><p>编辑default.conf文件为如下模样</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl; <span class="comment"># HTTPS的端口号就是443</span></span><br><span class="line">    <span class="attribute">server_name</span>  ali.ringoer.com; <span class="comment"># 你的域名，要与证书一致</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#charset koi8-r;</span></span><br><span class="line">    <span class="attribute">access_log</span>  /var/log/nginx/host.access.log  main;</span><br><span class="line">    <span class="attribute">error_log</span>  /var/log/nginx/error.log  <span class="literal">error</span>;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">ssl_certificate</span>  1_ali.ringoer.com_bundle.crt; <span class="comment"># 你的crt，与你上传的同名</span></span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> 2_ali.ringoer.com.key; <span class="comment"># 你的key，与你上传的同名</span></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>; <span class="comment"># 这几条不变</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">try_files</span>   <span class="variable">$uri</span>  <span class="variable">$uri</span>/  /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">    <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置Dockerfile为如图，注意default.conf配置文件和证书不在同一个文件夹</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> nginx/default.conf /etc/nginx/conf.d/default.conf</span></span><br><span class="line"><span class="bash">COPY nginx/2_ali.ringoer.com.key /etc/nginx/2_ali.ringoer.com.key</span></span><br><span class="line"><span class="bash">COPY nginx/1_ali.ringoer.com_bundle.crt /etc/nginx/1_ali.ringoer.com_bundle.crt</span></span><br></pre></td></tr></table></figure></li><li><p>docker build创建镜像，然后用如下命令挂载目录再运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name static -p 443:443 -v /root/static/dist:/usr/share/nginx/html static</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> https </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> https </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下配置Mysql的办法</title>
      <link href="/mysql/mysql/"/>
      <url>/mysql/mysql/</url>
      
        <content type="html"><![CDATA[<p>不小心还原云主机又忘记备份sql，只好亲自重配一遍了</p><a id="more"></a><h1 id="卸载-mysql"><a href="#卸载-mysql" class="headerlink" title="卸载 mysql"></a>卸载 mysql</h1><p>要想顺利下载，首先要卸载旧版本。</p><ol><li><p>删除 mysql 的数据文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /var/lib/mysql/ -R</span><br></pre></td></tr></table></figure></li><li><p>删除 mysql 的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /etc/mysql/ -R</span><br></pre></td></tr></table></figure></li><li><p>自动卸载 mysql（包括server和client）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get autoremove mysql* --purge</span><br><span class="line"></span><br><span class="line">sudo apt-get remove apparmor</span><br></pre></td></tr></table></figure></li><li><p>检查 mysql 的依赖项</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --list|grep mysql</span><br></pre></td></tr></table></figure></li><li><p>当 4 存在返回值时，使用 <code>sudo apt-get remove xxx</code> 依次卸载</p></li></ol><h1 id="安装-mysql"><a href="#安装-mysql" class="headerlink" title="安装 mysql"></a>安装 mysql</h1><ol><li><p>刷新 apt 存储库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装 mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br></pre></td></tr></table></figure></li><li><p>初始化 mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_secure_installation</span><br></pre></td></tr></table></figure></li><li><p>一大堆配置，如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1</span></span><br><span class="line">VALIDATE PASSWORD PLUGIN can be used to test passwords...</span><br><span class="line">Press y|Y for Yes, any other key for No: N</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">2</span></span><br><span class="line">Please set the password for root here...</span><br><span class="line">New password: (输入密码)</span><br><span class="line">Re-enter new password: (重复输入)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">3</span></span><br><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them...</span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : N</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">4</span></span><br><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">'localhost'. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network...</span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : Y </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">5</span></span><br><span class="line">By default, MySQL comes with a database named 'test' that</span><br><span class="line">anyone can access...</span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : N </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">6</span></span><br><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : Y</span><br></pre></td></tr></table></figure><p>建议选择 N+密码+NYNY</p></li><li><p>检查服务状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysql.service</span><br></pre></td></tr></table></figure><p>如果显示绿色 active(running) 则成功</p></li></ol><h1 id="配置-mysql"><a href="#配置-mysql" class="headerlink" title="配置 mysql"></a>配置 mysql</h1><ol><li><p>前往服务器目录 <code>/etc/mysql/mysql.conf.d</code>，注释掉关于 <code>bind-address</code> 的配置</p></li><li><p>使用命令 <code>sudo mysql -u root -p</code> 进入 root 用户的用户界面</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql;</span><br></pre></td></tr></table></figure><p>选中 database mysql</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host=<span class="string">'%'</span> <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure><p>修改 root 的访问权限为 %，表示允许 root 用户的来自任意 ip 的访问</p></li><li><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">with</span> mysql_native_password <span class="keyword">by</span> <span class="string">'pwd'</span>;</span><br></pre></td></tr></table></figure><p>对于 root 用户，不论任何来源的访问，均要求使用密码登录，密码为末尾字符串中设置的密码</p><p>此处不能使用 password() 函数来构造密码，最新版 mysql 不支持</p><p>此处不能使用 grant all privileges 来授予权限，最新版 mysql 不支持</p></li><li><p>4 和 5 的顺序不能颠倒</p></li></ol><p>好了，此时可以使用 navicat 远程登录 mysql 了</p><h1 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h1><ol><li><p>远程连接服务器报错 2003，连接不上服务器 3306 端口</p><ul><li><p>查看服务器安全策略是否开放这个端口</p></li><li><p>查看上一节的 1</p></li></ul></li><li><p>远程连接服务器报错 1130</p><ul><li>查看上一节的 4</li></ul></li><li><p>远程连接服务器报错 1698</p><ul><li>查看上一节的 5</li></ul></li><li><p>远程连接服务器报错 1045</p><ul><li>不可以直接 update root 用户的密码，否则你直接设置的密码会被解密，然后发现和你输入的密码不一致</li></ul></li></ol><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.cnblogs.com/mjhblog/p/10499772.html" target="_blank" rel="noopener">Ubuntu16.04彻底卸载MySQL</a></p><p><a href="https://blog.csdn.net/weixx3/article/details/80782479" target="_blank" rel="noopener">Ubuntu18.04 安装MySQL</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> mysql </tag>
            
            <tag> server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node.js 学习提纲</title>
      <link href="/web/nodejs/"/>
      <url>/web/nodejs/</url>
      
        <content type="html"><![CDATA[<p>留给自己参考的Node.js学习提纲</p><a id="more"></a><p>目录：  </p><ol><li>HelloWorld</li><li>回调函数</li><li>事件循环</li><li>EventEmitter</li><li>模块系统</li><li>web 模块</li><li>express 框架</li><li>Restful API</li><li>MySQL</li><li>Buffer/Stream</li><li>全局对象</li><li>fs模块</li><li>util模块</li><li>其余常用模块</li></ol><h1 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h1><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>新建一个 server.js 文件，输入以下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送 HTTP 头部 </span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送响应数据 "Hello World"</span></span><br><span class="line">    response.end(<span class="string">'Hello World\n'</span>);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 终端打印如下信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8888/'</span>);</span><br></pre></td></tr></table></figure><p>然后在命令行使用 node 命令执行以上代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure><p>之后访问本地的 8888 端口，就可以看到我们的 HelloWorld 消息了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8888/</span><br></pre></td></tr></table></figure><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>从上面的代码中，我们可以看到，首先代码 require 了一个名为 http 的模块，用来提供 http 服务</p><p>之后使用 http.createServer 方法，传入了一个 function 作为回调方法，用来处理监听到的请求，之后在 8888 端口启动服务，监听该端口的请求。</p><p>在回调方法中可以看到，我们在响应中定义了响应头，其中响应的 http 状态码是200，内容类型是 text/plain，之后在响应中使用 end 方法写入数据并返回</p><h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><p>Node.js 异步编程的直接体现就是回调。</p><p>异步编程依托于回调来实现，但不能说使用了回调后程序就异步化了。</p><p>回调函数在完成任务后就会被调用，Node 使用了大量的回调函数，Node 所有 API 都支持回调函数。</p><p>在之前学过的 ES6 Promise 中，大家一定深有体会。</p><p>回调函数一般作为函数的最后一个参数出现。</p><h2 id="阻塞代码（同步）"><a href="#阻塞代码（同步）" class="headerlink" title="阻塞代码（同步）"></a>阻塞代码（同步）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'input.txt'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(data.toString());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行结束!"</span>);</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line">本站地址：ringoer.com</span><br><span class="line"></span><br><span class="line">程序执行结束!</span><br></pre></td></tr></table></figure><p>可见程序是强顺序执行的，不到读取完毕文件，不会继续执行。</p><h2 id="非阻塞代码（异步）"><a href="#非阻塞代码（异步）" class="headerlink" title="非阻塞代码（异步）"></a>非阻塞代码（异步）</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'input.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行结束!"</span>);</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line">程序执行结束!</span><br><span class="line">本站地址：ringoer.com</span><br></pre></td></tr></table></figure><p>可见程序是先执行完当前任务，再在读取文件完成的时候打印文件内容的。</p><p>以上两个实例我们了解了阻塞与非阻塞调用的不同。</p><p>第一个实例在文件读取完后才执行程序， 第二个实例我们不需要等待文件读取完，这样就可以在读取文件时同时执行接下来的代码，大大提高了程序的性能。</p><p>因此，阻塞是按顺序执行的，而非阻塞是不需要按顺序的，所以如果需要处理回调函数的参数，我们就需要写在回调函数内。</p><p>为什么会先执行当前任务呢？我们将在下节介绍。</p><h1 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h1><p>众所周知，JavaScript 是单线程的，Node.js 也是单进程单线程应用程序，那么他是怎么提高运行效率的呢？</p><p>答案就是 V8 引擎提供的异步执行回调接口，通过这些接口可以处理大量的并发，所以效率相比普通的单线程大大提高。</p><h2 id="事件驱动程序"><a href="#事件驱动程序" class="headerlink" title="事件驱动程序"></a>事件驱动程序</h2><p>Node.js 使用事件驱动模型，每当 web server 接收到一个新的请求，触发了对应的事件，就会将请求放入事件队列中，然后继续按队列顺序处理。</p><p>这个模型非常高效可扩展性非常强，因为 web server 一直接受请求而不等待任何读写操作。（这也称之为非阻塞式IO或者事件驱动IO）</p><p>事件发生流程一般如下：</p><ol><li>将回调函数绑定到事件上</li><li>触发某个事件</li><li>将回调函数放入事件队列中</li><li>按队列顺序执行</li></ol><p>我们可以通过内置模块 events 来模拟这个事件的流程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br></pre></td></tr></table></figure><p>以下程序绑定事件处理程序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定事件及事件的处理程序</span></span><br><span class="line">eventEmitter.on(<span class="string">'eventName'</span>, eventHandler);</span><br></pre></td></tr></table></figure><p>我们可以通过程序触发事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line">eventEmitter.emit(<span class="string">'eventName'</span>);</span><br></pre></td></tr></table></figure><p>关于 events 模块，将在下一节详细介绍。</p><h1 id="EventEmitter"><a href="#EventEmitter" class="headerlink" title="EventEmitter"></a>EventEmitter</h1><p>Node.js 所有的异步 I/O 操作在完成时都会发送一个事件到事件队列。</p><p>Node.js 里面的许多对象都会分发事件：一个 net.Server 对象会在每次有新连接时触发一个事件， 一个 fs.readStream 对象会在文件被打开的时候触发一个事件。 所有这些产生事件的对象都是 events.EventEmitter 的实例。</p><h2 id="EventEmitter类"><a href="#EventEmitter类" class="headerlink" title="EventEmitter类"></a>EventEmitter类</h2><p>Node.js 内置模块中含有一个名为 events 的模块，该模块向外 exports 了一个 events 对象，该对象包含一个名为 EventEmitter 的类。我们可以通过 require 命令来引入它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br></pre></td></tr></table></figure><p>接下来我们来解析一下上篇提到的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 events 模块</span></span><br><span class="line"><span class="keyword">var</span> events = <span class="built_in">require</span>(<span class="string">'events'</span>);</span><br><span class="line"><span class="comment">// 创建 eventEmitter 对象</span></span><br><span class="line"><span class="keyword">var</span> eventEmitter = <span class="keyword">new</span> events.EventEmitter();</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建事件处理程序</span></span><br><span class="line"><span class="keyword">var</span> connectHandler = <span class="function"><span class="keyword">function</span> <span class="title">connected</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'连接成功。'</span>);</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// 触发 data_received 事件 </span></span><br><span class="line">   eventEmitter.emit(<span class="string">'data_received'</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 绑定 connection 事件处理程序</span></span><br><span class="line">eventEmitter.on(<span class="string">'connection'</span>, connectHandler);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 使用匿名函数绑定 data_received 事件</span></span><br><span class="line">eventEmitter.on(<span class="string">'data_received'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">'数据接收成功。'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置定时器在触发事件前</span></span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span>=&gt;</span><span class="built_in">console</span>.log(<span class="string">'定时器执行成功。'</span>),<span class="number">0</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 触发 connection 事件 </span></span><br><span class="line">eventEmitter.emit(<span class="string">'connection'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"程序执行完毕。"</span>);</span><br></pre></td></tr></table></figure><p>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ node main.js</span><br><span class="line">连接成功。</span><br><span class="line">数据接收成功。</span><br><span class="line">程序执行完毕。</span><br><span class="line">定时器执行成功。</span><br></pre></td></tr></table></figure><p>在上述代码中，我们创建了一个事件发生器，并通过 on 命令指定了两个事件及其回调，然后通过 emit 命令触发指定事件。</p><p>我们观察到，尽管先访问到了 setTimeout，但是其结果却在最后被打印，说明 eventEmitter 的执行逻辑与 setTimeout 并不相同。通过阅读源码，可知 eventEmitter 的执行方式类似于方法调用，此处暂略。</p><h2 id="on-和-emit"><a href="#on-和-emit" class="headerlink" title="on 和 emit"></a>on 和 emit</h2><p>上文代码中我们用到了 on 和 emit 两个命令。现在来看看他们的方法原型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">on(event,listener)</span><br><span class="line">event 要求为一个字符串，listener 要求为一个回调函数，表示在事件 event 的回调函数列表尾部插入 listener</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">emit(event,[data])</span><br><span class="line">event 要求为一个字符串，[data] 为可选项，表示触发事件 event，将按顺序执行 event 回调函数列表中的每个回调函数，并向每个函数中都传入 data</span><br></pre></td></tr></table></figure><p>这是 EventEmitter 两个最为重要的方法。</p><p>其余方法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">addListener(event, listener)</span><br><span class="line">为指定事件添加一个监听器到监听器数组的尾部。与on命令相同。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">once(event, listener)</span><br><span class="line">为指定事件注册一个单次监听器，即 监听器最多只会触发一次，触发后立刻解除该监听器。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">removeListener(event, listener)</span><br><span class="line">移除指定事件的某个监听器，监听器必须是该事件已经注册过的监听器。</span><br><span class="line"></span><br><span class="line">它接受两个参数，第一个是事件名称，第二个是回调函数名称。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">removeAllListeners([event])</span><br><span class="line">移除所有事件的所有监听器， 如果指定事件，则移除指定事件的所有监听器。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setMaxListeners(n)</span><br><span class="line">默认情况下， EventEmitters 如果你添加的监听器超过 <span class="number">10</span> 个就会输出警告信息。 setMaxListeners 函数用于提高监听器的默认限制的数量。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listeners(event)</span><br><span class="line">返回指定事件的监听器数组。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listenerCount(event)</span><br><span class="line">返回指定事件的监听器数量。</span><br></pre></td></tr></table></figure><p>以上是 EventEmitter 的方法，可以设置自定义事件。</p><p>EventEmitter 还有内置的事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">newListener</span><br><span class="line">该事件在添加新监听器时被触发。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">removeListener</span><br><span class="line">该事件在删除一个监听器时被触发。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error</span><br><span class="line">该事件在发生错误时被触发。若没有为该事件绑定监听器，则程序会直接出错退出。</span><br></pre></td></tr></table></figure><h2 id="同步调用"><a href="#同步调用" class="headerlink" title="同步调用"></a>同步调用</h2><p>上文说到，eventEmitter 的执行逻辑与 setTimeout 并不相同。那么具体是如何执行的呢？我们需要阅读 eventEmitter 的源码，或者自己手写一个。此处选择手写一个作为示例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="comment">// 事件对象，存放订阅的名字和事件  如:  &#123; click: [ handle1, handle2 ]  &#125;</span></span><br><span class="line">    <span class="keyword">this</span>.events = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 订阅事件的方法</span></span><br><span class="line">  on(eventName, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.events[eventName]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.events[eventName] = [callback]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.events[eventName].push(callback)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 触发事件的方法</span></span><br><span class="line">  emit(eventName, ...rest) &#123;</span><br><span class="line">    <span class="keyword">this</span>.events[eventName] &amp;&amp;</span><br><span class="line">      <span class="keyword">this</span>.events[eventName].forEach(<span class="function"><span class="params">f</span> =&gt;</span> f.apply(<span class="keyword">this</span>, rest))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 移除订阅事件</span></span><br><span class="line">  remove(eventName, callback) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.events[eventName]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.events[eventName] = <span class="keyword">this</span>.events[eventName].filter(<span class="function"><span class="params">f</span> =&gt;</span> f != callback)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 只执行一次订阅的事件，然后移除</span></span><br><span class="line">  once(eventName, callback) &#123;</span><br><span class="line">    <span class="comment">// 绑定的时fn, 执行的时候会触发fn函数</span></span><br><span class="line">    <span class="keyword">const</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      callback() <span class="comment">// fn函数中调用原有的callback</span></span><br><span class="line">      <span class="keyword">this</span>.remove(eventName, fn) <span class="comment">// 删除fn, 再次执行的时候之后执行一次</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.on(eventName, fn)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见，eventEmitter 是以类似方法调用的方式传递触发信号的，然后又以数组顺序为基础来进行顺序执行，所以整体上是同步执行的，不是 setTimeout 一样的异步执行。</p><p>比起一般的方法调用， eventEmitter 胜在一个入口可以调用多个（同一数组内）的方法。</p><h1 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h1><p>模块是Node.js 应用程序的基本组成部分，文件和模块是一一对应的。换言之，一个 Node.js 文件就是一个模块，这个文件可能是JavaScript 代码、JSON 或者编译过的C/C++ 扩展。在模块系统的帮助下，Node.js的文件可以相互调用。</p><p>模块系统有两个重要动作：导入（require）和导出（exports）。</p><h2 id="require"><a href="#require" class="headerlink" title="require"></a>require</h2><p>我们可以通过 require 命令来引入一个模块，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hello = <span class="built_in">require</span>(<span class="string">'./hello'</span>);</span><br><span class="line">hello.world();</span><br></pre></td></tr></table></figure><p>在 require 之后，可以对这个模块做出哪些操作，则取决于这个模块 exports 了什么东西。</p><h2 id="exports"><a href="#exports" class="headerlink" title="exports"></a>exports</h2><p>对于任何一个模块，都可以通过操作内置对象 exports 来导出内容。</p><p>例如导出一个 function world，可以通过两种方案来实现。</p><ol><li><code>exports.world = function (){}</code> </li><li><code>module.exports = function (){}</code></li></ol><p>第一种方案，在 require 之后，主模块引入了一个来自从模块的对象，该对象包含一个名为 world 的方法。</p><p>第二种方案，在 require 之后，主模块只引入了一个方法，该方法的名字取决于主模块中所起的变量名。</p><p>一般不建议两种方案同时使用，因为阅读 require 源码可以发现，在 require 一个模块的时候，会先执行 exports.xxx 的赋值，最后才执行 module.exports 的赋值，这使得之前所做的赋值被完全覆盖了，只有最后的赋值才有效。</p><h2 id="模块分类"><a href="#模块分类" class="headerlink" title="模块分类"></a>模块分类</h2><p>之前的章节中，我们使用了 http 模块，event 模块等。事实上，JavaScript 有 4 种模块，分为原生模块和 3 种文件模块，通过在 require 命令中指定的字符串不同而导入。</p><ul><li>http、fs、path等，原生模块。</li><li>./mod或../mod，相对路径的文件模块。</li><li>/pathtomodule/mod，绝对路径的文件模块。</li><li>mod，非原生模块的文件模块。</li></ul><p>由于有多种模块，所以导入模块也有对应的优先级，如图。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/03/nodejs-require.jpg" alt="模块加载优先级"></p><h1 id="web-模块"><a href="#web-模块" class="headerlink" title="web 模块"></a>web 模块</h1><p>使用 Node.js 创建 web 客户端需要引入 http 模块。</p><p>我们可以用 Node.js 搭建一个 web 服务器与一个客户端。</p><p>服务器代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 创建服务器</span></span><br><span class="line">http.createServer( <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;  </span><br><span class="line">   <span class="comment">// 解析请求，包括文件名</span></span><br><span class="line">   <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 输出请求的文件名</span></span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 从文件系统中读取请求的文件内容</span></span><br><span class="line">   fs.readFile(pathname.substr(<span class="number">1</span>), <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(err);</span><br><span class="line">         <span class="comment">// HTTP 状态码: 404 : NOT FOUND</span></span><br><span class="line">         <span class="comment">// Content Type: text/html</span></span><br><span class="line">         response.writeHead(<span class="number">404</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;             </span><br><span class="line">         <span class="comment">// HTTP 状态码: 200 : OK</span></span><br><span class="line">         <span class="comment">// Content Type: text/html</span></span><br><span class="line">         response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);    </span><br><span class="line">         </span><br><span class="line">         <span class="comment">// 响应文件内容</span></span><br><span class="line">         response.write(data.toString());        </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//  发送响应数据</span></span><br><span class="line">      response.end();</span><br><span class="line">   &#125;);   </span><br><span class="line">&#125;).listen(<span class="number">8080</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 控制台会输出以下信息</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8080/'</span>);</span><br></pre></td></tr></table></figure><p>需要在服务器文件目录下创建一个 index.html 文件来配合。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>客户端代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 用于请求的选项</span></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">   host: <span class="string">'localhost'</span>,</span><br><span class="line">   port: <span class="string">'8080'</span>,</span><br><span class="line">   path: <span class="string">'/index.html'</span>  </span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 处理响应的回调函数</span></span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">response</span>)</span>&#123;</span><br><span class="line">   <span class="comment">// 不断更新数据</span></span><br><span class="line">   <span class="keyword">var</span> body = <span class="string">''</span>;</span><br><span class="line">   response.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      body += data;</span><br><span class="line">   &#125;);</span><br><span class="line">   </span><br><span class="line">   response.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 数据接收完成</span></span><br><span class="line">      <span class="built_in">console</span>.log(body);</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向服务端发送请求</span></span><br><span class="line"><span class="keyword">var</span> req = http.request(options, callback);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure><h1 id="Express-框架"><a href="#Express-框架" class="headerlink" title="Express 框架"></a>Express 框架</h1><p>Express 是一个基于 Node.js 的 web 应用框架。</p><p>Express 框架的核心特性如下：</p><ul><li>可以设置中间件来响应 HTTP 请求。</li><li>定义了路由表用于执行不同的 HTTP 请求动作。</li><li>可以通过向模板传递参数来动态渲染 HTML 页面。</li></ul><p>express 可以通过 require(‘express’) 引入，暴露的是一个方法。使用例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//express_demo.js 文件</span></span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"> </span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">   res.send(<span class="string">'Hello World'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> server = app.listen(<span class="number">8081</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">var</span> host = server.address().address</span><br><span class="line">  <span class="keyword">var</span> port = server.address().port</span><br><span class="line"> </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"应用实例，访问地址为 http://%s:%s"</span>, host, port)</span><br><span class="line"> </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>从上述代码中，可以看到 app 有两个关键方法：get 和 listen</p><ol><li>get(url, func(request, response))，表示使用 http get 请求访问，第一个参数是访问的路径（可以是一个正则表达式，或是 Rest 风格的 url 字符串，详见下章），第二个参数是这个事件发生时的回调。其中回调含有 2 个参数：request 和 response，分别表示这个 http 请求的请求包体和响应包体。</li><li>listen(port, func)，返回一个 app 实例，监听来自端口 port 的所有请求，并在服务成功启动后调用指定的回调函数。</li></ol><p>在 request 对象和 response 对象上，各自还有自己的对象方法。</p><p><strong>Request 对象</strong> - request 对象表示 HTTP 请求，包含了请求查询字符串，参数，内容，HTTP 头部等属性。常见属性有：</p><ol><li>req.app：当callback为外部文件时，用req.app访问express的实例</li><li>req.baseUrl：获取路由当前安装的URL路径</li><li>req.body / req.cookies：获得「请求主体」/ Cookies</li><li>req.fresh / req.stale：判断请求是否还「新鲜」</li><li>req.hostname / req.ip：获取主机名和IP地址</li><li>req.originalUrl：获取原始请求URL</li><li>req.params：获取路由的parameters</li><li>req.path：获取请求路径</li><li>req.protocol：获取协议类型</li><li>req.query：获取URL的查询参数串</li><li>req.route：获取当前匹配的路由</li><li>req.subdomains：获取子域名</li><li>req.accepts()：检查可接受的请求的文档类型</li><li>req.acceptsCharsets / req.acceptsEncodings / req.acceptsLanguages：返回指定字符集的第一个可接受字符编码</li><li>req.get()：获取指定的HTTP请求头</li><li>req.is()：判断请求头Content-Type的MIME类型</li></ol><p><strong>Response 对象</strong> - response 对象表示 HTTP 响应，即在接收到请求时向客户端发送的 HTTP 响应数据。常见属性有：</p><ol><li>res.app：同req.app一样</li><li>res.append()：追加指定HTTP头</li><li>res.set()在res.append()后将重置之前设置的头</li><li>res.cookie(name，value [，option])：设置Cookie</li><li>opition: domain / expires / httpOnly / maxAge / path / secure / signed</li><li>res.clearCookie()：清除Cookie</li><li>res.download()：传送指定路径的文件</li><li>res.get()：返回指定的HTTP头</li><li>res.json()：传送JSON响应</li><li>res.jsonp()：传送JSONP响应</li><li>res.location()：只设置响应的Location HTTP头，不设置状态码或者close response</li><li>res.redirect()：设置响应的Location HTTP头，并且设置状态码302</li><li>res.render(view,[locals],callback)：渲染一个view，同时向callback传递渲染后的字符串，如果在渲染过程中有错误发生next(err)将会被自动调用。callback将会被传入一个可能发生的错误以及渲染后的页面，这样就不会自动输出了。</li><li>res.send()：传送HTTP响应</li><li>res.sendFile(path [，options] [，fn])：传送指定路径的文件 -会自动根据文件extension设定Content-Type</li><li>res.set()：设置HTTP头，传入object可以一次设置多个头</li><li>res.status()：设置HTTP状态码</li><li>res.type()：设置Content-Type的MIME类型</li></ol><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>可以使用形如 <code>app.use(&#39;/public&#39;, express.static(&#39;public&#39;));</code> 的代码来设置静态文件路径。</p><p>该代码使用了 use 方法，该方法需要两个参数。</p><ol><li>url，表示 http 请求需要访问的路径</li><li>express.static(localpath)，其中 localpath 表示存放静态文件的文件夹的本地路径</li></ol><p>比如此时我在 public 文件夹下存放了一张图片，名为 hello.png，则我访问 <a href="http://localhost:port/public/hello.png" target="_blank" rel="noopener">http://localhost:port/public/hello.png</a> 时，页面上就会返回这张图片。</p><h1 id="Restful-API"><a href="#Restful-API" class="headerlink" title="Restful API"></a>Restful API</h1><p>Restful API 是用 http 动词描述动作，用 URL 定位资源的 API 设计风格。在 Express 框架中，我们可以使用 Restful 默认的 4 个动词来定义 app 监听。</p><ol><li>app.get(url, func(request, response))</li><li>app.post(url, func(request, response))</li><li>app.put(url, func(request, response))</li><li>app.delete(url, func(request, response))</li></ol><p>其中，绑定 url 时，要绑定指定的 id，可以使用形如 <code>/user/:id</code> 的 url，来访问路径上的动态参数。该写法在前端类似于 vue 的 router 绑定，在后端类似于 spring 的 @PathVariable</p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><p>Node.js 既然可以写后端，自然也可以连接 MySQL。容易想到，我们可以通过 require(‘mysql’) 来引入 mysql模块，不过需要先 npm install mysql</p><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mysql  = <span class="built_in">require</span>(<span class="string">'mysql'</span>);  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> connection = mysql.createConnection(&#123;     </span><br><span class="line">  host     : <span class="string">'localhost'</span>,       </span><br><span class="line">  user     : <span class="string">'root'</span>,              </span><br><span class="line">  password : <span class="string">'123456'</span>,       </span><br><span class="line">  port: <span class="string">'3306'</span>,                   </span><br><span class="line">  database: <span class="string">'test'</span> </span><br><span class="line">&#125;); </span><br><span class="line"> </span><br><span class="line">connection.connect();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span>  addSql = <span class="string">'INSERT INTO websites(Id,name,url,alexa,country) VALUES(0,?,?,?,?)'</span>;</span><br><span class="line"><span class="keyword">var</span>  addSqlParams = [<span class="string">'菜鸟工具'</span>, <span class="string">'https://c.runoob.com'</span>,<span class="string">'23453'</span>, <span class="string">'CN'</span>];</span><br><span class="line"><span class="comment">//增</span></span><br><span class="line">connection.query(addSql,addSqlParams,<span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'[INSERT ERROR] - '</span>,err.message);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">        &#125;        </span><br><span class="line"> </span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'--------------------------INSERT----------------------------'</span>);</span><br><span class="line">       <span class="comment">//console.log('INSERT ID:',result.insertId);        </span></span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'INSERT ID:'</span>,result);        </span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'-----------------------------------------------------------------\n\n'</span>);  </span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">connection.end();</span><br></pre></td></tr></table></figure><p>通过向 createConnection 传入一个对象作为参数，来配置连接的必要参数。</p><p>之后可以通过 query 方法，来提交 sql 请求。query 方法包含 3 个参数。</p><p><code>query(sqlString, sqlParams, func(err, result))</code></p><p>在 sqlString 中，可以留若干个？作为占位符，？会按顺序匹配 sqlParams 中的参数。</p><p>sql 请求成功返回后，使用 func 作为回调函数。该回调函数含有 2 个参数，第一个是报错信息，第二个是 sql 执行结果。若没有出错，则 err 为空。</p><p>sql 请求的返回值与 spring mapper 类似，select、insert 返回具体数据，update、delete 返回的 result 对象中只包含一个 affectedRows 字段，表示影响的行数。</p><h1 id="Buffer-Stream"><a href="#Buffer-Stream" class="headerlink" title="Buffer/Stream"></a>Buffer/Stream</h1><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><p>JavaScript 语言自身只有字符串数据类型，没有二进制数据类型。</p><p>但在处理像 TCP 流或文件流时，必须使用到二进制数据。因此在 Node.js 中，定义了一个 Buffer 类，该类用来创建一个专门存放二进制数据的缓存区。</p><p>Buffer 在使用时需要指定字符编码。支持的编码如下：</p><ol><li><strong>ascii</strong> - 仅支持 7 位 ASCII 数据。如果设置去掉高位的话，这种编码是非常快的。</li><li><strong>utf8</strong> - 多字节编码的 Unicode 字符。许多网页和其他文档格式都使用 UTF-8 。</li><li><strong>utf16le</strong> - 2 或 4 个字节，小字节序编码的 Unicode 字符。支持代理对（U+10000 至 U+10FFFF）。</li><li><strong>ucs2</strong> - <strong>utf16le</strong> 的别名。</li><li><strong>base64</strong> - Base64 编码。</li><li><strong>latin1</strong> - 一种把 <strong>Buffer</strong> 编码成一字节编码的字符串的方式。</li><li><strong>binary</strong> - <strong>latin1</strong> 的别名。</li><li><strong>hex</strong> - 将每个字节编码为两个十六进制字符。</li></ol><p>Buffer 具有类似数组的特性。重要的 API 如下。</p><h3 id="创建-Buffer"><a href="#创建-Buffer" class="headerlink" title="创建 Buffer"></a>创建 Buffer</h3><ol><li><p>Buffer.alloc(size[, fill[, encoding]])</p><p>返回一个指定大小的 Buffer 实例，如果没有设置 fill，则默认填满 0</p></li><li><p>Buffer.allocUnsafe(size)</p><p>返回一个指定大小的 Buffer 实例，但是它不会被初始化，所以它可能包含敏感的数据</p></li><li><p>Buffer.allocUnsafeSlow(size)</p></li><li><p>Buffer.from(array)</p><p>返回一个被 array 的值初始化的新的 Buffer 实例（传入的 array 的元素只能是数字，不然就会自动被 0 覆盖）</p></li><li><p>Buffer.from(arrayBuffer[, byteOffset[, length]])</p><p>返回一个新建的与给定的 ArrayBuffer 共享同一内存的 Buffer。</p></li><li><p>Buffer.from(buffer)</p><p>复制传入的 Buffer 实例的数据，并返回一个新的 Buffer 实例</p></li><li><p>Buffer.from(string[, encoding])</p><p>返回一个被 string 的值初始化的新的 Buffer 实例</p></li></ol><h3 id="写入-Buffer"><a href="#写入-Buffer" class="headerlink" title="写入 Buffer"></a>写入 Buffer</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">buf.write(string[, offset[, length]][, encoding])</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>参数描述如下：</p><ul><li><strong>string</strong> - 写入缓冲区的字符串。</li><li><strong>offset</strong> - 缓冲区开始写入的索引值，默认为 0 。</li><li><strong>length</strong> - 写入的字节数，默认为 buffer.length</li><li><strong>encoding</strong> - 使用的编码。默认为 ‘utf8’ 。</li></ul><p>根据 encoding 的字符编码写入 string 到 buf 中的 offset 位置。 length 参数是写入的字节数。 如果 buf 没有足够的空间保存整个字符串，则只会写入 string 的一部分。 只部分解码的字符不会被写入。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>返回实际写入的大小。如果 buffer 空间不足， 则只会写入部分字符串。</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">buf = Buffer.alloc(<span class="number">256</span>);</span><br><span class="line">len = buf.write(<span class="string">"www.runoob.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"写入字节数 : "</span>+  len);</span><br></pre></td></tr></table></figure><p>执行以上代码，输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$node main.js</span><br><span class="line">写入字节数 : 14</span><br></pre></td></tr></table></figure><p>其余与数组方法基本相同，详见 <a href="https://www.runoob.com/nodejs/nodejs-buffer.html" target="_blank" rel="noopener">Node.js Buffer(缓冲区) | 菜鸟教程</a></p><h2 id="Stream"><a href="#Stream" class="headerlink" title="Stream"></a>Stream</h2><p>Stream 是一个抽象接口，Node 中有很多对象实现了这个接口。例如，对http 服务器发起请求的request 对象就是一个 Stream，还有stdout（标准输出）。</p><p>Node.js，Stream 有四种流类型：</p><ul><li><strong>Readable</strong> - 可读操作。</li><li><strong>Writable</strong> - 可写操作。</li><li><strong>Duplex</strong> - 可读可写操作.</li><li><strong>Transform</strong> - 操作被写入数据，然后读出结果。</li></ul><p>所有的 Stream 对象都是 EventEmitter 的实例。常用的事件有：</p><ul><li><strong>data</strong> - 当有数据可读时触发。</li><li><strong>end</strong> - 没有更多的数据可读时触发。</li><li><strong>error</strong> - 在接收和写入过程中发生错误时触发。</li><li><strong>finish</strong> - 所有数据已被写入到底层系统时触发。</li></ul><p>主要有三种流：</p><ul><li><strong>写入流</strong></li><li><strong>管道流</strong></li><li><strong>链式流</strong></li></ul><p>详见 <a href="https://www.runoob.com/nodejs/nodejs-stream.html" target="_blank" rel="noopener">Node.js Stream(流) | 菜鸟教程</a></p><h1 id="11-14-章-待写"><a href="#11-14-章-待写" class="headerlink" title="11-14 章 待写"></a>11-14 章 待写</h1><p>待续……</p><h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-tutorial.html</a></p><p><a href="https://blog.csdn.net/qq_39953537/article/details/102685328" target="_blank" rel="noopener">https://blog.csdn.net/qq_39953537/article/details/102685328</a></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> js </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu下使用Docker部署的办法</title>
      <link href="/docker/docker/"/>
      <url>/docker/docker/</url>
      
        <content type="html"><![CDATA[<p>这年头不是全栈工程师，连中间件实验都做不了了<br><a id="more"></a></p><h1 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h1><table><thead><tr><th>docker 名词</th><th>java 名词</th></tr></thead><tbody><tr><td>镜像</td><td>类</td></tr><tr><td>容器</td><td>对象</td></tr><tr><td>由镜像构建容器</td><td>new 一个某类的实例</td></tr><tr><td>docker build</td><td>设计一个class</td></tr><tr><td>docker run</td><td>new</td></tr><tr><td>列出镜像列表</td><td>查看所有类</td></tr><tr><td>列出所有容器</td><td>查看所有已经实例化的对象</td></tr><tr><td>停止容器</td><td>使得这个对象停止功能</td></tr><tr><td>删除容器</td><td>使得这个对象被释放（delete）</td></tr></tbody></table><h1 id="ubuntu-安装-docker"><a href="#ubuntu-安装-docker" class="headerlink" title="ubuntu 安装 docker"></a>ubuntu 安装 docker</h1><p>参考链接：<a href="https://www.runoob.com/docker/ubuntu-docker-install.html" target="_blank" rel="noopener">https://www.runoob.com/docker/ubuntu-docker-install.html</a></p><h2 id="预备"><a href="#预备" class="headerlink" title="预备"></a>预备</h2><p>先通过<code>docker version</code>查看本机上是否已经安装 docker，若是，则执行下述命令，卸载旧版本 docker</p><p><code>sudo apt-get remove docker docker-engine docker.io containerd runc</code></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="首次安装时，需要设置仓库"><a href="#首次安装时，需要设置仓库" class="headerlink" title="首次安装时，需要设置仓库"></a>首次安装时，需要设置仓库</h3><table><thead><tr><th>指令</th><th>用途</th></tr></thead><tbody><tr><td>sudo apt-get update</td><td>更新 apt 包索引</td></tr><tr><td>sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</td><td>安装 apt 依赖包，用于通过 HTTPS 来获取仓库</td></tr><tr><td>curl -fsSL <a href="https://download.docker.com/linux/ubuntu/gpg" target="_blank" rel="noopener">https://download.docker.com/linux/ubuntu/gpg</a> &#124; sudo apt-key add -</td><td>添加 Docker 的官方 GPG 密钥</td></tr><tr><td>sudo add-apt-repository “deb [arch=amd64] <a href="https://download.docker.com/linux/ubuntu" target="_blank" rel="noopener">https://download.docker.com/linux/ubuntu</a> $(lsb_release -cs) stable”</td><td>设置稳定版仓库</td></tr></tbody></table><h3 id="安装-Docker-Engine-Community"><a href="#安装-Docker-Engine-Community" class="headerlink" title="安装 Docker Engine-Community"></a>安装 Docker Engine-Community</h3><table><thead><tr><th>指令</th><th>用途</th></tr></thead><tbody><tr><td>sudo apt-get update</td><td>更新 apt 包索引</td></tr><tr><td>sudo apt-get install docker-ce docker-ce-cli containerd.io</td><td>安装最新版本的 Docker Engine-Community 和 containerd</td></tr><tr><td>docker version</td><td>检查 docker 版本，验证是否安装成功</td></tr></tbody></table><h1 id="ubuntu-使用-docker-部署jar"><a href="#ubuntu-使用-docker-部署jar" class="headerlink" title="ubuntu 使用 docker 部署jar"></a>ubuntu 使用 docker 部署jar</h1><p>参考链接：<a href="https://blog.csdn.net/weixin_42054155/article/details/90815393" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42054155/article/details/90815393</a></p><h2 id="构建-docker-镜像"><a href="#构建-docker-镜像" class="headerlink" title="构建 docker 镜像"></a>构建 docker 镜像</h2><ol><li><p>构造文件<code>Dockerfile</code>，这是一个无后缀文件</p><p>该文件内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FROM java:8</span><br><span class="line">MAINTAINER Ringoer</span><br><span class="line">ADD demo-0.0.1-SNAPSHOT.jar demo.jar</span><br><span class="line">EXPOSE 8080</span><br><span class="line">ENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;demo.jar&quot;]</span><br></pre></td></tr></table></figure><p>FROM 表示拉取一个 java 版本为 1.8 的 docker image（docker镜像）</p><p>MAINTAINER 表示作者声明，后接作者名字</p><p>ADD 向镜像中加入文件，第一个参数是要加入的文件名，第二个参数是文件的重命名，表示它在 docker 镜像中的名字</p><p>EXPOSE 表示该镜像对外暴露的端口号（与 java 项目的端口号要相同）</p><p>ENTRYPOINT 表示运行该镜像时执行的命令行参数，示例中给出的配置等效于执行命令<code>java -jar demo.jar</code></p></li><li><p>向服务器上传 jar 包和 Dockerfile 文件，这两个文件要在同一个目录下</p></li><li><p>连接服务器终端，cd 进入该目录</p></li><li><p>执行命令 <code>docker build -t demo .</code> 构建镜像，其中 demo 是镜像名称。记得别漏了最后的一个点</p></li></ol><h2 id="操作镜像"><a href="#操作镜像" class="headerlink" title="操作镜像"></a>操作镜像</h2><ol><li><p>运行容器</p><p><code>docker run -d --name demo1 -p 8080:8080 demo</code></p><p>docker run 部分是不可变的</p><p>-d 指示了 docker 容器后台运行</p><p>–name 部分指示了新运行的容器实例的名称</p><p>-p 部分指示了两个端口号，用冒号隔开。其中前一个端口号表示暴露在公网的 ip，后一个表示容器暴露的 ip</p><p>最后一个参数是镜像名称，此处表示使用名为 demo 的镜像构建容器，容器名为 demo1</p></li><li><p>其余命令</p></li></ol><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>docker pull [name]</td><td>根据名称获取镜像</td></tr><tr><td>docker images</td><td>查看所有镜像</td></tr><tr><td>docker rmi [name]</td><td>根据名称删除某个镜像</td></tr><tr><td>docker rmi $(docker images -q)</td><td>删除所有镜像</td></tr><tr><td>docker ps -a</td><td>查看所有容器</td></tr><tr><td>docker ps -aq</td><td>列出所有容器ID</td></tr><tr><td>docker stop [name]</td><td>根据名称停止某个容器</td></tr><tr><td>docker stop $(docker ps -aq)</td><td>停止所有容器</td></tr><tr><td>docker rm [name]</td><td>根据名称删除某个容器</td></tr><tr><td>docker rm $(docker ps -aq)</td><td>删除所有容器</td></tr></tbody></table><h1 id="docker-借助-nginx-部署-vue"><a href="#docker-借助-nginx-部署-vue" class="headerlink" title="docker 借助 nginx 部署 vue"></a>docker 借助 nginx 部署 vue</h1><p>参考链接：</p><p><a href="http://dockone.io/article/8834" target="_blank" rel="noopener">http://dockone.io/article/8834</a></p><p><a href="https://www.cnblogs.com/littleorange7/p/12838101.html" target="_blank" rel="noopener">https://www.cnblogs.com/littleorange7/p/12838101.html</a></p><ol><li><p>在服务器上使用命令 <code>docker pull nginx</code> 下载 nginx</p></li><li><p>在服务器上为 vue 项目新建一个文件夹（假设命名为 vue）</p></li><li><p>在本地使用命令 <code>npm run build</code> 打包 vue 项目，打包完成后会在项目目录下产生一个 dist 文件夹。将该文件夹上传到服务器</p></li><li><p>在本地编写 Dockerfile 文件</p><p>文件内容如下，照抄即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">COPY dist/ /usr/share/nginx/html/</span><br><span class="line">COPY nginx/default.conf /etc/nginx/conf.d/default.conf</span><br></pre></td></tr></table></figure><p>编写完毕后上传到服务器的 vue 文件夹</p></li><li><p>新建一个名为 nginx 的文件夹，在这个文件夹里新建一个名为 default.conf 的文件</p><p>文件内容如下</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       2222;</span><br><span class="line">    server_name  ali.ringoer.com;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    access_log  /var/log/nginx/host.access.log  main;</span><br><span class="line">    error_log  /var/log/nginx/error.log  error;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">        #index  index.html index.htm;</span><br><span class="line">        try_files   $uri  $uri/  /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /api/ &#123;</span><br><span class="line">        proxy_pass   http://ali.ringoer.com:9527/;</span><br><span class="line">        proxy_redirect  off;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的字段如下</p><table><thead><tr><th>字段名</th><th>用途</th></tr></thead><tbody><tr><td>listen</td><td>配置 nginx 的监听端口，要求与 vue 配置的端口号一致</td></tr><tr><td>server_name</td><td>前端访问的主机名，要求填写公网地址（域名或 ip）</td></tr><tr><td>index</td><td>指示项目主页。此处注释掉是作为对比，原因见下一条</td></tr><tr><td>try_files</td><td>使用 index 进行配置时，会导致在非项目主入口刷新时，报 404 错误。所以使用 try_files 进行配置，使得刷新可以触发设定好的拦截，跳转至登录界面。照抄即可，注意是 uri，不是 url</td></tr><tr><td>location /api/ {}</td><td>配置跨域请求，这里的 /api/ 与 vue 项目内部配置的 proxyTable 里所填前缀一致</td></tr><tr><td>proxy_pass</td><td>转发地址，与 vue 项目内部配置的 proxyTable 下的 target 所填内容一致。必须完整填写（包含 http 和斜杠），不然会报错</td></tr><tr><td>proxy_redirect</td><td>是否重定向，off 就行了</td></tr><tr><td>别的东西</td><td>都可以照抄</td></tr></tbody></table><p>   将 nginx 文件夹上传到服务器 vue 文件夹</p><ol start="6"><li>现在服务器 vue 文件夹中有2个文件夹和1个文件</li></ol><table><thead><tr><th>文件名</th><th>描述</th></tr></thead><tbody><tr><td>dist</td><td>vue 项目静态资源文件夹</td></tr><tr><td>nginx</td><td>nginx 配置文件夹</td></tr><tr><td>Dockerfile</td><td>docker 配置文件（不是文件夹）</td></tr></tbody></table><p>   其中 nginx 文件夹中还包含 default.conf 文件</p><p>   接下来过程与部署 jar 包一致</p><ol start="7"><li><p>部署命令顺序</p><p>通过 cd 命令进入服务器上 vue 文件夹后，按顺序执行下述命令</p><ol><li><p><code>docker build -t [name] .</code>，其中 [name] 是你所希望的镜像名称</p><p>末尾的一个点别漏了</p></li><li><p><code>docker run -d --name [name1] -p [port1]:[port2] [name2]</code>，其中</p></li></ol></li></ol><table><thead><tr><th>字段名</th><th>描述</th></tr></thead><tbody><tr><td>[name1]</td><td>你所希望的容器名称</td></tr><tr><td>[port1]</td><td>容器暴露在公网的端口号</td></tr><tr><td>[port2]</td><td>nginx 监听的端口号，也是 vue 项目配置的端口号</td></tr><tr><td>[name2]</td><td>1中命令设置的镜像名称</td></tr></tbody></table><p>现在，通过浏览器访问 [server_name]:[port1] 即可看到你的 vue 项目</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ubuntu </tag>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu服务器上的部署办法</title>
      <link href="/J2EE/deploy-on-ubuntu/"/>
      <url>/J2EE/deploy-on-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>今天紧急学习了一下部署jar包的方法，特此存档<br><a id="more"></a></p><p>部署的流程主要分为2步。  </p><ol><li>向服务器上传jar包</li><li>使用服务器终端启动jar包</li></ol><p>以下基于Windows10环境  </p><h1 id="向服务器上传jar包"><a href="#向服务器上传jar包" class="headerlink" title="向服务器上传jar包"></a>向服务器上传jar包</h1><ol><li>下载安装WinSCP<br> <a href="http://download.ringoer.com/WinSCP-5.17.6-Setup.exe" target="_blank" rel="noopener">点我下载</a></li><li>打开WinSCP，连接到服务器<br> 连接设置如下图，默认SFTP协议和22端口即可<br> 主机名填写服务器的ip地址<br> <img src="http://pic.ringoer.com/ubuntu部署.png" alt="ubuntu部署"></li><li>登录之后，如同在本机上一般，直接拖动本机jar包到服务器目录即可<br> 注意，最好给每个jar包单独一个存放目录</li></ol><h1 id="使用服务器终端启动jar包"><a href="#使用服务器终端启动jar包" class="headerlink" title="使用服务器终端启动jar包"></a>使用服务器终端启动jar包</h1><ol><li>随意找个位置，通过右键菜单启动Git Bash Here</li><li>输入命令<code>ssh root@ip</code><br> 其中ssh是命令名，root是服务器用户名，ip是服务器地址<br> 如ip为127.0.0.1，用户名为root，则连接命令为<code>ssh root@127.0.0.1</code></li><li>输入用户名对应的密码，成功进入服务器终端</li><li>首先使用ls查看当前所在目录下的所有文件名，找到自己存放jar包的目录的父目录<br> 然后不断cd进入下级目录，直到进入自己存放jar包的目录</li><li>输入命令<code>nohup java -jar filename.jar &amp;</code>即可启动jar包<br> 其中filename更改为你的jar包名称</li></ol><h1 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h1><ol><li>服务器所使用的java版本（一般是1.8）要与打包jar包时使用的版本一致</li><li>应时刻注意服务器资源使用情况，避免服务器宕机<br> 使用<code>free</code>命令可以查看内存使用情况<br> 使用<code>df -hl</code>命令可以查看磁盘使用情况</li></ol>]]></content>
      
      
      <categories>
          
          <category> J2EE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django建站初探</title>
      <link href="/python/django/"/>
      <url>/python/django/</url>
      
        <content type="html"><![CDATA[<p>在使用 python 做爬虫或机器学习的时候，有时候需要浏览所得到的阶段性成果，这时候就需要一个前端。</p><a id="more"></a><p>本文所使用的示例代码：<a href="http://download.ringoer.com/django-sample.rar" target="_blank" rel="noopener">点我下载</a></p><p>环境：</p><ul><li>Windows10</li><li>VSCODE</li><li>python 3.7</li></ul><p>-为什么选择 django ？</p><p>-没有为什么，我高兴</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="安装-django"><a href="#安装-django" class="headerlink" title="安装 django"></a>安装 django</h2><p>在命令行中使用以下语句安装 django</p><p><code>pip install django</code></p><p>或使用国内镜像</p><p><code>pip install -i https://pypi.douban.com/simple django</code></p><p>安装后可以在命令行中启动 python 以查看 django 是否安装成功</p><p><img src="http://pic.ringoer.com/django-1-查看django版本号.png" alt="1-查看django版本号"></p><h2 id="创建一个-django-新项目"><a href="#创建一个-django-新项目" class="headerlink" title="创建一个 django 新项目"></a>创建一个 django 新项目</h2><ol><li><p>启动命令行，进入你想放置该项目的目录</p></li><li><p>使用以下语句创建工程</p><p><code>django-admin startproject [projectname]</code></p><p>其中 <code>[projectname]</code> 可以按需要修改为自己的项目名</p><p><img src="http://pic.ringoer.com/django-2-创建新项目.png" alt="2-创建新项目"></p></li><li><p>创建完成后，在命令行中进入该项目，输入以下语句启动测试页面</p><p><code>python manage.py runserver</code></p><p>如果启动成功，则可以访问以下网址查看测试页面</p><p><a href="http://localhost:8000" target="_blank" rel="noopener">http://localhost:8000</a></p><p>测试页面如图</p><p><img src="http://pic.ringoer.com/django-3-测试页面.png" alt="3-测试页面"></p></li><li><p>django 目录结构</p><p><img src="http://pic.ringoer.com/django-4-django目录结构.png" alt="4-django目录结构"></p><p>如上图，一个默认的 django 项目包含如下文件树：</p><p>——sample</p><p>————sample（项目控制组件，用于控制项目的公有配置）</p><p>——————<strong>pycache</strong>（提供默认配置文件，不需要更改）</p><p>————————<strong>init</strong>.cpython-37.pyc</p><p>————————settings.cpython-37.pyc</p><p>————————urls.cpython-37.pyc</p><p>————————wsgi.cpython-37.pyc</p><p>——————<strong>init</strong>.py（提供默认配置文件，不需要更改）</p><p>——————asgi.py（提供默认配置文件，不需要更改）</p><p>——————settings.py（项目主配置文件）</p><p>——————urls.py（项目访问路径配置文件）</p><p>——————wsgi.py（提供默认配置文件，不需要更改）</p><p>————db.sqlite3（项目自带简易数据库，不需要更改，在第一次启动项目后才会生成）</p><p>————manage.py（项目主启动类，不需要更改）</p></li></ol><p>   可见，我们只有3种办法修改我们的项目：</p><ol><li>修改settings.py</li><li>修改urls.py</li><li><p>添加新的目录</p><p>让我们先来认识一下项目控制组件下的2个配置文件</p></li></ol><h3 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h3><p>项目主配置文件，提供一些基本配置。</p><p>常用配置如下：</p><ol><li><p>BASE_DIR</p><p>指示项目的绝对位置</p><p>是项目所在的位置，不是项目控制组件所在的位置</p><p>会自动识别，不需修改</p></li><li><p>INSTALLED_APPS</p><p>创建了新的组件后，要在此处注册</p></li><li><p>ROOT_URLCONF</p><p>指示项目访问路径配置文件的位置</p><p>一般不需修改</p></li><li><p>TEMPLATES -&gt; DIRS</p><p>指示项目中引用的所有模板文件的绝对位置</p><p><span style="color:red">请在项目中适用如下配置</span></p><p>通常为了方便使用，都会在项目目录下新建文件夹 template，并对 TEMPLATES  属性作如下修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)], <span class="comment"># 唯一修改的语句</span></span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="keyword">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>STATIC_URL</p><p>指示项目中引用的所有静态文件的相对路径名</p><p>该属性可以含有如下子属性</p><ol><li><p>STATIC_ROOT</p><p>指示项目中引用的所有静态文件的绝对位置</p></li><li><p>STATICFILES_DIRS</p><p>指示静态文件目录下的其它目录的绝对位置</p></li></ol><p><span style="color:red">请在项目中适用如下配置</span></p><p>通常为了方便使用，都会在项目目录下新建文件夹 static，且 static 文件夹包含3个子文件夹，分别为 css、images、js</p><p>并对 STATIC_URL 属性作如下修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line">STATIC_ROOT = os.path.join(BASE_DIR, <span class="string">'static'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)</span><br><span class="line">STATICFILES_DIRS = (</span><br><span class="line">    (<span class="string">'css'</span>, os.path.join(STATIC_ROOT, <span class="string">'css'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)),</span><br><span class="line">    (<span class="string">'images'</span>, os.path.join(STATIC_ROOT, <span class="string">'images'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)),</span><br><span class="line">    (<span class="string">'js'</span>, os.path.join(STATIC_ROOT, <span class="string">'js'</span>).replace(<span class="string">'\\'</span>, <span class="string">'/'</span>)),</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><h3 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h3><p>项目访问路径配置文件，用于控制访问路径。</p><p>一般只需修改 urlpatterns 属性。默认含有一条语句</p><p><code>path(&#39;admin/&#39;, admin.site.urls),</code></p><p>例如当添加一个名为 mytest 的新组件，且希望路径 /test 指向它时，可以向 urlpatterns 属性下添加如下语句</p><p><code>url(&#39;test/&#39;, include(&#39;mytest.urls&#39;)),</code></p><h1 id="创建子组件"><a href="#创建子组件" class="headerlink" title="创建子组件"></a>创建子组件</h1><p>在命令行中进入项目目录，执行以下语句</p><p><code>python manage.py startapp [appname]</code></p><p>其中 appname 即为你想新建的组件名</p><p>组件名不可以重名</p><p><img src="http://pic.ringoer.com/django-5-创建hello子组件.png" alt="5-创建hello子组件"></p><p>子组件 hello 的目录结构如下</p><p><img src="http://pic.ringoer.com/django-6-hello子组件的目录结构.png" alt="6-hello子组件的目录结构"></p><p>其中两个 <strong>init</strong>.py 文件是默认的配置文件，无需修改</p><h2 id="apps-py"><a href="#apps-py" class="headerlink" title="apps.py"></a>apps.py</h2><p>指示本组件的名称，保持默认即可</p><h2 id="tests-py"><a href="#tests-py" class="headerlink" title="tests.py"></a>tests.py</h2><p>为本组件创建测试</p><p>本教程不对此深入讨论</p><h2 id="models-py"><a href="#models-py" class="headerlink" title="models.py"></a>models.py</h2><p>在本文件中，程序员应该描述本组件包含的实体类的声明</p><p>横向对比来说，类似于 java 开发中的 domain 层</p><p>此处我们创建一个保存我们自己数据的 myData 类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myData</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  username = models.TextField()</span><br><span class="line">  description = models.TextField()</span><br><span class="line">  age = models.IntegerField()</span><br></pre></td></tr></table></figure><h2 id="admin-py"><a href="#admin-py" class="headerlink" title="admin.py"></a>admin.py</h2><p>默认情况下包含如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br></pre></td></tr></table></figure><p>需要根据子组件的 models 来添加代码</p><p>比如，我们在上文中，在 hello 子组件中创建了 myData 类，那就需要修改本文件代码为如下模样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> hello.models <span class="keyword">import</span> myData</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"></span><br><span class="line">admin.site.register(myData)</span><br></pre></td></tr></table></figure><h2 id="views-py"><a href="#views-py" class="headerlink" title="views.py"></a>views.py</h2><p>用于组织本组件视图的文件，程序员应在其中写入对模板渲染时所需数据的预处理操作</p><p>本例中，我们将定义一个名为 helloworld 的方法来进行预处理</p><h2 id="应添加在子组件中的非默认文件"><a href="#应添加在子组件中的非默认文件" class="headerlink" title="应添加在子组件中的非默认文件"></a>应添加在子组件中的非默认文件</h2><h3 id="data-csv"><a href="#data-csv" class="headerlink" title="data.csv"></a>data.csv</h3><p>用于保存本组件所需数据的原始数据表。可以没有本项目</p><h3 id="dataimport-py"><a href="#dataimport-py" class="headerlink" title="dataimport.py"></a>dataimport.py</h3><p>用于指示如何向项目主目录下的 db.sqlite3 数据库中注入 data.csv</p><p>当不存在 data.csv 时，也不需有本文件</p><p>现在，为了方便示例，让我们创建 data.csv，并向其中插入如下数据</p><table><thead><tr><th>username</th><th>description</th><th>age</th></tr></thead><tbody><tr><td>ringoer</td><td>从忘恩之地吹来的风</td><td>21</td></tr><tr><td>myname</td><td>测试用说说</td><td>100</td></tr></tbody></table><p>并创建 dataimport.py，输入如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在自己脚本中使用django model</span></span><br><span class="line"><span class="keyword">import</span> sys,os</span><br><span class="line"></span><br><span class="line">sys.path.append(os.path.abspath(os.path.dirname(os.path.dirname(__file__))))</span><br><span class="line">os.environ[<span class="string">'DJANGO_SETTINGS_MODULE'</span>] = <span class="string">'sample.settings'</span>  <span class="comment"># 配置系统变量</span></span><br><span class="line"><span class="keyword">import</span> django</span><br><span class="line">django.setup()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> hello.models <span class="keyword">import</span> myData <span class="comment"># 引入数据类型，与本组件的models中声明的类型相同</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从csv读取数据并存入models创建的表里</span></span><br><span class="line"><span class="comment"># 此处路径是相对于项目主目录的</span></span><br><span class="line">data_path = <span class="string">'hello/data.csv'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(data_path, encoding = <span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">   reader = csv.reader(f)</span><br><span class="line">   <span class="keyword">for</span> i, row <span class="keyword">in</span> enumerate(reader):</span><br><span class="line">      mydata = myData()</span><br><span class="line">      <span class="keyword">if</span> i&gt;<span class="number">0</span>:</span><br><span class="line">        mydata.username = row[<span class="number">0</span>]</span><br><span class="line">        mydata.description = row[<span class="number">1</span>]</span><br><span class="line">        mydata.age = int(row[<span class="number">2</span>])</span><br><span class="line">        mydata.save()</span><br></pre></td></tr></table></figure><p>为了正常指向该组件，需要配置</p><ol><li>该组件的 urls.py </li><li>项目控制组件中的 urls.py</li><li>项目控制组件中的 settings.py</li></ol><h3 id="hello-urls-py"><a href="#hello-urls-py" class="headerlink" title="hello/urls.py"></a>hello/urls.py</h3><p>用于指示本组件中的路由</p><p>但默认的代码使用的是 path 方法来指示路由，并不能正常工作，故本例中使用 url 方法来指示路由</p><p>本例中可以在该文件中写入如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url, include</span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.contrib.staticfiles.urls <span class="keyword">import</span> staticfiles_urlpatterns</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r'^hello/'</span>, include(<span class="string">'hello.urls'</span>)),</span><br><span class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br><span class="line">urlpatterns += staticfiles_urlpatterns()</span><br></pre></td></tr></table></figure><h3 id="sample-urls-py"><a href="#sample-urls-py" class="headerlink" title="sample/urls.py"></a>sample/urls.py</h3><p>如果我们希望通过 hello 路径来访问 hello 组件，可以向该文件中插入如下语句</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hello</span><br><span class="line">path(<span class="string">'hello/'</span>, hello.urls),</span><br></pre></td></tr></table></figure><p>则该文件变为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hello</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'hello/'</span>, hello.urls),</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>然后在项目控制组件的 settings.py 的 INSTALLED_APPS 属性中注册该组件，就可以正常路由了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    <span class="string">'hello'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="创建页面文件并渲染"><a href="#创建页面文件并渲染" class="headerlink" title="创建页面文件并渲染"></a>创建页面文件并渲染</h1><p>只有路由没有页面，一样什么都显示不了，所以我们需要对组件内的 views.py 进行修改，使得其能渲染页面，并另外提供一个用于渲染的 html 模板</p><h2 id="views-py-1"><a href="#views-py-1" class="headerlink" title="views.py"></a>views.py</h2><p>默认情况下有如下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br></pre></td></tr></table></figure><p>本文中提供如下代码作为例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> hello.models <span class="keyword">import</span> myData</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">helloworld</span><span class="params">(request)</span>:</span></span><br><span class="line">  myData_list = myData.objects.all()</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 分页算法</span></span><br><span class="line">  perpage = <span class="number">10</span></span><br><span class="line">  maxPage = int((len(myData_list) - <span class="number">1</span>) / perpage + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  page = request.GET.get(<span class="string">'page'</span>)</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    page = int(page)</span><br><span class="line">  <span class="keyword">except</span>:</span><br><span class="line">    page = <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> page &gt; maxPage:</span><br><span class="line">    page = maxPage</span><br><span class="line">  <span class="keyword">elif</span> page &lt;= <span class="number">0</span>:</span><br><span class="line">    page = <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">  minIndex = (page - <span class="number">1</span>) * perpage</span><br><span class="line">  maxIndex = page * perpage</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> maxIndex &gt; len(myData_list):</span><br><span class="line">    maxIndex = len(myData_list)</span><br><span class="line"></span><br><span class="line">  myData_list = myData_list[minIndex : maxIndex]</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 提供给前端的内容</span></span><br><span class="line">  context = &#123;</span><br><span class="line">    <span class="string">'myData_list'</span>: myData_list, <span class="comment"># 渲染表格用的列表</span></span><br><span class="line">    <span class="string">'page'</span>: page, <span class="comment"># 页号</span></span><br><span class="line">    <span class="string">'message'</span>: <span class="string">'helloworld!'</span>, <span class="comment"># 传给前端的消息</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> render(request, <span class="string">'hello.html'</span>, context) <span class="comment"># 第二参数是目标html文件名称，该html须在templates文件夹下</span></span><br></pre></td></tr></table></figure><h2 id="hello-html"><a href="#hello-html" class="headerlink" title="hello.html"></a>hello.html</h2><p>需要注意的模板语法有两条</p><ol><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; 变量名 &#125;&#125;</span><br></pre></td></tr></table></figure><p>可以实现对变量取值</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for %&#125;</span><br><span class="line"></span><br><span class="line">（此处填写html语句）</span><br><span class="line"></span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><p>可以实现循环渲染</p></li></ol><p>本例中的 html 代码如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">language</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"/static/css/style.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;&amp;emsp;第&#123;&#123; page &#125;&#125;页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>username<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>description<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>age<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% for i in myData_list %&#125; </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; i.username &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; i.description &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; i.age &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        &#123;% endfor %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="迁移数据"><a href="#迁移数据" class="headerlink" title="迁移数据"></a>迁移数据</h1><p>到这里，试图 runserver 的时候，却发现应用跑不起来了。这是为什么呢？</p><p>因为之前给 hello 组件准备的数据还没导入！</p><p>让我们导入数据吧</p><ol><li><p>执行语句 <code>python manage.py makemigrations</code> 创建迁移文件</p><p><img src="http://pic.ringoer.com/django-7-创建迁移文件.png" alt="7-创建迁移文件"></p></li><li><p>执行语句 <code>python manage.py migrate</code> 完成迁移文件的导入</p><p><img src="http://pic.ringoer.com/django-8-完成迁移文件的导入.png" alt="8-完成迁移文件的导入"></p></li><li><p>执行语句 <code>python hello/dataimport.py</code> 完成数据导入</p><p><img src="http://pic.ringoer.com/django-9-完成数据导入.png" alt="9-完成数据导入"></p><p>需要注意的是，当数据量很大时，由于 python 语言性质，会导致导入速度非常慢，请耐心等待</p></li></ol><h1 id="验收成果"><a href="#验收成果" class="headerlink" title="验收成果"></a>验收成果</h1><p>经过这么长的教程，终于可以验收成果了！</p><p><img src="http://pic.ringoer.com/django-10-验收成果.png" alt="10-验收成果"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>django 建站的步骤大致如下：</p><ol><li>初始化项目，配置静态资源</li><li>构建若干子组件</li><li>为子组件构建实体类、数据、页面与页面渲染、路由</li><li>在配置文件中注册组件</li><li>迁移数据，导入数据</li></ol>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mapper层配置</title>
      <link href="/J2EE/mapper/"/>
      <url>/J2EE/mapper/</url>
      
        <content type="html"><![CDATA[<p>和数据库直接联系的，重要的mapper层的配置。<br><a id="more"></a></p><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- druid 数据库连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 正常一定会有的 maven plugin --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>mybatis-generator/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="application-yaml"><a href="#application-yaml" class="headerlink" title="application.yaml"></a>application.yaml</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">USER-SERVICE</span></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line">    <span class="comment"># 为了便于管理，将具体的 datasource 配置放在另一个文件中</span></span><br><span class="line">    <span class="comment"># 下方 active 属性名，设为dev，则spring会自动寻找和 application.yaml同一目录下的 application-dev.yaml</span></span><br><span class="line">    <span class="comment"># 也就是说，设为x，则会自动寻找application-x.yaml</span></span><br><span class="line">    <span class="comment"># 效果等同于将目标文件内的 datasource 配置直接写在当前文件中</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># domain对象的包</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">xmu.oomall.user.domain</span></span><br><span class="line">  <span class="comment"># mapper.xml所在的位置</span></span><br><span class="line">  <span class="comment"># 本项目的mapper放在 /resource/xmu.oomall.mapper 目录下</span></span><br><span class="line">  <span class="comment"># 如果配置时索引不到mapper，可能是前置名称有问题</span></span><br><span class="line">  <span class="comment"># 如该项目，mapper.xml所在的文件夹可以试试 /xmu.oomall.mapper 或者 /xmu/oomall/mapper</span></span><br><span class="line"><span class="attr">  mapper-locations:</span> <span class="attr">classpath:xmu.oomall.mapper/*.xml</span></span><br><span class="line"><span class="attr">  configuration:</span></span><br><span class="line">    <span class="comment"># 自动将SQL中查出来的带下划线的字段，转换为驼峰标志，再去匹配类中的属性</span></span><br><span class="line"><span class="attr">    mapUnderscoreToCamelCase:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="application-dev-yaml"><a href="#application-dev-yaml" class="headerlink" title="application-dev.yaml"></a>application-dev.yaml</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="comment"># 目标数据库地址</span></span><br><span class="line">    <span class="comment"># jdbc开头，接数据库类型，接ip地址，接数据库名</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://106.14.83.157:3306/oomall</span></span><br><span class="line">    <span class="comment"># 登录数据库</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">ooadUser</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">ooad</span></span><br><span class="line"><span class="attr">    type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line">      <span class="comment"># 初始化时建立物理连接的个数</span></span><br><span class="line"><span class="attr">      initial-size:</span> <span class="number">3</span></span><br><span class="line">      <span class="comment"># 最小连接池数量</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">3</span></span><br><span class="line">      <span class="comment"># 最大连接池数量</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">10</span></span><br><span class="line">      <span class="comment"># 获取连接时最大等待时间</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="number">60000</span></span><br><span class="line"><span class="attr">      filter:</span></span><br><span class="line"><span class="attr">        stat:</span></span><br><span class="line">          <span class="comment"># 是否开启慢sql查询监控</span></span><br><span class="line"><span class="attr">          log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="comment"># 慢SQL执行时间</span></span><br><span class="line"><span class="attr">          slow-sql-millis:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">      validation-query:</span> <span class="string">select</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>到这里，配置基本完成了，接下来开始写mapper</p><h1 id="UserMapper-java"><a href="#UserMapper-java" class="headerlink" title="UserMapper.java"></a>UserMapper.java</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xmu.oomall.user.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> xmu.oomall.user.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ringoer</span></span><br><span class="line"><span class="comment"> * 必须是接口类型</span></span><br><span class="line"><span class="comment"> * 必须有 <span class="doctag">@Mapper</span> 注解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id返回用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findUserById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id返回用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">User <span class="title">findUserByName</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册一个用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改一个用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 修改影响的行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">editUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回用户列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findUsers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="UserMapper-xml"><a href="#UserMapper-xml" class="headerlink" title="UserMapper.xml"></a>UserMapper.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace中填写对应的mapper接口位置及名称--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"xmu.oomall.user.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sql语句之select--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id 填写在接口中对应的方法名 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- parameterType 填写传入参数的类型，类型名称与java类型相同 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType 填写返回参数的名称，类型名称与java类型相同，返回时会自动组装 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对于数据库保留字段，如 name ，不能直接查询，要使用 `` 包裹住才行（不是单引号） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对于传入参数，使用 #&#123;变量名&#125; 方式来取值，其中变量名与java中相同 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserById"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">            select id,</span><br><span class="line">                   password,</span><br><span class="line">                    `name`,</span><br><span class="line">                    gender,</span><br><span class="line">                    birthday,</span><br><span class="line">                    mobile,</span><br><span class="line">                    nickname,</span><br><span class="line">                    rebate,</span><br><span class="line">                    avatar,</span><br><span class="line">                    role_id,</span><br><span class="line">                    last_login_time,</span><br><span class="line">                    last_login_ip,</span><br><span class="line">                    user_level,</span><br><span class="line">                    wx_open_id,</span><br><span class="line">                    session_key,</span><br><span class="line">                    gmt_create,</span><br><span class="line">                    gmt_modified,</span><br><span class="line">                    is_deleted as beDeleted</span><br><span class="line">                    from `oomall_user` where id = #&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sql语句之select--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType 填写返回参数的名称，类型名称与java类型相同，返回时会自动组装 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对于返回类型是List的情况，resultType中只需要填List中的单体的类型即可 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如该方法返回值是 List&lt;User&gt; ，但 resultType 只需要填写 User --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUsers"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        select  id,</span><br><span class="line">                password,</span><br><span class="line">                `name`,</span><br><span class="line">                gender,</span><br><span class="line">                birthday,</span><br><span class="line">                mobile,</span><br><span class="line">                nickname,</span><br><span class="line">                rebate,</span><br><span class="line">                avatar,</span><br><span class="line">                role_id,</span><br><span class="line">                last_login_time,</span><br><span class="line">                last_login_ip,</span><br><span class="line">                user_level,</span><br><span class="line">                wx_open_id,</span><br><span class="line">                session_key,</span><br><span class="line">                gmt_create,</span><br><span class="line">                gmt_modified,</span><br><span class="line">                is_deleted as beDeleted</span><br><span class="line">        from `oomall_user`;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sql语句之select--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findUserByName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">            select id,</span><br><span class="line">                   password,</span><br><span class="line">                    `name`,</span><br><span class="line">                    gender,</span><br><span class="line">                    birthday,</span><br><span class="line">                    mobile,</span><br><span class="line">                    nickname,</span><br><span class="line">                    rebate,</span><br><span class="line">                    avatar,</span><br><span class="line">                    role_id,</span><br><span class="line">                    last_login_time,</span><br><span class="line">                    last_login_ip,</span><br><span class="line">                    user_level,</span><br><span class="line">                    wx_open_id,</span><br><span class="line">                    session_key,</span><br><span class="line">                    gmt_create,</span><br><span class="line">                    gmt_modified,</span><br><span class="line">                    is_deleted as beDeleted</span><br><span class="line">            from `oomall_user` where `name` = #&#123;name&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sql语句之insert--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id 填写在接口中对应的方法名 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- parameterType 填写传入参数的类型，类型名称与java类型相同 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- useGeneratedKeys 表示在数据库中插入时是否使用自增主键。需要与 keyProperty 配合使用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 无 resultType ，因为sql中insert方法一定返回此次更新影响的行数，即resultType一定是Integer --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- keyProperty 表示在数据库中的主键是哪个字段，字段名称与java中的相同。需要与 useGeneratedKeys 配合使用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果使用了 useGeneratedKeys 和 keyProperty ，则插入成功后jdbc会自动将生成的主键装配进传入的变量中，可以在java中直接获取 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对于传入参数，使用 #&#123;变量名&#125; 方式来取值，其中变量名与java中相同 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果传入参数类型是一个包含多个字段的类，则依然使用 #&#123;变量名&#125; 方式来取值，此时变量名直接与类中字段名相同，不需要再次声明类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">        insert into `oomall_user`(</span><br><span class="line">            password,</span><br><span class="line">            `name`,</span><br><span class="line">            gender,</span><br><span class="line">            birthday,</span><br><span class="line">            mobile,</span><br><span class="line">            nickname,</span><br><span class="line">            rebate,</span><br><span class="line">            avatar,</span><br><span class="line">            role_id,</span><br><span class="line">            last_login_time,</span><br><span class="line">            last_login_ip,</span><br><span class="line">            user_level,</span><br><span class="line">            wx_open_id,</span><br><span class="line">            session_key,</span><br><span class="line">            gmt_create,</span><br><span class="line">            gmt_modified,</span><br><span class="line">            is_deleted)</span><br><span class="line">        values (</span><br><span class="line">            #&#123;password&#125;,</span><br><span class="line">            #&#123;name&#125;,</span><br><span class="line">            #&#123;gender&#125;,</span><br><span class="line">            #&#123;birthday&#125;,</span><br><span class="line">            #&#123;mobile&#125;,</span><br><span class="line">            #&#123;nickname&#125;,</span><br><span class="line">            #&#123;rebate&#125;,</span><br><span class="line">            #&#123;avatar&#125;,</span><br><span class="line">            #&#123;roleId&#125;,</span><br><span class="line">            #&#123;lastLoginTime&#125;,</span><br><span class="line">            #&#123;lastLoginIp&#125;,</span><br><span class="line">            #&#123;userLevel&#125;,</span><br><span class="line">            #&#123;wxOpenId&#125;,</span><br><span class="line">            #&#123;sessionKey&#125;,</span><br><span class="line">            #&#123;gmtCreate&#125;,</span><br><span class="line">            #&#123;gmtModified&#125;,</span><br><span class="line">            #&#123;beDeleted&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--sql语句之update--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id 填写在接口中对应的方法名 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- parameterType 填写传入参数的类型，类型名称与java类型相同 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 无 resultType ，因为sql中update方法一定返回此次更新影响的行数，即resultType一定是Integer --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 本文章未提及delete操作，实际上delete操作的返回值也是行数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"editUser"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span> &gt;</span></span><br><span class="line">        update `oomall_user`</span><br><span class="line">        set password=#&#123;password&#125;,</span><br><span class="line">            `name`=#&#123;name&#125;,</span><br><span class="line">            gender=#&#123;gender&#125;,</span><br><span class="line">            birthday=#&#123;birthday&#125;,</span><br><span class="line">            mobile=#&#123;mobile&#125;,</span><br><span class="line">            nickname=#&#123;nickname&#125;,</span><br><span class="line">            rebate=#&#123;rebate&#125;,</span><br><span class="line">            avatar=#&#123;avatar&#125;,</span><br><span class="line">            role_id=#&#123;roleId&#125;,</span><br><span class="line">            last_login_time=#&#123;lastLoginTime&#125;,</span><br><span class="line">            last_login_ip=#&#123;lastLoginIp&#125;,</span><br><span class="line">            user_level=#&#123;userLevel&#125;,</span><br><span class="line">            wx_open_id=#&#123;wxOpenId&#125;,</span><br><span class="line">            session_key=#&#123;sessionKey&#125;,</span><br><span class="line">            gmt_create=#&#123;gmtCreate&#125;,</span><br><span class="line">            gmt_modified=#&#123;gmtModified&#125;,</span><br><span class="line">            is_deleted=#&#123;beDeleted&#125;</span><br><span class="line">        where id=#&#123;id&#125;;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="使用mapper"><a href="#使用mapper" class="headerlink" title="使用mapper"></a>使用mapper</h1><p>到这里，mapper的声明工作已经全部完成了，接下来需要在dao层调用mapper。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xmu.oomall.user.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> xmu.oomall.user.domain.User;</span><br><span class="line"><span class="keyword">import</span> xmu.oomall.user.mapper.UserMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ringoer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id返回用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 用户id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserById</span><span class="params">(Integer id)</span></span>&#123;<span class="keyword">return</span> userMapper.findUserById(id);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id返回用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 用户名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserByName</span><span class="params">(String name)</span></span>&#123;<span class="keyword">return</span> userMapper.findUserByName(name);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册一个用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>&#123;<span class="keyword">return</span> userMapper.addUser(user);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改一个用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">editUser</span><span class="params">(User user)</span></span>&#123;<span class="keyword">return</span> userMapper.editUser(user);&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回用户列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 用户列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUsers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用代码如上。</p><p>实际上只需要两行代码，就可以无缝使用mapper：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper userMapper;</span><br></pre></td></tr></table></figure><p>以上即为通过jdbc的java与数据库连接方式。</p>]]></content>
      
      
      <categories>
          
          <category> J2EE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2EE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Swagger 配置</title>
      <link href="/J2EE/spring-swagger/"/>
      <url>/J2EE/spring-swagger/</url>
      
        <content type="html"><![CDATA[<p>Swagger好文明！！</p><p>我再也不拿什么破python破postman调试了！！</p><a id="more"></a><p>第一步，引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当前版本2.9.2，以后看到这篇文章的同学记得更新版本</p><p>第二步，配置SwaggerConfig类</p><ol><li>新建一个package，叫config，便于管理</li><li>新建一个Java Class，叫SwaggerConfig</li><li>配置如下代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xmu.oomall.user.config;<span class="comment">//包名，可以修改</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ringoer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@notice</span> 下面两个注解一定不要漏了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个方法不可以修改</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.withClassAnnotation(RestController.class))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .apiInfo(apiInfo());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这个方法中所有的字符串都可以修改</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"UserInfoService RESTful API"</span>)</span><br><span class="line">                .description(<span class="string">"3-1 oomall UserInfoService"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">""</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步，在主启动类上加入注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xmu.oomall.user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.EnableDiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.netflix.eureka.EnableEurekaClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.openfeign.EnableFeignClients;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ringoer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(UserApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，直接运行，访问 <code>http://{ip}:{port}/swagger-ui.html</code> 即可看到好文明</p><p>可能出现的bug：</p><ol><li><p>无法启动，报</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compatible version of org.springframework.plugin.core.PluginRegistry</span><br></pre></td></tr></table></figure><p>如果出现这种情况，那就是因为依赖冲突，看看有没有下面这个依赖，有的话删掉即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-rest<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要不然，可以建个空项目，慢慢调节找哪个依赖冲突也可以</p><p>但反正绝对不是spring版本偏高，因为我现在运行的是2.2.2.RELEASE，也可以正常swagger</p></li><li><p>无法启动，报</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NoSuchMethodError</span><br></pre></td></tr></table></figure><p>如果出现这种情况，那就是因为guava版本不对，需要手动指定guava版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>20.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>可以启动，报一个弹窗：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Unable to infer base url. This is common when using dynamic servlet registration or when the API is behind an API Gateway. The base url is the root of where all the swagger resources are served. For e.g. if the api is available at http://example.org/api/v2/api-docs then the base url is http://example.org/api/. Please enter the location manually:</span><br></pre></td></tr></table></figure><p>如果出现这种情况，那就是因为配了spring security或者用的不是 <code>@EnableSwagger2</code> 注解</p><p>前者的话去掉security相关依赖，或者手动配置security config都可以</p><p>后者的话请回到文章开头重新配置</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> J2EE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2EE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20191230中间件相关</title>
      <link href="/others/middleware-20191230/"/>
      <url>/others/middleware-20191230/</url>
      
        <content type="html"><![CDATA[<p>以下暂时还是一些链接<br><a id="more"></a></p><p><a href="https://www.jianshu.com/p/eb571e4065ec" target="_blank" rel="noopener">MQ消息最终一致性解决方案</a><br><a href="https://www.baidu.com/s?ie=UTF-8&amp;wd=mq%20%E4%B8%80%E8%87%B4%E6%80%A7" target="_blank" rel="noopener">mq 一致性</a><br><a href="https://www.baidu.com/s?ie=UTF-8&amp;wd=%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%20%E4%B8%AD%E9%97%B4%E4%BB%B6" target="_blank" rel="noopener">消息队列 中间件</a><br><a href="https://www.cnblogs.com/wuzm/p/11105176.html" target="_blank" rel="noopener">常见的消息队列中间件介绍</a>  </p><p><a href="https://www.baidu.com/s?ie=UTF-8&amp;wd=%E7%BA%BF%E7%A8%8B%E6%B1%A0%20%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97" target="_blank" rel="noopener">线程池 消息队列</a><br><a href="https://blog.csdn.net/Ares_xb/article/details/89946466" target="_blank" rel="noopener">线程池和消息队列的一些理解</a></p><p><a href="https://www.jianshu.com/p/2accc2840a1b" target="_blank" rel="noopener">如何给老婆解释什么是RPC</a><br><a href="https://www.jianshu.com/p/9cca72f9e93c" target="_blank" rel="noopener">BFF——服务于前端的后端</a></p><p><a href="https://www.cnblogs.com/liujinyu/p/11612728.html" target="_blank" rel="noopener">基于NodeJS进行前后端分离</a><br><a href="https://www.jb51.net/article/150697.htm" target="_blank" rel="noopener">详解从NodeJS搭建中间层再谈前后端分离</a><br><a href="https://www.zhihu.com/question/279322623/answer/406073443" target="_blank" rel="noopener">纯前端开发眼里nodejs到底是什么？</a></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2EE </tag>
            
            <tag> middleware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oomall 商城系统 完工总结</title>
      <link href="/J2EE/oomall/"/>
      <url>/J2EE/oomall/</url>
      
        <content type="html"><![CDATA[<p>2019-2020学年第一学期 oomall后端开发项目总结</p><a id="more"></a><h1 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h1><h1 id="全局设计"><a href="#全局设计" class="headerlink" title="全局设计"></a>全局设计</h1><h2 id="用户需求分析"><a href="#用户需求分析" class="headerlink" title="用户需求分析"></a>用户需求分析</h2><h2 id="领域模型分析"><a href="#领域模型分析" class="headerlink" title="领域模型分析"></a>领域模型分析</h2><h2 id="对象模型分析"><a href="#对象模型分析" class="headerlink" title="对象模型分析"></a>对象模型分析</h2><h2 id="Controller层API设计"><a href="#Controller层API设计" class="headerlink" title="Controller层API设计"></a>Controller层API设计</h2><h2 id="系统模块划分"><a href="#系统模块划分" class="headerlink" title="系统模块划分"></a>系统模块划分</h2><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="相关技术"><a href="#相关技术" class="headerlink" title="相关技术"></a>相关技术</h2><h3 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h3><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><h3 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h3><h4 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h4><h4 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h4><p>阿里巴巴 JAVA 开发规约</p><h4 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h4><h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><h4 id="Maven中多项目管理方法"><a href="#Maven中多项目管理方法" class="headerlink" title="Maven中多项目管理方法"></a>Maven中多项目管理方法</h4><h4 id="Servlet并发机制"><a href="#Servlet并发机制" class="headerlink" title="Servlet并发机制"></a>Servlet并发机制</h4><h4 id="缓存和消息队列"><a href="#缓存和消息队列" class="headerlink" title="缓存和消息队列"></a>缓存和消息队列</h4><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><h4 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h4><h4 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h4><h4 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h4><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h4><h4 id="Linux部署语句"><a href="#Linux部署语句" class="headerlink" title="Linux部署语句"></a>Linux部署语句</h4><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><h4 id="Zuul网关"><a href="#Zuul网关" class="headerlink" title="Zuul网关"></a>Zuul网关</h4><h4 id="Eureka注册中心"><a href="#Eureka注册中心" class="headerlink" title="Eureka注册中心"></a>Eureka注册中心</h4><h4 id="Ribbon"><a href="#Ribbon" class="headerlink" title="Ribbon"></a>Ribbon</h4><h4 id="Nginx服务器"><a href="#Nginx服务器" class="headerlink" title="Nginx服务器"></a>Nginx服务器</h4><h1 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h1><h2 id="商品服务"><a href="#商品服务" class="headerlink" title="商品服务"></a>商品服务</h2><h2 id="订单服务"><a href="#订单服务" class="headerlink" title="订单服务"></a>订单服务</h2><h2 id="用户服务"><a href="#用户服务" class="headerlink" title="用户服务"></a>用户服务</h2><h2 id="运费服务"><a href="#运费服务" class="headerlink" title="运费服务"></a>运费服务</h2><h2 id="分享服务"><a href="#分享服务" class="headerlink" title="分享服务"></a>分享服务</h2><h1 id="个人感想"><a href="#个人感想" class="headerlink" title="个人感想"></a>个人感想</h1><h1 id="项目源代码下载"><a href="#项目源代码下载" class="headerlink" title="项目源代码下载"></a>项目源代码下载</h1><p><a href="http://download.ringoer.com/oomall-user.zip" target="_blank" rel="noopener">user</a></p><h1 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xmu.oomall<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>3-1 oomall user Service<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--normal--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web-services<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--sql--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--json--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--configuration--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--eureka-client--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-eureka-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--feign--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--logger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>Finchley.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>mybatis-generator/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> J2EE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2EE </tag>
            
            <tag> backEnd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zuul IDEA配置</title>
      <link href="/J2EE/zuul/"/>
      <url>/J2EE/zuul/</url>
      
        <content type="html"><![CDATA[<p>关于注解@EnableZuulProxy的坑<br><a id="more"></a><br>需要以下依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>其中<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>是重要的一环，因为查看spring官网及spring中央仓库可以发现，spring boot2.1.x及以后对应的cloud版本已经不推荐使用上述jar包，所以需要手动指明版本号</p>]]></content>
      
      
      <categories>
          
          <category> J2EE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2EE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20191128 oomall提交订单部分代码解读</title>
      <link href="/programing/oomall/"/>
      <url>/programing/oomall/</url>
      
        <content type="html"><![CDATA[<p>20191128读邱明老师代码后的解读<br><a id="more"></a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文章的代码基础：<a href="http://download.ringoer.com/SpringDemo-master.rar" target="_blank" rel="noopener">点我下载</a></p><p>本文章按照自底向上的顺序描述提交订单部分的代码逻辑</p><h1 id="util"><a href="#util" class="headerlink" title="util"></a>util</h1><p>工具类</p><h2 id="Common"><a href="#Common" class="headerlink" title="Common"></a><span id="util-Common">Common</span></h2><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getRandomNum</span><span class="params">(<span class="keyword">int</span> length)</span></span></span><br></pre></td></tr></table></figure><p>传入想要的数字长度，生成唯一随机数</p></li></ul><h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a><span id="util-Config">Config</span></h2><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getMaxPayTime</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>获得最长付款时间</p><p>实际上就是对于订单付款期限的全局设定</p></li></ul><h2 id="JacksonUtil"><a href="#JacksonUtil" class="headerlink" title="JacksonUtil"></a><span id="util-JacksonUtil">JacksonUtil</span></h2><ul><li>传入json字符串和file，在json字符串中，用field作为key，返回value</li><li>传入json字符串，返回json对象</li><li>传入json字符串，返回map</li><li>传入对象，返回json字符串</li></ul><h2 id="ResponseUtil"><a href="#ResponseUtil" class="headerlink" title="ResponseUtil"></a><span id="util-ResponseUtil">ResponseUtil</span></h2><p>描述了对于一个操作的响应</p><p>每个响应都是一个Map&lt;String, Object&gt;，包括3个字段：</p><ol><li>errno : 错误码</li><li>errmsg : 错误消息</li><li>data : 响应数据</li></ol><p>该工具类存在的主要原因，是为了统一返回格式</p><h1 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h1><p>负责描述所有类</p><p>所有实体类都包含通用的1-5，以下在每个实体类内均只描述其特性</p><ol><li>包含表示一个类的若干字段</li><li>有非功能方法toString()</li><li>有重载方法equals，用于判定两个对象是否是同一对象</li><li>有重载方法hashCode，返回对该对象的id的哈希结果</li><li>各字段均包含public权限的get和set方法</li></ol><h2 id="cart"><a href="#cart" class="headerlink" title="cart"></a>cart</h2><h3 id="CartItem"><a href="#CartItem" class="headerlink" title="CartItem"></a><span id="domain-cart-CartItem">CartItem</span></h3><p>此处与商品的关系表现在，一个CartItem内保存的是Product的id</p><h2 id="coupon"><a href="#coupon" class="headerlink" title="coupon"></a>coupon</h2><h3 id="AbstractCouponStrategy"><a href="#AbstractCouponStrategy" class="headerlink" title="AbstractCouponStrategy"></a><span id="domain-coupon-AbstractCouponStrategy">AbstractCouponStrategy</span></h3><p>一个抽象类，描述了计算一个订单优惠后的价格计算方法</p><p>只具体写了cacuDiscount方法,用于计算适用折扣后的OrderItem列表：</p><ol><li><p>传入OrderItems和couponSn（优惠券序号）</p></li><li><p>判断优惠门槛</p></li><li><p>若满足门槛，计算优惠后的价格</p><ol><li><p>将优惠减免金额平均分配到各商品</p></li><li><p>若理论总价与实际总价不符</p><ul><li><p>寻找数量为1的Item，将差价补偿在该Item上</p></li><li><p>无数量为1的Item</p><ol><li>将第一个Item拆开，变成两个Item，其中一个数量为n-1，另一个为1</li><li>将差价补偿在数量为1的Item上</li></ol></li></ul></li></ol></li><li><p>返回该列表</p></li></ol><p>要求子类实现：</p><ol><li>boolean isEnough方法，判断是否已经满足优惠门槛</li><li>BigDecimal getDealPrice方法，计算折扣后价格</li><li>BigDecimal getError方法，获得理论总价与实际总价的误差</li></ol><h3 id="CashOffStrategy"><a href="#CashOffStrategy" class="headerlink" title="CashOffStrategy"></a><span id="domain-coupon-CashOffStrategy">CashOffStrategy</span></h3><p>策略为满X减Y</p><p>继承了AbstractCouponStrategy类，实现了其中要求的方法，成为实体类，负责计算优惠后的OrderItem列表</p><h3 id="PercentageStrategy"><a href="#PercentageStrategy" class="headerlink" title="PercentageStrategy"></a><span id="domain-coupon-PercentageStrategy">PercentageStrategy</span></h3><p>策略为满X减Y%</p><p>继承了AbstractCouponStrategy类，实现了其中要求的方法，成为实体类，负责计算优惠后的OrderItem列表</p><h3 id="Coupon"><a href="#Coupon" class="headerlink" title="Coupon"></a><span id="domain-coupon-Coupon">Coupon</span></h3><p>包含类内enum类型子类Status。该子类包含2个参数</p><ol><li>String name，表示当前优惠券所处状态</li><li>Integer value，表示该状态的状态码</li></ol><p>同时，有方法：</p><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacuCouponPrice</span><span class="params">(Order order)</span></span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  借助[CouponRule](#domain-coupon-CouponRule)来计算CouponPrice</span><br><span class="line">  </span><br><span class="line">2. ```java</span><br><span class="line">  public boolean isReadyToUse()</span><br></pre></td></tr></table></figure><p>判断该优惠券当前是否可用</p></li></ol><h3 id="CouponRulePo"><a href="#CouponRulePo" class="headerlink" title="CouponRulePo"></a><span id="domain-coupon-CouponRulePo">CouponRulePo</span></h3><p>描述了作为一个优惠券所需的全部静态信息</p><p>但由于优惠券适用的方法较多，所以方法拆开到另一个类中实现</p><h3 id="CouponRule"><a href="#CouponRule" class="headerlink" title="CouponRule"></a><span id="domain-coupon-CouponRule">CouponRule</span></h3><p>在类中声明一个realObj来与CouponRulePo建立联系</p><p>实现了能用于优惠券的各种方法:</p><ol><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;OrderItem&gt; <span class="title">getValidItems</span><span class="params">(List&lt;OrderItem&gt; items)</span></span></span><br></pre></td></tr></table></figure><p>传入订单的子订单列表，返回可以适用所选当前CouponRule的子订单列表</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> AbstractCouponStrategy <span class="title">getStrategy</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>获得当前CouponRule所属的折扣策略</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrategy</span><span class="params">(AbstractCouponStrategy strategy)</span></span></span><br></pre></td></tr></table></figure><p>传入新的折扣策略方案，将当前CouponRule所属折扣测了更新</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isUsedOnGoods</span><span class="params">(Integer goodsId)</span></span></span><br></pre></td></tr></table></figure><p>传入商品id，判断该商品是否能够使用当前CouponRule</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getGoodsIds</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>获得当前CouponRule所适用的商品id列表</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGoodsIds</span><span class="params">(List&lt;Integer&gt; goodsIds)</span></span></span><br></pre></td></tr></table></figure><p>传入商品id列表，更新当前CouponRule所适用的商品id列表</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacuCouponPrice</span><span class="params">(Order order, String couponSn)</span></span></span><br></pre></td></tr></table></figure><p>传入订单和使用的优惠券序号，借助<a href="#domain-coupon-CashOffStrategy">CashOffStrategy</a>，更新订单Items为适用了优惠券策略后的订单Items</p></li></ol><h2 id="goods"><a href="#goods" class="headerlink" title="goods"></a>goods</h2><h3 id="AbstractPaymentStrategy"><a href="#AbstractPaymentStrategy" class="headerlink" title="AbstractPaymentStrategy"></a><span id="domain-goods-AbstractPaymentStrategy">AbstractPaymentStrategy</span></h3><p>仅定义了 活动付款策略 的接口</p><h3 id="Goods"><a href="#Goods" class="headerlink" title="Goods"></a><span id="domain-goods-Goods">Goods</span></h3><p>含有字段products，以此与Product建立联系</p><h3 id="Product"><a href="#Product" class="headerlink" title="Product"></a><span id="domain-goods-Product">Product</span></h3><p>无特性</p><h3 id="PromotionPo"><a href="#PromotionPo" class="headerlink" title="PromotionPo"></a><span id="domain-goods-PromotionPo">PromotionPo</span></h3><p>描述一个商品的优惠活动策略</p><p>无方法</p><h3 id="Promotion"><a href="#Promotion" class="headerlink" title="Promotion"></a><span id="domain-goods-Promotion">Promotion</span></h3><p>实现了PromotionPo需要的方法</p><p>对于PromotionPo和Promotion，看代码完成度，认为应该是未实现</p><p>参考Coupon内的策略写法，应该还有</p><ol><li>填充完整的抽象付款策略类</li><li>未给出的策略类，继承了抽象付款策略类</li></ol><h2 id="order"><a href="#order" class="headerlink" title="order"></a>order</h2><h3 id="Order"><a href="#Order" class="headerlink" title="Order"></a><span id="domain-order-Order">Order</span></h3><p>包含类内enum类型子类Status。该子类包含2个参数</p><ol><li>String name，表示当前订单所处状态</li><li>Integer value，表示该状态的状态码</li></ol><p>含有4种方法：</p><ol><li><p>构造函数</p><p>有2种方案</p><ol><li>不传参数</li><li>传入user和address</li></ol></li><li><p>计算价格</p><ol><li><p>先执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cacuDealPrice</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>借助<a href="#domain-coupon-Coupon">Coupon</a>算出使用的优惠券情况</p></li><li><p>再执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cacuTotal</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><p>算出订单总价</p></li></ol></li><li><p>反向绑定。</p><p>在OrderItem中绑定Order的id</p></li><li><p>借助<a href="#domain-Payment">Payment</a>计算付款方式</p></li></ol><h3 id="OrderItem"><a href="#OrderItem" class="headerlink" title="OrderItem"></a><span id="domain-order-OrderItem">OrderItem</span></h3><p>继承自Cloneable类，这意味着该类实例可以被克隆</p><p>冗余存储productName</p><p>含有2种方法：</p><ol><li>构造函数<ol><li>不传参数</li><li>传入cartItem</li></ol></li><li>重载的clone方法，指示了如何克隆该类的实例</li></ol><h2 id="user"><a href="#user" class="headerlink" title="user"></a>user</h2><h3 id="Address"><a href="#Address" class="headerlink" title="Address"></a><span id="domain-user-Address">Address</span></h3><p>无特性</p><h3 id="User"><a href="#User" class="headerlink" title="User"></a><span id="domain-user-User">User</span></h3><p>无特性</p><h2 id="GrouponOnRule"><a href="#GrouponOnRule" class="headerlink" title="GrouponOnRule"></a><span id="domain-GrouponOnRule">GrouponOnRule</span></h2><p>无特性</p><h2 id="GrouponOnStrategy"><a href="#GrouponOnStrategy" class="headerlink" title="GrouponOnStrategy"></a><span id="domain-GrouponOnStrategy">GrouponOnStrategy</span></h2><p>无特性（该模块代码未完成）</p><h2 id="Payment"><a href="#Payment" class="headerlink" title="Payment"></a><span id="domain-Payment">Payment</span></h2><p>包含类内enum类型子类Status。该子类包含2个参数</p><ol><li>String name，表示当前payment所处状态</li><li>Integer value，表示该状态的状态码</li></ol><p>含有一个不传参数的构造函数</p><h1 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h1><p>负责直接和数据库交互</p><p>以下各个Mapper均由java文件和xml文件构成，其中：</p><ol><li>java文件定义为接口，提供若干方法</li><li>xml文件用xml语言描述了java文件中的方法的sql实现</li></ol><p>每个类都要加上 <code>@Mapper</code> 注解</p><h2 id="CartItemMapper"><a href="#CartItemMapper" class="headerlink" title="CartItemMapper"></a><span id="mapper-CartItemMapper">CartItemMapper</span></h2><p>提供了2个方法</p><ol><li>传入购物车对象id，以id获得购物车明细</li><li>传入购物车对象列表，删除购物车中指定的项目</li></ol><h2 id="CouponMapper"><a href="#CouponMapper" class="headerlink" title="CouponMapper"></a><span id="mapper-CouponMapper">CouponMapper</span></h2><p>提供了2个方法</p><ol><li>传入优惠券对象id，以id获得一张优惠券的明细</li><li>传入优惠券对象id，以id获得该优惠券所属规则的明细</li></ol><h2 id="GoodsMapper"><a href="#GoodsMapper" class="headerlink" title="GoodsMapper"></a><span id="mapper-GoodsMapper">GoodsMapper</span></h2><p>提供了2个方法</p><ol><li>传入product对象id，以id获得product明细</li><li>传入商品对象id，以id获得商品明细</li></ol><h2 id="OrderMapper"><a href="#OrderMapper" class="headerlink" title="OrderMapper"></a><span id="mapper-OrderMapper">OrderMapper</span></h2><p>提供了3个方法</p><ol><li>传入订单id，以id获得订单明细</li><li>传入订单对象，新增一个订单</li><li>传入子订单列表，新增订单中的所有明细</li></ol><h1 id="dao"><a href="#dao" class="headerlink" title="dao"></a>dao</h1><p>负责数据的交流</p><p>对service层表现为数据来源，对mapper层表现为数据调用者</p><p>每个类都要加上 <code>@Repository</code> 注解</p><p>以下均只描述提供的方法</p><h2 id="CartItemDao"><a href="#CartItemDao" class="headerlink" title="CartItemDao"></a><span id="dao-CartItemDao">CartItemDao</span></h2><p>借助<a href="#mapper-CartItemMapper">CartItemMapper</a>读取数据</p><ul><li>用id返回购物车明细</li></ul><h2 id="CouponDao"><a href="#CouponDao" class="headerlink" title="CouponDao"></a><span id="dao-CouponDao">CouponDao</span></h2><p>借助<a href="#mapper-CouponMapper">CouponMapper</a>读取数据</p><ul><li>用id返回优惠券明细</li></ul><h2 id="GoodsDao"><a href="#GoodsDao" class="headerlink" title="GoodsDao"></a><span id="dao-GoodsDao">GoodsDao</span></h2><p>借助<a href="#mapper-GoodsMapper">GoodsMapper</a>读取数据</p><ul><li>用id返回product明细</li></ul><h2 id="OrderDao"><a href="#OrderDao" class="headerlink" title="OrderDao"></a><span id="dao-OrderDao">OrderDao</span></h2><p>借助<a href="#mapper-OrderMapper">OrderMapper</a>读取数据</p><ul><li>用id返回order明细</li></ul><h1 id="service"><a href="#service" class="headerlink" title="service"></a>service</h1><p>负责业务的具体实现，需要数据的时候均访问dao层</p><p>每个Service都是先提供一个接口，然后写具体的实现（impl）</p><p>每个类都要加上 <code>@Service</code> 注解</p><p>以下省略对接口的描述，直接描述实现</p><h2 id="CartItemServiceImpl"><a href="#CartItemServiceImpl" class="headerlink" title="CartItemServiceImpl"></a><span id="service-CartItemServiceImpl">CartItemServiceImpl</span></h2><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CartItem <span class="title">findCartItemById</span><span class="params">(Integer id)</span></span></span><br></pre></td></tr></table></figure><p>根据cartItem id，借助<a href="#dao-CartItemDao">CartItemDao</a>，返回该cartItem的明细</p></li><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearCartItem</span><span class="params">(List&lt;CartItem&gt; cartItems)</span></span></span><br></pre></td></tr></table></figure><p>根据传入的cartItem列表，借助<a href="#mapper-CartItemMapper">CartItemMapper</a>，清除原购物车中的cartItems</p></li></ul><h2 id="CouponServiceImpl"><a href="#CouponServiceImpl" class="headerlink" title="CouponServiceImpl"></a><span id="service-CouponServiceImpl">CouponServiceImpl</span></h2><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Coupon <span class="title">findCouponById</span><span class="params">(Integer id)</span></span></span><br></pre></td></tr></table></figure><p>根据coupon id，借助<a href="#dao-CouponDao">CouponDao</a>，返回该coupon明细</p></li></ul><h2 id="GoodsServiceImpl"><a href="#GoodsServiceImpl" class="headerlink" title="GoodsServiceImpl"></a><span id="service-GoodsServiceImpl">GoodsServiceImpl</span></h2><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Product <span class="title">findProductById</span><span class="params">(Integer id)</span></span></span><br></pre></td></tr></table></figure><p>根据product id，借助<a href="#dao-GoodsDao">GoodsDao</a>，返回该product明细</p></li></ul><h2 id="OrderServiceImpl"><a href="#OrderServiceImpl" class="headerlink" title="OrderServiceImpl"></a><span id="service-OrderServiceImpl">OrderServiceImpl</span></h2><ul><li><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Order <span class="title">submit</span><span class="params">(Order order, List&lt;CartItem&gt; cartItems)</span></span></span><br></pre></td></tr></table></figure><ol><li>传入空订单和cartItems</li><li>组装订单</li><li>借助<a href="#service-CartItemServiceImpl">CartItemServiceImpl</a>，清除原购物车中在该订单内选中的商品</li><li>使用<a href="#domain-order-Order">Order</a>的cacuDealPrice方法计算优惠价</li><li>使用<a href="#domain-order-Order">Order</a>的cacuPayment方法计算订单总价</li><li>返回组装完成的订单</li></ol></li></ul><h1 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h1><p>负责描述用例</p><h2 id="OrderSubmitVO"><a href="#OrderSubmitVO" class="headerlink" title="OrderSubmitVO"></a><span id="controller-OrderSubmitVO">OrderSubmitVO</span></h2><ol><li><p>该VO类内有4个字段</p><ol><li>cartItems，是Integer类型的List，保存订单内所选中的商品的id</li><li>address，是Address类型，保存订单内选中的地址id</li><li>couponId，是Integer类型，保存订单内选中的优惠券id<ul><li>这也意味着一个订单只能使用一张优惠券</li></ul></li><li>message，是String类型，保存别的消息信息，起到一个备用的作用</li></ol><p>同时，有一个非功能方法：toString()</p></li><li><p>4个字段各自有public权限的get和set方法，用于给Controller使用</p></li><li><p>该VO只用于承接前端提交的订单信息，无其它功能</p></li></ol><h2 id="OrderController"><a href="#OrderController" class="headerlink" title="OrderController"></a><span id="controller-OrderController">OrderController</span></h2><ol><li><p>声明Controller为RestController，设置RMap</p></li><li><p>定义需要使用的服务类的实体，自动装配（Controller内公用）</p><ol><li>OrderService</li><li>CartService</li><li>CouponService</li></ol></li><li><p>进入具体行为（Post）及实现方法submit</p><ol><li><p>submit方法在此处定义为Object类型，表示要返回一个对象。可以看到在该方法结尾有一个return ResponseUtil.ok(retOrder)语句，说明返回到前端的对象就是ResponseUtil.ok(retOrder)的返回值</p><p><a href="#util-ResponseUtil">ResponseUtil类</a></p></li><li><p>回到submit方法，参数列表有1个参数，带有@RequestBody注解，表明参数来自前端传值；同时参数声明为<a href="#controller-OrderSubmitVo">OrderSubmitVo类型</a>，表明前端传值到达后端后先拼装为一个OrderSubmitVo的实例</p></li><li><p>进入方法，可以看到在方法刚开始和即将结束之处都有logger.debug语句，生成调试日志。此处与主要功能无关</p></li><li><p>获得生成一个订单的各种主要信息，包括：</p><ol><li>user</li><li>address</li><li>coupon</li><li>cartitems</li></ol><p>其中coupon需要判空，cartItems则因为前端只传回了cartItems的id，所以需要<a href="#service-CartItemServiceImpl">CartItemServiceImpl</a>来获得每个cartitem的具体信息</p></li><li><p>新建一个空订单，保存除了商品之外的信息（第58行）</p><ol><li>新建一个用商品装填好的订单。此处使用<a href="#service-OrderServiceImpl">OrderServiceImpl</a>的submit方法装填，传入参数为空订单和cartitem列表</li><li>构造返回对象，返回到前端，订单提交结束</li></ol></li></ol></li><li><p>Controller完毕</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> programing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> J2EE </tag>
            
            <tag> OOAD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20190926 随录</title>
      <link href="/diary/20190926/"/>
      <url>/diary/20190926/</url>
      
        <content type="html"><![CDATA[<p>记一次由一句注释引发的三小时惨案……<br><a id="more"></a><br>今天想着玩玩spring boot，遂搭了个hello spring的demo<br>然后想试试dao和thymeleaf，于是什么都玩玩<br>然后发现了这篇文章：<br><a href="https://www.jianshu.com/p/efdd7c92640c" target="_blank" rel="noopener">https://www.jianshu.com/p/efdd7c92640c</a><br>其中有段代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Autowired</span></span><br><span class="line">        <span class="keyword">private</span> UserService userService;</span><br><span class="line">        <span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(ModelMap modelMap)</span> </span>&#123;</span><br><span class="line">                 modelMap.addAttribute(<span class="string">"host"</span>,<span class="string">"www.baidu.com"</span>);</span><br><span class="line">                 <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>照抄之后，我暂时没有UserService类，所以先把<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> UserService userService;</span><br></pre></td></tr></table></figure></p><p>给注释掉了<br>然后惨案就发生了……<br>在build的时候，IDEA不停报错，说<br><code>Consider defining a bean of type &#39;org.springframework.ui.ModelMap&#39; in your configuration.</code><br>为了de这个bug，不停地来往于baidu和google，发现根本没有人遇到和我一样的情况。这是什么意思？？？<br>于是一口闷气在我胸口淤积……<br>甚至对照了以前的项目也没发现什么问题，External Libraries甚至都是一模一样的……<br>差点血都吐出来了，心情差得很<br>经过3个小时的思考与辨析，终于发现——————————<br>我因为注释掉了那句定义，导致@Autowired影响到了下面的方法！！！！<br>因为@Autowired的影响，所以IDEA才会一直问我要Model的bean的definition！！！<br>删掉@Autowired和注释后终于正常build了，然后发现返回的是字符串index……<br>思考了一下，@RestController是不能返回页面的，想返回页面只能是@Controller，修改之后正常了……<br>然而我今天也无心搞下去了，明天再说吧……</p>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>课程表存档</title>
      <link href="/others/schedule-of-classes/"/>
      <url>/others/schedule-of-classes/</url>
      
        <content type="html"><![CDATA[<p>用来给自己的课程表存档。<br>目前仅大学课程表。<br><a id="more"></a><br>2020-2021-schedule-1<br><img src="http://pic.ringoer.com/2020-2021-schedule-1.png" alt="2019-2020-schedule-1"><br>2019-2020-schedule-3<br><img src="http://pic.ringoer.com/2019-2020-schedule-3.png" alt="2019-2020-schedule-1"><br>2019-2020-schedule-2<br><img src="http://pic.ringoer.com/2019-2020-schedule-2.png" alt="2019-2020-schedule-1"><br>2019-2020-schedule-1<br><img src="http://pic.ringoer.com/2019-2020-schedule-1.png" alt="2019-2020-schedule-1"><br>2018-2019-schedule-3<br><img src="http://pic.ringoer.com/2018-2019-schedule-3.png" alt="2018-2019-schedule-3"><br>2018-2019-schedule-2<br><img src="http://pic.ringoer.com/2018-2019-schedule-2.png" alt="2018-2019-schedule-2"><br>2018-2019-schedule-1<br><img src="http://pic.ringoer.com/2018-2019-schedule-1.png" alt="2018-2019-schedule-1"><br>2017-2018-schedule-3<br><img src="http://pic.ringoer.com/2017-2018-schedule-3.png" alt="2017-2018-schedule-3"><br>2017-2018-schedule-2<br><img src="http://pic.ringoer.com/2017-2018-schedule-2.png" alt="2017-2018-schedule-2"><br>2017-2018-schedule-1<br><img src="http://pic.ringoer.com/2017-2018-schedule-1.png" alt="2017-2018-schedule-1"></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> schedule </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20190908 Keras试用</title>
      <link href="/machineLearning/20190908/"/>
      <url>/machineLearning/20190908/</url>
      
        <content type="html"><![CDATA[<p>尝试了二元线性回归。<br><a id="more"></a><br>只有代码和注释。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#期望平面z=-6x+y+8</span></span><br><span class="line">trX = np.random.uniform(<span class="number">-100</span>, <span class="number">100</span>, size=<span class="number">1001</span>)</span><br><span class="line">trY = np.random.uniform(<span class="number">-100</span>, <span class="number">100</span>, size=<span class="number">1001</span>)</span><br><span class="line">trZ = <span class="number">8</span> - <span class="number">6</span> * trX + trY + np.random.randn(*trX.shape) * <span class="number">0.2</span></span><br><span class="line">trXY = np.array(list(zip(trX,trY)))</span><br><span class="line"></span><br><span class="line">model = Sequential()</span><br><span class="line"><span class="comment">#模型实现输入[x,y]，输出对应的z，属于2个输入决定一个输出，所以</span></span><br><span class="line"><span class="comment">#第一层Dense的input_dim=2</span></span><br><span class="line"><span class="comment">#最后一层Dense的output_dim=1</span></span><br><span class="line">model.add(Dense(input_dim=<span class="number">2</span>, output_dim=<span class="number">200</span>, init=<span class="string">'uniform'</span>, activation=<span class="string">'linear'</span>))</span><br><span class="line">model.add(Dense(input_dim=<span class="number">200</span>, output_dim=<span class="number">1</span>, init=<span class="string">'uniform'</span>, activation=<span class="string">'linear'</span>))</span><br><span class="line"></span><br><span class="line">model.compile(optimizer=<span class="string">'adam'</span>, loss=<span class="string">'mse'</span>)</span><br><span class="line"></span><br><span class="line">model.fit(trXY, trZ, nb_epoch=<span class="number">200</span>, verbose=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">testX = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">0</span>]</span><br><span class="line">testY = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">4</span>]</span><br><span class="line">testXY = np.array(list(zip(testX,testY)))</span><br><span class="line">res = model.predict(testXY)</span><br><span class="line">print(testXY)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure></p><p>关于zip()方法<br>设有<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a=[<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b=[<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c=[<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>]</span><br></pre></td></tr></table></figure></p><p>则有以下结果：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=zip(a,b,c)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">&lt;zip object at <span class="number">0x0000019C55381848</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list(d)</span><br><span class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>), (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>), (<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d=[list(i) <span class="keyword">for</span> i <span class="keyword">in</span> zip(a,b,c)]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d</span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]</span><br></pre></td></tr></table></figure></p><p>可见zip()方法的参数列表是可变参数列表，可以传入n个参数</p>]]></content>
      
      
      <categories>
          
          <category> machineLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Keras </tag>
            
            <tag> machineLearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20190907 Keras试用</title>
      <link href="/machineLearning/20190907/"/>
      <url>/machineLearning/20190907/</url>
      
        <content type="html"><![CDATA[<p>第一次入门TensorFlow，然后先搞搞Keras。<br><a id="more"></a><br>装环境：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow</span><br></pre></td></tr></table></figure></p><p>没有合适版本的话，检查一下自己的pip是不是最新版的，python是32位还是64位。  </p><p>入门代码：线性回归<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"><span class="keyword">from</span> keras.layers <span class="keyword">import</span> Dense</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成训练集</span></span><br><span class="line"><span class="comment">#trX和trY表示训练用的1000个点二维坐标的x和y，类型是nparray</span></span><br><span class="line"><span class="comment">#trX中，有1000组数据，每组数据只有1个元素，所以下文中Dense的input_dim=1</span></span><br><span class="line">trX = np.random.uniform(<span class="number">-100</span>, <span class="number">100</span>, size=<span class="number">1000</span>) <span class="comment">#生成1000个在-100~100之间的随机数，返回一个nparray</span></span><br><span class="line">trY = <span class="number">5</span> * trX + <span class="number">6</span> + np.random.randn(*trX.shape) * <span class="number">0.2</span> <span class="comment">#期望y=5x+6，并加入一点点随机波动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#实例化model为层次模型</span></span><br><span class="line">model = Sequential()</span><br><span class="line"></span><br><span class="line"><span class="comment">#为模型添加layer</span></span><br><span class="line"><span class="comment">#本示例是RNN，所以使用Dense作为layer</span></span><br><span class="line"><span class="comment">#前一个Dense的output_dim必须和后一个的input_dim相同</span></span><br><span class="line"><span class="comment">#第一个Dense的input_dim必须等于训练集输入的每组元素数</span></span><br><span class="line"><span class="comment">#最后一个的output_dim必须等于训练集输出输出的每组元素数</span></span><br><span class="line">model.add(Dense(input_dim=<span class="number">1</span>, output_dim=<span class="number">200</span>, init=<span class="string">'uniform'</span>, activation=<span class="string">'linear'</span>))</span><br><span class="line">model.add(Dense(input_dim=<span class="number">200</span>, output_dim=<span class="number">1</span>, init=<span class="string">'uniform'</span>, activation=<span class="string">'linear'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#编译模型，准备训练</span></span><br><span class="line"><span class="comment">#optimizer是优化器，一般选adam</span></span><br><span class="line"><span class="comment">#loss是损失函数，一般使用mse（均方误差）即可</span></span><br><span class="line"><span class="comment">#loss越小，说明训练效果越好，但要小心过拟合</span></span><br><span class="line">model.compile(optimizer=<span class="string">'adam'</span>, loss=<span class="string">'mse'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#训练</span></span><br><span class="line"><span class="comment">#trX处填写训练集输入，trY处填写训练集输出</span></span><br><span class="line"><span class="comment">#nb_epoch是迭代次数，verbose=1表示在控制台输出每次epoch的信息</span></span><br><span class="line">model.fit(trX, trY, nb_epoch=<span class="number">200</span>, verbose=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#np.array()要求传入一个list，返回一个nparray</span></span><br><span class="line"><span class="comment">#arr.tolist()要求arr是一个nparray，返回一个list</span></span><br><span class="line"><span class="comment">#model.predict要求传入一个nparray</span></span><br><span class="line">l = np.array([<span class="number">3</span>,<span class="number">1</span>,<span class="number">-5</span>,<span class="number">-23</span>,<span class="number">-42</span>,<span class="number">52</span>]) <span class="comment">#测试集</span></span><br><span class="line">res = model.predict(l) <span class="comment">#结果</span></span><br><span class="line">print(l)</span><br><span class="line">print(res)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> machineLearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Keras </tag>
            
            <tag> machineLearning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20190715 Python学习随录</title>
      <link href="/python/python-20190715/"/>
      <url>/python/python-20190715/</url>
      
        <content type="html"><![CDATA[<p>学习随录系列<br><a id="more"></a><br>功能：实现对一个由若干行组成、每行均为[0.xxx, 0.xxx, …]格式的json文件的裁剪</p><p>README</p><ol><li>在同一目录下新建一个input.txt，其中存放需要转换的文件名。<br>！仅文件名，无后缀名，无路径</li><li>在该目录下放置同名的json文件</li><li>在该目录启动cmd，运行该py文件</li><li>本代码只注重效率，未考虑文件读取失败的问题，故请确保有合法输入文件</li></ol><p>代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"></span><br><span class="line">numbers = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>] <span class="comment">#只保留numbers[i]的整数倍行</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'input.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> input_file: <span class="comment">#读取文件名</span></span><br><span class="line"></span><br><span class="line">files = input_file.read().decode(<span class="string">'utf-8'</span>).split(<span class="string">'\r'</span>) <span class="comment">#读取.解码.分割</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> files: <span class="comment">#遍历</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> filename == <span class="string">'\n'</span> <span class="keyword">or</span> filename == <span class="string">'\r'</span>:</span><br><span class="line"><span class="keyword">break</span> <span class="comment">#防止空行异常跳出</span></span><br><span class="line"><span class="keyword">if</span> filename[<span class="number">0</span>] == <span class="string">'\n'</span>:</span><br><span class="line">filename = filename[<span class="number">1</span>:] <span class="comment">#防止前导换行符</span></span><br><span class="line"><span class="keyword">if</span> filename[len(filename)<span class="number">-1</span>] == <span class="string">'\n'</span>:</span><br><span class="line">filename = filename[:len(filename)<span class="number">-1</span>] <span class="comment">#防止后置换行符</span></span><br><span class="line"></span><br><span class="line">infile = filename + <span class="string">'.'</span> + <span class="string">'json'</span> <span class="comment">#构造输入文件名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> numbers: <span class="comment">#遍历切割依据</span></span><br><span class="line"></span><br><span class="line">outfile = filename + <span class="string">'-'</span> + str(n) + <span class="string">'.'</span> + <span class="string">'json'</span> <span class="comment">#构造输出文件名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(infile, <span class="string">'rb'</span>) <span class="keyword">as</span> fr: <span class="comment">#打开输入文件</span></span><br><span class="line">file_str = fr.read().decode(<span class="string">'utf-8'</span>).split(<span class="string">'['</span>) <span class="comment">#读取.解码.分割</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(outfile, <span class="string">'wb'</span>) <span class="keyword">as</span> fw: <span class="comment">#打开输出文件</span></span><br><span class="line">ans = file_str[<span class="number">0</span>] + <span class="string">'['</span> <span class="comment">#预置</span></span><br><span class="line">i = n + <span class="number">1</span> <span class="comment">#取数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> i &lt; len(file_str): <span class="comment">#取所需行</span></span><br><span class="line">ans += <span class="string">'['</span> + file_str[i] <span class="comment">#构造输出文件</span></span><br><span class="line">i += n</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ans[len(ans)<span class="number">-1</span>] != <span class="string">'&#125;'</span>: <span class="comment">#防止异常结束</span></span><br><span class="line">i = len(ans) - <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> ans[i] != <span class="string">','</span>:</span><br><span class="line">i -= <span class="number">1</span></span><br><span class="line">ans = ans[:i] + <span class="string">']&#125;'</span></span><br><span class="line"></span><br><span class="line">fw.write(ans.encode(<span class="string">'utf-8'</span>)) <span class="comment">#写文件</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>千鈴めい视频合集</title>
      <link href="/vtuber/chisuzumei/"/>
      <url>/vtuber/chisuzumei/</url>
      
        <content type="html"><![CDATA[<p>千鈴めい视频合集<br>仅下载链接</p><a id="more"></a><p><a href="http://video.ringoer.com/【千铃鸣】打招呼.flv" target="_blank" rel="noopener">#00 打招呼</a><br><a href="http://video.ringoer.com/【千铃鸣】千铃要初次直播了哦-20190403 - 千鈴が初放送するってよ。.flv" target="_blank" rel="noopener">【千铃鸣】千铃要初次直播了哦</a><br><a href="http://video.ringoer.com/【千铃鸣】0416初配信节选 夜明けと蛍-夜明けと蛍 修正版[1080P].flv" target="_blank" rel="noopener">【千铃鸣】0416初配信节选 夜明けと蛍</a><br><a href="http://video.ringoer.com/【千铃鸣】【熟肉】来决定问候语吧！-_02 挨拶を考えます！_x264[高清版].flv" target="_blank" rel="noopener">【千铃鸣】【熟肉】来决定问候语吧！</a><br><a href="http://video.ringoer.com/【神回_熟肉】【千铃鸣】试着召唤古守了（事故联动回+迫害帕里妈妈-换源千铃联动_x264[高清版].flv" target="_blank" rel="noopener">【神回/熟肉】【千铃鸣】试着召唤古守了（事故联动回+迫害帕里妈妈</a><br><a href="http://video.ringoer.com/千铃鸣直播生肉合集-【？4？月？26？日】ギターと仲良くなりたい！！[高清版].flv" target="_blank" rel="noopener">千铃鸣直播生肉合集</a><br><a href="http://video.ringoer.com/【千铃鸣】休息是大事哦-mei歌_x264[高清版].flv" target="_blank" rel="noopener">【千铃鸣】休息是大事哦</a><br><a href="http://video.ringoer.com/【神回_熟肉】我家千铃是极道大小姐-极道千玲v2[高清版].flv" target="_blank" rel="noopener">【神回/熟肉】我家千铃是极道大小姐</a><br><a href="http://video.ringoer.com/【千铃鸣】音酱解剖-吉他歌回3_x264[高清版].flv" target="_blank" rel="noopener">【千铃鸣】音酱解剖</a><br><a href="http://video.ringoer.com/【千铃鸣】【新OP ED注意】イェイ！イェイ！イェイ！-yeah!yeah！yeah![高清版].flv" target="_blank" rel="noopener">【千铃鸣】【新OP ED注意】イェイ！イェイ！イェイ！</a><br><a href="http://video.ringoer.com/【手书_千铃鸣】祝·收益化—千铃鸣来了哦！-第四版[1080P].flv" target="_blank" rel="noopener">【手书/千铃鸣】祝·收益化—千铃鸣来了哦！</a><br><a href="http://video.ringoer.com/【千铃鸣】和有栖mana酱双龙联动-双龙联动[高清版].flv" target="_blank" rel="noopener">【千铃鸣】和有栖mana酱双龙联动</a><br><a href="http://video.ringoer.com/【千铃鸣】收益化庆祝回-祝！収益化記念ライブ！.flv" target="_blank" rel="noopener">【千铃鸣】收益化庆祝回</a><br><a href="http://video.ringoer.com/【千铃鸣】介绍下我家的执事-我が家の執事を紹介[高清版].flv" target="_blank" rel="noopener">【千铃鸣】介绍下我家的执事</a><br><a href="http://video.ringoer.com/【千铃鸣】猫又少女的奥数魔刃-猫又少女のASMR[高清版].flv" target="_blank" rel="noopener">【千铃鸣】猫又少女的奥数魔刃</a><br><a href="http://video.ringoer.com/【千铃鸣】在寻找古守的家时发现meruto酱-mc“在寻找古守的家时发现meruto酱“[高清版].flv" target="_blank" rel="noopener">【千铃鸣】在寻找古守的家时发现meruto酱</a><br><a href="http://video.ringoer.com/【千铃鸣】和吉他打好关系吧！-ギターと仲良くなりたい！！_x264[高清版].flv" target="_blank" rel="noopener">【千铃鸣】和吉他打好关系吧！</a><br><a href="http://video.ringoer.com/【千铃鸣】QWOP  Part 1-qwop游戏回剪辑_x264[高清版].flv" target="_blank" rel="noopener">【千铃鸣】QWOP Part 1</a><br><a href="http://video.ringoer.com/【CCさくら】CLEAR _ 千鈴めい【歌ってみた】-sm35329808_x264[高清版].flv" target="_blank" rel="noopener">【CCさくら】CLEAR_千鈴めい【歌ってみた】</a><br><a href="http://video.ringoer.com/【千铃鸣】最终配信-最後になってしまいましたが-a143RDtjuvc_x264[高清版].mp4" target="_blank" rel="noopener">【千铃鸣】最终配信</a></p>]]></content>
      
      
      <categories>
          
          <category> vtuber </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vtuber </tag>
            
            <tag> chisuzumei </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用 WinPCAP 监听并解析 FTP 口令</title>
      <link href="/experiment/WinPCAP-FTP/"/>
      <url>/experiment/WinPCAP-FTP/</url>
      
        <content type="html"><![CDATA[<p>计算机网络实验4<br><a id="more"></a></p><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>用 WinPCAP 监听并分析 FTP 协议并记录 IP、用户名、密码和登陆是否<br>成功。</p><h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><p>Windows10<br>C#</p><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><ol><li>wireshark部分<ul><li>连接<ol><li>本机向ftp服务器申请连接，flag=SYN<br><img src="http://pic.ringoer.com/用 WinPCAP 监听并解析 FTP 口令-connect-1.png" alt="connect-1"></li><li>ftp服务器回复本机，flag=SYN，ACK<br><img src="http://pic.ringoer.com/用 WinPCAP 监听并解析 FTP 口令-connect-2.png" alt="connect-2"></li><li>本机收到，向ftp服务器答复，flag=ACK<br><img src="http://pic.ringoer.com/用 WinPCAP 监听并解析 FTP 口令-connect-3.png" alt="connect-3"></li><li>ftp服务器收到，向本机发送数据，flag=PSH，ACK<br><img src="http://pic.ringoer.com/用 WinPCAP 监听并解析 FTP 口令-connect-4.png" alt="connect-4"></li></ol></li><li>断开<ol><li>本机向ftp服务器申请断开，flag=FIN，ACK<br><img src="http://pic.ringoer.com/用 WinPCAP 监听并解析 FTP 口令-disconnect-1.png" alt="disconnect-1"></li><li>ftp服务器收到申请，向本机返信，flag=ACK<br><img src="http://pic.ringoer.com/用 WinPCAP 监听并解析 FTP 口令-disconnect-2.png" alt="disconnect-2"></li><li>ftp服务器已经断开与本机的连接，向本机发信，flag=FIN，ACK<br><img src="http://pic.ringoer.com/用 WinPCAP 监听并解析 FTP 口令-disconnect-3.png" alt="disconnect-3"></li><li>本机收到，断开与ftp服务器连接，向ftp服务器返信，flag=ACK<br><img src="http://pic.ringoer.com/用 WinPCAP 监听并解析 FTP 口令-disconnect-4.png" alt="disconnect-4"></li></ol></li></ul></li><li>监听部分<br> <img src="http://pic.ringoer.com/用 WinPCAP 监听并解析 FTP 口令-监听部分.png" alt="监听部分"></li></ol><h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1><p>大部分与实验三相同。以下解释不同的部分。</p><ol><li>全局变量<br><img src="http://pic.ringoer.com/用 WinPCAP 监听并解析 FTP 口令-1.png" alt="1"><br>用FTPmode来表示现在处于解析ftp口令的哪个阶段。取值范围为{“”,”NOW”,”END”}<br>用MyDiary数组来保存一整次解析中，生成日志所需的数据。<br>用MyXML来保存一整次解析中，生成XML文档所需的数据</li><li>收包动作<br><img src="http://pic.ringoer.com/用 WinPCAP 监听并解析 FTP 口令-2.png" alt="2"><br>当一整次FTP口令解析完成时，生成日志和XML</li><li>在get_frame函数中<br><img src="http://pic.ringoer.com/用 WinPCAP 监听并解析 FTP 口令-3.png" alt="3"><br>录入生成日志所需的信息，然后读取用户信息</li><li>按照COMMAND获取口令<br><img src="http://pic.ringoer.com/用 WinPCAP 监听并解析 FTP 口令-4.png" alt="4"></li><li>保存<br><img src="http://pic.ringoer.com/用 WinPCAP 监听并解析 FTP 口令-5-1.png" alt="5-1"><br>停止侦听时询问保存<br><img src="http://pic.ringoer.com/用 WinPCAP 监听并解析 FTP 口令-5-2.png" alt="5-2"><br><img src="http://pic.ringoer.com/用 WinPCAP 监听并解析 FTP 口令-5-3.png" alt="5-3"></li></ol>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日本語動詞変化式</title>
      <link href="/Japanese/doushihenkashiki/"/>
      <url>/Japanese/doushihenkashiki/</url>
      
        <content type="html"><![CDATA[<p>本文为动词变形备查表格。<br><a id="more"></a></p><p>在本文，以及本博客的整个日语教程中，都有以下全局设定：  </p><ol><li>五段活用动词的动词原形是去掉ます的部分<br>示例：思（おも）います中，认为 思い 是动词原形</li><li>一段活用动词的动词原形是去掉ます的部分<br>示例：食（た）べます中，认为 食べ 是动词原形</li><li>サ変動詞的动词原形是去掉します的部分<br>示例：散歩（さんぽ）します中，认为 散步 是动词原形</li><li>对于カ変動詞，因为 来 这个汉字有不同发音，故另做处理</li></ol><p>注意，此处认为的动词原形，和动词连用形略有区别。</p><h1 id="五段活用动词"><a href="#五段活用动词" class="headerlink" title="五段活用动词"></a>五段活用动词</h1><p>对于あ行来说，对应あ段的变形，本来应该变为あ，但其实不是，应该变为わ。<br>以下用到的单词：</p><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">意思</th></tr></thead><tbody><tr><td style="text-align:center">買（か）います</td><td style="text-align:center">购买  </td></tr><tr><td style="text-align:center">書（か）きます</td><td style="text-align:center">写  </td></tr><tr><td style="text-align:center">脱（ぬ）ぎます</td><td style="text-align:center">脱  </td></tr><tr><td style="text-align:center">立（た）ちます</td><td style="text-align:center">站立  </td></tr><tr><td style="text-align:center">話（はな）します</td><td style="text-align:center">说话  </td></tr><tr><td style="text-align:center">呼（よ）びます</td><td style="text-align:center">称为、呼喊  </td></tr><tr><td style="text-align:center">死（し）にます</td><td style="text-align:center">死亡  </td></tr><tr><td style="text-align:center">読（よ）みます</td><td style="text-align:center">读  </td></tr><tr><td style="text-align:center">売（う）ります</td><td style="text-align:center">卖</td></tr></tbody></table><h2 id="变形方式"><a href="#变形方式" class="headerlink" title="变形方式"></a>变形方式</h2><ol><li>敬体形<br>就是ます形。</li><li>连用形<br>与动词原形相同。</li><li>简体形<br>将动词原形结尾的假名，变更为其对应う段。<br>示例：死にます，原形部分结尾的假名是に，对应う段是ぬ，所以死にます的简体形是死ぬ。</li><li>可能形<br>将动词原形结尾的假名，变更为其对应え段，再加ます/る。<br>新词变形与一段活用动词相同。<br>示例：死にます，原形部分结尾的假名是に，对应え段是ね，所以死にます的可能形是死ねます/死ねる。</li><li>使役态<br>将动词原形结尾的假名，变更为其对应あ段，再加せ，再加ます/る。<br>新词变形与一段活用动词相同。<br>示例：死にます，原形部分结尾的假名是に，对应あ段是な，所以死にます的使役态是死なせます/死なせる。</li><li>被动态<br>将动词原形结尾的假名，变更为其对应あ段，再加れ，再加ます/る。<br>新词变形与一段活用动词相同。<br>示例：死にます，原形部分结尾的假名是に，对应あ段是な，所以死にます的使役态是死なれます/死なれる。</li><li>使役被动态<br>将动词原形结尾的假名，变更为其对应あ段，再加され，再加ます/る。<br>新词变形与一段活用动词相同。<br>示例：死にます，原形部分结尾的假名是に，对应あ段是な，所以死にます的使役态是死なされます/死なされる。</li><li>假定形<br>将动词原形结尾的假名，变更为其对应え段，再加ば。<br>示例：死にます，原形部分结尾的假名是に，对应え段是ね，所以死にます的假定形是死ねば。</li><li>命令形<br>将动词原形结尾的假名，变更为其对应え段。<br>示例：死にます，原形部分结尾的假名是に，对应え段是ね，所以死にます的假定形是死ね。</li><li>意志形<br>将动词原形结尾的假名，变更为其对应お段，再加う。<br>示例：死にます，原形部分结尾的假名是に，对应お段是の，所以死にます的假定形是死のう。</li><li>ない形<br>将动词原形结尾的假名，变更为其对应あ段，再加ない。<br>新词变形与イ形容词相同。<br>示例：死にます，原形部分结尾的假名是に，对应あ段是な，所以死にます的ない形是死なない。</li><li>动词て形<br>根据动词原形结尾假名不同，分为以下5种情况：  <ol><li>き结尾，将き变为いて</li><li>ぎ结尾，将ぎ变为いで</li><li>ち、り、い结尾，结尾假名变为って</li><li>び、み、に结尾，结尾假名变为んで</li><li>し结尾，结尾假名变为して<br>*特别的，行く的て形是行って</li></ol></li><li>动词た形<br>将て形中的て变为た、で变为だ即可</li></ol><h2 id="变形表格"><a href="#变形表格" class="headerlink" title="变形表格"></a>变形表格</h2><p>除第一列为敬体形参照，假定形、命令形、意志形、ない形、て形、た形均采用其原样，其它列均采用简体形表示。<br>*五段活用动词在变为可能形、使役态、被动态、使役被动态时，可适用一段活用动词的敬体形、简体形变形方式。</p><table><thead><tr><th style="text-align:center">敬体形</th><th style="text-align:center">書きます</th><th style="text-align:center">脱ぎます</th><th style="text-align:center">立ちます</th><th style="text-align:center">売ります</th><th style="text-align:center">買います</th><th style="text-align:center">呼びます</th><th style="text-align:center">読みます</th><th style="text-align:center">死にます</th><th style="text-align:center">話します</th></tr></thead><tbody><tr><td style="text-align:center">连用形</td><td style="text-align:center">書き</td><td style="text-align:center">脱ぎ</td><td style="text-align:center">立ち</td><td style="text-align:center">売り</td><td style="text-align:center">買い</td><td style="text-align:center">呼び</td><td style="text-align:center">読み</td><td style="text-align:center">死に</td><td style="text-align:center">話し</td></tr><tr><td style="text-align:center">简体形</td><td style="text-align:center">書く</td><td style="text-align:center">脱ぐ</td><td style="text-align:center">立つ</td><td style="text-align:center">売る</td><td style="text-align:center">買う</td><td style="text-align:center">呼ぶ</td><td style="text-align:center">読む</td><td style="text-align:center">死ぬ</td><td style="text-align:center">話す</td></tr><tr><td style="text-align:center">可能形</td><td style="text-align:center">書ける</td><td style="text-align:center">脱げる</td><td style="text-align:center">立てる</td><td style="text-align:center">売れる</td><td style="text-align:center">買える</td><td style="text-align:center">呼べる</td><td style="text-align:center">読める</td><td style="text-align:center">死ねる</td><td style="text-align:center">話せる</td></tr><tr><td style="text-align:center">使役态</td><td style="text-align:center">書かせる</td><td style="text-align:center">脱がせる</td><td style="text-align:center">立たせる</td><td style="text-align:center">売らせる</td><td style="text-align:center">買わせる</td><td style="text-align:center">呼ばせる</td><td style="text-align:center">読ませる</td><td style="text-align:center">死なせる</td><td style="text-align:center">話させる</td></tr><tr><td style="text-align:center">被动态</td><td style="text-align:center">書かれる</td><td style="text-align:center">脱がれる</td><td style="text-align:center">立たれる</td><td style="text-align:center">売られる</td><td style="text-align:center">買われる</td><td style="text-align:center">呼ばれる</td><td style="text-align:center">読まれる</td><td style="text-align:center">死なれる</td><td style="text-align:center">話される</td></tr><tr><td style="text-align:center">使役被动态</td><td style="text-align:center">書かされる</td><td style="text-align:center">脱がされる</td><td style="text-align:center">立たされる</td><td style="text-align:center">売らされる</td><td style="text-align:center">買わされる</td><td style="text-align:center">呼ばされる</td><td style="text-align:center">読まされる</td><td style="text-align:center">死なされる</td><td style="text-align:center">話さされる</td></tr><tr><td style="text-align:center">假定形</td><td style="text-align:center">書けば</td><td style="text-align:center">脱げば</td><td style="text-align:center">立てば</td><td style="text-align:center">売れば</td><td style="text-align:center">買えば</td><td style="text-align:center">呼べば</td><td style="text-align:center">読めば</td><td style="text-align:center">死ねば</td><td style="text-align:center">話せば</td></tr><tr><td style="text-align:center">命令形</td><td style="text-align:center">書け</td><td style="text-align:center">脱げ</td><td style="text-align:center">立て</td><td style="text-align:center">売れ</td><td style="text-align:center">買え</td><td style="text-align:center">呼べ</td><td style="text-align:center">読め</td><td style="text-align:center">死ね</td><td style="text-align:center">話せ</td></tr><tr><td style="text-align:center">意志形</td><td style="text-align:center">書こう</td><td style="text-align:center">脱ごう</td><td style="text-align:center">立とう</td><td style="text-align:center">売ろう</td><td style="text-align:center">買おう</td><td style="text-align:center">呼ぼう</td><td style="text-align:center">読もう</td><td style="text-align:center">死のう</td><td style="text-align:center">話そう</td></tr><tr><td style="text-align:center">ない形</td><td style="text-align:center">書かない</td><td style="text-align:center">脱がない</td><td style="text-align:center">立たない</td><td style="text-align:center">売らない</td><td style="text-align:center">買わない</td><td style="text-align:center">呼ばない</td><td style="text-align:center">読まない</td><td style="text-align:center">死なない</td><td style="text-align:center">話さない</td></tr><tr><td style="text-align:center">て形</td><td style="text-align:center">書いて</td><td style="text-align:center">脱いで</td><td style="text-align:center">立って</td><td style="text-align:center">売って</td><td style="text-align:center">買って</td><td style="text-align:center">呼んで</td><td style="text-align:center">読んで</td><td style="text-align:center">死んで</td><td style="text-align:center">話して</td></tr><tr><td style="text-align:center">た形</td><td style="text-align:center">書いた</td><td style="text-align:center">脱いだ</td><td style="text-align:center">立った</td><td style="text-align:center">売った</td><td style="text-align:center">買った</td><td style="text-align:center">呼んだ</td><td style="text-align:center">読んだ</td><td style="text-align:center">死んだ</td><td style="text-align:center">話した</td></tr></tbody></table><h2 id="时态、语气表格"><a href="#时态、语气表格" class="headerlink" title="时态、语气表格"></a>时态、语气表格</h2><p>此处只给出简体形部分，敬体形<a href="http://ringoer.com/Japanese/kihonbunpou" target="_blank" rel="noopener">参看本链接</a></p><p>以「死にます」为例</p><table><thead><tr><th style="text-align:center">时态</th><th style="text-align:center">语气</th><th style="text-align:center">表达</th></tr></thead><tbody><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">肯定式</td><td style="text-align:center">死ぬ</td></tr><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">否定式</td><td style="text-align:center">死なない（ない形）</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">肯定式</td><td style="text-align:center">死んだ（た形）</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">否定式</td><td style="text-align:center">死ななかった（ない形，按イ形容词变化而成的过去式）</td></tr></tbody></table><h1 id="一段活用动词"><a href="#一段活用动词" class="headerlink" title="一段活用动词"></a>一段活用动词</h1><p>以下用到的单词：<br>食（た）べます，吃</p><h2 id="变形方式-1"><a href="#变形方式-1" class="headerlink" title="变形方式"></a>变形方式</h2><ol><li>敬体形<br>就是ます形。</li><li>连用形<br>与动词原形相同。</li><li>简体形<br>动词原形+る。</li><li>可能形<br>动词原形+られ，再加ます/る。<br>新词变形与一段活用动词相同。</li><li>使役态<br>动词原形+させ，再加ます/る。<br>新词变形与一段活用动词相同。</li><li>被动态<br>动词原形+られ，再加ます/る。<br>新词变形与一段活用动词相同。</li><li>使役被动态<br>动词原形+させられ，再加ます/る。<br>新词变形与一段活用动词相同。</li><li>假定形<br>动词原形+れば。</li><li>命令形<br>动词原形+ろ。</li><li>意志形<br>动词原形+よう。</li><li>ない形<br>动词原形+ない。</li><li>动词て形<br>动词原形+て。</li><li>动词た形<br>动词原形+た。</li></ol><h2 id="变形表格-1"><a href="#变形表格-1" class="headerlink" title="变形表格"></a>变形表格</h2><table><thead><tr><th style="text-align:center">敬体形</th><th style="text-align:center">食べます</th></tr></thead><tbody><tr><td style="text-align:center">连用形</td><td style="text-align:center">食べ</td></tr><tr><td style="text-align:center">简体形</td><td style="text-align:center">食べる</td></tr><tr><td style="text-align:center">可能形</td><td style="text-align:center">食べられる</td></tr><tr><td style="text-align:center">使役态</td><td style="text-align:center">食べさせる</td></tr><tr><td style="text-align:center">被动态</td><td style="text-align:center">食べられる</td></tr><tr><td style="text-align:center">使役被动态</td><td style="text-align:center">食べさせられる</td></tr><tr><td style="text-align:center">假定形</td><td style="text-align:center">食べれば</td></tr><tr><td style="text-align:center">命令形</td><td style="text-align:center">食べろ</td></tr><tr><td style="text-align:center">意志形</td><td style="text-align:center">食べよう</td></tr><tr><td style="text-align:center">ない形</td><td style="text-align:center">食べない</td></tr><tr><td style="text-align:center">て形</td><td style="text-align:center">食べて</td></tr><tr><td style="text-align:center">た形</td><td style="text-align:center">食べた</td></tr></tbody></table><h2 id="时态、语气表格-1"><a href="#时态、语气表格-1" class="headerlink" title="时态、语气表格"></a>时态、语气表格</h2><p>此处只给出简体形部分，敬体形<a href="http://ringoer.com/Japanese/kihonbunpou" target="_blank" rel="noopener">参看本链接</a></p><table><thead><tr><th style="text-align:center">时态</th><th style="text-align:center">语气</th><th style="text-align:center">表达</th></tr></thead><tbody><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">肯定式</td><td style="text-align:center">食べる</td></tr><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">否定式</td><td style="text-align:center">食べない（ない形）</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">肯定式</td><td style="text-align:center">食べた（た形）</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">否定式</td><td style="text-align:center">食べなかった（ない形，按イ形容词变化而成的过去式）</td></tr></tbody></table><h1 id="サ変動詞"><a href="#サ変動詞" class="headerlink" title="サ変動詞"></a>サ変動詞</h1><p>以下用到的单词：<br>散歩（さんぽ）します，散步</p><h2 id="变形方式-2"><a href="#变形方式-2" class="headerlink" title="变形方式"></a>变形方式</h2><ol><li>敬体形<br>就是ます形。</li><li>连用形<br>动词原形+し。</li><li>简体形<br>动词原形+する。</li><li>可能形<br>动词原形+でき，再加ます/る。<br>新词变形与一段活用动词相同。</li><li>使役态<br>动词原形+させ，再加ます/る。<br>新词变形与一段活用动词相同。</li><li>被动态<br>动词原形+され，再加ます/る。<br>新词变形与一段活用动词相同。</li><li>使役被动态<br>动词原形+させられ，再加ます/る。<br>新词变形与一段活用动词相同。</li><li>假定形<br>动词原形+すれば。</li><li>命令形<br>动词原形+しろ。</li><li>意志形<br>动词原形+しよう。</li><li>ない形<br>动词原形+しない。</li><li>动词て形<br>动词原形+して。</li><li>动词た形<br>动词原形+した。</li></ol><h2 id="变形表格-2"><a href="#变形表格-2" class="headerlink" title="变形表格"></a>变形表格</h2><table><thead><tr><th style="text-align:center">敬体形</th><th style="text-align:center">散歩します</th></tr></thead><tbody><tr><td style="text-align:center">连用形</td><td style="text-align:center">散歩し</td></tr><tr><td style="text-align:center">简体形</td><td style="text-align:center">散歩する</td></tr><tr><td style="text-align:center">可能形</td><td style="text-align:center">散歩できる</td></tr><tr><td style="text-align:center">使役态</td><td style="text-align:center">散歩させる</td></tr><tr><td style="text-align:center">被动态</td><td style="text-align:center">散歩される</td></tr><tr><td style="text-align:center">使役被动态</td><td style="text-align:center">散歩させられる</td></tr><tr><td style="text-align:center">假定形</td><td style="text-align:center">散歩すれば</td></tr><tr><td style="text-align:center">命令形</td><td style="text-align:center">散歩しろ</td></tr><tr><td style="text-align:center">意志形</td><td style="text-align:center">散歩しよう</td></tr><tr><td style="text-align:center">ない形</td><td style="text-align:center">散歩しない</td></tr><tr><td style="text-align:center">て形</td><td style="text-align:center">散歩して</td></tr><tr><td style="text-align:center">た形</td><td style="text-align:center">散歩した</td></tr></tbody></table><h2 id="时态、语气表格-2"><a href="#时态、语气表格-2" class="headerlink" title="时态、语气表格"></a>时态、语气表格</h2><p>此处只给出简体形部分，敬体形<a href="http://ringoer.com/Japanese/kihonbunpou" target="_blank" rel="noopener">参看本链接</a></p><table><thead><tr><th style="text-align:center">时态</th><th style="text-align:center">语气</th><th style="text-align:center">表达</th></tr></thead><tbody><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">肯定式</td><td style="text-align:center">散歩する</td></tr><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">否定式</td><td style="text-align:center">散歩しない（ない形）</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">肯定式</td><td style="text-align:center">散歩した（た形）</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">否定式</td><td style="text-align:center">散歩しなかった（ない形，按イ形容词变化而成的过去式）</td></tr></tbody></table><h1 id="カ変動詞"><a href="#カ変動詞" class="headerlink" title="カ変動詞"></a>カ変動詞</h1><p>カ変動詞只有一个，就是：<br>来（き）ます，来<br>且几乎每种变形都有一个读音，需要牢记。</p><h2 id="变形方式-3"><a href="#变形方式-3" class="headerlink" title="变形方式"></a>变形方式</h2><ol><li>敬体形<br>来（き）ます</li><li>连用形<br>来（き）</li><li>简体形<br>来（く）る</li><li>可能形<br>来（こ）られ，再加ます/る。<br>新词变形与一段活用动词相同。</li><li>使役态<br>来（こ）させ，再加ます/る。<br>新词变形与一段活用动词相同。</li><li>被动态<br>来（こ）られ，再加ます/る。<br>新词变形与一段活用动词相同。</li><li>使役被动态<br>来（こ）させられ，再加ます/る。<br>新词变形与一段活用动词相同。</li><li>假定形<br>来（く）れば</li><li>命令形<br>来（こ）い</li><li>意志形<br>来（こ）よう</li><li>ない形<br>来（こ）ない</li><li>动词て形<br>来（き）て</li><li>动词た形<br>来（き）た</li></ol><h2 id="变形表格-3"><a href="#变形表格-3" class="headerlink" title="变形表格"></a>变形表格</h2><table><thead><tr><th style="text-align:center">敬体形</th><th style="text-align:center">きます</th></tr></thead><tbody><tr><td style="text-align:center">连用形</td><td style="text-align:center">き</td></tr><tr><td style="text-align:center">简体形</td><td style="text-align:center">くる</td></tr><tr><td style="text-align:center">可能形</td><td style="text-align:center">こられる</td></tr><tr><td style="text-align:center">使役态</td><td style="text-align:center">こさせる</td></tr><tr><td style="text-align:center">被动态</td><td style="text-align:center">こられる</td></tr><tr><td style="text-align:center">使役被动态</td><td style="text-align:center">こさせられる</td></tr><tr><td style="text-align:center">假定形</td><td style="text-align:center">くれば</td></tr><tr><td style="text-align:center">命令形</td><td style="text-align:center">こい</td></tr><tr><td style="text-align:center">意志形</td><td style="text-align:center">こよう</td></tr><tr><td style="text-align:center">ない形</td><td style="text-align:center">こない</td></tr><tr><td style="text-align:center">て形</td><td style="text-align:center">きて</td></tr><tr><td style="text-align:center">た形</td><td style="text-align:center">きた</td></tr></tbody></table><h2 id="时态、语气表格-3"><a href="#时态、语气表格-3" class="headerlink" title="时态、语气表格"></a>时态、语气表格</h2><p>此处只给出简体形部分，敬体形<a href="http://ringoer.com/Japanese/kihonbunpou" target="_blank" rel="noopener">参看本链接</a></p><table><thead><tr><th style="text-align:center">时态</th><th style="text-align:center">语气</th><th style="text-align:center">表达</th></tr></thead><tbody><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">肯定式</td><td style="text-align:center">くる</td></tr><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">否定式</td><td style="text-align:center">こない（ない形）</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">肯定式</td><td style="text-align:center">きた（た形）</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">否定式</td><td style="text-align:center">こなかった（ない形，按イ形容词变化而成的过去式）</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Japanese </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语入门向基本文法</title>
      <link href="/Japanese/kihonbunpou/"/>
      <url>/Japanese/kihonbunpou/</url>
      
        <content type="html"><![CDATA[<p>日语入门向基本文法<br><a id="more"></a></p><h1 id="词性"><a href="#词性" class="headerlink" title="词性"></a>词性</h1><h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><p>太简单，此处只说明疑问词。</p><ol><li>何<br>翻译为：什么<br>单字读作なに。<br>在句子中时，根据以下规则有变：  <ol><li>“何”后面的助词是が、ま、か行的助词时，读なに</li><li>“何”后面的助词是な、だ、た行的助词时，读なん</li><li>不符合1、2时，读なに</li></ol></li><li>誰（だれ）　　<br>翻译为：谁</li><li>何時（なんじ）<br>翻译为：什么时候<br>一般指精确到时分秒程度的时间</li><li>何処（どこ）<br>翻译为：哪里</li><li>いつ<br>翻译为：什么时候<br>一般指精确到年月日程度的时间</li></ol><h2 id="助词"><a href="#助词" class="headerlink" title="助词"></a>助词</h2><ol><li>は<br>常用于提示主语<br>复合句中主句主语用は<br>做助词时读wa</li><li>が<br>常用于提示主语<br>复合句中从句主语用が</li><li>を<br>常用于有动词的句子中，形式为<br>【宾语（名词）】を【动词】<br>表示对【宾语】进行【动词】所表示的动作<br>做助词时读o</li><li>へ<br>常用于有移动目标的句子中，形式为<br>【目的地】へ【（表示移动的）动词】<br>表示向着【目的地】进行【动词】所表示的动作<br>此处【（表示移动的）动词】一般需要是能表示”从A到B”这样的感觉的动词<br>做助词时读e</li><li>の<br>常用于表示从属关系，形式为<br>【名词1】の【名词2】<br>表示【名词2】是属于【名词1】的类别的<br>一般有两种用法：<ol><li>生徒会長（せいとかいちょう）の彼（かれ）<br>译作”身为学生会长的他”<br>此时，表示”他”属于”学生会长”这个类别，具有”学生会长”这个属性</li><li>彼のもの<br>译作”他的东西”<br>此时，表示”东西”属于”他”这个类别，即为”属于他的东西”<br>此时，の译作”的”</li></ol></li><li>と<br>常用于：<ol><li>连接两个名词，形式为<br>【名词1】や【名词2】<br>此时连接而成的这个短语可以作为某个句子中的主语组分或宾语组分等<br>翻译为：和</li><li>在特定语法中充当连接成分，如：<br>小句 + と思（おも）います<br>此时不译</li></ol></li><li>や<br>常用于连接两个名词，形式为<br>【名词1】や【名词2】<br>连接而成的这个短语可以作为某个句子中的主语组分或宾语组分等<br>此时翻译为：或</li><li>も<br>常用于替代は或が<br>前接名词<br>此时翻译为：也</li><li>に<br>并不基本，以后提到再学习</li><li>で<br>并不基本，以后提到再学习</li></ol><h2 id="语气词"><a href="#语气词" class="headerlink" title="语气词"></a>语气词</h2><p>语气词一般放在句尾。<br>常见语气词如下：</p><ol><li>よ<br>～哟<br>有以下作用：<ol><li>表示主张、叮嘱、或引起对方注意。<br>例：あなたが行かなくても、私は行くよ。</li><li>表示怀疑，责难的语气。<br>例：なぜ、ぼくに教えてくれなかったんだよ。</li><li>表示命令，请求，接在动词和动词活用形助动词的命令形后面，或接在表示禁止和命令的な后面，一般是男性用语。<br>例：遅くなるから、早く行けよ。</li><li>表示劝诱，恳求，接在助动词“う，よう”后面。<br>例：さあ、遅れないように早く行こうよ。</li></ol></li><li>ね<br>～呢<br>有以下作用：<ol><li>表示轻微的感叹。<br>例：やあ、ずいぶんきれいな部屋だね。<br>　　いいお天気だね。</li><li>表示轻微的主张或叮嘱的心情。<br>例：あの人はきっと成功すると思いますね。</li><li>征求同意，或希望对方确认，促使对方回答。<br>例：もう一度行きましょうね。</li><li>表示疑问，责问。男性用语。<br>例：私にはよく読めないが、ここになんと書いてあるね。</li></ol></li><li>よね<br>是「よ」和「ね」的复合性终助词。<br>有以下作用：<ol><li>要求对方同意自己的观点</li><li>表明自己同意对方的观点</li></ol></li><li>わ<br>主要是女性使用，语调偏高，男性也有用的，但要降调。<br>有以下作用：<ol><li>表示强调，用来调整或加强语气。<br>例：私はこれが好きだわ。<br>　　あそこに田中さんがいるわ。<br>用わよ、わね的形式，前者强调自己的主张，后者希望别人赞成或证实自己的看法。<br>例：今度の旅行には、私も行くわよ。<br>　　あの花、本当にきれいだわね。</li><li>表示惊奇，感叹的语气。<br>例：まあ、きれいだわ。<br>　　雨がまた降り出しましたわ。</li></ol></li><li>の<br>主要是女性和儿童使用。<ol><li>表示断定，语气较亲密。读降调。<br>例：とてもいやなの。<br>　　今おなかがいっぱいなので、何も食べたくないの。</li><li>表示叮嘱的语气，常用のね的形式。<br>例：きっと引き受けてくれるのね。<br>　　明日は必ず来てくれるのね。待ってますよ。</li><li>表示命令，语气较强，发音要重。<br>例：ご飯は黙って食べるの。</li><li>表示质问，疑问。读升调。<br>例：きれいな着物を着て、どこへ行くの。</li></ol></li><li>ぞ<br>一般由男性使用，表示一种强调和肯定的判断，有一种大男子主义的语气。</li><li>な<br>表示说话人再次确认自己的感情等。<br>一般是男性使用。 </li><li>ぜ<br>用于说话人单方面向听话人传达语句的内容。想要改变听话人对某事情认识的意图并不强。<br>一般是男性使用。</li><li>さ<br>表示说话人并非对所作的判断负责，而是作为理所当然的事情或暂且的判断表示提示。<br>一般是男性使用。</li><li>かな<br>是「か」和「な」的复合性终助词，后面一般接「思う」之类的动词。一般是男性使用。</li><li>かしら<br>かな的女性版。</li></ol><h2 id="动词"><a href="#动词" class="headerlink" title="动词"></a>动词</h2><h3 id="五段活用动词-一类动词"><a href="#五段活用动词-一类动词" class="headerlink" title="五段活用动词/一类动词"></a>五段活用动词/一类动词</h3><p>五段活用，指因为该动词的动词原形结尾有五种情况，所以有五种变形</p><ol><li>き</li><li>ぎ</li><li>ち、り、い</li><li>び、み、に</li><li>し<br>无特殊说明的情况下，符合上述形态的动词都是五段活用动词</li></ol><h3 id="一段活用动词-二类动词"><a href="#一段活用动词-二类动词" class="headerlink" title="一段活用动词/二类动词"></a>一段活用动词/二类动词</h3><p>与五段活用相对，一段活用，指该动词不论动词原形结尾是什么形态，都只有一种变形<br>无特殊说明的情况下，不是五段活用动词或サ変动词、カ変动词的动词，就是一段活用动词</p><h3 id="サ変动词、カ変动词-三类动词"><a href="#サ変动词、カ変动词-三类动词" class="headerlink" title="サ変动词、カ変动词/三类动词"></a>サ変动词、カ変动词/三类动词</h3><ol><li>サ変动词<br>无特殊说明的情况下，符合”名词+します”的动词就是サ変动词<br>因为这类动词的变形集中在对后面的”します”进行变形，而不管怎么变，这一部分的第一个假名都是さ行的，所以称之为サ変动词</li><li>カ変动词<br>只有一个单词，就是来（き）ます<br>因为这个单词的几种变形中，汉字”来”虽然读音不尽相同，但都属于か行，所以称之为カ変动词</li></ol><h2 id="形容词"><a href="#形容词" class="headerlink" title="形容词"></a>形容词</h2><h3 id="イ形容词"><a href="#イ形容词" class="headerlink" title="イ形容词"></a>イ形容词</h3><p>无特殊说明的情况下，以い结尾的形容词就是イ形容词</p><h3 id="ナ形容词-形容动词"><a href="#ナ形容词-形容动词" class="headerlink" title="ナ形容词/形容动词"></a>ナ形容词/形容动词</h3><p>无特殊说明的情况下，不以い结尾的形容词就是ナ形容词<br>因为该类形容词在使用时通常要加上な，所以称之为ナ形容词</p><h2 id="副词"><a href="#副词" class="headerlink" title="副词"></a>副词</h2><p>一般副词主要有三种：</p><ol><li>天生就是副词，如ごろごろ：无所事事</li><li>イ形容词中，结尾的い变为く</li><li>ナ形容词+に</li></ol><h1 id="敬体形、简体形"><a href="#敬体形、简体形" class="headerlink" title="敬体形、简体形"></a>敬体形、简体形</h1><h2 id="敬体形"><a href="#敬体形" class="headerlink" title="敬体形"></a>敬体形</h2><h3 id="一般陈述句"><a href="#一般陈述句" class="headerlink" title="一般陈述句"></a>一般陈述句</h3><table><thead><tr><th style="text-align:center">时态</th><th style="text-align:center">语气</th><th style="text-align:center">表达</th></tr></thead><tbody><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">肯定式</td><td style="text-align:center">です</td></tr><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">否定式</td><td style="text-align:center">ではありません（此处は读wa）</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">肯定式</td><td style="text-align:center">でした</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">否定式</td><td style="text-align:center">ではありませんでした</td></tr></tbody></table><h3 id="一般动词句"><a href="#一般动词句" class="headerlink" title="一般动词句"></a>一般动词句</h3><table><thead><tr><th style="text-align:center">时态</th><th style="text-align:center">语气</th><th style="text-align:center">表达</th></tr></thead><tbody><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">肯定式</td><td style="text-align:center">ます</td></tr><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">否定式</td><td style="text-align:center">ません</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">肯定式</td><td style="text-align:center">ました</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">否定式</td><td style="text-align:center">ませんでした</td></tr></tbody></table><h3 id="一般形容词句"><a href="#一般形容词句" class="headerlink" title="一般形容词句"></a>一般形容词句</h3><h4 id="イ形容词-1"><a href="#イ形容词-1" class="headerlink" title="イ形容词"></a>イ形容词</h4><p>与一般陈述句相同</p><h4 id="ナ形容词"><a href="#ナ形容词" class="headerlink" title="ナ形容词"></a>ナ形容词</h4><p>与一般陈述句相同</p><h2 id="简体形"><a href="#简体形" class="headerlink" title="简体形"></a>简体形</h2><h3 id="一般陈述句-1"><a href="#一般陈述句-1" class="headerlink" title="一般陈述句"></a>一般陈述句</h3><table><thead><tr><th style="text-align:center">时态</th><th style="text-align:center">语气</th><th style="text-align:center">表达</th></tr></thead><tbody><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">肯定式</td><td style="text-align:center">だ</td></tr><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">否定式</td><td style="text-align:center">ではない（此处は读wa）</td></tr><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">否定式</td><td style="text-align:center">じゃない（ではない的口语化）</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">肯定式</td><td style="text-align:center">だった</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">否定式</td><td style="text-align:center">ではなかった</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">否定式</td><td style="text-align:center">じゃなかった</td></tr></tbody></table><h3 id="一般动词句-1"><a href="#一般动词句-1" class="headerlink" title="一般动词句"></a>一般动词句</h3><p><a href="http://ringoer.com/Japanese/doushihenkashiki" target="_blank" rel="noopener">参看本链接</a></p><h3 id="一般形容词句-1"><a href="#一般形容词句-1" class="headerlink" title="一般形容词句"></a>一般形容词句</h3><h4 id="イ形容词-2"><a href="#イ形容词-2" class="headerlink" title="イ形容词"></a>イ形容词</h4><p>イ形容词的变形体现在对于单词结尾的い的变形</p><table><thead><tr><th style="text-align:center">时态</th><th style="text-align:center">语气</th><th style="text-align:center">表达</th></tr></thead><tbody><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">肯定式</td><td style="text-align:center">～い</td></tr><tr><td style="text-align:center">一般现在时</td><td style="text-align:center">否定式</td><td style="text-align:center">～くない</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">肯定式</td><td style="text-align:center">～かった</td></tr><tr><td style="text-align:center">一般过去时</td><td style="text-align:center">否定式</td><td style="text-align:center">～くなかった</td></tr></tbody></table><h4 id="ナ形容词-1"><a href="#ナ形容词-1" class="headerlink" title="ナ形容词"></a>ナ形容词</h4><p>与一般陈述句相同</p><h1 id="句型"><a href="#句型" class="headerlink" title="句型"></a>句型</h1><h2 id="一般陈述句-2"><a href="#一般陈述句-2" class="headerlink" title="一般陈述句"></a>一般陈述句</h2><ol><li>【名词1】は【名词2】です。<br>【名词1】是【名词2】<br>其中【名词1】是已知的，【名词2】是新引入的。<br>示例：<br>それはリンゴです。<br>那是苹果。（先看到那里有个物件，然后才认出是苹果）</li><li>【名词1】が【名词2】です。<br>【名词1】是【名词2】<br>其中【名词2】是已知的，【名词1】是新引入的。<br>示例：<br>それがリンゴです。<br>那是苹果。（先知道有苹果这么一个东西，然后四下张望，看到一个物件）</li><li>です的变形<br>默认的です表达一般现在时，有以下变形。对于每个变形，若无特殊说明，使用时直接替换です即可。</li></ol><h2 id="一般疑问句"><a href="#一般疑问句" class="headerlink" title="一般疑问句"></a>一般疑问句</h2><p>直接在小句后加か即可，结尾用句号。<br>也可直接问号，但此时有惊叹的效果，故而一般不用。<br>示例：<br>それはリンゴですか。<br>那是苹果吗？  </p><p>有疑问词的句子，发问时只能使用以下句式。<br>【疑问词】が【名词】ですか<br>不能用は</p><h2 id="一般存在句"><a href="#一般存在句" class="headerlink" title="一般存在句"></a>一般存在句</h2><ol><li>有主观意识的存在<br>【名词】が【地点】にいます。<br>示例：<br>猫がそこにいます<br>地点成分在句子中可以提前，如：<br>そこに猫がいます</li><li>没有主观意识的存在<br>【名词】が【地点】にあります。<br>示例：<br>花がそこにあります<br>地点成分在句子中可以提前，如：<br>そこに花があります</li><li>区别<br>有生命的存在，不一定有主观意识。<br>如动物有意识，植物没有。<br>没有生命的存在，则一定没有意识。</li><li>います和あります的变形<br>います和あります均为动词。<br>います的简体形为いる，其它变形与一段活用动词相同。<br>あります的简体形为ある，其它变形与五段活用动词相同。</li></ol><h2 id="一般动词句-2"><a href="#一般动词句-2" class="headerlink" title="一般动词句"></a>一般动词句</h2><p>【主语】は【宾语】を【动词】ます<br>表示【主语】对【宾语】做出了【动词】所表示的动作。</p><h2 id="一般形容词句-2"><a href="#一般形容词句-2" class="headerlink" title="一般形容词句"></a>一般形容词句</h2><h3 id="イ形容词-3"><a href="#イ形容词-3" class="headerlink" title="イ形容词"></a>イ形容词</h3><ol><li>【名词】は【イ形容词】です<br>表示【名词】是【イ形容词】的。<br>示例：<br>彼女は美しいです<br>她是美丽的</li><li>【名词】が【イ形容词】です<br>表示【名词】是【イ形容词】的。<br>此处的【イ形容词】是【名词】的固有属性。<br>示例：<br>太陽が丸いです<br>太阳是圆的</li></ol><h3 id="ナ形容词-2"><a href="#ナ形容词-2" class="headerlink" title="ナ形容词"></a>ナ形容词</h3><ol><li>【名词】は【ナ形容词】です<br>表示【名词】是【ナ形容词】的。<br>示例：<br>その山は有名です<br>那座山是有名的</li><li>【名词】が【ナ形容词】です<br>表示【名词】是【ナ形容词】的。<br>此处的【ナ形容词】是【名词】的固有属性。<br>示例：<br>その花がきれいです<br>那朵花是漂亮的</li></ol><h1 id="惯用句"><a href="#惯用句" class="headerlink" title="惯用句"></a>惯用句</h1><p>以下句子中，小括号表示对读音的注释。<br>若无小括号，则按一般规则处理。</p><table><thead><tr><th style="text-align:center">句子</th><th style="text-align:center">意思</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">こんにちは(wa)</td><td style="text-align:center">你好</td><td style="text-align:center">常用于白天</td></tr><tr><td style="text-align:center">こんばんは(wa)</td><td style="text-align:center">晚上好</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">おはようございます</td><td style="text-align:center">早上好</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">おはよう</td><td style="text-align:center">早上好</td><td style="text-align:center">是上一句的缩写</td></tr><tr><td style="text-align:center">ありがとうございます</td><td style="text-align:center">谢谢</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">ありがとう</td><td style="text-align:center">谢谢</td><td style="text-align:center">是上一句的缩写</td></tr><tr><td style="text-align:center">すみません</td><td style="text-align:center">对不起</td><td style="text-align:center">较正式</td></tr><tr><td style="text-align:center">すいません</td><td style="text-align:center">对不起</td><td style="text-align:center">是上一句的口语形式</td></tr><tr><td style="text-align:center">ごめんなさい</td><td style="text-align:center">对不起</td><td style="text-align:center">较随意，常用于熟人</td></tr><tr><td style="text-align:center">ごめん</td><td style="text-align:center">对不起</td><td style="text-align:center">是上一句的缩写</td></tr><tr><td style="text-align:center">申(もう)し訳(わけ)ございません</td><td style="text-align:center">对不起</td><td style="text-align:center">最为郑重的说法</td></tr><tr><td style="text-align:center">更多句子待更新…</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Japanese </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汉明码</title>
      <link href="/programing/HammingCode/"/>
      <url>/programing/HammingCode/</url>
      
        <content type="html"><![CDATA[<p>汉明码编码方式详解<br><a id="more"></a></p><h1 id="确定位数"><a href="#确定位数" class="headerlink" title="确定位数"></a>确定位数</h1><p>已知有n位信息码，k位校验码，则在汉明码的构造规则中，应满足：<br>2^k&gt;=n+k+1<br>其中k位校验码应至少有n+k种状态，用来表达n+k位的错误，还有1位用来表示整个代码正确无误。<br>故通常有下表。</p><table><thead><tr><th style="text-align:center">n</th><th style="text-align:center">k（最小）</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">2~4</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">5~11</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">12~26</td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">27~57</td><td style="text-align:center">6</td></tr><tr><td style="text-align:center">58~120</td><td style="text-align:center">7</td></tr><tr><td style="text-align:center">…</td><td style="text-align:center">…</td></tr></tbody></table><h1 id="构造序列"><a href="#构造序列" class="headerlink" title="构造序列"></a>构造序列</h1><p>设n+k位序列每一位编号分别为1,2,3,…,n+k，k位汉明码分别为C1、C2、C4、…、C2^(k-1)，则对于任意i(1&lt;=i&lt;=k)，C2^(i-1)应放在序列中第i号位置上。<br>示例：<br>现有n=4的信息码，由上表可得k=3，则n+k位序列编号为1~7，k位汉明码编号为C1、C2、C4。同时，设信息码的4位分别为b4、b3、b2、b1，则有下表序列。</p><table><thead><tr><th style="text-align:center">二进制序号</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th></tr></thead><tbody><tr><td style="text-align:center">名称</td><td style="text-align:center">C1</td><td style="text-align:center">C2</td><td style="text-align:center">b4</td><td style="text-align:center">C4</td><td style="text-align:center">b3</td><td style="text-align:center">b2</td><td style="text-align:center">b1</td></tr></tbody></table><p>以此类推。<br>此时，对于任意i(1&lt;=i&lt;=k)，C2^(i-1)负责检测的范围为[i+m*i*2，i*2-1+m*i*2]，m&gt;=0且m为整数<br>以上表为例，则有：<br>C1负责检测1,3,5,7位<br>C2负责检测2,3,6,7位<br>C4负责检测4,5,6,7位</p><h1 id="奇偶校验"><a href="#奇偶校验" class="headerlink" title="奇偶校验"></a>奇偶校验</h1><p>设C2^(i-1)负责检测t位，若为偶校验，则这t位相加，所得结果应为偶数，即二进制为最后一位为0；若为奇校验，则这t位相加，所得结果应为奇数，即二进制位最后一位为1。<br>以上表为例，则有：<br>第1,3,5,7位相加为偶数，C1在第1位，所以C1=(第3位+第5位+第7位)的和取二进制最后一位，简写为C1=3位 + 5位 + 7位，即C1=b4 + b3 + b1<br>第2,3,6,7位相加为偶数，C2在第2位，所以C2=3位 + 6位 + 7位，即C2=b4 + b2 + b1<br>第4,5,6,7位相加为偶数，C4在第4位，所以C4=5位 + 6位 + 7位，即C4=b3 + b2 + b1</p><p>若设信息码为0101，采用偶校验，则<br>C1=0+1+1=0<br>C2=0+0+1=1<br>C4=1+0+1=0<br>所以信息码0101对应的汉明码为0100101</p><h1 id="纠错过程"><a href="#纠错过程" class="headerlink" title="纠错过程"></a>纠错过程</h1><p>前面说到，对于任意i(1&lt;=i&lt;=k)，C2^(i-1)负责检测的范围为[i+m*i*2，i*2-1+m*i*2]，m&gt;=0且m为整数。则收信一方只需要按该规则重新计算即可。<br>于是，设对于任意i(1&lt;=i&lt;=k)，已知C2^(i-1)负责检测t位，则有P2^(i-1)=∑这t位（包括C2^(i-1)所在位）。<br>接上例，则有：<br>P4=4位 + 5位 + 6位 + 7位<br>P2=2位 + 3位 + 6位 + 7位<br>P1=1位 + 3位 + 5位 + 7位<br>若全0，则表示信息完全正确</p><p>若此时设收到的码字为0100111，则通过计算，得：<br>P4=0+1+1+1=1<br>P2=1+0+1+1=1<br>P1=0+0+1+1=0<br>说明C1负责的分组没错，C2和C4负责的分组有错。<br>经检查发现，只有计算结果110对应第110位（也就是第6位）有错。此时计算机会直接修改第110位，于是完成纠错。</p><p>又若正确码字为0100101，收到码字为1100101，则通过计算，得：<br>P4=0+1+0+1=0<br>P2=1+0+0+1=0<br>P1=1+0+1+1=1<br>此时P4P2P1=001，所以第1位出错，应该修改第1位。但因为第1位是C1所在地，是校验位，对信息码没有影响，故一般不纠正此处错误。</p><p>以上，就是汉明码的工作过程。</p>]]></content>
      
      
      <categories>
          
          <category> programing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 汉明码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日语入门向基本单词</title>
      <link href="/Japanese/kihontango/"/>
      <url>/Japanese/kihontango/</url>
      
        <content type="html"><![CDATA[<p>日语入门向基本单词<br><a id="more"></a></p><h1 id="人称"><a href="#人称" class="headerlink" title="人称"></a>人称</h1><h2 id="我"><a href="#我" class="headerlink" title="我"></a>我</h2><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">通常适用范围</th></tr></thead><tbody><tr><td style="text-align:center">私（わたし）</td><td style="text-align:center">共通</td></tr><tr><td style="text-align:center">俺（おれ）</td><td style="text-align:center">男性</td></tr><tr><td style="text-align:center">僕（ぼく）</td><td style="text-align:center">男性</td></tr><tr><td style="text-align:center">吾輩（わがはい）</td><td style="text-align:center">文人/咒术师等等</td></tr><tr><td style="text-align:center">あたし</td><td style="text-align:center">女性</td></tr><tr><td style="text-align:center">うち</td><td style="text-align:center">女性</td></tr></tbody></table><p>没有绝对的情况，想用什么其实都可以，只不过别人可能觉得你有点奇怪</p><h2 id="你"><a href="#你" class="headerlink" title="你"></a>你</h2><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">通常适用范围</th></tr></thead><tbody><tr><td style="text-align:center">君（きみ）</td><td style="text-align:center">对同辈、晚辈</td></tr><tr><td style="text-align:center">貴方（あなた）</td><td style="text-align:center">对陌生人，或女人称呼丈夫</td></tr><tr><td style="text-align:center">お前（まえ）</td><td style="text-align:center">对同辈、晚辈。比较不礼貌</td></tr><tr><td style="text-align:center">貴様（きさま）</td><td style="text-align:center">一般用于斥责</td></tr><tr><td style="text-align:center">～さん</td><td style="text-align:center">「～」处填入对方姓名，共通</td></tr><tr><td style="text-align:center">～くん</td><td style="text-align:center">「～」处填入对方姓名，男性</td></tr><tr><td style="text-align:center">～ちゃん</td><td style="text-align:center">「～」处填入对方姓名，女性</td></tr></tbody></table><h2 id="他-她-它"><a href="#他-她-它" class="headerlink" title="他/她/它"></a>他/她/它</h2><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">通常适用范围</th></tr></thead><tbody><tr><td style="text-align:center">彼（かれ）</td><td style="text-align:center">男性</td></tr><tr><td style="text-align:center">彼女（かのじょ）</td><td style="text-align:center">女性</td></tr><tr><td style="text-align:center">あの～</td><td style="text-align:center">「～」处填入「它」的种类</td></tr></tbody></table><h2 id="～们"><a href="#～们" class="headerlink" title="～们"></a>～们</h2><p>一般用「～たち」或者「～ら」表示。<br>以下为示例。</p><table><thead><tr><th style="text-align:center">中文</th><th style="text-align:center">日文</th></tr></thead><tbody><tr><td style="text-align:center">我们</td><td style="text-align:center">私たち</td></tr><tr><td style="text-align:center">你们</td><td style="text-align:center">君たち</td></tr><tr><td style="text-align:center">他们</td><td style="text-align:center">彼たち</td></tr><tr><td style="text-align:center">那些猫</td><td style="text-align:center">あの猫たち</td></tr></tbody></table><h1 id="方位"><a href="#方位" class="headerlink" title="方位"></a>方位</h1><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">通常适用范围</th></tr></thead><tbody><tr><td style="text-align:center">ここ</td><td style="text-align:center">这里（离说话人更近）</td></tr><tr><td style="text-align:center">そこ</td><td style="text-align:center">那里（离听话人更近）</td></tr><tr><td style="text-align:center">あそこ</td><td style="text-align:center">那里（离双方都远）</td></tr><tr><td style="text-align:center">こちら</td><td style="text-align:center">ここ的较为尊敬的说法</td></tr><tr><td style="text-align:center">そちら</td><td style="text-align:center">そこ的较为尊敬的说法</td></tr><tr><td style="text-align:center">あちら</td><td style="text-align:center">あそこ的较为尊敬的说法</td></tr><tr><td style="text-align:center">こっち</td><td style="text-align:center">こちら的口语形式</td></tr><tr><td style="text-align:center">そっち</td><td style="text-align:center">そちら的口语形式</td></tr><tr><td style="text-align:center">あっち</td><td style="text-align:center">あちら的口语形式</td></tr><tr><td style="text-align:center">中（なか）</td><td style="text-align:center">中间</td></tr><tr><td style="text-align:center">前（まえ）</td><td style="text-align:center">前面</td></tr><tr><td style="text-align:center">後（うし）ろ</td><td style="text-align:center">后面</td></tr><tr><td style="text-align:center">上（うえ）</td><td style="text-align:center">上面</td></tr><tr><td style="text-align:center">下（した）</td><td style="text-align:center">下面</td></tr><tr><td style="text-align:center">左（ひだり）</td><td style="text-align:center">左边</td></tr><tr><td style="text-align:center">右（みぎ）</td><td style="text-align:center">右边</td></tr><tr><td style="text-align:center">内（うち）</td><td style="text-align:center">里边</td></tr><tr><td style="text-align:center">外（そと）</td><td style="text-align:center">外边</td></tr></tbody></table><h1 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h1><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">读音</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">れい/ぜろ</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">いち</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">に</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">さん</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">し/よん</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">ご</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">ろく</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">しち/なな</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">はち</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">きゅう/く</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">じゅう</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">じゅういち</td></tr><tr><td style="text-align:center">20</td><td style="text-align:center">にじゅう</td></tr><tr><td style="text-align:center">40</td><td style="text-align:center">しじゅう</td></tr><tr><td style="text-align:center">70</td><td style="text-align:center">しちじゅう</td></tr><tr><td style="text-align:center">90</td><td style="text-align:center">きゅうじゅう</td></tr><tr><td style="text-align:center">100</td><td style="text-align:center">ひゃく</td></tr><tr><td style="text-align:center">200</td><td style="text-align:center">にひゃく</td></tr><tr><td style="text-align:center">300</td><td style="text-align:center">さんびゃく</td></tr><tr><td style="text-align:center">400</td><td style="text-align:center">よんひゃく</td></tr><tr><td style="text-align:center">600</td><td style="text-align:center">ろっぴゃく</td></tr><tr><td style="text-align:center">700</td><td style="text-align:center">ななひゃく</td></tr><tr><td style="text-align:center">800</td><td style="text-align:center">はっぴゃく</td></tr><tr><td style="text-align:center">1000</td><td style="text-align:center">いちせん</td></tr><tr><td style="text-align:center">10000</td><td style="text-align:center">いちまん</td></tr><tr><td style="text-align:center">一億</td><td style="text-align:center">いちおく</td></tr><tr><td style="text-align:center">数～</td><td style="text-align:center">すう～</td></tr><tr><td style="text-align:center">何～</td><td style="text-align:center">なん～</td></tr></tbody></table><p>「数～」的示例：<br>数年（すうねん），几年。<br>与英语 some years 相同。</p><p>「何～」的示例：<br>何年（なんねん），几年。<br>与英语 what year 相同。</p><p>没提及的可以按照规律推算，比如11是10的读音和1的读音拼起来，那么12就是10和2拼起来，变成じゅうに。<br>其中7做个位时，读しち或者なな都可以，做高位时，读しち。4、9同理。<br>拼接亦可用于多个不同等级数字间，如837=800+30+7，则读音为<br>はっぴゃくさんじゅうしち</p><h1 id="个数"><a href="#个数" class="headerlink" title="个数"></a>个数</h1><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">读音</th><th style="text-align:center">意思</th></tr></thead><tbody><tr><td style="text-align:center">一つ</td><td style="text-align:center">ひとつ</td><td style="text-align:center">一个</td></tr><tr><td style="text-align:center">二つ</td><td style="text-align:center">ふたつ</td><td style="text-align:center">两个</td></tr><tr><td style="text-align:center">三つ</td><td style="text-align:center">みっつ</td><td style="text-align:center">三个</td></tr><tr><td style="text-align:center">四つ</td><td style="text-align:center">よっつ</td><td style="text-align:center">四个</td></tr><tr><td style="text-align:center">五つ</td><td style="text-align:center">いつつ</td><td style="text-align:center">五个</td></tr><tr><td style="text-align:center">六つ</td><td style="text-align:center">むっつ</td><td style="text-align:center">六个</td></tr><tr><td style="text-align:center">七つ</td><td style="text-align:center">ななつ</td><td style="text-align:center">七个</td></tr><tr><td style="text-align:center">八つ</td><td style="text-align:center">やっつ</td><td style="text-align:center">八个</td></tr><tr><td style="text-align:center">九つ</td><td style="text-align:center">ここのつ</td><td style="text-align:center">九个</td></tr><tr><td style="text-align:center">十つ</td><td style="text-align:center">とおつ</td><td style="text-align:center">十个</td></tr><tr><td style="text-align:center">何つ</td><td style="text-align:center">なんつ</td><td style="text-align:center">几个</td></tr></tbody></table><h1 id="人数"><a href="#人数" class="headerlink" title="人数"></a>人数</h1><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">读音</th><th style="text-align:center">意思</th></tr></thead><tbody><tr><td style="text-align:center">一人</td><td style="text-align:center">ひとり</td><td style="text-align:center">一个人</td></tr><tr><td style="text-align:center">二人</td><td style="text-align:center">ふたり</td><td style="text-align:center">两个人</td></tr><tr><td style="text-align:center">三人</td><td style="text-align:center">さんにん</td><td style="text-align:center">三个人</td></tr><tr><td style="text-align:center">四人</td><td style="text-align:center">よんにん</td><td style="text-align:center">四个人</td></tr><tr><td style="text-align:center">五人</td><td style="text-align:center">ごにん</td><td style="text-align:center">五个人</td></tr><tr><td style="text-align:center">六人</td><td style="text-align:center">ろくにん</td><td style="text-align:center">六个人</td></tr><tr><td style="text-align:center">七人</td><td style="text-align:center">しちにん</td><td style="text-align:center">七个人</td></tr><tr><td style="text-align:center">八人</td><td style="text-align:center">はちにん</td><td style="text-align:center">八个人</td></tr><tr><td style="text-align:center">九人</td><td style="text-align:center">きゅうにん</td><td style="text-align:center">九个人</td></tr><tr><td style="text-align:center">十人</td><td style="text-align:center">じゅうにん</td><td style="text-align:center">十个人</td></tr><tr><td style="text-align:center">何人</td><td style="text-align:center">なんにん</td><td style="text-align:center">几个人</td></tr></tbody></table><h1 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h1><h2 id="时-分-秒"><a href="#时-分-秒" class="headerlink" title="时/分/秒"></a>时/分/秒</h2><ul><li>时<br>直接数字+時（じ）即可<br>示例：7時（しちじ）-&gt;7点</li><li>分</li></ul><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">读音</th><th style="text-align:center">单词</th><th style="text-align:center">读音</th><th style="text-align:center">单词</th><th style="text-align:center">读音</th></tr></thead><tbody><tr><td style="text-align:center">1分</td><td style="text-align:center">いっぷん</td><td style="text-align:center">2分</td><td style="text-align:center">にふん</td><td style="text-align:center">3分</td><td style="text-align:center">さんぷん</td></tr><tr><td style="text-align:center">4分</td><td style="text-align:center">よんぷん</td><td style="text-align:center">5分</td><td style="text-align:center">ごふん</td><td style="text-align:center">6分</td><td style="text-align:center">ろっぷん</td></tr><tr><td style="text-align:center">7分</td><td style="text-align:center">ななふん</td><td style="text-align:center">8分</td><td style="text-align:center">はちふん/はっぷん</td><td style="text-align:center">9分</td><td style="text-align:center">きゅうふん</td></tr><tr><td style="text-align:center">10分</td><td style="text-align:center">じっぷん/じゅっぷん</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><ul><li>秒<br>除了下面几个特殊的以外，其余均为数字读法+秒（びょう）</li></ul><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">读音</th></tr></thead><tbody><tr><td style="text-align:center">4秒</td><td style="text-align:center">よんびょう</td></tr><tr><td style="text-align:center">7秒</td><td style="text-align:center">ななびょう</td></tr><tr><td style="text-align:center">9秒</td><td style="text-align:center">きゅうびょう</td></tr></tbody></table><h2 id="一天的变化"><a href="#一天的变化" class="headerlink" title="一天的变化"></a>一天的变化</h2><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">读音</th><th style="text-align:center">意思</th></tr></thead><tbody><tr><td style="text-align:center">朝</td><td style="text-align:center">あさ</td><td style="text-align:center">早上</td></tr><tr><td style="text-align:center">午前</td><td style="text-align:center">ごぜん</td><td style="text-align:center">早上（可用于与时分秒搭配）</td></tr><tr><td style="text-align:center">昼</td><td style="text-align:center">ひる</td><td style="text-align:center">中午</td></tr><tr><td style="text-align:center">午後</td><td style="text-align:center">ごご</td><td style="text-align:center">下午（可用于与时分秒搭配）</td></tr><tr><td style="text-align:center">夕方</td><td style="text-align:center">ゆうがた</td><td style="text-align:center">傍晚</td></tr><tr><td style="text-align:center">晩</td><td style="text-align:center">ばん</td><td style="text-align:center">晚上（稍早些）</td></tr><tr><td style="text-align:center">夜</td><td style="text-align:center">よる</td><td style="text-align:center">夜晚（稍晚些）</td></tr></tbody></table><h2 id="星期"><a href="#星期" class="headerlink" title="星期"></a>星期</h2><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">读音</th><th style="text-align:center">意思</th></tr></thead><tbody><tr><td style="text-align:center">月曜日</td><td style="text-align:center">げつようび</td><td style="text-align:center">周一</td></tr><tr><td style="text-align:center">火曜日</td><td style="text-align:center">かようび</td><td style="text-align:center">周二</td></tr><tr><td style="text-align:center">水曜日</td><td style="text-align:center">すいようび</td><td style="text-align:center">周三</td></tr><tr><td style="text-align:center">木曜日</td><td style="text-align:center">もくようび</td><td style="text-align:center">周四</td></tr><tr><td style="text-align:center">金曜日</td><td style="text-align:center">きんようび</td><td style="text-align:center">周五</td></tr><tr><td style="text-align:center">土曜日</td><td style="text-align:center">どようび</td><td style="text-align:center">周六</td></tr><tr><td style="text-align:center">日曜日</td><td style="text-align:center">にちようび</td><td style="text-align:center">周日</td></tr><tr><td style="text-align:center">何曜日</td><td style="text-align:center">なんようび</td><td style="text-align:center">星期几</td></tr></tbody></table><h2 id="四季"><a href="#四季" class="headerlink" title="四季"></a>四季</h2><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">读音</th><th style="text-align:center">意思</th></tr></thead><tbody><tr><td style="text-align:center">春</td><td style="text-align:center">はる</td><td style="text-align:center">春天</td></tr><tr><td style="text-align:center">夏</td><td style="text-align:center">なつ</td><td style="text-align:center">夏天</td></tr><tr><td style="text-align:center">秋</td><td style="text-align:center">あき</td><td style="text-align:center">秋天</td></tr><tr><td style="text-align:center">冬</td><td style="text-align:center">ふゆ</td><td style="text-align:center">冬天</td></tr><tr><td style="text-align:center">春季</td><td style="text-align:center">しゅんき</td><td style="text-align:center">春季</td></tr><tr><td style="text-align:center">夏季</td><td style="text-align:center">かき</td><td style="text-align:center">夏季</td></tr><tr><td style="text-align:center">秋季</td><td style="text-align:center">しゅうき</td><td style="text-align:center">秋季</td></tr><tr><td style="text-align:center">冬季</td><td style="text-align:center">とうき</td><td style="text-align:center">冬季</td></tr></tbody></table><h2 id="年-月-日期"><a href="#年-月-日期" class="headerlink" title="年/月/日期"></a>年/月/日期</h2><ul><li>年<br>直接数字+年（ねん）即可<br>示例：7年（しちねん）</li><li>月<br>直接数字+月（がつ）即可<br>示例：7月（しちがつ）<br>注：作为“几月”的一部分时，月读がつ；其他时候一般读げつ</li></ul><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">读音</th><th style="text-align:center">单词</th><th style="text-align:center">读音</th><th style="text-align:center">单词</th><th style="text-align:center">读音</th><th style="text-align:center">单词</th><th style="text-align:center">读音</th></tr></thead><tbody><tr><td style="text-align:center">1日</td><td style="text-align:center">ついたち</td><td style="text-align:center">2日</td><td style="text-align:center">ふつか</td><td style="text-align:center">3日</td><td style="text-align:center">みっか</td><td style="text-align:center">4日</td><td style="text-align:center">よっか</td></tr><tr><td style="text-align:center">5日</td><td style="text-align:center">いつか</td><td style="text-align:center">6日</td><td style="text-align:center">むいか</td><td style="text-align:center">7日</td><td style="text-align:center">なのか</td><td style="text-align:center">8日</td><td style="text-align:center">ようか</td></tr><tr><td style="text-align:center">9日</td><td style="text-align:center">ここのか</td><td style="text-align:center">10日</td><td style="text-align:center">とおか</td><td style="text-align:center">11日</td><td style="text-align:center">じゅういちにち</td><td style="text-align:center">12日</td><td style="text-align:center">じゅうににち</td></tr><tr><td style="text-align:center">13日</td><td style="text-align:center">じゅうさんにち</td><td style="text-align:center">14日</td><td style="text-align:center">じゅうよっか</td><td style="text-align:center">15日</td><td style="text-align:center">じゅうごにち</td><td style="text-align:center">16日</td><td style="text-align:center">じゅうろくにち</td></tr><tr><td style="text-align:center">17日</td><td style="text-align:center">じゅうしちにち</td><td style="text-align:center">18日</td><td style="text-align:center">じゅうはちにち</td><td style="text-align:center">19日</td><td style="text-align:center">じゅうくにち</td><td style="text-align:center">20日</td><td style="text-align:center">はつか</td></tr><tr><td style="text-align:center">21日</td><td style="text-align:center">にじゅういちにち</td><td style="text-align:center">22日</td><td style="text-align:center">にじゅうににち</td><td style="text-align:center">23日</td><td style="text-align:center">にじゅうさんにち</td><td style="text-align:center">24日</td><td style="text-align:center">にじゅうよっか</td></tr><tr><td style="text-align:center">25日</td><td style="text-align:center">にじゅうごにち</td><td style="text-align:center">26日</td><td style="text-align:center">にじゅうろくにち</td><td style="text-align:center">27日</td><td style="text-align:center">にじゅうしちにち</td><td style="text-align:center">28日</td><td style="text-align:center">にじゅうはちにち</td></tr><tr><td style="text-align:center">29日</td><td style="text-align:center">にじゅうくにち</td><td style="text-align:center">30日</td><td style="text-align:center">さんじゅう</td><td style="text-align:center">31日</td><td style="text-align:center">さんじゅういちにち</td><td style="text-align:center">何日</td><td style="text-align:center">なんにち</td></tr></tbody></table><ul><li><p>时段<br>对于年/时/分/秒，直接数字+間（かん）即可<br>示例：7年間（しちねんかん）-&gt;7年<br>对于月，用数字+月間（げつかん）即可<br>对于日，用数字+日間（にちかん）即可</p></li><li><p>多久以前</p></li></ul><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">读音</th><th style="text-align:center">意思</th></tr></thead><tbody><tr><td style="text-align:center">～前</td><td style="text-align:center">～ぜん</td><td style="text-align:center">前接时间，表示多长时间以前</td></tr><tr><td style="text-align:center">～後</td><td style="text-align:center">～ご</td><td style="text-align:center">前接时间，表示多长时间以后</td></tr></tbody></table><p>示例：三年前（さんねんぜん）</p><h2 id="今天-本周-本月-本年"><a href="#今天-本周-本月-本年" class="headerlink" title="今天/本周/本月/本年"></a>今天/本周/本月/本年</h2><table><thead><tr><th style="text-align:center">单词</th><th style="text-align:center">读音</th><th style="text-align:center">意思</th></tr></thead><tbody><tr><td style="text-align:center">一昨日</td><td style="text-align:center">おととい</td><td style="text-align:center">前天</td></tr><tr><td style="text-align:center">昨日</td><td style="text-align:center">きのう</td><td style="text-align:center">昨天</td></tr><tr><td style="text-align:center">今日</td><td style="text-align:center">きょう</td><td style="text-align:center">今天</td></tr><tr><td style="text-align:center">明日</td><td style="text-align:center">あした/あす</td><td style="text-align:center">明天</td></tr><tr><td style="text-align:center">明後日</td><td style="text-align:center">あさって</td><td style="text-align:center">后天</td></tr><tr><td style="text-align:center">先々周</td><td style="text-align:center">せんせんしゅう</td><td style="text-align:center">上上周</td></tr><tr><td style="text-align:center">先周</td><td style="text-align:center">せんしゅう</td><td style="text-align:center">上周</td></tr><tr><td style="text-align:center">今周</td><td style="text-align:center">こんしゅう</td><td style="text-align:center">本周</td></tr><tr><td style="text-align:center">来周</td><td style="text-align:center">らいしゅう</td><td style="text-align:center">下周</td></tr><tr><td style="text-align:center">再来周</td><td style="text-align:center">さらいしゅう</td><td style="text-align:center">下下周</td></tr><tr><td style="text-align:center">先々月</td><td style="text-align:center">せんせんげつ</td><td style="text-align:center">上上个月</td></tr><tr><td style="text-align:center">先月</td><td style="text-align:center">せんげつ</td><td style="text-align:center">上个月</td></tr><tr><td style="text-align:center">今月</td><td style="text-align:center">こんげつ</td><td style="text-align:center">本月</td></tr><tr><td style="text-align:center">来月</td><td style="text-align:center">らいげつ</td><td style="text-align:center">下个月</td></tr><tr><td style="text-align:center">再来月</td><td style="text-align:center">さらいげつ</td><td style="text-align:center">下下个月</td></tr><tr><td style="text-align:center">前年</td><td style="text-align:center">ぜんねん</td><td style="text-align:center">前年</td></tr><tr><td style="text-align:center">一昨年</td><td style="text-align:center">おととし</td><td style="text-align:center">前年</td></tr><tr><td style="text-align:center">去年</td><td style="text-align:center">きょねん</td><td style="text-align:center">去年</td></tr><tr><td style="text-align:center">昨年</td><td style="text-align:center">さくねん</td><td style="text-align:center">去年</td></tr><tr><td style="text-align:center">今年</td><td style="text-align:center">ことし</td><td style="text-align:center">今年</td></tr><tr><td style="text-align:center">来年</td><td style="text-align:center">らいねん</td><td style="text-align:center">明年</td></tr><tr><td style="text-align:center">再来年</td><td style="text-align:center">さらいねん</td><td style="text-align:center">后年</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Japanese </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五十音图</title>
      <link href="/Japanese/FiftyTone/"/>
      <url>/Japanese/FiftyTone/</url>
      
        <content type="html"><![CDATA[<p>五十音图详解<br><a id="more"></a></p><h1 id="五十音图基本图样"><a href="#五十音图基本图样" class="headerlink" title="五十音图基本图样"></a>五十音图基本图样</h1><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">平假名</th><th style="text-align:center">片假名</th><th style="text-align:center">罗马音</th><th style="text-align:center">平假名</th><th style="text-align:center">片假名</th><th style="text-align:center">罗马音</th><th style="text-align:center">平假名</th><th style="text-align:center">片假名</th><th style="text-align:center">罗马音</th><th style="text-align:center">平假名</th><th style="text-align:center">片假名</th><th style="text-align:center">罗马音</th><th style="text-align:center">平假名</th><th style="text-align:center">片假名</th><th style="text-align:center">罗马音</th></tr></thead><tbody><tr><td style="text-align:center">あ行</td><td style="text-align:center">あ</td><td style="text-align:center">ア</td><td style="text-align:center">a</td><td style="text-align:center">い</td><td style="text-align:center">イ</td><td style="text-align:center">i</td><td style="text-align:center">う</td><td style="text-align:center">ウ</td><td style="text-align:center">u</td><td style="text-align:center">え</td><td style="text-align:center">エ</td><td style="text-align:center">e</td><td style="text-align:center">お</td><td style="text-align:center">オ</td><td style="text-align:center">o</td></tr><tr><td style="text-align:center">か行</td><td style="text-align:center">か</td><td style="text-align:center">カ</td><td style="text-align:center">ka</td><td style="text-align:center">き</td><td style="text-align:center">キ</td><td style="text-align:center">ki</td><td style="text-align:center">く</td><td style="text-align:center">ク</td><td style="text-align:center">ku</td><td style="text-align:center">け</td><td style="text-align:center">ケ</td><td style="text-align:center">ke</td><td style="text-align:center">こ</td><td style="text-align:center">コ</td><td style="text-align:center">ko</td></tr><tr><td style="text-align:center">た行</td><td style="text-align:center">た</td><td style="text-align:center">タ</td><td style="text-align:center">ta</td><td style="text-align:center">ち</td><td style="text-align:center">チ</td><td style="text-align:center">chi</td><td style="text-align:center">つ</td><td style="text-align:center">ツ</td><td style="text-align:center">tsu</td><td style="text-align:center">て</td><td style="text-align:center">テ</td><td style="text-align:center">te</td><td style="text-align:center">と</td><td style="text-align:center">ト</td><td style="text-align:center">to</td></tr><tr><td style="text-align:center">さ行</td><td style="text-align:center">さ</td><td style="text-align:center">サ</td><td style="text-align:center">sa</td><td style="text-align:center">し</td><td style="text-align:center">シ</td><td style="text-align:center">shi/si</td><td style="text-align:center">す</td><td style="text-align:center">ス</td><td style="text-align:center">su</td><td style="text-align:center">せ</td><td style="text-align:center">セ</td><td style="text-align:center">se</td><td style="text-align:center">そ</td><td style="text-align:center">ソ</td><td style="text-align:center">so</td></tr><tr><td style="text-align:center">は行</td><td style="text-align:center">は</td><td style="text-align:center">ハ</td><td style="text-align:center">ha</td><td style="text-align:center">ひ</td><td style="text-align:center">ヒ</td><td style="text-align:center">hi</td><td style="text-align:center">ふ</td><td style="text-align:center">フ</td><td style="text-align:center">fu/hu</td><td style="text-align:center">へ</td><td style="text-align:center">ヘ</td><td style="text-align:center">he</td><td style="text-align:center">ほ</td><td style="text-align:center">ホ</td><td style="text-align:center">ho</td></tr><tr><td style="text-align:center">な行</td><td style="text-align:center">な</td><td style="text-align:center">ナ</td><td style="text-align:center">na</td><td style="text-align:center">に</td><td style="text-align:center">ニ</td><td style="text-align:center">ni</td><td style="text-align:center">ぬ</td><td style="text-align:center">ヌ</td><td style="text-align:center">nu</td><td style="text-align:center">ね</td><td style="text-align:center">ネ</td><td style="text-align:center">ne</td><td style="text-align:center">の</td><td style="text-align:center">ノ</td><td style="text-align:center">no</td></tr><tr><td style="text-align:center">ま行</td><td style="text-align:center">ま</td><td style="text-align:center">マ</td><td style="text-align:center">ma</td><td style="text-align:center">み</td><td style="text-align:center">ミ</td><td style="text-align:center">mi</td><td style="text-align:center">む</td><td style="text-align:center">ム</td><td style="text-align:center">mu</td><td style="text-align:center">め</td><td style="text-align:center">メ</td><td style="text-align:center">me</td><td style="text-align:center">も</td><td style="text-align:center">モ</td><td style="text-align:center">mo</td></tr><tr><td style="text-align:center">ら行</td><td style="text-align:center">ら</td><td style="text-align:center">ラ</td><td style="text-align:center">ra</td><td style="text-align:center">り</td><td style="text-align:center">リ</td><td style="text-align:center">ri</td><td style="text-align:center">る</td><td style="text-align:center">ル</td><td style="text-align:center">ru</td><td style="text-align:center">れ</td><td style="text-align:center">レ</td><td style="text-align:center">re</td><td style="text-align:center">ろ</td><td style="text-align:center">ロ</td><td style="text-align:center">ro</td></tr><tr><td style="text-align:center">や行</td><td style="text-align:center">や</td><td style="text-align:center">ヤ</td><td style="text-align:center">ya</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">ゆ</td><td style="text-align:center">ユ</td><td style="text-align:center">yu</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">よ</td><td style="text-align:center">ヨ</td><td style="text-align:center">yo</td></tr><tr><td style="text-align:center">わ行</td><td style="text-align:center">わ</td><td style="text-align:center">ワ</td><td style="text-align:center">wa</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">を</td><td style="text-align:center">ヲ</td><td style="text-align:center">wo</td></tr><tr><td style="text-align:center">ん行</td><td style="text-align:center">ん</td><td style="text-align:center">ン</td><td style="text-align:center">n</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">が行</td><td style="text-align:center">が</td><td style="text-align:center">ガ</td><td style="text-align:center">ga</td><td style="text-align:center">ぎ</td><td style="text-align:center">ギ</td><td style="text-align:center">gi</td><td style="text-align:center">ぐ</td><td style="text-align:center">グ</td><td style="text-align:center">gu</td><td style="text-align:center">げ</td><td style="text-align:center">ゲ</td><td style="text-align:center">ge</td><td style="text-align:center">ご</td><td style="text-align:center">ゴ</td><td style="text-align:center">go</td></tr><tr><td style="text-align:center">だ行</td><td style="text-align:center">だ</td><td style="text-align:center">ダ</td><td style="text-align:center">da</td><td style="text-align:center">ぢ</td><td style="text-align:center">ヂ</td><td style="text-align:center">di</td><td style="text-align:center">づ</td><td style="text-align:center">ヅ</td><td style="text-align:center">du</td><td style="text-align:center">で</td><td style="text-align:center">デ</td><td style="text-align:center">de</td><td style="text-align:center">ど</td><td style="text-align:center">ド</td><td style="text-align:center">do</td></tr><tr><td style="text-align:center">ざ行</td><td style="text-align:center">ざ</td><td style="text-align:center">ザ</td><td style="text-align:center">za</td><td style="text-align:center">じ</td><td style="text-align:center">ジ</td><td style="text-align:center">ji/zi</td><td style="text-align:center">ず</td><td style="text-align:center">ズ</td><td style="text-align:center">zu</td><td style="text-align:center">ぜ</td><td style="text-align:center">ゼ</td><td style="text-align:center">ze</td><td style="text-align:center">ぞ</td><td style="text-align:center">ゾ</td><td style="text-align:center">zo</td></tr><tr><td style="text-align:center">ば行</td><td style="text-align:center">ば</td><td style="text-align:center">バ</td><td style="text-align:center">ba</td><td style="text-align:center">び</td><td style="text-align:center">ビ</td><td style="text-align:center">bi</td><td style="text-align:center">ぶ</td><td style="text-align:center">ブ</td><td style="text-align:center">bu</td><td style="text-align:center">べ</td><td style="text-align:center">ベ</td><td style="text-align:center">be</td><td style="text-align:center">ぼ</td><td style="text-align:center">ボ</td><td style="text-align:center">bo</td></tr><tr><td style="text-align:center">ぱ行</td><td style="text-align:center">ぱ</td><td style="text-align:center">パ</td><td style="text-align:center">pa</td><td style="text-align:center">ぴ</td><td style="text-align:center">ピ</td><td style="text-align:center">pi</td><td style="text-align:center">ぷ</td><td style="text-align:center">プ</td><td style="text-align:center">pu</td><td style="text-align:center">ぺ</td><td style="text-align:center">ペ</td><td style="text-align:center">pe</td><td style="text-align:center">ぽ</td><td style="text-align:center">ポ</td><td style="text-align:center">po</td></tr></tbody></table><h1 id="五十音图附加部分（拗音）"><a href="#五十音图附加部分（拗音）" class="headerlink" title="五十音图附加部分（拗音）"></a>五十音图附加部分（拗音）</h1><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">平假名</th><th style="text-align:center">片假名</th><th style="text-align:center">罗马音</th><th style="text-align:center">平假名</th><th style="text-align:center">片假名</th><th style="text-align:center">罗马音</th><th style="text-align:center">平假名</th><th style="text-align:center">片假名</th><th style="text-align:center">罗马音</th></tr></thead><tbody><tr><td style="text-align:center">か行</td><td style="text-align:center">きゃ</td><td style="text-align:center">キャ</td><td style="text-align:center">kya</td><td style="text-align:center">きゅ</td><td style="text-align:center">キュ</td><td style="text-align:center">kyu</td><td style="text-align:center">きょ</td><td style="text-align:center">キョ</td><td style="text-align:center">kyo</td></tr><tr><td style="text-align:center">が行</td><td style="text-align:center">ぎゃ</td><td style="text-align:center">ギャ</td><td style="text-align:center">gya</td><td style="text-align:center">ぎゅ</td><td style="text-align:center">ギュ</td><td style="text-align:center">gyu</td><td style="text-align:center">ぎょ</td><td style="text-align:center">ギョ</td><td style="text-align:center">gyo</td></tr><tr><td style="text-align:center">た行</td><td style="text-align:center">ちゃ</td><td style="text-align:center">チャ</td><td style="text-align:center">cha</td><td style="text-align:center">ちゅ</td><td style="text-align:center">チュ</td><td style="text-align:center">chu</td><td style="text-align:center">ちょ</td><td style="text-align:center">チョ</td><td style="text-align:center">cho</td></tr><tr><td style="text-align:center">だ行</td><td style="text-align:center">でゃ</td><td style="text-align:center">デャ</td><td style="text-align:center">dha</td><td style="text-align:center">でゅ</td><td style="text-align:center">デュ</td><td style="text-align:center">dhu</td><td style="text-align:center">でょ</td><td style="text-align:center">デョ</td><td style="text-align:center">dho</td></tr><tr><td style="text-align:center">さ行</td><td style="text-align:center">しゃ</td><td style="text-align:center">シャ</td><td style="text-align:center">sha</td><td style="text-align:center">しゅ</td><td style="text-align:center">シュ</td><td style="text-align:center">shu</td><td style="text-align:center">しょ</td><td style="text-align:center">ショ</td><td style="text-align:center">sho</td></tr><tr><td style="text-align:center">ざ行</td><td style="text-align:center">じゃ</td><td style="text-align:center">ジャ</td><td style="text-align:center">ja</td><td style="text-align:center">じゅ</td><td style="text-align:center">ジュ</td><td style="text-align:center">ju</td><td style="text-align:center">じょ</td><td style="text-align:center">ジョ</td><td style="text-align:center">jo</td></tr><tr><td style="text-align:center">は行</td><td style="text-align:center">ひゃ</td><td style="text-align:center">ヒャ</td><td style="text-align:center">hya</td><td style="text-align:center">ひゅ</td><td style="text-align:center">ヒュ</td><td style="text-align:center">hyu</td><td style="text-align:center">ひょ</td><td style="text-align:center">ヒョ</td><td style="text-align:center">hyo</td></tr><tr><td style="text-align:center">ば行</td><td style="text-align:center">びゃ</td><td style="text-align:center">ビャ</td><td style="text-align:center">bya</td><td style="text-align:center">びゅ</td><td style="text-align:center">ビュ</td><td style="text-align:center">byu</td><td style="text-align:center">びょ</td><td style="text-align:center">ビョ</td><td style="text-align:center">byo</td></tr><tr><td style="text-align:center">ぱ行</td><td style="text-align:center">ぴゃ</td><td style="text-align:center">ピャ</td><td style="text-align:center">pya</td><td style="text-align:center">ぴゅ</td><td style="text-align:center">ピュ</td><td style="text-align:center">pyu</td><td style="text-align:center">ぴょ</td><td style="text-align:center">ピョ</td><td style="text-align:center">pyo</td></tr><tr><td style="text-align:center">な行</td><td style="text-align:center">にゃ</td><td style="text-align:center">ニャ</td><td style="text-align:center">nya</td><td style="text-align:center">にゅ</td><td style="text-align:center">ニュ</td><td style="text-align:center">nyu</td><td style="text-align:center">にょ</td><td style="text-align:center">ニョ</td><td style="text-align:center">nyo</td></tr><tr><td style="text-align:center">ま行</td><td style="text-align:center">みゃ</td><td style="text-align:center">ミャ</td><td style="text-align:center">mya</td><td style="text-align:center">みゅ</td><td style="text-align:center">ミュ</td><td style="text-align:center">myu</td><td style="text-align:center">みょ</td><td style="text-align:center">ミョ</td><td style="text-align:center">myo</td></tr><tr><td style="text-align:center">ら行</td><td style="text-align:center">りゃ</td><td style="text-align:center">リャ</td><td style="text-align:center">rya</td><td style="text-align:center">りゅ</td><td style="text-align:center">リュ</td><td style="text-align:center">ryu</td><td style="text-align:center">りょ</td><td style="text-align:center">リョ</td><td style="text-align:center">ryo</td></tr></tbody></table><h1 id="促音-长音"><a href="#促音-长音" class="headerlink" title="促音/长音"></a>促音/长音</h1><ol><li>促音（っ或ッ）<br>示例：はっきり<br>罗马音：ha kki ri<br>意思：清楚、明朗<br>要点：<ol><li>写罗马音时，促音的标记与后一个音的第一个字母一致</li><li>读的时候，发音的位置要停半个字符的时间</li><li>唱歌的时候，有时候明显地停顿半个字符的话会显得很奇怪，此时促音的读音应该和前一个假名的最后一个字母一致</li></ol></li><li>长音<br>在一个平假名单词中，如果前一个音以i结尾且后一个是い，或以e结尾且后一个是え，或以o结尾且后一个是う，此时对于这些い、え、う，不单独发音，而是发长音<br>在一个片假名单词中，如果出现一条横线，就意味着长音<br>示例：誓（ちか）おう<br>罗马音：chi ka o u<br>意思：（主观上想要）起誓<br>要点：<ol><li>写罗马音时，长音的标记是自己原本的标记</li><li>读的时候，长音的发音与前一个假名的最后一个字母一致，且不停顿，相当于前一个假名发音时长增加一个字符的时间</li></ol></li></ol><h1 id="相关软件下载"><a href="#相关软件下载" class="headerlink" title="相关软件下载"></a>相关软件下载</h1><p>以下软件至少适用于Windows环境<br><a href="http://download.ringoer.com/五十音图（仅清音）.exe" target="_blank" rel="noopener">五十音图（仅清音）</a><br><a href="http://download.ringoer.com/日语五十音测试.exe" target="_blank" rel="noopener">日语五十音测试</a></p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><h2 id="读音"><a href="#读音" class="headerlink" title="读音"></a>读音</h2><ol><li>按谐音方法（全都读第一声）：</li></ol><table><thead><tr><th style="text-align:center">罗马音</th><th style="text-align:center">对应谐音</th></tr></thead><tbody><tr><td style="text-align:center">a</td><td style="text-align:center">啊</td></tr><tr><td style="text-align:center">i</td><td style="text-align:center">衣</td></tr><tr><td style="text-align:center">u</td><td style="text-align:center">呜</td></tr><tr><td style="text-align:center">e</td><td style="text-align:center">诶</td></tr><tr><td style="text-align:center">o</td><td style="text-align:center">哦</td></tr></tbody></table><ol start="2"><li>表格中标注的罗马音，若有斜杠分割的，说明这两个音都可以</li></ol><h2 id="书写"><a href="#书写" class="headerlink" title="书写"></a>书写</h2><p>请注意区分以下几个假名：</p><ol><li>片假名tsu（ツ）和片假名shi（シ）<br>ツ是从上向下的一撇，シ是从下往上</li><li>片假名so（ソ）和片假名n（ン）<br>ソ是从上向下的一撇，ン是从下往上</li><li>平假名he（へ）和片假名he（ヘ）<br>平假名的へ在书写时，向下的一划与水平方向夹角较小，片假名的较大</li><li>片假名ra（ラ）和片假名（ヲ）</li></ol><h2 id="变音"><a href="#变音" class="headerlink" title="变音"></a>变音</h2><p>在作助词时，以下平假名会发生变音：</p><table><thead><tr><th style="text-align:center">假名</th><th style="text-align:center">原罗马音</th><th style="text-align:center">变音后罗马音</th></tr></thead><tbody><tr><td style="text-align:center">は</td><td style="text-align:center">ha</td><td style="text-align:center">wa</td></tr><tr><td style="text-align:center">へ</td><td style="text-align:center">he</td><td style="text-align:center">e</td></tr><tr><td style="text-align:center">を</td><td style="text-align:center">wo</td><td style="text-align:center">o</td></tr></tbody></table><h2 id="打字要点"><a href="#打字要点" class="headerlink" title="打字要点"></a>打字要点</h2><p>希望打出以下罗马音所对应的假名时，需要注意打字的方法</p><table><thead><tr><th style="text-align:center">罗马音</th><th style="text-align:center">对应平假名</th><th style="text-align:center">对应片假名</th><th style="text-align:center">打字变化</th></tr></thead><tbody><tr><td style="text-align:center">n</td><td style="text-align:center">ん</td><td style="text-align:center">ン</td><td style="text-align:center">nn</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">ぁ</td><td style="text-align:center">ァ</td><td style="text-align:center">la/xa</td></tr></tbody></table><p>变小的假名只要在原读音前面加上l或x就行，建议用x</p>]]></content>
      
      
      <categories>
          
          <category> Japanese </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>捕获并分析帧和IP报文</title>
      <link href="/experiment/interception/"/>
      <url>/experiment/interception/</url>
      
        <content type="html"><![CDATA[<p>计算机网络实验3<br><a id="more"></a></p><h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><ul><li>捕获并分析以太网的帧，获取目标与源网卡的MAC 地址  </li><li>获取本机地址  </li><li>获取远端MAC地址  </li></ul><h1 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h1><ul><li>Windows 10  </li><li>C#  </li><li>Visual Studio 2017  </li></ul><h1 id="实验结果"><a href="#实验结果" class="headerlink" title="实验结果"></a>实验结果</h1><p>&emsp;测试时，设置为超过10000Bps就会报警<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-结果.png" alt="实验结果"></p><h1 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h1><ol><li>全局初始化<br>安装WinPcap和SharpPcap<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-using.png" alt="using"><br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-struct.png" alt="struct"><br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-全局变量.png" alt="全局变量"><br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-初始化.png" alt="初始化"></li><li>查看网卡信息<br>通过调用ipconfig.exe实现<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-ipconfig.png" alt="ipconfig"></li><li>适配器<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-载入适配器列表.png" alt="适配器"><ol><li>计时动作<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-time_ing.png" alt="计时动作"></li><li>载入适配器列表<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-load_devices.png" alt="load_devices"></li><li>载入适配器信息<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-载入适配器信息.png" alt="载入适配器信息"></li></ol></li><li>开始侦听<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-start.png" alt="start"><ol><li>收包动作<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-recv.png" alt="收包"></li><li>成帧<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-get_frame_1.png" alt="成帧1"><br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-get_frame_2.png" alt="成帧2"><br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-get_frame_3.png" alt="成帧3"><br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-get_frame_4.png" alt="成帧4"><br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-get_frame_5.png" alt="成帧5"><br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-get_frame_6.png" alt="成帧6"><br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-get_frame_7.png" alt="成帧7"><br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-BitConverter.png" alt="BitConverter"></li><li>成帧时修改流量统计<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-monitor_traffic.png" alt="更新流量统计"></li><li>监视流量<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-cal_traffic.png" alt="计算流量"><br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-报警.png" alt="报警"></li></ol></li><li>暂停侦听<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-pause.png" alt="pause"></li><li>继续侦听<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-continue.png" alt="continue"></li><li>停止侦听<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-stop.png" alt="stop"></li><li>保存日志<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-save_diary.png" alt="save_diary"></li><li>退出程序<br><img src="http://pic.ringoer.com/捕获并分析帧和IP报文-exit.png" alt="exit"></li><li>技术细节<ol><li>计算流量的方法<br>构建新结构体（mac + ip +mode）放进dictionary当key，各key累计收发包大小当value。新建线程，每隔1s遍历各来源的收发流量，超过1MB的，可以认为在这1s内平流量达到1MBps以上，故而给本机警告</li><li>遍历dictionary<br>因为多线程同时在访问dictionary，所以会出现在一个线程遍历dictionary的时候，另一个线程正在新增dictionary的项。此时采用foreach遍历会报错，因为foreach要求正在遍历的对象不能有变化</li><li>有网络但侦听不到包体<br>如果确认程序没错，那么可能是<ol><li>选错网卡，要注意选一个有网络的网卡</li><li>当前的网络收发包类型不是ip and tcp，应该是filter的问题，关掉filter即可</li></ol></li><li>BitConverter<br>会反向获取。<br>如，现有byte[] test={0x01,0x10,0x0f,0xff};<br>二进制为00000001 00010000 00001111 11111111<br>十进制为17829887<br>此时进行uint ans=BitConverter.ToUInt32(test,0);<br>会得到ans= 4279177217<br>十六进制为ff0f1001<br>二进制为11111111 00001111 00010000 00000001<br>可见不能得到想要的结果，因为BitConverter会反向转换所给的byte数组<br>所以应该先将要转换的数组反向，再使用BitConverter</li></ol></li><li>参考链接<br><a href="https://www.codeproject.com/Articles/12458/SharpPcap-A-Packet-Capture-Framework-for-NET" target="_blank" rel="noopener">SharpPcap</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟RS-232接口双机互联编程</title>
      <link href="/experiment/RS-232/"/>
      <url>/experiment/RS-232/</url>
      
        <content type="html"><![CDATA[<p>计算机网络实验2<br><a id="more"></a></p><ol><li>实验目的<ul><li>实现两台计算机通过串口通信  </li></ul></li><li>实验环境<ul><li>本机Windows10</li><li>虚拟机系统VirtualBox</li><li>虚拟机1 Windows7</li><li>虚拟机2 Windows7</li><li>C#</li><li>Visual Studio 2017  </li></ul></li><li>实验结果<br><img src="http://pic.ringoer.com/模拟RS-232接口双机互联编程-结果.png" alt="结果"><br>启动应用，得到如图界面。因为每个空格都会在确定了前一个空格后变为可编辑，而且会给出相应的默认值，所以可以一直点击确定，直到所有设置都被确定<br><img src="http://pic.ringoer.com/模拟RS-232接口双机互联编程-启动界面.png" alt="启动界面"><br>设置完成后得到如图情况，此时点击“启动服务”<br><img src="http://pic.ringoer.com/模拟RS-232接口双机互联编程-已经启动.png" alt="成功启动"><br>正常启动服务后收到提示<br><img src="http://pic.ringoer.com/模拟RS-232接口双机互联编程-连接中.png" alt="连接中"><br>双机互联时应有如图态势</li><li>实验总结<br>基于VirtualBox<ol><li>配置两台虚拟机时，应选择相同的串口<br><img src="http://pic.ringoer.com/模拟RS-232接口双机互联编程-vbox-1.png" alt="选择串口"></li><li>端口模式选择“主机管道”，路径/地址格式为<code>\\.\pipe\xxxx</code>，其中xxxx可以任意填写，但要保证两台虚拟机一致<br><img src="http://pic.ringoer.com/模拟RS-232接口双机互联编程-vbox-2.png" alt="选择模式"></li><li>对于选项“连接至现有通道或套接字”，其中一台虚拟机不勾选，称为pc1，另一台勾选，称为pc2</li><li>启动时，应先启动pc1，再启动pc2，否则会报如下错误<br><img src="http://pic.ringoer.com/模拟RS-232接口双机互联编程-vbox-3.png" alt="报错"></li><li>软件层面通信前应确保两台虚拟机上的软件都已经成功启动服务，否则不能互联</li><li>配置属性<br><img src="http://pic.ringoer.com/模拟RS-232接口双机互联编程-username.png" alt="属性"><br><img src="http://pic.ringoer.com/模拟RS-232接口双机互联编程-attribute-1.png" alt="属性"><br><img src="http://pic.ringoer.com/模拟RS-232接口双机互联编程-attribute-2.png" alt="属性"></li><li>接收<br><img src="http://pic.ringoer.com/模拟RS-232接口双机互联编程-read.png" alt="接收"></li><li>发送<br><img src="http://pic.ringoer.com/模拟RS-232接口双机互联编程-send.png" alt="发送"></li><li>退出<br><img src="http://pic.ringoer.com/模拟RS-232接口双机互联编程-exit.png" alt="退出"></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日本語教程索引</title>
      <link href="/Japanese/JapaneseMenu/"/>
      <url>/Japanese/JapaneseMenu/</url>
      
        <content type="html"><![CDATA[<p>只是想写一个日语教程，为了将来方便给云霄一中日语部教学。<br>于是这里就当成目录吧。<br><a id="more"></a><br><a href="http://ringoer.com/Japanese/FiftyTone/" target="_blank" rel="noopener">五十音图</a><br><a href="http://ringoer.com/Japanese/kihontango/" target="_blank" rel="noopener">日语入门向基本单词</a></p>]]></content>
      
      
      <categories>
          
          <category> Japanese </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日语教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>制作网线</title>
      <link href="/experiment/makereticle/"/>
      <url>/experiment/makereticle/</url>
      
        <content type="html"><![CDATA[<p>计算机网络实验1<br><a id="more"></a></p><video id="video" controls preload="none"><br>  <source id="mp4" src="http://video.ringoer.com/优酷网-网线水晶头接法.mp4" type="video/mp4"><br></video><p>制作网线时应注意将线插到水晶头底部</p>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库系统实验报告-实验1 oracle 11g的安装、配置和使用</title>
      <link href="/experiment/db-ex1/"/>
      <url>/experiment/db-ex1/</url>
      
        <content type="html"><![CDATA[<p>只是一篇实验报告。<br><a id="more"></a>  </p><ol><li>实验目的  <ol><li>掌握Oracle 11g Server的安装  </li><li>掌握Oracle的监听与网络配置  </li><li>掌握Oracle数据库的启动与关闭  </li><li>掌握Oracle的交互式开发环境、工具及常用管理操作命令  </li></ol></li><li><p>实验内容/步骤  </p><ol><li>安装Oracle 11g（服务器版本）  </li><li>理解安装过程中各选项的含义及作用<!-- ![理解安装过程中各选项的含义及作用](http://pic.ringoer.com/db-ex1-p1.png) -->  </li><li>了解内置用户的登录和服务器预定义角色  </li><li>安装完成后以OEM方式登录、管理数据库<img src="http://pic.ringoer.com/db-ex1-p3.png" alt="安装完成后以OEM方式登录、管理数据库">  </li><li>创建以自己学号为账号的新用户(S+自己学号)。  </li><li>对账号做相应授权。</li><li>使用网络配置工具进行网络配置</li></ol></li><li><p>存在的问题及解决方案(列出遇到的问题及其解决办法，列出没有解决的问题)  </p><ol><li><p>Windows10安装障碍（不满足最低配置）  </p><p>① 提取iso中所有文件<br>② 记事本打开\stage\cvu\cvu_prereq.xml<br>③ 修改如图字段，重点修改6.2以及Windows 10<br><img src="http://pic.ringoer.com/db-ex1-p61.png" alt="重点"><br><a href="https://blog.csdn.net/qq_33991989/article/details/77418129" target="_blank" rel="noopener">参考链接</a>  </p></li><li><p>Environment Variable: “PATH”       失败  </p><p>① 打开环境变量配置，选择PATH<br>② 先备份PATH，之后删除一部分PATH项，直到不会报错<br>③ 正常安装，结束后恢复原PATH列表<br><a href="https://www.cnblogs.com/quixon/p/4852946.html" target="_blank" rel="noopener">参考链接</a>  </p></li><li><p>以OEM方式登录  </p><p>访问<a href="localhost:1158/em/console/logon/logon" target="_blank" rel="noopener">localhost:1158/em/console/logon/logon</a>  </p></li><li><p>创建新用户  </p><p>① 打开SQL Plus<br>② 新建数据表空间，语句如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create tablespace dbsp_2 datafile &apos;url\filename.dbf&apos;</span><br><span class="line">size 10m</span><br><span class="line">  extent management local autoallocate;</span><br></pre></td></tr></table></figure><p>其中单引号内链接自行指定，注意指定的文件夹应是已创建的，且新建的文件后缀名为.dbf<br>③ 新建用户，语句如下  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user username identified by password</span><br></pre></td></tr></table></figure><p>其中username为用户名，by后面为密钥<br>④ 授权，语句格式如下：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant connect,resource,dba to username;</span><br></pre></td></tr></table></figure><p>可以是如下形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant [权限] to [用户名];</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/bjh1117/p/6605037.html" target="_blank" rel="noopener">参考链接</a>  </p></li><li><p>配置网络  </p><p>① 运行Net Configuration Assist<br>② 选择“本地网络服务名配置”<br>③ 选择“添加”<br>④ 这一步要求输入你要访问的数据库的“全局数据库名”，“全局数据库名”在安装数据库时指定，默认为<code>name.domain</code>（即：数据库名+数据库域名），当然也可以根据自己喜好随意命名，可以通过<code>select * from global_name;</code>进行查询。<br>*可以直接命名为myorcl<br>⑤ 选择网络语数据库的通信协议，默认TCP即可<br>⑥ 主机名填写127.0.0.1用以访问本地数据库，并选择“使用标准端口号1521”<br>⑦ 选择“是，进行测试”<br>⑧ 默认的测试使用Oracle的Scott用户，因为用户被锁或口令不对，一般情况都会测试不成功，这时候可以通过“更改登录”重新输入数据库的用户/口令来进行测试是否连接成功<br>⑨ 网络服务名，即为该远程连接配置命名。默认即可。<br>至此，如果不需要再配置其他的网络服务，则该网络服务名配置完毕。<br><a href="https://blog.csdn.net/dingguanyi/article/details/80875293" target="_blank" rel="noopener">参考链接</a></p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库系统实验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>哈夫曼树</title>
      <link href="/algorithm/HuffmanTree/"/>
      <url>/algorithm/HuffmanTree/</url>
      
        <content type="html"><![CDATA[<p>一棵裸的哈夫曼树，看点可能在于封装（<br>嘛，反正是留档给自己看的<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> Type;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span>&#123;</span></span><br><span class="line">Type data;</span><br><span class="line"><span class="keyword">int</span> weight;</span><br><span class="line">NODE* Lchild;</span><br><span class="line">NODE* Rchild;</span><br><span class="line">NODE* Parent;</span><br><span class="line">&#125;NODE,*node;<span class="comment">//树的结点 </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">cmp</span>&#123;</span></span><br><span class="line">Type data;</span><br><span class="line"><span class="keyword">int</span> weight;</span><br><span class="line">node selfroot;</span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;(<span class="keyword">const</span> cmp&amp; a,<span class="keyword">const</span> cmp&amp; b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a.weight&gt;b.weight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;<span class="comment">//为了使用优先队列，必须重载大于号，而重载大于号不能针对指针，故有此类型 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HuffmanTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">node root;</span><br><span class="line">cmp temp[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">char</span>&gt;m;<span class="comment">//序列对字符的映射 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> x,<span class="built_in">string</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="string">" "</span>&lt;&lt;y&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(node T,<span class="built_in">string</span> num)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">print(root-&gt;data,<span class="string">"0"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(T-&gt;data==<span class="string">'#'</span>)</span><br><span class="line">&#123;</span><br><span class="line">cal(T-&gt;Lchild,num+<span class="string">"0"</span>);</span><br><span class="line">cal(T-&gt;Rchild,num+<span class="string">"1"</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">print(T-&gt;data,num);</span><br><span class="line">m[num]=T-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(node T)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(T-&gt;Lchild!=<span class="literal">NULL</span>) destroy(T-&gt;Lchild);</span><br><span class="line"><span class="keyword">if</span>(T-&gt;Rchild!=<span class="literal">NULL</span>) destroy(T-&gt;Rchild);</span><br><span class="line"><span class="keyword">delete</span> T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">HuffmanTree()</span><br><span class="line">&#123;</span><br><span class="line">root=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入字符个数n（n&lt;100）。接下来n行，每行输入一个字符及其权重。（输入的字符不可以是#）\n"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;temp[i].data&gt;&gt;temp[i].weight;</span><br><span class="line">temp[i].selfroot=<span class="keyword">new</span> NODE;</span><br><span class="line">node p=temp[i].selfroot;</span><br><span class="line">p-&gt;data=temp[i].data;</span><br><span class="line">p-&gt;weight=temp[i].weight;</span><br><span class="line">p-&gt;Lchild=p-&gt;Rchild=p-&gt;Parent=<span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">priority_queue&lt;cmp,<span class="built_in">vector</span>&lt;cmp&gt;,greater&lt;cmp&gt; &gt;q;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) q.push(temp[i]);</span><br><span class="line"><span class="keyword">while</span>(!q.empty())</span><br><span class="line">&#123;</span><br><span class="line">cmp p1=q.top();</span><br><span class="line">q.pop();</span><br><span class="line"><span class="keyword">if</span>(q.empty())</span><br><span class="line">&#123;</span><br><span class="line">root=p1.selfroot;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">cmp p2=q.top();</span><br><span class="line">q.pop();</span><br><span class="line">cmp tmp;</span><br><span class="line">tmp.data=<span class="string">'#'</span>;</span><br><span class="line">tmp.weight=p1.weight+p2.weight;</span><br><span class="line">tmp.selfroot=<span class="keyword">new</span> NODE;</span><br><span class="line"></span><br><span class="line">node kp=tmp.selfroot;</span><br><span class="line">kp-&gt;data=tmp.data;</span><br><span class="line">kp-&gt;weight=tmp.weight;</span><br><span class="line">kp-&gt;Parent=<span class="literal">NULL</span>;</span><br><span class="line">p1.selfroot-&gt;Parent=p2.selfroot-&gt;Parent=kp;</span><br><span class="line"><span class="keyword">if</span>(p1.weight&lt;p2.weight)</span><br><span class="line">&#123;</span><br><span class="line">kp-&gt;Lchild=p1.selfroot;</span><br><span class="line">kp-&gt;Rchild=p2.selfroot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">kp-&gt;Rchild=p2.selfroot;</span><br><span class="line">kp-&gt;Lchild=p1.selfroot;</span><br><span class="line">&#125;</span><br><span class="line">q.push(tmp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"所求出的对应编码表如下（不按顺序）：\n"</span>;</span><br><span class="line">cal(root,<span class="string">""</span>);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">string</span> str,ans=<span class="string">""</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入待解码的合法01序列\n"</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line"><span class="keyword">int</span> len=str.length();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> cnt=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">string</span> tmp=str.substr(i,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>,<span class="keyword">char</span>&gt;::iterator it=m.find(tmp);</span><br><span class="line"><span class="keyword">while</span>(it==m.end())</span><br><span class="line">&#123;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span>(i+cnt&gt;len)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"输入序列不合法！\n"</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">tmp=str.substr(i,cnt);</span><br><span class="line">it=m.find(tmp);</span><br><span class="line">&#125;</span><br><span class="line">ans+=m[tmp];</span><br><span class="line">i+=cnt<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"解码后的序列为："</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">del</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">destroy(root);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"该哈夫曼树已经成功销毁！\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HuffmanTree ht;</span><br><span class="line">ht.init();</span><br><span class="line">ht.build();</span><br><span class="line">ht.show();</span><br><span class="line">ht.solve();</span><br><span class="line">ht.del();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HuffmanTree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>职业测试结果-UX课程要求</title>
      <link href="/others/ux/"/>
      <url>/others/ux/</url>
      
        <content type="html"><![CDATA[<p>物流师<br><a id="more"></a><br>ISTJ<br>ISTJ人格类型被认为是数量最多的，大约占人口总数的13%。他们明显的正直，实际，奉献的优点使他们成为很多家庭以及拥护传统，规则，标准的组织的重要一员，比如律所，监管部门和军队。ISTJ类型的人愿意为自己的行为负责，为努力完成目标所做的事感到骄傲。ISTJ会毫不吝啬时间和精力来准确和耐心地完成每个任务。<br>ISTJ不喜欢做假设，而是分析周围环境，根据事实来找到最实际的做法。ISTJ从不废话，当他们做了决定时，会把取得目标需要的所有信息传播给别人，期待他人立刻掌握情况马上行动。ISTJ不能容忍犹豫不决，在自己的决定受到不切实际，尤其是忽略事实的理论的挑战时会很快失去耐心。如果这些挑战变成了浪费时间的辩论，截止日期越近他们就会变得越发气愤。<br>如果你尊重你的名誉，就结交那些优秀的人<br>ISTJ说做就做，不惜一切完成任务，那些不同样说话算话的人使他们感到困惑。如果再加上懒惰和虚伪就最为ISTJ所不齿。因为这样，ISTJ通常更喜欢独自工作，或至少要建立明确的等级制度，使他们可以计划并完成目标而不用为别人的不可靠所扰。<br>ISTJ有敏锐的建立在事实上的思维，与依靠别人相比更愿意自给自足。对别人的依赖在他们看来是弱点，他们对责任的热情，可靠，和正直的人格不允许他们落入这样的陷阱。<br>正直的人格对ISTJ很重要，他们不论代价遵守已经建立的规则和准则，时刻报告自己的错误，实话实说，即使这样做有灾难性的后果。对ISTJ来说，诚信比感性思考重要得多，他们直截了当的方式可能让别人误解他们冷漠，机械化。这种类型的人很难对外表达自己的情绪和好感，但是说他们没感情甚至没人性会让他们很受伤。<br>与不合适的人在一起还不如独自一人<br>ISTJ的尽心尽力是很好的品质，使得他们能成就许多，但同时也是能被一些不严谨的人利用的弱点。ISTJ寻求安全和稳定，把平缓的运营看作自己的责任，他们可能发现同事和爱人把他们的责任转移给自己，因为自己总会接受。ISTJ趋向于保留自己的看法用事实说话，但要等观察得到的证据解释一切可能需要很长时间。<br>ISTJ需要记得照顾自己，他们对稳定和高效顽固的尽心尽力可能使一些长期目标变得困难，因为别人会更加依赖他们，使ISTJ产生一些可能很多年都不会表现出来的情绪压力，在表现出来时通常为时已晚。如果他们能找到真正感激和赞扬他们的品质，享受他们的聪慧清晰和可靠的同事或配偶，ISTJ会发现他们使事情稳定的角色是很有满足感的，因为自己是一个完美运行的系统的一部分。</p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU P1166 敌兵布阵 题解</title>
      <link href="/Answer/hdu-p1166/"/>
      <url>/Answer/hdu-p1166/</url>
      
        <content type="html"><![CDATA[<p>HDU P1166 敌兵布阵 题解<br><a id="more"></a></p><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>C国的死对头A国这段时间正在进行军事演习，所以C国间谍头子Derek和他手下Tidy又开始忙乎了。A国在海岸线沿直线布置了N个工兵营地,Derek和Tidy的任务就是要监视这些工兵营地的活动情况。由于采取了某种先进的监测手段，所以每个工兵营地的人数C国都掌握的一清二楚,每个工兵营地的人数都有可能发生变动，可能增加或减少若干人手,但这些都逃不过C国的监视。<br>中央情报局要研究敌人究竟演习什么战术,所以Tidy要随时向Derek汇报某一段连续的工兵营地一共有多少人,例如Derek问:“Tidy,马上汇报第3个营地到第10个营地共有多少人!”Tidy就要马上开始计算这一段的总人数并汇报。但敌兵营地的人数经常变动，而Derek每次询问的段都不一样，所以Tidy不得不每次都一个一个营地的去数，很快就精疲力尽了，Derek对Tidy的计算速度越来越不满:”你个死肥仔，算得这么慢，我炒你鱿鱼!”Tidy想：“你自己来算算看，这可真是一项累人的工作!我恨不得你炒我鱿鱼呢!”无奈之下，Tidy只好打电话向计算机专家Windbreaker求救,Windbreaker说：“死肥仔，叫你平时做多点acm题和看多点算法书，现在尝到苦果了吧!”Tidy说：”我知错了。。。”但Windbreaker已经挂掉电话了。Tidy很苦恼，这么算他真的会崩溃的，聪明的读者，你能写个程序帮他完成这项工作吗？不过如果你的程序效率不够高的话，Tidy还是会受到Derek的责骂的.</p><h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>第一行一个整数T，表示有T组数据。<br>每组数据第一行一个正整数N（N&lt;=50000）,表示敌人有N个工兵营地，接下来有N个正整数,第i个正整数ai代表第i个工兵营地里开始时有ai个人（1&lt;=ai&lt;=50）。<br>接下来每行有一条命令，命令有4种形式：<br>(1) Add i j,i和j为正整数,表示第i个营地增加j个人（j不超过30）<br>(2)Sub i j ,i和j为正整数,表示第i个营地减少j个人（j不超过30）;<br>(3)Query i j ,i和j为正整数,i&lt;=j，表示询问第i到第j个营地的总人数;<br>(4)End 表示结束，这条命令在每组数据最后出现;<br>每组数据最多有40000条命令</p><h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>对第i组数据,首先输出“Case i:”和回车,<br>对于每个Query询问，输出一个整数并回车,表示询问的段中的总人数,这个数保持在int以内。</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>1<br>10<br>1 2 3 4 5 6 7 8 9 10<br>Query 1 3<br>Add 3 6<br>Query 2 7<br>Sub 10 2<br>Add 6 3<br>Query 3 10<br>End</p><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>Case 1:<br>6<br>33<br>59</p><p>显然是线段树题，而且还是单点修改的……把luogu 3372的AC Code改一下就完事了。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll ans[<span class="number">1000010</span>],tag[<span class="number">1000010</span>],a[<span class="number">1000010</span>],n,m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ls</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p&lt;&lt;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rs</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">    ans[p]=ans[ls(p)]+ans[rs(p)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span></span>&#123;</span><br><span class="line">    tag[p]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[p]=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(ls(p),l,mid);</span><br><span class="line">    build(rs(p),mid+<span class="number">1</span>,r);</span><br><span class="line">    push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(ll p,ll l,ll r,ll k)</span></span>&#123;</span><br><span class="line">    ans[p]+=k*(r-l+<span class="number">1</span>);</span><br><span class="line">    tag[p]+=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(ll p,ll l,ll r)</span></span>&#123;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    f(ls(p),l,mid,tag[p]);</span><br><span class="line">    f(rs(p),mid+<span class="number">1</span>,r,tag[p]);</span><br><span class="line">    tag[p]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll x,ll y,ll l,ll r,ll p,ll k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[p]+=k*(r-l+<span class="number">1</span>);</span><br><span class="line">        tag[p]+=k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(p,l,r);</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) update(x,y,l,mid,ls(p),k);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) update(x,y,mid+<span class="number">1</span>,r,rs(p),k);</span><br><span class="line">    push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll x,ll y,ll l,ll r,ll p)</span></span>&#123;</span><br><span class="line">    ll tmp=<span class="number">0</span>,mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> ans[p];</span><br><span class="line">    push_down(p,l,r);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) tmp+=query(x,y,l,mid,ls(p));</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) tmp+=query(x,y,mid+<span class="number">1</span>,r,rs(p));</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> CASE=<span class="number">1</span>;CASE&lt;=T;CASE++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case %d:\n"</span>,CASE);</span><br><span class="line">        ll x,y,k,t;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">        <span class="built_in">string</span> command;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;command)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(command==<span class="string">"End"</span>) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span>(command==<span class="string">"Add"</span>)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;x,&amp;k);</span><br><span class="line">                update(x,x,<span class="number">1</span>,n,<span class="number">1</span>,k);<span class="comment">//在luogu P3372这里是对[x,y]区间修改，现在改成对[x,x]就是单点了（</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">"Sub"</span>)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;x,&amp;k);</span><br><span class="line">                update(x,x,<span class="number">1</span>,n,<span class="number">1</span>,-k);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(command==<span class="string">"Query"</span>)&#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;x,&amp;y);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(x,y,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> HDU </tag>
            
            <tag> 题解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序专题</title>
      <link href="/algorithm/sort/"/>
      <url>/algorithm/sort/</url>
      
        <content type="html"><![CDATA[<p>排序专题<br><a id="more"></a><br>基本题面：<br>设有n个正整数，保证n不大于100且这n个数都不大于1000，对其进行从小到大的排序。</p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//依次确定应该填在下标为i的位置的数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;n;j++)<span class="comment">//将下标i上保存的数依次与其后所有数字比较</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i]&gt;a[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> temp=a[i];</span><br><span class="line">                a[i]=a[j];</span><br><span class="line">                a[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="comment">//通过第i次交换，能确定下标为i的位置所应该填写的数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=n<span class="number">-1</span>;j&gt;i;j--)<span class="comment">//每次把最小的交换到最前面</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j<span class="number">-1</span>]&gt;a[j])<span class="comment">//比较相邻两个</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> temp=a[j<span class="number">-1</span>];</span><br><span class="line">                a[j<span class="number">-1</span>]=a[j];</span><br><span class="line">                a[j]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><p>桶排序有其缺点：<br>1、必须全是整数（负数可以平移数轴）<br>2、必须知道数字最大不超过多少<br>3、所开数组不得超过题目的内存限制<br>需要以上三点同时满足，否则不可以使用桶排序<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> bucket[<span class="number">1000</span>]=&#123;<span class="number">0</span>&#125;;<span class="comment">//用bucket[i]表示数字i出现的次数，初始化为0</span></span><br><span class="line">    <span class="comment">//因为题目中说了都是正整数而且均小于1000，所以数组开到1000</span></span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> number=a[i];</span><br><span class="line">        bucket[number]++;<span class="comment">//每当数字i出现，就令其出现次数+1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)<span class="comment">//因为题目中说了都是正整数而且均小于1000，所以循环小于1000</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(bucket[i]!=<span class="number">0</span>)<span class="comment">//如果bucket[i]==0，则表示数字i没有出现过，就不需要输出了</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;bucket[i];j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//因为数字出现了bucket[i]次，所以需要循环bucket[i]次</span></span><br><span class="line">                <span class="comment">//否则会造成重复数字只会输出一个</span></span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="sort函数"><a href="#sort函数" class="headerlink" title="sort函数"></a>sort函数</h1><p>sort函数默认是从小到大排序的。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    sort(a,a+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果要令sort函数实现从大到小排序，可以写作如下程序段。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    sort(a,a+n,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中cmp函数因为bool类型的特性，又可简写，变为如下程序段。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    sort(a,a+n,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还可以有不写cmp函数，而使用重载运算符的方法。此处不做介绍，详见C++语言-9-结构体。</p><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><p>堆排序需要使用优先队列，开始学习队列后才需要学习。<br>优先队列默认是最大堆，也就是说最大的数在队首。要实现从小到大排序的话只能写作如下程序段。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,greater&lt;<span class="keyword">int</span>&gt; &gt;q;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">        q.push(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;q.top()&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而若要用优先队列实现从大到小排序，只需写作如下程序段。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;t;</span><br><span class="line">        q.push(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;q.top()&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><p>快速排序是分治算法的入门题，开始学分治算法后才需要学习。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">kuai</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span><span class="comment">//每次确定区间最中间的数字</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=l,j=r,mid=a[(l+r)/<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(a[i]&lt;mid) i++;</span><br><span class="line">        <span class="keyword">while</span>(a[j]&gt;mid) j--;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;=j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=a[i];</span><br><span class="line">            a[i]=a[j];</span><br><span class="line">            a[j]=tmp;</span><br><span class="line">            i++;</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;j) kuai(l,j);<span class="comment">//排序左区间</span></span><br><span class="line">    <span class="keyword">if</span>(r&gt;i) kuai(i,r);<span class="comment">//排序右区间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,a[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">    kuai(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路三大算法核心程序段</title>
      <link href="/algorithm/ShortestPath/"/>
      <url>/algorithm/ShortestPath/</url>
      
        <content type="html"><![CDATA[<p>以下第1和第2均假设起点为1号点，终点为n号点。<br><a id="more"></a></p><h1 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h1><p>等待重写</p><h1 id="SPFA"><a href="#SPFA" class="headerlink" title="SPFA"></a>SPFA</h1><p>适用于单源最短路，可以处理负权边，不能处理负环。<br>思路：从起点开始寻找起点能到达的结点，然后按次序将结点入队，每当入队时标记入队，每当出队取消标记，重复处理，直到队列为空。<br>重点：和Dijkstra相比就是多了v数组用来保存结点是否在队列里，其结果导致同一个结点可以重复入队。而Dijkstra中所有结点都只能入队一次。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> e[<span class="number">1010</span>][<span class="number">1010</span>],ans[<span class="number">1010</span>],v[<span class="number">1010</span>],n;</span><br><span class="line"><span class="comment">//取e[a][b]=w表示存在一条从a通向b的道路，道路长度为w，其值应该在main中已经处理好</span></span><br><span class="line"><span class="comment">//取ans[i]表示从起点到结点i的距离为ans[i]</span></span><br><span class="line"><span class="comment">//取v[i]表示结点i是否在队列中</span></span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop();<span class="comment">//清空队列</span></span><br><span class="line">    <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));<span class="comment">//初始化v数组</span></span><br><span class="line">    <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));<span class="comment">//初始化ans数组</span></span><br><span class="line">    q.push(<span class="number">1</span>);<span class="comment">//起点入队</span></span><br><span class="line">    v[<span class="number">1</span>]=<span class="number">1</span>;<span class="comment">//起点标记为已经在队列中</span></span><br><span class="line">    <span class="keyword">while</span>(!q.empty())<span class="comment">//当队列非空时</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> st=q.front();<span class="comment">//取队头元素</span></span><br><span class="line">        q.pop();<span class="comment">//弹出</span></span><br><span class="line">        v[st]=<span class="number">0</span>;<span class="comment">//标记队头元素为不在队列中</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="comment">//枚举所有点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">1</span>) <span class="keyword">continue</span>;<span class="comment">//如果i是起点，跳过</span></span><br><span class="line">            <span class="keyword">int</span> p=<span class="number">0</span>;<span class="comment">//取变量p来记录是否发生更优解的更新</span></span><br><span class="line">            <span class="keyword">if</span>(e[st][i]&amp;&amp;(!ans[i]||ans[i]&gt;ans[st]+e[st][i])) ans[i]=ans[st]+e[st][i],p=<span class="number">1</span>;<span class="comment">//发生更优解的更新，p=1</span></span><br><span class="line">            <span class="keyword">if</span>(p&amp;&amp;!v[i]) q.push(i),v[i]=<span class="number">1</span>;<span class="comment">//如果发生更优解的更新，且结点i未入队，则结点i入队，标记为已入队</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h1><p>适用于求所有结点间的最短路径。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> d[<span class="number">100</span>][<span class="number">100</span>];<span class="comment">//用d[i][j]表示从i到j的最短路径</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;n;k++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            d[i][j]=min(d[i][j],d[i][k]+d[k][j]);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ShortestPath </tag>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P1880 [NOI1995]石子合并 题解</title>
      <link href="/Answer/luogu-p1880/"/>
      <url>/Answer/luogu-p1880/</url>
      
        <content type="html"><![CDATA[<p>Luogu P1880 [NOI1995]石子合并 题解<br>请先掌握区间dp。<br><a id="more"></a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>在一个圆形操场的四周摆放N堆石子,现要将石子有次序地合并成一堆.规定每次只能选相邻的2堆合并成新的一堆，并将新的一堆的石子数，记为该次合并的得分。<br>试设计出1个算法,计算出将N堆石子合并成1堆的最小得分和最大得分.</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>数据的第1行试正整数N,1≤N≤100,表示有N堆石子.第2行有N个数,分别表示每堆石子的个数.</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出共2行,第1行为最小得分,第2行为最大得分.</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>4<br>4 5 9 4</p><p>输出样例#1：<br>43<br>54</p><p>典型的环形dp题。<br>思路见注释。</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF (1&lt;&lt;30)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn(a,b) (a&gt;b)?a:b</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> minn(a,b) (a&lt;b)?a:b</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">110</span>],f[<span class="number">110</span>][<span class="number">110</span>][<span class="number">2</span>],n,ma,mi;</span><br><span class="line"><span class="comment">//用f[i][j][0]表示合并从i到j的最小花费，f[i][j][1]表示合并从i到j的最大花费</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=j) ans+=a[i++];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;<span class="comment">//计算合并从i到j（含i和j）的总费用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;n;t++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-t;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> j=i+t;</span><br><span class="line">            f[i][j][<span class="number">0</span>]=INF;</span><br><span class="line">            f[i][j][<span class="number">1</span>]=-INF;</span><br><span class="line">            <span class="keyword">int</span> tmp=sum(i,j);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;j;k++)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">if</span>(f[i][j][<span class="number">0</span>]&gt;f[i][k][<span class="number">0</span>]+f[k+<span class="number">1</span>][j][<span class="number">0</span>]+tmp) f[i][j][<span class="number">0</span>]=f[i][k][<span class="number">0</span>]+f[k+<span class="number">1</span>][j][<span class="number">0</span>]+tmp;</span><br><span class="line">            <span class="keyword">if</span>(f[i][j][<span class="number">1</span>]&lt;f[i][k][<span class="number">1</span>]+f[k+<span class="number">1</span>][j][<span class="number">1</span>]+tmp) f[i][j][<span class="number">1</span>]=f[i][k][<span class="number">1</span>]+f[k+<span class="number">1</span>][j][<span class="number">1</span>]+tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mi=minn(mi,f[<span class="number">0</span>][n<span class="number">-1</span>][<span class="number">0</span>]);</span><br><span class="line">    ma=maxn(ma,f[<span class="number">0</span>][n<span class="number">-1</span>][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    ma=-INF;mi=INF;<span class="comment">//初始化最大值为极小值，最小值为极大值</span></span><br><span class="line">    <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">    solve();<span class="comment">//先按原顺序计算一遍</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">0</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="keyword">int</span> tmp=a[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n<span class="number">-1</span>;j++) a[j]=a[j+<span class="number">1</span>];</span><br><span class="line">        a[n<span class="number">-1</span>]=tmp;<span class="comment">//第一个数移到最后，其余每个数向前移动一位</span></span><br><span class="line">        solve();<span class="comment">//重算</span></span><br><span class="line">        <span class="comment">//环形dp的重点在于变更原有顺序重算</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;mi&lt;&lt;<span class="built_in">endl</span>&lt;&lt;ma;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Luogu </tag>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P3366 【模板】最小生成树 题解</title>
      <link href="/Answer/luogu-p3366/"/>
      <url>/Answer/luogu-p3366/</url>
      
        <content type="html"><![CDATA[<p>Luogu P3366 【模板】最小生成树 题解<br><a id="more"></a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>如题，给出一个无向图，求出最小生成树，如果该图不连通，则输出orz  </p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>第一行包含两个整数N、M，表示该图共有N个结点和M条无向边。（N&lt;=5000，M&lt;=200000）<br>接下来M行每行包含三个整数Xi、Yi、Zi，表示有一条长度为Zi的无向边连接结点Xi、Yi</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>输出包含一个数，即最小生成树的各边的长度之和；如果该图不连通则输出orz</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><h2 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例#1："></a>输入样例#1：</h2><p>4 5<br>1 2 2<br>1 3 2<br>1 4 3<br>2 3 4<br>3 4 3  </p><h2 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例#1："></a>输出样例#1：</h2><p>7</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>时空限制：1000ms,128M<br>数据规模：<br>对于20%的数据：N&lt;=5，M&lt;=20<br>对于40%的数据：N&lt;=50，M&lt;=2500<br>对于70%的数据：N&lt;=500，M&lt;=10000<br>对于100%的数据：N&lt;=5000，M&lt;=200000  </p><p>最小生成树板子题，没什么好说的……  </p><p>算法说明：<br>以下两个算法都基于贪心实现。<br>kruskal算法采用并查集思想。步骤如下：  </p><ol><li>把每个点单独拆分，使得每个点的父亲都是它自己，即每个点单独成一个连通块。</li><li>每次取最短边，如果边两端的点处于同一个连通块，则pop掉，再取最短的边，直到边两端的点不处于同一个连通块为止。</li><li>合并两个点所在的连通块，并且ans+=两个点的距离。</li><li>重复2和3，共n-1遍。</li></ol><p>prim算法采用遍历。步骤如下：  </p><ol><li>初始把1号点标记为已经使用过，并将与其相连的所有边加入队列。</li><li>每次取最短边，如果边的终点已使用过，则pop掉，再取最短的边，直到边的终点未使用过为止，</li><li>将边的终点标记为已经使用过，并且ans+=该边长度，再将与该边终点相连的所有边加入队列。</li><li>重复2和3，共n-1遍。<br>*因为每次选择可用的新边时，该边起点都是已经使用过的（所以该边才有加入队列），所以只要判断该边终点即可。</li></ol><p>代码：<br>kruskal算法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,f[<span class="number">5010</span>],v[<span class="number">5010</span>];</span><br><span class="line">priority_queue&lt;edge,<span class="built_in">vector</span>&lt;edge&gt;,greater&lt;edge&gt; &gt;q;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &gt;(<span class="keyword">const</span> edge &amp;a,<span class="keyword">const</span> edge &amp;b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.w&gt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x]) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">return</span> f[x]=find(f[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    f[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">kruskal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>;x&lt;n;x++)</span><br><span class="line">    &#123;</span><br><span class="line">        edge temp=q.top();</span><br><span class="line">        <span class="keyword">while</span>(find(temp.u)==find(temp.v))</span><br><span class="line">        &#123;</span><br><span class="line">            q.pop();</span><br><span class="line">            temp=q.top();</span><br><span class="line">        &#125;</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="keyword">int</span> tu=find(temp.u),tv=find(temp.v);</span><br><span class="line">        join(tu,tv);</span><br><span class="line">        ans+=temp.w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=i;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        v[x]=v[y]=<span class="number">1</span>;</span><br><span class="line">        edge temp;</span><br><span class="line">        temp.u=x;</span><br><span class="line">        temp.v=y;</span><br><span class="line">        temp.w=z;</span><br><span class="line">        q.push(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!v[i])&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"orz"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;kruskal();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>prim算法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v,w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">bool</span> v[<span class="number">5010</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt;G[<span class="number">5010</span>];</span><br><span class="line">priority_queue&lt;edge,<span class="built_in">vector</span>&lt;edge&gt;,greater&lt;edge&gt; &gt;q;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &gt;(<span class="keyword">const</span> edge &amp;a,<span class="keyword">const</span> edge &amp;b)&#123;</span><br><span class="line">    <span class="keyword">return</span> a.w&gt;b.w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">prim</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    v[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;edge&gt;::iterator i=G[<span class="number">1</span>].begin();i!=G[<span class="number">1</span>].end();i++)</span><br><span class="line">        q.push(*i);</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(x++&lt;n)&#123;</span><br><span class="line">        edge temp=q.top();</span><br><span class="line">        <span class="keyword">while</span>(v[temp.v])&#123;</span><br><span class="line">            q.pop();</span><br><span class="line">            temp=q.top();</span><br><span class="line">        &#125;</span><br><span class="line">        ans+=temp.w;</span><br><span class="line">        v[temp.v]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;edge&gt;::iterator i=G[temp.v].begin();i!=G[temp.v].end();i++)</span><br><span class="line">            q.push(*i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> x,y,z;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;x,&amp;y,&amp;z);</span><br><span class="line">        edge temp;</span><br><span class="line">        temp.v=y;</span><br><span class="line">        temp.w=z;</span><br><span class="line">        G[x].push_back(temp);</span><br><span class="line">        temp.v=x;</span><br><span class="line">        G[y].push_back(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(G[i].empty())&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"orz"</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;prim();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Luogu </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年4月月赛 Day2 Violet 题解</title>
      <link href="/Answer/yxyz201804-0203/"/>
      <url>/Answer/yxyz201804-0203/</url>
      
        <content type="html"><![CDATA[<p>2018年4月月赛 Day2 Violet 题解<br><a id="more"></a></p><h1 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h1><p>少佐在哪！！别拦着我！！我要去找少佐！！ 自从那天的别离之后，Violet和少佐已经分别许久。就在Violet从昏迷中恢复意识的那一刻起，Violet一直在计划着去寻找少佐。<br>现在，时机成熟了。</p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>Violet只能确定少佐在n个城市中的某一个，却不知道具体在哪一个，而从疗养院所在地s去到任意一个城市，都需要经过若干城市之间的若干有向道路。这些道路错综复杂，Violet想尽快赶到。<br>请你帮她算算到各个城市的最短时间吧。</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含三个整数N、M、S，分别表示点的个数、有向边的个数、出发点的编号。<br>接下来M行每行包含三个整数Fi、Gi、Wi，分别表示第i条有向边的出发点、目标点和长度。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行，包含N个用空格分隔的整数，其中第i个整数表示从点S出发到点i的最短路径长度（若S=i则最短路径长度为0，若从点S无法到达点i，则最短路径长度为2147483647）</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>4 6 1<br>1 2 2<br>2 3 2<br>2 4 1<br>1 3 5<br>3 4 3<br>1 4 4</p><p>输出样例#1：<br>0 2 4 3</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>1&lt;=N&lt;=10000，1&lt;=M&lt;=500000</p><p>邻接表板子题……<br>可类比Luogu P3371<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span>&#123;</span><span class="keyword">int</span> next,dis;&#125;; </span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; e[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">bool</span> v[<span class="number">10010</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> g,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge x;</span><br><span class="line">    x.next=g;</span><br><span class="line">    x.dis=w;</span><br><span class="line">    e[f].push_back(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> t=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        v[t]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;edge&gt;::iterator i=e[t].begin();i!=e[t].end();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp=ans[t]+i-&gt;dis,ttt=i-&gt;next;</span><br><span class="line">            <span class="keyword">if</span>(tmp&lt;ans[ttt])</span><br><span class="line">            &#123;</span><br><span class="line">                ans[ttt]=tmp;</span><br><span class="line">                <span class="keyword">if</span>(!v[ttt])</span><br><span class="line">                &#123;</span><br><span class="line">                    q.push(ttt);</span><br><span class="line">                    v[ttt]=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m,s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;s;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans[i]=<span class="number">2147483647</span>;</span><br><span class="line">    ans[s]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> f,g,w;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;f,&amp;g,&amp;w);</span><br><span class="line">        addedge(f,g,w);</span><br><span class="line">    &#125;</span><br><span class="line">    q.push(s);</span><br><span class="line">    v[s]=<span class="literal">true</span>;</span><br><span class="line">    spfa();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> SPFA </tag>
            
            <tag> 云霄一中月赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年4月月赛 Day2 工作分配问题 题解</title>
      <link href="/Answer/yxyz201804-0202/"/>
      <url>/Answer/yxyz201804-0202/</url>
      
        <content type="html"><![CDATA[<p>2018年4月月赛 Day2 工作分配问题 题解<br><a id="more"></a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>设有 n 件工作分配给 n 个人。将工作 i 分配给第 j 个人所需的费用为c[i][j] 。试设计一个算法，为每一个人都分配 1 件不同的工作，并使总费用达到最小。</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有 1 个正整数 n 。接下来的 n 行，每行 n 个正整数，表示工作费用。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行，包含一个正整数，为计算出的最小总费用。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>3<br>10 2 3<br>2 3 4<br>3 4 5</p><p>输出样例#1：<br>9</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>对于100%的数据，1&lt;=n&lt;=20，1&lt;=c[i][j]&lt;=100。</p><p>1月月赛的原题。<br>本题除了一月月赛中已经给出的dfs解，还可以有mcmf解。<br>代码：<br>dfs解：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> v[<span class="number">30</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">30</span>][<span class="number">30</span>],n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;ans) ans=sum;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans&gt;sum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!v[i])</span><br><span class="line">            &#123;</span><br><span class="line">                v[i]=<span class="literal">true</span>;</span><br><span class="line">                dfs(x+<span class="number">1</span>,sum+c[x][i]);</span><br><span class="line">                v[i]=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;c[i][j];</span><br><span class="line">            ans+=c[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>感谢cyy dalao支援的MCMF解。<br>MCMF解：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">queue</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::min;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxe = <span class="number">2510</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">55</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> u,v,f,c;</span><br><span class="line">    <span class="keyword">int</span> next;</span><br><span class="line">&#125;e[maxe];</span><br><span class="line"><span class="keyword">int</span> head[maxn];</span><br><span class="line"><span class="keyword">int</span> ecnt;</span><br><span class="line"><span class="keyword">void</span> _AddEdge(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> f,<span class="keyword">int</span> c) &#123;</span><br><span class="line">    e[ecnt].u = u;</span><br><span class="line">    e[ecnt].v = v;</span><br><span class="line">    e[ecnt].f = f;</span><br><span class="line">    e[ecnt].c = c;</span><br><span class="line">    e[ecnt].next = head[u];</span><br><span class="line">    head[u] = ecnt;</span><br><span class="line">    ecnt ++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> f,<span class="keyword">int</span> c)</span> </span>&#123;</span><br><span class="line">    _AddEdge(u,v,f,c);</span><br><span class="line">    _AddEdge(v,u,<span class="number">0</span>,-c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> inq[maxn];</span><br><span class="line"><span class="keyword">int</span> dis[maxn];</span><br><span class="line"><span class="keyword">int</span> pre[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">memset</span>(dis,<span class="number">0x3f</span>,<span class="keyword">sizeof</span>(dis));</span><br><span class="line">    <span class="built_in">memset</span>(inq,<span class="literal">false</span>,<span class="keyword">sizeof</span>(inq));</span><br><span class="line">    <span class="built_in">memset</span>(pre,<span class="number">-1</span>,<span class="keyword">sizeof</span>(pre));</span><br><span class="line">    dis[s] = <span class="number">0</span>;</span><br><span class="line">    inq[s] = <span class="literal">true</span>;</span><br><span class="line">    q.push(s);</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> cur = q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        inq[cur] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=head[cur];~i;i=e[i].next) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e[i].f &gt; <span class="number">0</span> &amp;&amp; dis[cur] + e[i].c &lt; dis[e[i].v]) &#123;</span><br><span class="line">                dis[e[i].v] = dis[cur] + e[i].c;</span><br><span class="line">                pre[e[i].v] = i;</span><br><span class="line">                <span class="keyword">if</span> (!inq[e[i].v]) &#123;</span><br><span class="line">                    q.push(e[i].v);</span><br><span class="line">                    inq[e[i].v] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dis[t] != inf;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MCMF</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> t,<span class="keyword">int</span> &amp;flow,<span class="keyword">int</span> &amp;cost)</span> </span>&#123;</span><br><span class="line">    flow = <span class="number">0</span>;</span><br><span class="line">    cost = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (spfa(s,t)) &#123;</span><br><span class="line">        <span class="keyword">int</span> curFlow = inf;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=pre[t];~i;i=pre[e[i].u]) curFlow = min(curFlow,e[i].f);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=pre[t];~i;i=pre[e[i].u]) &#123;</span><br><span class="line">            e[ i ].f -= curFlow;</span><br><span class="line">            e[i^<span class="number">1</span>].f += curFlow;</span><br><span class="line">        &#125;</span><br><span class="line">        cost += curFlow * dis[t];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">编号规则：</span></span><br><span class="line"><span class="comment">源点：0</span></span><br><span class="line"><span class="comment">汇点：1</span></span><br><span class="line"><span class="comment">人：2*n</span></span><br><span class="line"><span class="comment">任务：2*n+1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) &#123;</span><br><span class="line">        AddEdge(  <span class="number">0</span>  ,<span class="number">2</span>*i,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        AddEdge(<span class="number">2</span>*i+<span class="number">1</span>, <span class="number">1</span> ,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++) &#123;</span><br><span class="line">            <span class="keyword">int</span> t;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">            AddEdge(<span class="number">2</span>*i,<span class="number">2</span>*j+<span class="number">1</span>,<span class="number">1</span>,t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> f,c;</span><br><span class="line">    MCMF(<span class="number">0</span>,<span class="number">1</span>,f,c);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,c);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 云霄一中月赛 </tag>
            
            <tag> dfs </tag>
            
            <tag> MCMF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年4月月赛 Day2 携带 题解</title>
      <link href="/Answer/yxyz201804-0201/"/>
      <url>/Answer/yxyz201804-0201/</url>
      
        <content type="html"><![CDATA[<p>2018年4月月赛 Day2 携带 题解<br><a id="more"></a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>一般的九键手机的键盘是这样的：</p><table><thead><tr><th style="text-align:center">&nbsp;</th><th style="text-align:center">&nbsp;</th><th style="text-align:center">&nbsp;</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">2 abc</td><td style="text-align:center">3 def</td></tr><tr><td style="text-align:center">4 ghi</td><td style="text-align:center">5 jkl</td><td style="text-align:center">6 mno</td></tr><tr><td style="text-align:center">7 pqrs</td><td style="text-align:center">8 tuv</td><td style="text-align:center">9 wxyz</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">0</td><td style="text-align:center">#</td></tr></tbody></table><p>要按出英文字母就必须要按数字键多下。例如要按出x就得按9三下，第一下会出9，第二下会出w，而第三下会把w变成x。0键按两下会出一个空格。<br>你的任务是读取一个句子，求出要在手机上打出这个句子至少需要按多少下键盘。</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行一个句子，只包含英文小写字母、数字、空格、星号(*)和井号(#)，且不超过200个字符。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行一个整数，表示按键盘的总次数。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>i have a dream</p><p>输出样例#1：<br>37</p><p>大模拟。<br>可类比Luogu P1765<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>,<span class="keyword">int</span>&gt;m;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m[<span class="string">'*'</span>]=m[<span class="string">'#'</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> i=<span class="string">'0'</span>;i&lt;=<span class="string">'9'</span>;i++) m[i]=<span class="number">1</span>;</span><br><span class="line">    m[<span class="string">'a'</span>]=m[<span class="string">'d'</span>]=m[<span class="string">'g'</span>]=m[<span class="string">'j'</span>]=m[<span class="string">'m'</span>]=m[<span class="string">'p'</span>]=m[<span class="string">'t'</span>]=m[<span class="string">'w'</span>]=<span class="number">2</span>;</span><br><span class="line">    m[<span class="string">'b'</span>]=m[<span class="string">'e'</span>]=m[<span class="string">'h'</span>]=m[<span class="string">'k'</span>]=m[<span class="string">'n'</span>]=m[<span class="string">'q'</span>]=m[<span class="string">'u'</span>]=m[<span class="string">'x'</span>]=<span class="number">3</span>;</span><br><span class="line">    m[<span class="string">'c'</span>]=m[<span class="string">'f'</span>]=m[<span class="string">'i'</span>]=m[<span class="string">'l'</span>]=m[<span class="string">'o'</span>]=m[<span class="string">'r'</span>]=m[<span class="string">'v'</span>]=m[<span class="string">'y'</span>]=<span class="number">4</span>;</span><br><span class="line">    m[<span class="string">'s'</span>]=m[<span class="string">'z'</span>]=<span class="number">5</span>;</span><br><span class="line">    m[<span class="string">' '</span>]=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>();</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    getline(<span class="built_in">cin</span>,s);</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>,len=s.length();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++) ans+=m[s[i]];</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 云霄一中月赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年4月月赛 Day1 游艇 题解</title>
      <link href="/Answer/yxyz201804-0103/"/>
      <url>/Answer/yxyz201804-0103/</url>
      
        <content type="html"><![CDATA[<p>2018年4月月赛 Day1 游艇 题解<br><a id="more"></a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>长江游艇俱乐部在长江上设置了n 个游艇出租站1，2，…，n。游客可在这些游艇出租站租用游艇，并在下游的任何一个游艇出租站归还游艇。游艇出租站i 到游艇出租站j 之间的租金为r(i,j),1&lt;=i&lt;=j&lt;=n。试设计一个算法，计算出从任意游艇出租站i到任意游艇出租站j所需的最少租金。保证i严格小于j。<br>对于给定的游艇出租站i 到游艇出租站j 之间的租金为r(i,j),1&lt;=i&lt;j&lt;=n。<br>保证计算过程中任何时刻数值都不超过10^6</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第1 行中有1 个正整数n，表示有n个游艇出租站。 接下来的n-1 行,第i行第j个元素表示从i号游艇出租站到j号游艇出租站(1&lt;=i&lt;j&lt;=n)的租金价格r。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>共n-1行，第i行输出i-1个数，每行第j个数表示从i号游艇出租站出发到达第j号游艇出租站的最少租金。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>3<br>5 15<br>7</p><p>输出样例#1：<br>5 12<br>7</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>1&lt;=n&lt;=200</p><p>Floyd板子题……<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,d[<span class="number">210</span>][<span class="number">210</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floyd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=n;k++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=k;i++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=k+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">                <span class="keyword">if</span>(d[i][j]&gt;d[i][k]+d[k][j]) d[i][j]=d[i][k]+d[k][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d[i][j]);</span><br><span class="line">    floyd();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=n;j++) <span class="built_in">cout</span>&lt;&lt;d[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 云霄一中月赛 </tag>
            
            <tag> Floyd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年4月月赛 Day1 亲属关系 题解</title>
      <link href="/Answer/yxyz201804-0102/"/>
      <url>/Answer/yxyz201804-0102/</url>
      
        <content type="html"><![CDATA[<p>2018年4月月赛 Day1 亲属关系 题解<br><a id="more"></a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>若某个家族人员过于庞大，要判断两个是否是亲属，确实还很不容易，现在给出某个亲属关系图，求任意给出的两个人是否具有亲属关系。 规定：x和y是亲属，y和z是亲属，那么x和z也是亲属。如果x,y是亲属，那么x的亲属都是y的亲属，y的亲属也都是x的亲属。</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行：三个整数n,m,p，分别表示有n个人，m个亲属关系，询问p对亲属关系。<br>以下m行：每行两个数Mi，Mj，1&lt;=Mi，Mj&lt;=N，表示Mi和Mj具有亲属关系。<br>接下来p行：每行两个数Pi，Pj，询问Pi和Pj是否具有亲属关系。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>P行，每行一个’Yes’或’No’。表示第i个询问的答案为“具有”或“不具有”亲属关系。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>6 5 3<br>1 2<br>1 5<br>3 4<br>5 2<br>1 3<br>1 4<br>2 3<br>5 6</p><p>输出样例#1：<br>Yes<br>Yes<br>No</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>1&lt;=n,m,p&lt;=5000。</p><p>并查集板子题……<br>可类比Luogu P3367<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> p,n,m,q,d[<span class="number">10100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r=x;</span><br><span class="line">    <span class="keyword">while</span>(d[r]!=r) r=d[r];</span><br><span class="line">    <span class="keyword">int</span> i=x,j;</span><br><span class="line">    <span class="keyword">while</span>(i!=r)</span><br><span class="line">    &#123;</span><br><span class="line">        j=d[i];</span><br><span class="line">        d[i]=r;</span><br><span class="line">        i=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fx=find(x),fy=find(y);</span><br><span class="line">    <span class="keyword">if</span>(fx!=fy) d[fx]=fy;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">10100</span>;i++) d[i]=i;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;n,&amp;m,&amp;p);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">    join(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) find(i);</span><br><span class="line">    <span class="keyword">while</span>(p--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;x,&amp;y);</span><br><span class="line">        <span class="keyword">if</span>(d[x]==d[y]) <span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 并查集 </tag>
            
            <tag> 云霄一中月赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年4月月赛 Day1 哥德巴赫猜想 题解</title>
      <link href="/Answer/yxyz201804-0101/"/>
      <url>/Answer/yxyz201804-0101/</url>
      
        <content type="html"><![CDATA[<p>2018年4月月赛 Day1 哥德巴赫猜想 题解<br><a id="more"></a></p><h1 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h1><p>要想证明哥德巴赫猜想，首先需要知道足够大的素数。求一下试试吧！</p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>如题，给定一个范围N，你需要处理M个某数字是否为质数的询问（每个数字均在范围[1,N]内）</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行包含两个正整数N、M，分别表示查询的范围和查询的个数。<br>接下来M行每行包含一个不小于1且不大于N的整数，即询问该数是否为质数。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出包含M行，每行为Yes或No，即依次为每一个询问的结果。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>100 5<br>2<br>3<br>4<br>91<br>97</p><p>输出样例#1：<br>Yes<br>Yes<br>No<br>No<br>Yes</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>1&lt;=N&lt;=10000000，1&lt;=M&lt;=100000<br>样例说明：<br>N=100，说明接下来的询问数均属于[1,100]。<br>所以2、3、97为质数，4、91非质数。<br>故依次输出Yes、Yes、No、No、Yes。  </p><p>筛法求素数的板子题，没什么说的。<br>可类比Luogu P3383<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> ans[<span class="number">10000010</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,x,t;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    t=n&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    ans[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=t;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ans[i]) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i&lt;&lt;<span class="number">1</span>;j&lt;=n;j+=i) ans[j]=<span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">        <span class="keyword">if</span>(ans[x]) <span class="built_in">cout</span>&lt;&lt;<span class="string">"No\n"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="string">"Yes\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>();</span><br><span class="line">    solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 云霄一中月赛 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P3367 【模板】并查集 题解</title>
      <link href="/Answer/luogu-p3367/"/>
      <url>/Answer/luogu-p3367/</url>
      
        <content type="html"><![CDATA[<p>Luogu P3367 【模板】并查集 题解<br><a id="more"></a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>如题，现在有一个并查集，你需要完成合并和查询操作。  </p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2><p>第一行包含两个整数N、M，表示共有N个元素和M个操作。<br>接下来M行，每行包含三个整数Zi、Xi、Yi<br>当Zi=1时，将Xi与Yi所在的集合合并<br>当Zi=2时，输出Xi与Yi是否在同一集合内，是的话输出Y；否则话输出N</p><h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2><p>如上，对于每一个Zi=2的操作，都有一行输出，每行包含一个大写字母，为Y或者N</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><h2 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例#1："></a>输入样例#1：</h2><p>4 7<br>2 1 2<br>1 1 2<br>2 1 2<br>1 3 4<br>2 1 4<br>1 2 3<br>2 1 4</p><h2 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例#1："></a>输出样例#1：</h2><p>N<br>Y<br>N<br>Y</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>时空限制：1000ms,128M<br>数据规模：<br>对于30%的数据，N&lt;=10，M&lt;=20；<br>对于70%的数据，N&lt;=100，M&lt;=1000；<br>对于100%的数据，N&lt;=10000，M&lt;=200000。  </p><p>从100%数据的范围来看，显然不可能暴搜。所以为解决此题，我们采用基于树的数据结构——并查集。<br>基本并查集应该提供两个操作：查询（最大祖先）操作和合并操作。<br>详情见代码注释。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,f[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==f[x]) <span class="keyword">return</span> x;<span class="comment">//边界</span></span><br><span class="line">    <span class="keyword">return</span> f[x]=find(f[x]);<span class="comment">//递归查找结点x的最大祖先y，同时通过路径压缩令x与y之间的所有结点，最大祖先都置为y</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[x]=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) f[i]=i;<span class="comment">//初始化令所有结点的最大祖先都是自己</span></span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> x,y,z,tx,ty;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;z,&amp;x,&amp;y);</span><br><span class="line">        ty=find(y);<span class="comment">//寻找y的最大祖先ty</span></span><br><span class="line">        tx=find(x);<span class="comment">//寻找x的最大祖先tx</span></span><br><span class="line">        <span class="keyword">if</span>(z==<span class="number">1</span>) join(tx,ty);<span class="comment">//现在tx是ty家里的人了</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(tx==ty) <span class="built_in">printf</span>(<span class="string">"Y\n"</span>);<span class="comment">//如果是同一家的</span></span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"N\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Luogu </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20180417 Python学习随录</title>
      <link href="/python/python-20180417/"/>
      <url>/python/python-20180417/</url>
      
        <content type="html"><![CDATA[<p>学习随录系列<br><a id="more"></a><br>基本原理<br>Python使用缩进来示意作用域，效果同C++的函数大括号<br>Python不需要定义变量，任何合理的、未有重复的变量名均可直接使用，使用过程中也可以更改其类型。任意变量默认类型为字符串。  </p><h1 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s=input().split(<span class="string">' '</span>)</span><br><span class="line"><span class="comment">#Python中一次均读取整行</span></span><br><span class="line"><span class="comment">#本代码中，split括号中的内容为一个空格，表示s以空格为界断开成为一个列表</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(s)</span><br><span class="line"><span class="comment">#自带回车</span></span><br></pre></td></tr></table></figure><h1 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h1><h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> A1:</span><br><span class="line">    代码块<span class="number">1</span>)</span><br><span class="line"><span class="keyword">elif</span> A2:</span><br><span class="line">    (代码块<span class="number">2</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    (代码块<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>同理C++参考：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(A1)</span><br><span class="line">&#123;(代码块<span class="number">1</span>)&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(A2)</span><br><span class="line">&#123;(代码块<span class="number">2</span>)&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;(代码块<span class="number">3</span>)&#125;</span><br></pre></td></tr></table></figure></p><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    (代码块)</span><br><span class="line"><span class="comment">#范围为[1,5)也就是[1,4]</span></span><br><span class="line"><span class="comment">#当range写成range(5)的时候范围为[0,5)</span></span><br><span class="line"><span class="comment">#默认自加1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> x&lt;n:</span><br><span class="line">    (代码块)</span><br><span class="line"></span><br><span class="line"><span class="comment">#若把x强制类型转换为int类型，写法如下</span></span><br><span class="line"><span class="comment"># int(x)</span></span><br><span class="line"><span class="comment">#调用int()函数把x转换为int类型</span></span><br><span class="line"><span class="comment">#转换为其它类型，有同理操作</span></span><br></pre></td></tr></table></figure><h1 id="成分"><a href="#成分" class="headerlink" title="成分"></a>成分</h1><p>len(x)函数，可以求x字符串的长度，或x元组/列表…等等的元素数量，等等<br>元组(tuple)  使用小括号声明，指向成员地址不可变。可以使用数组下标访问其中元素<br><code>s=(&#39;1&#39;,&#39;2&#39;,&#39;3&#39;)</code><br>此时s[0]=’1’，输出时也会自带一对单引号<br>*声明一个元素的元组时，应加上逗号，以区别(1)的数学意义。此时输出也会自动输出逗号<br>*无成员函数<br><code>s=(&#39;1&#39;,)</code><br>列表(list)  使用中括号声明，指向成员地址可变。可理解为C++中的数组。可以使用数组下标访问其中元素<br><code>s=\[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;\]</code><br>*与元组相比，单个元素不需强调<br>*带有成员函数x.append(y)、x.pop(z)、x.insert(u,v)和x.sort()，其中y是元素，z、u是下标，v是元素。<br>z置空时默认为弹出列表尾部元素<br>u置空时默认为在列表尾部插入元素v<br>字典(dict)  使用大括号声明，声明方法为：<br><code>s={A1:B1,A2:B2,A3:B3}</code><br>此时s[A1]=B1，即自定义数组下标及其元素，使用方法同C++的map<br>*具有list所有成员函数<br>*还具有s.get(A1,x)，若在字典s中存在以A1为下标的组合，则返回其对应值B1，否则返回x，当只写s.get(A1)，即忽略x时，x自动设为None。Python不会输出None<br>集合(set) 使用小括号和中括号声明<br><code>s1=set(\[&#39;1&#39;,&#39;2&#39;\])</code><br><code>s2=set(\[&#39;2&#39;,&#39;3&#39;\])</code><br>*自动筛除重复元素<br>*自带并集、交集操作<br>s1 &amp; s2返回’1’,’2’,’3’<br>s1 | s2返回’2’<br>*成员函数s.add(x)，将x添加进集合s中。<br>*成员函数s.remove(x)，将集合s中的x删除。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P3373 【模板】线段树 2 题解</title>
      <link href="/Answer/luogu-p3373/"/>
      <url>/Answer/luogu-p3373/</url>
      
        <content type="html"><![CDATA[<p>阅读本篇题解之前，请先完成Luogu P3372。<br><a id="more"></a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>如题，已知一个数列，你需要进行下面三种操作：</p><ol><li>将某区间每一个数乘上x</li><li>将某区间每一个数加上x</li><li>求出某区间每一个数的和<h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式："><a href="#输入格式：" class="headerlink" title="输入格式："></a>输入格式：</h2>第一行包含三个整数N、M、P，分别表示该数列数字的个数、操作的总个数和模数。<br>第二行包含N个用空格分隔的整数，其中第i个数字表示数列第i项的初始值。<br>接下来M行每行包含3或4个整数，表示一个操作，具体如下：<br>操作1： 格式：1 x y k 含义：将区间[x,y]内每个数乘上k<br>操作2： 格式：2 x y k 含义：将区间[x,y]内每个数加上k<br>操作3： 格式：3 x y 含义：输出区间[x,y]内每个数的和对P取模所得的结果  <h2 id="输出格式："><a href="#输出格式：" class="headerlink" title="输出格式："></a>输出格式：</h2>输出包含若干行整数，即为所有操作3的结果。<h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><h2 id="输入样例-1："><a href="#输入样例-1：" class="headerlink" title="输入样例#1："></a>输入样例#1：</h2>5 5 38<br>1 5 4 2 3<br>2 1 4 1<br>3 2 5<br>1 2 4 2<br>2 3 5 5<br>3 1 4</li></ol><h2 id="输出样例-1："><a href="#输出样例-1：" class="headerlink" title="输出样例#1："></a>输出样例#1：</h2><p>17<br>2</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>时空限制：1000ms,128M<br>数据规模：<br>对于30%的数据：N&lt;=8，M&lt;=10<br>对于70%的数据：N&lt;=1000，M&lt;=10000<br>对于100%的数据：N&lt;=100000，M&lt;=100000<br>（数据已经过加强^_^）<br>样例说明：<br><img src="https://cdn.luogu.org/upload/pic/2255.png" alt="样例说明"><br>故输出应为17、2（40 mod 38=2）</p><p>对比P3372，本题的提升在于，多了对乘法的要求（大家都看见了啊喂）。<br>不过，这一看起来小小的要求，真的要实现的时候，才发现真的难写。果然加了这一条就从P3372的绿题变成蓝题了。<br>在P3372中，区间修改仅要求了加法，因而每次下放lazy标记的时候只需要暴力下放，也就是ans[p]+和tag[p]+。然鹅，在本题中因为多了乘法，lazy标记在下放时就出现了一个问题：先下放加法lazy标记(addtag)还是乘法lazy标记(multag)？<br>答案就是先下放multag，再下放addtag。<br>为什么呢？因为在四则运算中，加法优先级较低，乘法较高，故乘法会影响加法，在下放multag的时候不仅要ans[p]+，还要addtag[p]+，还要multag[p]+（三个p均为同一子结点）。这样，之后在下放addtag的时候才能加出正常数值。<br>还有就是，时刻注意取模。<br>附代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll ans[<span class="number">1000010</span>],addtag[<span class="number">1000010</span>],multag[<span class="number">1000010</span>],a[<span class="number">1000010</span>],n,m,ppp;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ls</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p&lt;&lt;<span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">//同P3372</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rs</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">//同P3372</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">    ans[p]=(ans[ls(p)]+ans[rs(p)])%ppp;</span><br><span class="line">&#125;<span class="comment">//注意取模</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span></span>&#123;</span><br><span class="line">    multag[p]=<span class="number">1</span>;<span class="comment">//乘法tag应为1，若为0则造成一旦发生乘法，数值即刻归零</span></span><br><span class="line">    addtag[p]=<span class="number">0</span>;<span class="comment">//其余同P3372</span></span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[p]=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(ls(p),l,mid);</span><br><span class="line">    build(rs(p),mid+<span class="number">1</span>,r);</span><br><span class="line">    push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(ll p,ll l,ll r,ll addv,ll mulv)</span></span>&#123;</span><br><span class="line">    ans[p]=(ans[p]*mulv)%ppp;</span><br><span class="line">    addtag[p]=(addtag[p]*mulv)%ppp;</span><br><span class="line">    multag[p]=(multag[p]*mulv)%ppp;<span class="comment">//先下放multag</span></span><br><span class="line">    ans[p]=(ans[p]+addv*(r-l+<span class="number">1</span>))%ppp;</span><br><span class="line">    addtag[p]=(addtag[p]+addv)%ppp;<span class="comment">//再下放addtag</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(ll p,ll l,ll r)</span></span>&#123;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    f(ls(p),l,mid,addtag[p],multag[p]);</span><br><span class="line">    f(rs(p),mid+<span class="number">1</span>,r,addtag[p],multag[p]);</span><br><span class="line">    addtag[p]=<span class="number">0</span>;</span><br><span class="line">    multag[p]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(ll x,ll y,ll l,ll r,ll p,ll k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[p]=(ans[p]+k*(r-l+<span class="number">1</span>))%ppp;</span><br><span class="line">        addtag[p]=(addtag[p]+k)%ppp;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(multag[p]!=<span class="number">1</span>||addtag[p]) push_down(p,l,r);</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) add(x,y,l,mid,ls(p),k);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) add(x,y,mid+<span class="number">1</span>,r,rs(p),k);</span><br><span class="line">    push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mul</span><span class="params">(ll x,ll y,ll l,ll r,ll p,ll k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[p]=(ans[p]*k)%ppp;</span><br><span class="line">        addtag[p]=(addtag[p]*k)%ppp;</span><br><span class="line">        multag[p]=(multag[p]*k)%ppp;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(multag[p]!=<span class="number">1</span>||addtag[p]) push_down(p,l,r);</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) mul(x,y,l,mid,ls(p),k);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) mul(x,y,mid+<span class="number">1</span>,r,rs(p),k);</span><br><span class="line">    push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll x,ll y,ll l,ll r,ll p)</span></span>&#123;</span><br><span class="line">    ll tmp=<span class="number">0</span>,mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> ans[p]%ppp;</span><br><span class="line">    <span class="keyword">if</span>(multag[p]!=<span class="number">1</span>||addtag[p]) push_down(p,l,r);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) tmp+=query(x,y,l,mid,ls(p));</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) tmp+=query(x,y,mid+<span class="number">1</span>,r,rs(p));</span><br><span class="line">    <span class="keyword">return</span> tmp%ppp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x,y,t,k;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;ppp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t);</span><br><span class="line">        <span class="keyword">switch</span>(t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;x,&amp;y,&amp;k);</span><br><span class="line">                mul(x,y,<span class="number">1</span>,n,<span class="number">1</span>,k);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;x,&amp;y,&amp;k);</span><br><span class="line">                add(x,y,<span class="number">1</span>,n,<span class="number">1</span>,k);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;x,&amp;y);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(x,y,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 题解 </tag>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线段树(Segment Tree)</title>
      <link href="/algorithm/SegmentTree/"/>
      <url>/algorithm/SegmentTree/</url>
      
        <content type="html"><![CDATA[<p>阅读本文基础知识：二分思想，二叉树，位运算。<br><a id="more"></a><br>本文适用于解决Luogu P3372<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll ans[<span class="number">1000010</span>],tag[<span class="number">1000010</span>],a[<span class="number">1000010</span>],n,m;</span><br><span class="line"><span class="comment">//ans为各节点保存值，tag为各节点的lazy标记，a为各节点初始值</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">ls</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p&lt;&lt;<span class="number">1</span>;<span class="comment">//求左儿子的编号</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">rs</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>;<span class="comment">//求右儿子的编号</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">(ll p)</span></span>&#123;</span><br><span class="line">    ans[p]=ans[ls(p)]+ans[rs(p)];<span class="comment">//更新p的保存值为p的左儿子保存值加上p的右儿子保存值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(ll p,ll l,ll r)</span></span>&#123;</span><br><span class="line">    tag[p]=<span class="number">0</span>;<span class="comment">//初始化lazy标记</span></span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="comment">//递归边界</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans[p]=a[l];<span class="comment">//初始化p的保存值</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    build(ls(p),l,mid);<span class="comment">//构建左子树</span></span><br><span class="line">    build(rs(p),mid+<span class="number">1</span>,r);<span class="comment">//构建右子树</span></span><br><span class="line">    push_up(p);<span class="comment">//求和，作为p的保存值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">(ll p,ll l,ll r,ll k)</span></span>&#123;</span><br><span class="line">    ans[p]+=k*(r-l+<span class="number">1</span>);<span class="comment">//更新p的保存值为原值加上该区间长度乘以变化量</span></span><br><span class="line">    tag[p]+=k;<span class="comment">//更新lazy标记</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">(ll p,ll l,ll r)</span></span>&#123;</span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    f(ls(p),l,mid,tag[p]);</span><br><span class="line">    f(rs(p),mid+<span class="number">1</span>,r,tag[p]);</span><br><span class="line">    tag[p]=<span class="number">0</span>;<span class="comment">//重置lazy标记</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(ll x,ll y,ll l,ll r,ll p,ll k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)<span class="comment">//递归边界</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans[p]+=k*(r-l+<span class="number">1</span>);<span class="comment">//更新p的保存值为原值加上该区间长度乘以变化量</span></span><br><span class="line">        tag[p]+=k;<span class="comment">//更新lazy标记</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(p,l,r);<span class="comment">//下放lazy标记</span></span><br><span class="line">    ll mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) update(x,y,l,mid,ls(p),k);<span class="comment">//如果所求区间左端点小于当前区间中点，则所求区间与当前区间的左半区间仍然有重叠，需要更新左子树</span></span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) update(x,y,mid+<span class="number">1</span>,r,rs(p),k);<span class="comment">//若...（参照左子树说明），更新右子树</span></span><br><span class="line">    push_up(p);<span class="comment">//求和</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(ll x,ll y,ll l,ll r,ll p)</span></span>&#123;</span><br><span class="line">    ll tmp=<span class="number">0</span>,mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> ans[p];<span class="comment">//递归边界</span></span><br><span class="line">    push_down(p,l,r);<span class="comment">//下放lazy标记</span></span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) tmp+=query(x,y,l,mid,ls(p));<span class="comment">//若...（参照update里的说明），对左子树求和</span></span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) tmp+=query(x,y,mid+<span class="number">1</span>,r,rs(p));<span class="comment">//同上，对右子树求和</span></span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x,y,k,t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);<span class="comment">//建树</span></span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t);</span><br><span class="line">        <span class="keyword">switch</span>(t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;x,&amp;y,&amp;k);</span><br><span class="line">                update(x,y,<span class="number">1</span>,n,<span class="number">1</span>,k);<span class="comment">//更新</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;x,&amp;y);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(x,y,<span class="number">1</span>,n,<span class="number">1</span>));<span class="comment">//求值</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于递归边界的说明：  </p><ol><li>l==r<br>我们在build函数中，用[l,r]表示一段区间，显然l==r时该区间内只有一个元素，故可以直接返回。所以此处以l==r作为递归边界。</li><li>x&lt;=l&amp;&amp;r&lt;=y<br>在此种情况中，[x,y]表示所求区间，[l,r]表示当前通过递归来到的区间。若满足x&lt;=l&amp;&amp;r&lt;=y，则表示[l,r]完全包含于[x,y]内部，此时不论如何二分递归[l,r]，子区间都是完全包含于[x,y]内部的，故可以直接返回。所以此处以x&lt;=l&amp;&amp;r&lt;=y作为递归边界。</li></ol><p>给萌新看的代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans[<span class="number">1000010</span>],tag[<span class="number">1000010</span>],a[<span class="number">1000010</span>],n,m;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">ls</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">rs</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> p*<span class="number">2</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_up</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> p)</span></span>&#123;</span><br><span class="line">    ans[p]=ans[ls(p)]+ans[rs(p)];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> p,<span class="keyword">long</span> <span class="keyword">long</span> l,<span class="keyword">long</span> <span class="keyword">long</span> r)</span></span>&#123;</span><br><span class="line">    tag[p]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[p]=a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    build(ls(p),l,mid);</span><br><span class="line">    build(rs(p),mid+<span class="number">1</span>,r);</span><br><span class="line">    push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> p,<span class="keyword">long</span> <span class="keyword">long</span> l,<span class="keyword">long</span> <span class="keyword">long</span> r,<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span>&#123;</span><br><span class="line">    ans[p]+=k*(r-l+<span class="number">1</span>);</span><br><span class="line">    tag[p]+=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push_down</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> p,<span class="keyword">long</span> <span class="keyword">long</span> l,<span class="keyword">long</span> <span class="keyword">long</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    f(ls(p),l,mid,tag[p]);</span><br><span class="line">    f(rs(p),mid+<span class="number">1</span>,r,tag[p]);</span><br><span class="line">    tag[p]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> y,<span class="keyword">long</span> <span class="keyword">long</span> l,<span class="keyword">long</span> <span class="keyword">long</span> r,<span class="keyword">long</span> <span class="keyword">long</span> p,<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[p]+=k*(r-l+<span class="number">1</span>);</span><br><span class="line">        tag[p]+=k;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    push_down(p,l,r);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) update(x,y,l,mid,ls(p),k);</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) update(x,y,mid+<span class="number">1</span>,r,rs(p),k);</span><br><span class="line">    push_up(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">query</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x,<span class="keyword">long</span> <span class="keyword">long</span> y,<span class="keyword">long</span> <span class="keyword">long</span> l,<span class="keyword">long</span> <span class="keyword">long</span> r,<span class="keyword">long</span> <span class="keyword">long</span> p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp=<span class="number">0</span>,mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=l&amp;&amp;r&lt;=y) <span class="keyword">return</span> ans[p];</span><br><span class="line">    push_down(p,l,r);</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=mid) tmp+=query(x,y,l,mid,ls(p));</span><br><span class="line">    <span class="keyword">if</span>(y&gt;mid) tmp+=query(x,y,mid+<span class="number">1</span>,r,rs(p));</span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x,y,k,t;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;t);</span><br><span class="line">        <span class="keyword">switch</span>(t)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld %lld %lld"</span>,&amp;x,&amp;y,&amp;k);</span><br><span class="line">                update(x,y,<span class="number">1</span>,n,<span class="number">1</span>,k);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%lld %lld"</span>,&amp;x,&amp;y);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,query(x,y,<span class="number">1</span>,n,<span class="number">1</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线段树 </tag>
            
            <tag> 题解 </tag>
            
            <tag> Luogu </tag>
            
            <tag> algorithm </tag>
            
            <tag> SegmentTree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年2/3月月赛 Day2 愤怒的瓦里安 题解</title>
      <link href="/Answer/yxyz201802-0203/"/>
      <url>/Answer/yxyz201802-0203/</url>
      
        <content type="html"><![CDATA[<p>2018年2/3月月赛 Day2 愤怒的瓦里安 题解<br><a id="more"></a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>传奇国王，暴风城主瓦里安·乌瑞恩的儿子安度因又跑到酒馆里和人打牌，还用的是十分肮脏的套牌（脏牧去死啦）。瓦里安听了十分愤怒，掰了筷子就杀了过去。安度因十分慌张，连忙找一起打牌的萨尔帮忙。充满绿色能量的萨尔答应帮安度因破坏一条道路来帮他开溜。但是智商为0的安度因并不知道到底能拖延多长时间。好吧，你写个程序帮他算算咯。（已知萨尔的智商很高，破坏的道路能最大程度上拖延瓦里安的到来）</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有两个用空格隔开的数n和m，分别表示道路节点的数量以及道路的数量。道路节点用数字1至n标识，瓦里安的出发地暴风城在节点1，安度因打牌的酒馆在节点n。<br>接下来的m行中每行包含三个用空格隔开的数u，v和w。这些数字表示在节点u和节点v中间有一条道路，并且花费w的时间通过。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出瓦里安到达酒馆所需要的最短时间。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>10 14<br>1 2 7<br>1 9 10<br>7 9 1<br>7 3 13<br>2 3 2<br>2 4 15<br>2 8 6<br>5 9 7<br>4 8 3<br>8 5 1<br>6 8 3<br>5 6 20<br>6 10 5<br>5 10 60</p><p>输出样例#1：<br>74</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>对于100%的数据，1&lt;=n&lt;=1000，1&lt;=m&lt;=n*(n-1)/2，1&lt;=u,v&lt;=n，1&lt;=w&lt;=1000。<br>对于本样例，原本走1-&gt;2-&gt;8-&gt;6-&gt;10为最短路，时间为21。但萨尔破坏了6-&gt;10的路径，使得最短路变为了1-&gt;2-&gt;8-&gt;5-&gt;10，时间变为74。可以证明破坏其它道路时所得到的最短路径长度均小于本方案。</p><p>通过题意可初步分析为最短路问题的变种，且有明确的起点和终点，又数据较大，故必然使用广搜。<br>分析题意后可知，可以枚举所有边，逐一删除，再寻找最短路。但边数巨大，逐一枚举必然超时，故采用优化方法：先计算不删边的最短路，并记录该路径，之后枚举该路径上每条边，进行逐一删除，计算，恢复的过程，取最短路最大值即可。此处不证明该算法的正确性。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> e[<span class="number">1010</span>][<span class="number">1010</span>]=&#123;<span class="number">0</span>&#125;,ans[<span class="number">1010</span>]=&#123;<span class="number">0</span>&#125;,v[<span class="number">1010</span>]=&#123;<span class="number">0</span>&#125;,f[<span class="number">1010</span>]=&#123;<span class="number">0</span>&#125;,maxn=<span class="number">0</span>,n,m;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;q;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(!q.empty()) q.pop();</span><br><span class="line">  <span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));</span><br><span class="line">  <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">  v[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">  q.push(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">while</span>(!q.empty())</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">int</span> st=q.front();</span><br><span class="line">      q.pop();</span><br><span class="line">      v[st]=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">          <span class="keyword">if</span>(e[st][i]&amp;&amp;(!ans[i]||ans[i]&gt;ans[st]+e[st][i])) ans[i]=ans[st]+e[st][i],p=<span class="number">1</span>;</span><br><span class="line">          <span class="keyword">if</span>(p&amp;&amp;!v[i]) q.push(i),v[i]=<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">int</span> a,b;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;a,&amp;b);</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;e[a][b]);</span><br><span class="line">      e[b][a]=e[a][b];</span><br><span class="line">  &#125;</span><br><span class="line">  v[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">  q.push(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">while</span>(!q.empty())</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">int</span> st=q.front();</span><br><span class="line">      q.pop();</span><br><span class="line">      v[st]=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">          <span class="keyword">if</span>(e[st][i]&amp;&amp;(!ans[i]||ans[i]&gt;ans[st]+e[st][i])) ans[i]=ans[st]+e[st][i],p=<span class="number">1</span>,f[i]=st;</span><br><span class="line">          <span class="keyword">if</span>(p&amp;&amp;!v[i]) q.push(i),v[i]=<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> t=n,tmp,temp;</span><br><span class="line">  <span class="keyword">while</span>(t!=<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      tmp=f[t];</span><br><span class="line">      temp=e[t][tmp];</span><br><span class="line">      e[t][tmp]=e[tmp][t]=<span class="number">0</span>;</span><br><span class="line">      bfs();</span><br><span class="line">      e[t][tmp]=e[tmp][t]=temp;</span><br><span class="line">      <span class="keyword">if</span>(ans[n]&gt;maxn) maxn=ans[n];</span><br><span class="line">      t=f[t];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;maxn;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> SPFA </tag>
            
            <tag> 云霄一中月赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年2/3月月赛 Day2 石化 题解</title>
      <link href="/Answer/yxyz201802-0202/"/>
      <url>/Answer/yxyz201802-0202/</url>
      
        <content type="html"><![CDATA[<p>2018年2/3月月赛 Day2 石化 题解<br><a id="more"></a></p><h1 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h1><p>漫长战斗终于分出胜负了。<br>“喂，我可没听说非拼成这样才赢得了。”<br>七道亡国级禁咒，十一把开刃到自毁程度的帕西瓦尔系列，甚至青年本身没资格动用的勇者剑技最终奥义都已经强行祭出。<br>假如这样还不能将其灭绝，也无计可施了。<br>「真是惊天动地啊。身为无力的凡人之躯，却能独自使出此等力量吗？实在可怕。不过，看来要发挥那样的力量，实在不可能毫无代价。」<br>“啪”的一声，青年脚踝前面的部分已经变成粗糙的石块了。<br>又是好几声脆响重叠在一起，灰色面积开始沿着他的身体往上蔓延扩散，到了膝盖，到了腿，到了腰，还在继续往上。</p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>威廉即将在t个单位时间内完全石化，现在他对往事无限怀念，希望尽可能多的想起重要的人。<br>威廉有n个重要的人，而每个单位时间里他同时只能想一个人。<br>在此时此刻，回想第i个重要的人有关的事情都要消耗p[i]的时间，且只有时间p[i]完全经过才算确实回想起这个人。<br>威廉该按什么顺序回想，才能尽可能多的回顾和重要的人经历的事情呢？</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行，包含两个正整数t,n。<br>接下来n行，每行包含一个字符串和一个正整数p[i]。其中字符串表示第i个重要的人的姓名。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出按最佳回想顺序能想起的人数。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>5 3<br>Ri-ria 3<br>Naiguranto 5<br>Arumaria 2</p><p>输出样例#1：<br>2</p><p>输入样例#2：<br>10 5<br>Chtholly 2<br>Nephren 5<br>Ithea 3<br>Rhantolk 6<br>Lakhesh 4</p><p>输出样例#2：<br>3</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>每个字符串均不超过50个字符。<br>对于100%的数据，1&lt;=t&lt;=10000000,1&lt;=n&lt;=500000,1&lt;=p[i]&lt;=1000。</p><p>通过题目中描述，可知姓名是无用参数，不需保存处理；且仅有时间一种属性，可定性为dp的特例：贪心。当然用dp做也可以得出正解。<br>贪心做法：<br>sort之后从小到大开始算。<br>dp做法：<br>同背包问题。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">500000</span>],sum=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> t,n,i,j;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;t,&amp;n);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">scanf</span>(<span class="string">"%s %d"</span>,s,&amp;a[i]);</span><br><span class="line">  sort(a,a+n);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">      t-=a[i];</span><br><span class="line">      <span class="keyword">if</span>(t&lt;<span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span>(!i) <span class="built_in">printf</span>(<span class="string">"0"</span>);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      sum++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(i) <span class="built_in">printf</span>(<span class="string">"%d"</span>,sum);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 云霄一中月赛 </tag>
            
            <tag> 背包dp </tag>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年2/3月月赛 Day2 被7整除 题解</title>
      <link href="/Answer/yxyz201802-0201/"/>
      <url>/Answer/yxyz201802-0201/</url>
      
        <content type="html"><![CDATA[<p>2018年2/3月月赛 Day2 被7整除 题解<br><a id="more"></a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>输出从1~n有多少个整数满足2^n-n^2能被7整除。</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行，包含一个整数n。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行，包含一个整数x，表示从1~n有x个整数满足2^n-n^2能被7整除。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>2</p><p>输出样例#1：<br>1</p><p>输入样例#2：<br>4</p><p>输出样例#2：<br>2</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>对于100%的数据，1&lt;=n&lt;=1000000。</p><p>定性为数论题。<br>通过打表可发现有周期为21的规律。<br>只能打表自行找规律，没有别种办法。<br>找不出规律也可暴力，不过会超时。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> num[<span class="number">30</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>,<span class="number">6</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">  <span class="keyword">int</span> k=n/<span class="number">21</span>,q=n%<span class="number">21</span>;</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;k*<span class="number">6</span>+num[q];</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 云霄一中月赛 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年2/3月月赛 Day1 胜利大逃亡 题解</title>
      <link href="/Answer/yxyz201802-0103/"/>
      <url>/Answer/yxyz201802-0103/</url>
      
        <content type="html"><![CDATA[<p>原题，不再赘述。详见<a href="http://ringoer.com/Answer/hdu-p1253/" target="_blank" rel="noopener">本链接</a></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> SPFA </tag>
            
            <tag> 云霄一中月赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年2/3月月赛 Day1 疯狂的机器人 题解</title>
      <link href="/Answer/yxyz201802-0102/"/>
      <url>/Answer/yxyz201802-0102/</url>
      
        <content type="html"><![CDATA[<p>2018年2/3月月赛 Day1 疯狂的机器人 题解<br><a id="more"></a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>MH：“前几个月给一个机器人写了段代码，发现它只能往两个方向走，不能回退，而且还是随机的，真是无语…”<br>CL：“我看你也够随机的，最后那家伙竟然疯了一样，在上下左右四个方向乱走了，可真是吓死我了”<br>MH：“是啊是啊。我记下了它当时的所在的地图，希望能找到它最远可能从哪里来的”<br>还是机智的你，知道这个机器人最远可能从哪里来的吗？  </p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行两个正整数n,m，表示机器人所在地图的规模。<br>第2行到第n+1行，每行m个数字，分别是0,1,-1三种之一。<br>其中，0表示可以行走的路，1表示墙壁，-1表示机器人所在的坐标。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行，包含一个数字。若能有最远可到达的地方，输出该距离，否则输出0。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>4 5<br>1 0 0 0 1<br>0 1 0 1 0<br>1 1 0 1 0<br>0 -1 0 0 0</p><p>输出样例#1：<br>5</p><p>输入样例#2：<br>4 5<br>1 0 0 0 1<br>0 1 0 1 0<br>1 1 0 1 0<br>0 0 1 -1 0</p><p>输出样例#2：<br>3</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>对于100%的数据，1&lt;=n,m&lt;=50。</p><p>定性为搜索题，搜索所有点中到起点走最短路仍最远的地方，也就是求起点到所有点的最短距离的最大值。<br>此处采用dfs。使用bfs的话需要有明确的终点，而本题没有固定终点，因此不适合bfs。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,final=<span class="number">0</span>,d[<span class="number">60</span>][<span class="number">60</span>],ans[<span class="number">60</span>][<span class="number">60</span>]=&#123;<span class="number">0</span>&#125;,stx,sty;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=x<span class="number">-1</span>;i&lt;=x+<span class="number">1</span>;i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;=n) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=y<span class="number">-1</span>;j&lt;=y+<span class="number">1</span>;j++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span>(j&lt;<span class="number">0</span>||j&gt;=m) <span class="keyword">continue</span>;</span><br><span class="line">          <span class="keyword">if</span>(i==stx&amp;&amp;j==sty) <span class="keyword">continue</span>;</span><br><span class="line">          <span class="keyword">if</span>(i==x&amp;&amp;y==j) <span class="keyword">continue</span>;</span><br><span class="line">          <span class="keyword">if</span>(i!=x&amp;&amp;y!=j) <span class="keyword">continue</span>;</span><br><span class="line">          <span class="keyword">if</span>(d[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">          <span class="keyword">int</span> &amp;t=ans[i][j];</span><br><span class="line">          <span class="keyword">if</span>(!t||(t&amp;&amp;t&gt;ans[x][y]+<span class="number">1</span>))</span><br><span class="line">          &#123;</span><br><span class="line">              t=ans[x][y]+<span class="number">1</span>;</span><br><span class="line">              dfs(i,j);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="built_in">cin</span>&gt;&gt;d[i][j];</span><br><span class="line">          <span class="keyword">if</span>(d[i][j]==<span class="number">-1</span>)</span><br><span class="line">          &#123;</span><br><span class="line">              stx=i;</span><br><span class="line">              sty=j;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  dfs(stx,sty);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++) <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++) <span class="keyword">if</span>(final&lt;ans[i][j]) final=ans[i][j];</span><br><span class="line">  <span class="built_in">cout</span>&lt;&lt;final;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 云霄一中月赛 </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年2/3月月赛 Day1 行军（改） 题解</title>
      <link href="/Answer/yxyz201802-0101/"/>
      <url>/Answer/yxyz201802-0101/</url>
      
        <content type="html"><![CDATA[<p>2018年2/3月月赛 Day1 行军（改） 题解<br><a id="more"></a></p><h1 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h1><p>再过十几天，人类远征军就要出发去讨伐星神(visitor)了。<br>正规勇者莉莉娅·阿斯普雷伊及一众准勇者们正在为行军问题而焦头烂额。<br>“这么多的粮草，还有那么远的路，这该怎么办啊？”莉莉娅抱怨道。<br>你能帮帮莉莉娅吗？</p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>从皇都到达星神居住地，这之间有无数座城市和无数条道路，将会消耗很多时间。<br>而为了保证军士们的生活，需要带上足够的粮草。<br>皇都共有n堆粮草可供选择，每堆粮草有重量p，体积q和价值w，而为了便于行军，莉莉娅只能选择不超过u重量且不超过v体积的粮草带走。</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行，包含三个正整数，分别为粮草数量n,最大载重量u,最大体积v。<br>接下来n行，每行包含三个正整数p[i]、q[i]和w[i]。<br>第i+1行的p[i]表示第i堆粮草的重量，q[i]表示第i堆粮草的体积，w[i]表示第i堆粮草的价值。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行，输出能载的粮草的最大价值。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>6 10 10<br>1 1 1<br>2 3 1<br>3 2 1<br>2 5 1<br>5 2 1<br>4 3 1</p><p>输出样例#1：<br>4</p><p>输入样例#2：<br>10 16 24<br>2 9 4<br>5 6 5<br>3 7 3<br>6 2 9<br>7 6 5<br>7 5 6<br>3 3 8<br>1 4 1<br>9 5 9<br>9 7 6</p><p>输出样例#2：<br>26</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>1&lt;=n&lt;=1000,1&lt;=u&lt;=1000,1&lt;=v&lt;=1000<br>所有数据不大于maxint</p><p>非常简单的一个二维约束的背包问题。解题方法详见<a href="http://ringoer.com/knapsack-dp/knapsack/" target="_blank" rel="noopener">这里</a><br>数据较大，最好scanf输入。<br>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n,u,v;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">1010</span>],q[<span class="number">1010</span>],w[<span class="number">1010</span>],f[<span class="number">1010</span>][<span class="number">1010</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="keyword">int</span> i,j,k;</span><br><span class="line"> <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;u&gt;&gt;v;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;p[i],&amp;q[i],&amp;w[i]);</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line"> &#123;</span><br><span class="line">     <span class="keyword">for</span>(j=u;j&gt;=p[i];j--)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">for</span>(k=v;k&gt;=q[i];k--)</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="keyword">int</span> temp=f[j-p[i]][k-q[i]]+w[i];</span><br><span class="line">             <span class="keyword">if</span>(f[j][k]&lt;temp) f[j][k]=temp;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;f[u][v];</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 云霄一中月赛 </tag>
            
            <tag> 背包dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题专项</title>
      <link href="/algorithm/knapsack/"/>
      <url>/algorithm/knapsack/</url>
      
        <content type="html"><![CDATA[<p>背包问题专项<br><a id="more"></a></p><h1 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h1><p>每种物品只能拿一个的问题称为01背包问题。<br>对于一维约束的情况，先正向枚举数量，再反向枚举约束条件。<br>核心代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=v[i];j--)</span><br><span class="line">        <span class="keyword">if</span>(!ans[j]||ans[j]&gt;ans[j-v[i]]+w[i])</span><br><span class="line">            ans[j]=ans[j-v[i]]+w[i];</span><br></pre></td></tr></table></figure></p><p>上述代码中设n为数量，m为最大重量，v[i]为第i个物品重量，w[i]为第i个物品价值。<br>对于二维约束的情况，只需要改用二维数组，并再加一个for即可。<br>核心代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=v[i];j--)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=u;k&gt;=p[i];k--)</span><br><span class="line">            <span class="keyword">if</span>(!ans[j][k]||ans[j][k]&gt;ans[j-v[i]][k-p[i]]+w[i])</span><br><span class="line">                ans[j][k]=ans[j-v[i]][k-p[i]]+w[i];</span><br></pre></td></tr></table></figure></p><p>上述代码中设n为数量，m为最大重量，u为最大体积，v[i]为第i个物品重量，p[i]为第i个物品体积，w[i]为第i个物品价值。<br>对于更多维约束条件，可参照二维约束外推。</p><h1 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h1><p>每种物品可以拿无限个的问题称为完全背包问题。<br>对于一维约束的情况，先正向枚举数量，再正向枚举约束条件。（01背包是反向枚举约束条件）<br>核心代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=v[i];j&lt;=m;j++)</span><br><span class="line">        <span class="keyword">if</span>(!ans[j]||ans[j]&gt;ans[j-v[i]]+w[i])</span><br><span class="line">            ans[j]=ans[j-v[i]]+w[i];</span><br></pre></td></tr></table></figure></p><p>上述代码中设n为数量，m为最大重量，v[i]为第i个物品重量，w[i]为第i个物品价值。<br>对于二维约束的情况，只需要改用二维数组，并再加一个for即可。<br>核心代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=v[i];j&lt;=m;j++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=p[i];k&lt;=u;k++)</span><br><span class="line">            <span class="keyword">if</span>(!ans[j][k]||ans[j][k]&gt;ans[j-v[i]][k-p[i]]+w[i])</span><br><span class="line">                ans[j][k]=ans[j-v[i]][k-p[i]]+w[i];</span><br></pre></td></tr></table></figure></p><p>上述代码中设n为数量，m为最大重量，u为最大体积，v[i]为第i个物品重量，p[i]为第i个物品体积，w[i]为第i个物品价值。<br>对于更多维约束条件，可参照二维约束外推。</p><h1 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h1><p>01背包问题是每种物品只能拿一个，完全背包问题是每种物品可以拿无限个，而多重背包就是每种物品可以取一个或多个，但绝对是有限个，不可能无限取。<br>解决此类问题，只需把每种物品拆成单个即可。如第i种物品有j个，单个重量为v[i]，价值为w[i]，那就可以拆分成j的单个重量为v[i]，价值为w[i]的物品。<br>拆单之后，即可使用01背包问题的解法来解决。</p><h1 id="混合三种背包问题"><a href="#混合三种背包问题" class="headerlink" title="混合三种背包问题"></a>混合三种背包问题</h1><p>顾名思义，混合三种背包问题就是以上三种的混合。每种物品既可能只有1个，又可能有多个，还可能有无数个。<br>对于该类问题，先按多重背包问题的解法，将有多个的物品全部拆单，使得混合三种背包问题简化为01背包和完全背包的混合；再正向枚举每件物品，按每件物品所属性质不同而决定采用正向枚举约束条件还是反向。<br>核心代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">if</span>(f[i]==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=v[i];j--)</span><br><span class="line">            <span class="keyword">if</span>(!ans[j]||ans[j]&gt;ans[j-v[i]]+w[i])</span><br><span class="line">                ans[j]=ans[j-v[i]]+w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=v[i];j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">if</span>(!ans[j]||ans[j]&gt;ans[j-v[i]]+w[i])</span><br><span class="line">                ans[j]=ans[j-v[i]]+w[i];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>上述代码中设n为数量，m为最大重量，v[i]为第i个物品重量，w[i]为第i个物品价值，f[i]=1表示第i个物品属于01背包，否则属于完全背包。<br>对于二维约束的情况，只需要改用二维数组，并再加一个for即可。<br>核心代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">if</span>(f[i]==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=m;j&gt;=v[i];j--)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=u;k&gt;=p[i];k--)</span><br><span class="line">                <span class="keyword">if</span>(!ans[j][k]||ans[j][k]&gt;ans[j-v[i]][k-p[i]]+w[i])</span><br><span class="line">                    ans[j][k]=ans[j-v[i]][k-p[i]]+w[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=v[i];j&lt;=m;j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=p[i];k&lt;=u;k++)</span><br><span class="line">                <span class="keyword">if</span>(!ans[j][k]||ans[j][k]&gt;ans[j-v[i]][k-p[i]]+w[i])</span><br><span class="line">                    ans[j][k]=ans[j-v[i]][k-p[i]]+w[i];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>上述代码中设n为数量，m为最大重量，u为最大体积，v[i]为第i个物品重量，p[i]为第i个物品体积，w[i]为第i个物品价值，f[i]=1表示第i个物品属于01背包，否则属于完全背包。<br>对于更多维约束条件，可参照二维约束外推。</p>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dp </tag>
            
            <tag> algorithm </tag>
            
            <tag> knapsack-dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P1126 机器人搬重物 题解</title>
      <link href="/Answer/luogu-p1126/"/>
      <url>/Answer/luogu-p1126/</url>
      
        <content type="html"><![CDATA[<p>Luogu P1126 机器人搬重物 题解<br><a id="more"></a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>机器人移动学会（RMI）现在正尝试用机器人搬运物品。机器人的形状是一个直径1.6米的球。在试验阶段，机器人被用于在一个储藏室中搬运货物。储藏室是一个N*M的网格，有些格子为不可移动的障碍。机器人的中心总是在格点上，当然，机器人必须在最短的时间内把物品搬运到指定的地方。机器人接受的指令有：向前移动1步（Creep）；向前移动2步（Walk）；向前移动3步（Run）；向左转（Left）；向右转（Right）。每个指令所需要的时间为1秒。请你计算一下机器人完成任务所需的最少时间。</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入的第一行为两个正整数N,M（N,M&lt;=50），下面N行是储藏室的构造，0表示无障碍，1表示有障碍，数字之间用一个空格隔开。接着一行有四个整数和一个大写字母，分别为起始点和目标点左上角网格的行与列，起始时的面对方向（东E，南S，西W，北N），数与数，数与字母之间均用一个空格隔开。终点的面向方向是任意的。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个整数，表示机器人完成任务所需的最少时间。如果无法到达，输出-1。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>9 10<br>0 0 0 0 0 0 1 0 0 0<br>0 0 0 0 0 0 0 0 1 0<br>0 0 0 1 0 0 0 0 0 0<br>0 0 1 0 0 0 0 0 0 0<br>0 0 0 0 0 0 1 0 0 0<br>0 0 0 0 0 1 0 0 0 0<br>0 0 0 1 1 0 0 0 0 0<br>0 0 0 0 0 0 0 0 0 0<br>1 0 0 0 0 0 0 0 1 0<br>7 2 2 7 S</p><p>输出样例#1：<br>12</p><p>本题思路不难，无非就是广搜的一步变成123步或者转向而已，麻烦的是对地图的理解……本人写的时候卡了2小时在地图的处理，然后才A掉。<br>还有坑点，就是起点可能和终点重合，需要特判。<br>对地图的理解：<br>一开始我采用了化格子为点的做法，先弄个可行点地图再搞，然而WA了，只好换。<br>后来我用的就是AC的做法，在图上制造虚空点，每个点四周的4个格子都得是0才能通过，只要有一个是1就过不了。<br>附代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y,face;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> ==(<span class="keyword">const</span> node a,<span class="keyword">const</span> node b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a.x!=b.x) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(a.y!=b.y) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(a.face!=b.face) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;st,di,fx[<span class="number">4</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;node&gt;q;</span><br><span class="line"><span class="keyword">char</span> dire;</span><br><span class="line"><span class="keyword">int</span> n,m,ans[<span class="number">60</span>][<span class="number">60</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> d[<span class="number">60</span>][<span class="number">60</span>]=&#123;<span class="literal">false</span>&#125;,v[<span class="number">60</span>][<span class="number">60</span>][<span class="number">4</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> &amp;sum=ans[di.x][di.y];</span><br><span class="line">    q.push(st);</span><br><span class="line">    v[st.x][st.y][st.face]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node t=q.front();</span><br><span class="line">        q.pop();</span><br><span class="line">        v[t.x][t.y][t.face]=<span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> ti;</span><br><span class="line">            node tmp=t;</span><br><span class="line">            tmp.face=i;</span><br><span class="line">            <span class="keyword">if</span>(tmp.face+t.face==<span class="number">3</span>) ti=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tmp.face==t.face) ti=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> ti=<span class="number">1</span>;</span><br><span class="line">            ti++;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                tmp.x+=fx[i].x;</span><br><span class="line">                tmp.y+=fx[i].y;</span><br><span class="line">                <span class="keyword">if</span>(tmp.x&lt;<span class="number">1</span>||tmp.y&lt;<span class="number">1</span>||tmp.x&gt;=n||tmp.y&gt;=m) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(d[tmp.x][tmp.y]||d[tmp.x<span class="number">-1</span>][tmp.y]||d[tmp.x][tmp.y<span class="number">-1</span>]||d[tmp.x<span class="number">-1</span>][tmp.y<span class="number">-1</span>]) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(tmp.x==st.x&amp;&amp;tmp.y==st.y) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">int</span> temp=ans[t.x][t.y]+ti;</span><br><span class="line">                <span class="keyword">if</span>(sum&amp;&amp;temp&gt;=sum) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(!ans[tmp.x][tmp.y]||temp&lt;ans[tmp.x][tmp.y])</span><br><span class="line">                &#123;</span><br><span class="line">                    ans[tmp.x][tmp.y]=temp;</span><br><span class="line">                    <span class="keyword">if</span>(!v[tmp.x][tmp.y][tmp.face])</span><br><span class="line">                    &#123;</span><br><span class="line">                        v[tmp.x][tmp.y][tmp.face]=<span class="literal">true</span>;</span><br><span class="line">                        q.push(tmp);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    fx[<span class="number">0</span>].x=<span class="number">-1</span>,fx[<span class="number">0</span>].y=<span class="number">0</span>;</span><br><span class="line">    fx[<span class="number">1</span>].x=<span class="number">0</span>,fx[<span class="number">1</span>].y=<span class="number">-1</span>;</span><br><span class="line">    fx[<span class="number">2</span>].x=<span class="number">0</span>,fx[<span class="number">2</span>].y=<span class="number">1</span>;</span><br><span class="line">    fx[<span class="number">3</span>].x=<span class="number">1</span>,fx[<span class="number">3</span>].y=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d[i][j]);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;st.x&gt;&gt;st.y&gt;&gt;di.x&gt;&gt;di.y&gt;&gt;dire;</span><br><span class="line">    <span class="keyword">if</span>(dire==<span class="string">'N'</span>) dire=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dire==<span class="string">'W'</span>) dire=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dire==<span class="string">'E'</span>) dire=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(dire==<span class="string">'S'</span>) dire=<span class="number">3</span>;</span><br><span class="line">    di.face=st.face=dire;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>();</span><br><span class="line">    <span class="keyword">if</span>(st==di)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    spfa();</span><br><span class="line">    <span class="keyword">if</span>(ans[di.x][di.y]) <span class="built_in">cout</span>&lt;&lt;ans[di.x][di.y];</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Luogu </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ノーゲームノーライフ ゼロ 观影体验</title>
      <link href="/others/20180311/"/>
      <url>/others/20180311/</url>
      
        <content type="html"><![CDATA[<p>「向遗志起誓」<br><a id="more"></a></p><hr><p>啊啊，怎么说呢，算是从寒假开始就想看了吧。但是拖到这周周二才把动画本编补完，小说也堪堪起步。本来昨天就打算腾出2小时的时间来看的，但是林林总总事情不少（详见上一篇文章），于是便拖到了今天。再加上我妹这两天体调不佳，于是便与她一起，下午用2小时（她没看过本编要我慢慢解释）的时间看完了该剧场版。<br>那么，以下有剧透，未看过的各位请慎重往下看。<br>这是未看过小说，仅看过动画本编的人，的视角。</p><hr><p>故事开始便是男主利库（人类）被毁了家乡，然后与女主休比（机凯种）远距离相看见。这该是最初的相遇了，也与后面女主自称是毁了男主家乡的罪魁祸首相呼应。<br>之后开始解释本片视角，原来是唯一神特图在向兽人种的伊纲陈述这个故事，这个发生在6000年前，悠久大战终结之时的故事。<br>叙述的开篇，利库等3人遇到了地精种的特殊设备，在记录过程中却有危险来临，不得不命令一人去死。回据点后，该死去的人是一个萝莉的父亲，利库遭到了萝莉的怨恨发言，回屋后自己也是很难过，在为自己的无能而发怒。<br>之后，利库在探险过程中偶然来到森精种旧都（就是被吉普莉尔一个天击毁掉的地方），在这里发生了男女主第一次正式相遇。结果刚一相遇就爆发了重大糟糕台词啊2333，有兴趣的请自行观看，太糟糕了不便透露。<br>然后休比申请对局（结果当然输了），于是被利库带回人类据点。然后又是一堆污的事情……不对，是休比向利库陈述了自己的目的——了解「心」。接下来有一起洗澡，呸，是利库给休比擦澡。期间利库的姐姐进了房间，发现了一根休比遗留的头发，扯不断。此时姐姐应该已经发现休比是机凯种了。<br>三个字，瞬间一年后。<br>利库和休比一同前往相遇的地方，在那里却遭遇了森精种研发的「虚空第零加护」，休比被打中，之后却复制了该招式接近10%的威力打破了关上的门成功和利库一起逃出。然后就是卿卿我我的狗粮，期间利库也渐渐打开内心。<br>回据点之后利库开始和休比研究地图，企图搞点大新闻。<br>好景不长，在地精种对龙精种的攻击中，人类受到了波及。结果利库还趁机套路了一把他姐姐，真是这种时候还有这种闲心啊2333<br>利库把首领大位交给姐姐后，开始和其他人谋划「幽灵」行动，引导上位种族休战，并引导其在指定地点开战，计划利用32个『典开』「通行规制」把能量引导到贯穿星球，然后利库取得「星杯」来结束这场悠久之战。<br>宣布完此事，本片开始最后一段不虐的狗粮——利库向休比求婚了！求婚了！！！<br>然后利库向兽人种透露了地精种拥有「水爆」的事情，又去森精种那里下棋，故意输掉讨取情报。但为了不被森精种发现自己是人类，用了很多「黑灰」来掩盖自己的精灵回廊气息，让森精种的克莱布误以为自己是上位种族，不敢贸然动武。<br>顺利讨取情报后，利库却因黑灰在身上过久而被侵染严重，不得不截肢了。<br>在临时营地里利库过于劳累晕倒了，醒来后休比依旧劝他休息，一来二去利库就睡了。<br>这是利库和休比的永别。高虐开始。<br>休比为了节约时间，一个人去设置『典开』「通行规制」，结果只设置了一个（目前共24个）就被吉普莉尔发现了，打了起来，休比不敌，开始申请和连接体同步数据，却一直被驳回，隔了好一会才被接受了。于是休比开大，立志坚持251秒到同步结束。最终还是被吉普莉尔打爆了，在最后关头同步完成，休比被「天击」秒了。<br>这段别看我简单描述过去了，其实是因为太虐了！！！简直就是吉普莉尔掉粉时间啊！！！高虐！！！<br>因为休比挂了，利库也十分难受，要自杀的时候，机凯种中连接体的一员来到利库面前，声明剩余8个不可能设置完成，请求修正策略。利库做出了决定。<br>机凯种在僵持之处模仿天翼种使用「天击」诱发各方全弹发射，并成功引导能量偏移。机凯种使用第十一连接体全员4807体承接了这股能量，并将其同步给利库所在的『真典』「弑星者」，成功贯穿星球，使得星杯显现，利库的身体却因消耗过度了，被星杯周围的黑灰所侵蚀，不能靠近。绝望之下利库只得祈祷，人生第一次，也是最后的祈祷，祈祷游戏之神能现身取得星杯。最终的最终，游戏之神因为利库的信仰而成形，取得星杯，成为唯一神，重塑世界。<br>这段也是巨虐啊！<br>啊，到此为止了，真是让我和我妹都哭惨了。<br>向全体机凯种致以最高的敬意。  </p><hr><p>以下是部分个人感想吧。<br>利库和休比，怎么看都是空白的前世啊。（虽然作者说不是不过不瞎都能看出来吧）<br>想看动画第二季啊，也想补小说，但是作业还没写完，还是省省吧2333<br>好，到此为止吧。</p><hr><p>「向盟约起誓」</p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20180310 随录</title>
      <link href="/diary/20180310/"/>
      <url>/diary/20180310/</url>
      
        <content type="html"><![CDATA[<p>今日早上8点起床了。<br><a id="more"></a><br>哎呀，前一天是真的累，结果还折腾到快1点，所以早上不得不睡到8点再起来了。<br>然后日常，吃完饭后就去公寓305准备面试了。结果到场才不到8点40分，只有lyh在场，又等了很久才等到游神等。<br>9点就开始面试了。我还是第一个啊2333被问了基础、时间安排，甚至还有梦想之类的xs<br>然后9点5分就出来了，发生了一点小意外——居然碰到了自主招生的时候同组的同学，不仅面试同组体测也同组的xsj同学。他现在在信科。机缘巧合之下居然在之前就加好了qq。他还高呼“原来cgp就是你啊”。缘分啊缘分。<br>之后回寝室，居然忘记充电了，结果60多的电到中午2点多点就没电了哭哭。<br>10点多和wise相约一起去前一天和同年几位约好的芙蓉湖小广场，结果发现哇游客真的多，周六周日恐怖如斯。之后等几位，陈总没空来，一盆基本上踩点，之后是琛，再是弘哥。然后说人太多了，于是先去吃饭。<br>出了西村校门，来到富万邦，然后决定吃杨国福。但是好像没什么东西能吃啊，还不如云霄的，随便点点21块就完了。<br>然后去未开放的南校门（不同于大南校门），但是没地方摆手机，于是又前往化院校门，进去一看是上弦场的一边（另一边靠白城）。真是打开了新世界的大门。<br>然后在上弦场的中轴线录像，录了一会，聊了会天，wise就去做家教了。剩下的我们就去经院咖啡厅休息，我还点了卡布奇诺，15块啊。不过总算明白经院咖啡厅怎么识别同学和游客了——只能校园卡支付，不支持其它方式。<br>啊，3点多就各自散了，4点刚过的时候到了寝室，然后休息，一不小心就5点半多了，去二期吃晚饭，紫菜汤好料啊，还有辣包菜。<br>晚上就休闲了，也没什么大事，摸了。</p>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P1388 算式 题解</title>
      <link href="/Answer/luogu-p1388/"/>
      <url>/Answer/luogu-p1388/</url>
      
        <content type="html"><![CDATA[<p>Luogu P1388 算式 题解<br><a id="more"></a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>给出N个数字，不改变它们的相对位置，在中间加入K个乘号和N-K-1个加号，（括号随便加）使最终结果尽量大。因为乘号和加号一共就是N-1个了，所以恰好每两个相邻数字之间都有一个符号。例如：<br>N=5, K=2，5个数字分别为1、2、3、4、5，可以加成：<br>1*2*(3+4+5)=24<br>1*(2+3)*(4+5)=45<br>(1*2+3)*(4+5)=45<br>……</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>输入文件共有二行，第一行为两个有空格隔开的整数，表示N和K，其中(2&lt;=N&lt;=15, 0&lt;=K&lt;=N-1)。第二行为 N个用空格隔开的数字（每个数字在0到9之间）。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出文件仅一行包含一个整数，表示要求的最大的结果<br>最后的结果&lt;=maxlongint</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>5 2<br>1 2 3 4 5</p><p>输出样例#1：<br>120</p><p>如果可以改变顺序，一个最大堆就解决了。<br>奈何不能改变相对顺序，于是采用dp。<br>用ans[i][j]表示在前i个数的序列中插入j个乘号的最优解。由于乘号和加号数量之和为n-1，所以当乘号数量确定后，加号数量也唯一确定。<br>之后可以发现，因为不能改变顺序，所以在前i个数中插入乘号后，剩下的连续序列必然相加。故有状态转移方程：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ans[i][j]=max(ans[i][j],ans[t][j<span class="number">-1</span>]*(a[i]-a[t]))</span><br></pre></td></tr></table></figure></p><p>其中t表示前i个数中某个小于i的位置，ans[t][j-1]表示在前i个数构成的序列中的一段由前t个数构成的子序列里插入j-1个乘号的最优解。<br>附代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,k,a[<span class="number">20</span>],ans[<span class="number">20</span>][<span class="number">20</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">if</span>(i<span class="number">-1</span>) a[i]+=a[i<span class="number">-1</span>];</span><br><span class="line">        ans[i][<span class="number">0</span>]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=min(k,i<span class="number">-1</span>);j++)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> t=j;t&lt;i;t++)</span><br><span class="line">                ans[i][j]=max(ans[i][j],ans[t][j<span class="number">-1</span>]*(a[i]-a[t]));</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans[n][k];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Luogu </tag>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P2085 最小函数值 题解</title>
      <link href="/Answer/luogu-p2085/"/>
      <url>/Answer/luogu-p2085/</url>
      
        <content type="html"><![CDATA[<p>Luogu P2085 最小函数值 题解<br><a id="more"></a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>有n个函数，分别为F1,F2,…,Fn。定义Fi(x)=Ai*x^2+Bi*x+Ci (x∈N*)。给定这些Ai、Bi和Ci，请求出所有函数的所有函数值中最小的m个（如有重复的要输出多个）。</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行输入两个正整数n和m。以下n行每行三个正整数，其中第i行的三个数分别位Ai、Bi和Ci。Ai&lt;=10，Bi&lt;=100，Ci&lt;=10 000。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出将这n个函数所有可以生成的函数值排序后的前m个元素。这m个数应该输出到一行，用空格隔开。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>3 10<br>4 5 3<br>3 4 5<br>1 7 1</p><p>输出样例#1：<br>9 12 12 19 25 29 31 44 45 54</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>数据规模：n,m&lt;=10000</p><p>方案1：暴力枚举。数据小了能过，但是肯定会T几个点。<br>方案2：采用最小堆。  </p><ol><li>保存每个函数的fi(1)值为sum，num为fi(x)中的i，step为fi(x)中的x。全部入队。</li><li>每次取队首元素，保存为t，然后pop()。</li><li>输出t.sum（此时已经是最小），t.step++（自变量+1），t.sum=a[t.num]<em>t.step</em>t.step+b[t.num]*t.step+c[t.num];（求值），push(t);</li><li>重复，直到执行了m次。</li></ol><p>值得注意的是，此处采用了自定义类型，但普通优先队列并不支持自定义类型，只支持基本类型。此时需要重载运算符。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> rbq u,<span class="keyword">const</span> rbq o)&#123;<span class="keyword">return</span> u.sum&gt;o.sum;&#125;</span><br></pre></td></tr></table></figure></p><p>附代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rbq</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num,sum,step;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> rbq u,<span class="keyword">const</span> rbq o)&#123;<span class="keyword">return</span> u.sum&gt;o.sum;&#125;</span><br><span class="line">&#125;t;</span><br><span class="line">priority_queue&lt;rbq&gt;q;</span><br><span class="line"><span class="keyword">int</span> n,m,a[<span class="number">10010</span>],b[<span class="number">10010</span>],c[<span class="number">10010</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>,&amp;a[i],&amp;b[i],&amp;c[i]);</span><br><span class="line">        t.num=i;t.sum=a[i]+b[i]+c[i];t.step=<span class="number">1</span>;</span><br><span class="line">        q.push(t); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">    &#123;</span><br><span class="line">        t=q.top();</span><br><span class="line">        q.pop();</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;t.sum&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        t.step++;</span><br><span class="line">        t.sum=a[t.num]*t.step*t.step+b[t.num]*t.step+c[t.num];</span><br><span class="line">        q.push(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Luogu </tag>
            
            <tag> mathematics </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDU P1253 胜利大逃亡 题解</title>
      <link href="/Answer/hdu-p1253/"/>
      <url>/Answer/hdu-p1253/</url>
      
        <content type="html"><![CDATA[<p>HDU P1253 胜利大逃亡 题解<br><a id="more"></a><br><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1253" target="_blank" rel="noopener">卡常数神题</a></p><h1 id="Problem-Description"><a href="#Problem-Description" class="headerlink" title="Problem Description"></a>Problem Description</h1><p>Ignatius被魔王抓走了,有一天魔王出差去了,这可是Ignatius逃亡的好机会.<br>魔王住在一个城堡里,城堡是一个A*B*C的立方体,可以被表示成A个B*C的矩阵,刚开始Ignatius被关在(0,0,0)的位置,离开城堡的门在(A-1,B-1,C-1)的位置,现在知道魔王将在T分钟后回到城堡,Ignatius每分钟能从一个坐标走到相邻的六个坐标中的其中一个.现在给你城堡的地图,请你计算出Ignatius能否在魔王回来前离开城堡(只要走到出口就算离开城堡,如果走到出口的时候魔王刚好回来也算逃亡成功),如果可以请输出需要多少分钟才能离开,如果不能则输出-1.<br><img src="http://acm.hdu.edu.cn/data/images/c15-1003-1.jpg" alt="胜利大逃亡"></p><h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><p>输入数据的第一行是一个正整数K,表明测试数据的数量.每组测试数据的第一行是四个正整数A,B,C和T(1&lt;=A,B,C&lt;=50,1&lt;=T&lt;=1000),它们分别代表城堡的大小和魔王回来的时间.然后是A块输入数据(先是第0块,然后是第1块,第2块……),每块输入数据有B行,每行有C个正整数,代表迷宫的布局,其中0代表路,1代表墙.(如果对输入描述不清楚,可以参考Sample Input中的迷宫描述,它表示的就是上图中的迷宫)<br>特别注意:本题的测试数据非常大,请使用scanf输入,我不能保证使用cin能不超时.在本OJ上请使用Visual C++提交.</p><h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><p>对于每组测试数据,如果Ignatius能够在魔王回来前离开城堡,那么请输出他最少需要多少分钟,否则输出-1.</p><h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><p>1<br>3 3 4 20<br>0 1 1 1<br>0 0 1 1<br>0 1 1 1<br>1 1 1 1<br>1 0 0 1<br>0 1 1 1<br>0 0 0 0<br>0 1 1 0<br>0 1 1 0</p><h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><p>11</p><p>从50*50*50的范围来看，显然dfs是不现实的，故采用bfs。那既然都用bfs了，当然是祭出spfa大法。<br>本题最大坑点在于，要么高度耦合，要么要内联，总之就是常数要优化到极致，不然就T，果断T。<br>说明已附在code里。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;qa,qb,qc;</span><br><span class="line"><span class="keyword">bool</span> d[<span class="number">60</span>][<span class="number">60</span>][<span class="number">60</span>],v[<span class="number">60</span>][<span class="number">60</span>][<span class="number">60</span>];</span><br><span class="line"><span class="keyword">int</span> ans[<span class="number">60</span>][<span class="number">60</span>][<span class="number">60</span>],k,a,b,c,t;<span class="comment">//50*50*50，故开60*60*60 </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> aa,<span class="keyword">int</span> bb,<span class="keyword">int</span> cc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">qa.push(aa);</span><br><span class="line">qb.push(bb);</span><br><span class="line">qc.push(cc);<span class="comment">//入队 </span></span><br><span class="line">v[aa][bb][cc]=<span class="literal">true</span>;<span class="comment">//标记已用 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(<span class="keyword">int</span> aa,<span class="keyword">int</span> bb,<span class="keyword">int</span> cc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">qa.pop();</span><br><span class="line">qb.pop();</span><br><span class="line">qc.pop();<span class="comment">//出队 </span></span><br><span class="line">v[aa][bb][cc]=<span class="literal">false</span>;<span class="comment">//取消标记 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> aa,<span class="keyword">int</span> bb,<span class="keyword">int</span> cc,<span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!aa&amp;&amp;!bb&amp;&amp;!cc) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//1、不是起点 </span></span><br><span class="line"><span class="keyword">if</span>(aa&lt;<span class="number">0</span>||bb&lt;<span class="number">0</span>||cc&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//2、不能向下越界 </span></span><br><span class="line"><span class="keyword">if</span>(aa&gt;=a||bb&gt;=b||cc&gt;=c) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//3、不能向上越界 </span></span><br><span class="line"><span class="keyword">if</span>(v[aa][bb][cc]) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//4、不能是已经使用过的点 </span></span><br><span class="line"><span class="keyword">if</span>(d[aa][bb][cc]) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//5、不能是墙 </span></span><br><span class="line"><span class="keyword">int</span> tmp=ans[aa][bb][cc];</span><br><span class="line"><span class="keyword">if</span>(tmp&amp;&amp;sum&gt;=tmp) <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//6、目前计算所得值必须比已有最优解更优，否则走人 </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//都通过了，合格了 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">direct</span><span class="params">(<span class="keyword">int</span> aa,<span class="keyword">int</span> bb,<span class="keyword">int</span> cc,<span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!check(aa,bb,cc,sum)) <span class="keyword">return</span>;<span class="comment">//如果不可行，不再计算 </span></span><br><span class="line">ans[aa][bb][cc]=sum;<span class="comment">//更新值 </span></span><br><span class="line"><span class="keyword">if</span>(!(aa==a<span class="number">-1</span>&amp;&amp;bb==b<span class="number">-1</span>&amp;&amp;cc==c<span class="number">-1</span>)) add(aa,bb,cc);<span class="comment">//如果被更新点不是终点，入队 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">spfa</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!qa.empty())<span class="comment">//当队列非空 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ta=qa.front(),tb=qb.front(),tc=qc.front();<span class="comment">//取值 </span></span><br><span class="line">cut(ta,tb,tc);<span class="comment">//出队 </span></span><br><span class="line"><span class="keyword">int</span> sum=ans[ta][tb][tc]+<span class="number">1</span>;<span class="comment">//计算当前最优解 </span></span><br><span class="line">direct(ta<span class="number">-1</span>,tb,tc,sum);</span><br><span class="line">direct(ta+<span class="number">1</span>,tb,tc,sum);</span><br><span class="line">direct(ta,tb<span class="number">-1</span>,tc,sum);</span><br><span class="line">direct(ta,tb+<span class="number">1</span>,tc,sum);</span><br><span class="line">direct(ta,tb,tc<span class="number">-1</span>,sum);</span><br><span class="line">direct(ta,tb,tc+<span class="number">1</span>,sum);<span class="comment">//判断6个方向 </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">"in.txt"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);<span class="comment">//文件读入，节省调试时输入的时间 </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;k);<span class="comment">//输入数据组数 </span></span><br><span class="line"><span class="keyword">while</span>(k--)<span class="comment">//循环k次 </span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(v,<span class="number">0</span>,<span class="keyword">sizeof</span>(v));<span class="comment">//初始化标记数组 </span></span><br><span class="line"><span class="built_in">memset</span>(d,<span class="number">0</span>,<span class="keyword">sizeof</span>(d));<span class="comment">//初始化地图 </span></span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));<span class="comment">//初始化答案数组 </span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d %d %d"</span>,&amp;a,&amp;b,&amp;c,&amp;t);<span class="comment">//输入 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;b;j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> z=<span class="number">0</span>;z&lt;c;z++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;d[i][j][z]);<span class="comment">//输入 </span></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//将起点入队 </span></span><br><span class="line">spfa();<span class="comment">//搜索 </span></span><br><span class="line"><span class="keyword">int</span> answer=ans[a<span class="number">-1</span>][b<span class="number">-1</span>][c<span class="number">-1</span>];<span class="comment">//取终点答案，直接访问三维数组耗时太长，故新建一个变量用于保存 </span></span><br><span class="line"><span class="keyword">if</span>(!answer||answer&gt;t) <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);<span class="comment">//如果答案还是初始值，或答案大于规定时间，则无法 </span></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,answer);<span class="comment">//输出可行答案 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HDU </tag>
            
            <tag> 题解 </tag>
            
            <tag> SPFA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20180304 随录</title>
      <link href="/diary/20180304/"/>
      <url>/diary/20180304/</url>
      
        <content type="html"><![CDATA[<p>啊，又是回校的日子了。<br><a id="more"></a><br>周末做了什么？似乎也没做什么，无非是打打隔膜，氪氪金，不得已时候写写作业，睡个好觉，如是而已。<br>下周就acm面试了，不能回家。还好妹妹也开学了，也算有个照应（虽然远了点）。<br>该做什么呢？<br>写个爬七天的爬虫，写个爬本网站、提供更新信息的爬虫，好好准备六级，好好学习数学。<br>该是这样了吧。</p>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20180303 随录</title>
      <link href="/diary/20180303/"/>
      <url>/diary/20180303/</url>
      
        <content type="html"><![CDATA[<p>啊，好想学习啊。<br>其实还是想打4y。<br>不过总是要认真学习吧？2333</p>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>狗年元宵随录</title>
      <link href="/others/20180302/"/>
      <url>/others/20180302/</url>
      
        <content type="html"><![CDATA[<p>啊，这是狗年的第一次发文吧。<br><a id="more"></a><br>也是，我天天摸鱼，哪来的时间刷题写题解之类的啊2333<br>开学的第一周要过去了，今天周五，也是元宵节，正好应该回去过节了。<br>差点买不到票啊……不过还好用转车之法多花点钱还能回去，不然就独在异乡为异客了2333  周五，没发生什么大事。最大的感受，可能就是设计心理学真好玩，软件竞赛渣渣，略略略。<br>上学期的排名昨天也出了，顺位92%，绝了啊，不过卓越毕竟还是看专业和数学，问题不大（<br>艾尔基本也都99了，活动也打完了，我也该休息一下，留给妹妹玩吧。<br>啊啊，好像也没什么说的了。<br>诸君，学习吧。<br>我也去写大物和微积分了。</p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20180211 随录</title>
      <link href="/diary/20180211/"/>
      <url>/diary/20180211/</url>
      
        <content type="html"><![CDATA[<p>cbs 超越 5/5 5/20<br>98 约一半<br>dw 超越 5/5 0/20<br>97 约一半<br>交织together 约50s<br>伟明家走了一圈<br>kf家走了一圈</p>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年1月月赛 工作分配问题 题解</title>
      <link href="/Answer/yxyz201801-04/"/>
      <url>/Answer/yxyz201801-04/</url>
      
        <content type="html"><![CDATA[<p>2018年1月月赛 工作分配问题 题解<br><a id="more"></a></p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>设有 n 件工作分配给 n 个人。将工作 i 分配给第 j 个人所需的费用为c[i][j] 。试设计一个算法，为每一个人都分配 1 件不同的工作，并使总费用达到最小。</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有 1 个正整数 n 。接下来的 n 行，每行 n 个正整数，表示工作费用。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行，包含一个正整数，为计算出的最小总费用。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>3<br>10 2 3<br>2 3 4<br>3 4 5</p><p>输出样例#1：<br>9</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>对于100%的数据，1&lt;=n&lt;=20，1&lt;=c[i][j]&lt;=100。</p><p>分析数据，发现最大数据为所有c[i][j]的和。而格子数最大只有n*n=400，每个c[i][j]最大只有100，故最大数据不大于40000，可以采用int类型。<br>本题也有网络流解法，但网络流解法思维难度过大，不予讨论。<br>采用dfs解决本问题。</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">bool</span> v[<span class="number">30</span>]=&#123;<span class="literal">false</span>&#125;;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">30</span>][<span class="number">30</span>],n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(sum&lt;ans) ans=sum;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ans&gt;sum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!v[i])</span><br><span class="line">            &#123;</span><br><span class="line">                v[i]=<span class="literal">true</span>;</span><br><span class="line">                dfs(x+<span class="number">1</span>,sum+c[x][i]);</span><br><span class="line">                v[i]=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;c[i][j];</span><br><span class="line">            ans+=c[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>采用ans先存储所有c[i][j]的和，这里也可以将ans初始化为一个远大于40000的值。<br>用v数组保存工作分配情况，v[i]=true表示第i件工作已经被分配，v[i]=false表示第i件工作未被分配。<br>用dfs函数来执行深搜。dfs函数带有两个参量，其中x表示现在正在被分配工作的人的编号，sum表示目前总花费。<br>当x&gt;n时表示人已经被枚举完了，此时判断sum是否小于已有答案ans，若是，则表示产生了更优解，更新ans的值。<br>如果数据简单的话，到这里就可以过了。但本题数据较为复杂，需要剪枝。<br>不论当前枚举到第几个人，只要当前sum&gt;=ans，就表示最终的sum不会比ans小，不会产生更优的解答。所以当且仅当ans&gt;sum的时候继续递归。</p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 云霄一中月赛 </tag>
            
            <tag> dfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年1月月赛 子数整数 题解</title>
      <link href="/Answer/yxyz201801-03/"/>
      <url>/Answer/yxyz201801-03/</url>
      
        <content type="html"><![CDATA[<p>2018年1月月赛 子数整数 题解<br><a id="more"></a></p><h1 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h1><p>zc趁着大家都在hanoi，偷偷跑来研究五位数了！</p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>对于一个五位数a1a2a3a4a5，可将其拆分为三个子数：<br>sub1=a1a2a3<br>sub2=a2a3a4<br>sub3=a3a4a5<br>例如，五位数20207可以拆分成<br>sub1=202<br>sub2=020（=20）<br>sub3=207<br>现在给定一个正整数K，要求你编程求出10000到30000之间所有满足下述条件的五位数，条件是这些五位数的三个子数sub1，sub2，sub3都可被K整除。</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行，包含一个正整数K。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出的每一行为一个满足条件的五位数，要求从小到大输出。<br>不得重复输出或遗漏。<br>如果无解，则输出”No”。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>15</p><p>输出样例#1：<br>22555<br>25555<br>28555<br>30000</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>对于100%的数据，1&lt;=k&lt;=1000。</p><p>枚举10000~30000之间的所有整数，并将其拆分成三块，逐块判断即可。</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">bool</span> p=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10000</span>;i&lt;=<span class="number">30000</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> s1=i/<span class="number">100</span>,s2=i/<span class="number">10</span>%<span class="number">1000</span>,s3=i%<span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">if</span>(s1%k)</span><br><span class="line">        &#123;</span><br><span class="line">            i+=<span class="number">99</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s2%k)</span><br><span class="line">        &#123;</span><br><span class="line">            i+=<span class="number">9</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s3%k) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        p=<span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p) <span class="built_in">cout</span>&lt;&lt;<span class="string">"No"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 云霄一中月赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年1月月赛 复仇的汉诺塔 题解</title>
      <link href="/Answer/yxyz201801-02/"/>
      <url>/Answer/yxyz201801-02/</url>
      
        <content type="html"><![CDATA[<p>2018年1月月赛 复仇的汉诺塔 题解<br><a id="more"></a></p><h1 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h1><p>汉诺塔觉得自己不被mh和cl尊重，决定发动复仇！<br>它把mh和cl困在了古印度圣庙中，并告诉wy，如果不能输出最少搬动的方案，那mh和cl就再也出不来了！</p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>题目的要求是输出最少搬动方案。</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行，包含一个整数n，即为盘子数n，n为正整数，且最大值为10</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>若干行。每一行格式如下：<br>Step i:X -&gt; Y<br>其中，i为第i步，从1开始计算。<br>X，Y为A、B、C中某一个值。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>1</p><p>输出样例#1：<br>Step 1:A -&gt; C</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>对于100%的数据，1&lt;=n&lt;=20。</p><p>裸的递归，没什么好说的。</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> sum=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">char</span> x,<span class="keyword">char</span> y)</span></span>&#123;<span class="built_in">printf</span>(<span class="string">"Step %d:%c -&gt; %c\n"</span>,sum++,x,y);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">char</span> from,<span class="keyword">char</span> temp,<span class="keyword">char</span> destination)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>) move(from,destination);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        hanoi(n<span class="number">-1</span>,from,destination,temp);</span><br><span class="line">        move(from,destination);</span><br><span class="line">        hanoi(n<span class="number">-1</span>,temp,from,destination);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    hanoi(n,<span class="string">'A'</span>,<span class="string">'B'</span>,<span class="string">'C'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上述代码中，我们在hanoi函数里定义了剩余盘子数量n，起始盘子位置from，中转盘子位置temp，目标盘子位置destination。<br>在每一步移动中，都可以分成两部分，一部分是最下面的那个盘子，一部分是剩下的盘子。每一步都可以看成先将剩下的盘子全部移动到其中转位置，再将最下面的盘子移动到其目标位置。每当发生最下面的盘子被移动到其目标位置时就输出。递归操作即可。</p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 模拟 </tag>
            
            <tag> 云霄一中月赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2018年1月月赛 打卡的汉诺塔 题解</title>
      <link href="/Answer/yxyz201801-01/"/>
      <url>/Answer/yxyz201801-01/</url>
      
        <content type="html"><![CDATA[<p>2018年1月月赛 打卡的汉诺塔 题解<br><a id="more"></a></p><h1 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h1><p>比赛总是需要打卡题~~</p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>mh和cl最近玩起了汉诺塔。<br>相传在古印度圣庙中，有一种被称为汉诺塔(Hanoi)的游戏。该游戏是在一块铜板装置上，有三根杆(编号A、B、C)，在A杆自下而上、由大到小按顺序放置64个金盘。<br>游戏的目标：把A杆上的金盘全部移到C杆上，并仍保持原有顺序叠好。<br>操作规则：每次只能移动一个盘子，并且在移动过程中三根杆上都始终保持大盘在下，小盘在上，操作过程中盘子可以置于A、B、C任一杆上。现有n个盘子，有A、B、C三个柱子。<br>mh认为汉诺塔有最优解，而cl认为没有，这可怎么办呢？请你帮忙算算吧。</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一行，包含一个正整数n，表示A柱子上有的盘子数量。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行，包含一个整数，表示最少需要的步数。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>2</p><p>输出样例#1：<br>3</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>对于60%的数据，1&lt;=n&lt;=32。<br>对于100%的数据，1&lt;=n&lt;=64。<br>样例说明：<br>按A-&gt;B，A-&gt;C，B-&gt;C的方式即可三步完成。</p><p>通过手推n=1,2,3,4的情况，可以发现ans=pow(2,n)-1，故答案最大为2^64-1。<br>观察数据范围，发现n&lt;=64。<br>因为int范围-2^31~2^31-1<br>long long范围-2^63~2^63-1<br>unsigned long long范围0~2^64-1<br>所以选用unsigned long long。<br>但又因为pow函数返回值为double类型，浮点数类型在数字很大时会发生浮点误差，因此用pow只能80分。故采用循环。</p><p>代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>,n;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++) ans*=<span class="number">2</span>;</span><br><span class="line">    ans--;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上述代码中，我们发现，极端情况时ans=2^64，超过unsigned long long的0~2^64-1的范围，发生向上溢出（上溢），此时变为(2^64)-1-(2^64-1)=0。<br>之后又发生ans–，ans本该变为-1，但因为超过unsigned long long的0~2^64-1的范围，发生向下溢出（下溢），此时变为(-1)+1+(2^64-1)=2^64-1，即是答案。</p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> 云霄一中月赛 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P1001 A+B Problem Python 题解</title>
      <link href="/Answer/luogu-p1001/"/>
      <url>/Answer/luogu-p1001/</url>
      
        <content type="html"><![CDATA[<p>A+B没什么好说的……<br>直接上Code<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a,b=(int(x) <span class="keyword">for</span> x <span class="keyword">in</span> input().split(<span class="string">' '</span>))</span><br><span class="line"><span class="keyword">print</span> (a+b)</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 题解 </tag>
            
            <tag> Luogu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017へのさよなら</title>
      <link href="/diary/end-of-2017/"/>
      <url>/diary/end-of-2017/</url>
      
        <content type="html"><![CDATA[<p>2017也算是过去了，聊表感想。<br><a id="more"></a></p><h1 id="PART1"><a href="#PART1" class="headerlink" title="PART1"></a>PART1</h1><p>不知不觉2017已经过去了。<br>实话实说，2017年，真是对我来说人生中重要的一年。经历了严酷的高三总复习，参加了大大小小的模拟考试（省质检一竟然还漏题了，笑），直到高考，直到来到XMU，直到……<br>也算是命中注定吧，为了冲XMU经院，放着自招20分不用，报了普通本一批，第一志愿经院，第二志愿软院。但是在FJ，经院收到597分，而我才考了596，因而还是来了软院。<br>若是我当时多考一分，现在又如何呢？</p><h1 id="PART2"><a href="#PART2" class="headerlink" title="PART2"></a>PART2</h1><p>除了正式的学业之外，我还参加了一些可做可不做的事。</p><ol><li>云一OI培训</li><li>云一日语部</li><li>N3考试</li><li>等等<br>但是结果？</li><li>NOIP2017无人通过初赛</li><li>集训学员学习热情忽高忽低</li><li>日语部成员竟然因为一个人退部了就热情降到冰点</li><li>N3考试尚无结果<br>又有什么事情成功了呢？只是我的一厢情愿吗？</li></ol><h1 id="PART3"><a href="#PART3" class="headerlink" title="PART3"></a>PART3</h1><p>在XMU软院，似乎借着FJTG2=的基础，大有风生水起之势。但lyh，YJQAQ，hiijar，都能在专业水平方面甩我若干条街。我能做些什么？怕是只有学习。<br>即使是学习，也面临我长期以来的问题：听不下课。<br>小学时期，我发现课不难，上课写作业的话回家可以有更多时间玩。于是一发不可收拾，直到高中毕业我都贯彻落实这一点。这直接造成我现在只有在上课时候才能写作业，也只有写作业才能保证清醒，否则我一旦认真听课，立刻睡着。<br>长期以来的习惯，如今被婊了。<br>我曾经也试过改，然后就睡着了，根深蒂固。<br>但是我能怎么办呢？我就想上课睡觉吗？我就不想改吗？</p><h1 id="PART4"><a href="#PART4" class="headerlink" title="PART4"></a>PART4</h1><p>12.30去了上海，在浦东赶星尘宝宝的演唱会，然后去松江找同学玩。<br>从松江到外滩，真的蛮久的，用时好像在2小时？结果见到了重度污染的东方明珠，还因为地铁要封站而匆匆赶回。次日早上兜兜转转，虽然中午开心地聚餐了，但是飞机险些来不及，唉，虹桥居然提前20分钟截停，还是高崎15分钟截停好。<br>只有照片，留下了一点回忆。</p><h1 id="PART5"><a href="#PART5" class="headerlink" title="PART5"></a>PART5</h1><p>想起一句名言？也许不算名言。<br>“未来永远在手中，手中抓不住的是过去”。<br>似乎没什么事情的2017，已经抓不住了。</p><p>那么，再见。</p>]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本站建站指导</title>
      <link href="/others/MyWebsiteGuide/"/>
      <url>/others/MyWebsiteGuide/</url>
      
        <content type="html"><![CDATA[<p>本站建站指导<br><a id="more"></a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol><li>注册github账号，并新建一个github仓库（Repositories）</li><li>下载node.js。<br><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></li><li>安装git。<br><a href="https://git-for-windows.github.io/" target="_blank" rel="noopener">https://git-for-windows.github.io/</a></li><li>鼠标右键安装node.js的地方，进入nodemudule文件夹，选择Git Bash，使用以下命令安装hexo<ol><li><code>npm install hexo-cli -g</code></li><li><code>npm install hexo-deployer-git –save</code></li></ol></li><li>创建放置博客文件的文件夹：hexo文件夹，如E:\hexo。最好不在中文目录下。<br>注意：以后进行hexo操作都要进入到此文件夹中；对于git操作，若无特殊说明，则也进入到此文件夹中（在此文件夹中启动Git Bash）</li><li>进入E:\hexo文件夹，鼠标右键选择“Git Bash”,执行以下命令，初始化hexo，这时候会在该文件夹中创建网站所需要的文件<ol><li><code>hexo init</code></li><li><code>npm install</code></li><li><code>hexo g</code><br>此时已经可以在本地访问。在Git Bash中输入命令：<br><code>hexo s</code><br>访问127.0.0.1:4000或localhost:4000即可看到网页预览。</li></ol></li><li>布置到github上。<ol><li>启动Git Bash，输入以下命令：<ol><li><code>git config  --global user.name &quot;your name&quot;</code></li><li><code>git config  --global user.email your_email@youremail.com</code><br>其中每条命令的最后一个参数修改为自己的数据</li></ol></li><li>输入命令：<code>ssh-keygen -t rsa -C ringoer@qq.com</code><br>此时会生成ssh密钥。命令中邮件地址替换为自己的。</li><li>输入命令：<code>cat ~/.ssh/id_rsa.pub</code><br>此时会在控制台显示一串密钥，复制下来。</li><li>打开github，打开settings，选择SSH and GPG keys，选择New SSH key。<br>title随便写，key的文本则填写刚才复制出来的密钥，然后add key。</li><li>输入命令：<code>ssh -T git@github.com</code><br>上述命令不可修改</li><li>打开hexo文件夹中的_config.yml，修改文档末尾的deploy，示例如下：<br><img src="http://pic.ringoer.com/建站教程-修改deploy.png" alt="修改deploy"><br>其中蓝色部分应替换成自己的链接。链接来源参考自己github仓库的链接（如图）：<br><img src="http://pic.ringoer.com/建站教程-github仓库链接示例.png" alt="github仓库链接示例"><br>注意：hexo的配置文件中任何<code>:</code>后面都是带一个空格的。</li></ol></li><li>绑定自己的域名<ol><li>在/hexo/source文件夹中新建一个CNAME文件，然后里面添加自己的网站域名。<br>可以在github的setting中查看是否发布成功。</li><li>到自己的域名解析中添加CNAME值，解析到username.github.io.(注意最后面有点)</li></ol></li></ol><h1 id="个性化"><a href="#个性化" class="headerlink" title="个性化"></a>个性化</h1><ol><li>下载主题。此处我选用next主题，Pisces主题风格（默认为Muse）。<br>修改/themes/next下的配置文件中的schemes字段。<br><img src="http://pic.ringoer.com/建站教程-配置主题-1.png" alt="配置主题-1"><br>取消需要的主题风格前的井字号，然后在之前的主题风格前加入井字号即可。<br>之后配置网站信息，如图。<br><img src="http://pic.ringoer.com/建站教程-配置主题-2.png" alt="配置主题-2"></li><li>底部信息。修改/themes/next下的配置文件中的footer字段。<br><img src="http://pic.ringoer.com/建站教程-配置footer.png" alt="配置footer"></li><li>文章缩略。修改/themes/next下的配置文件中的auto_excerpt字段。<br><img src="http://pic.ringoer.com/建站教程-文章缩略.png" alt="文章缩略"><br>enable改成true即可。<br>也可以手动在每篇文章中添加<code>&lt;!--more--&gt;</code>字段，在该字段后的部分会被隐藏。</li><li>修改导航栏。修改/themes/next下的配置文件中的menu字段。<br><img src="http://pic.ringoer.com/建站教程-修改导航栏.png" alt="修改导航栏"><br>想要什么选项，就去掉其之前的井字号，或自己新加入一个。<br><code>||</code>后面是该项所用的图标</li><li>菜单项图标。在 <a href="http://www.fontawesome.com.cn/icons-ui/" target="_blank" rel="noopener">http://www.fontawesome.com.cn/icons-ui/</a> 中选择。取用时要去掉前缀fa-。修改/themes/next下的配置文件中的menu字段。</li><li>取消页面动画。修改/themes/next下的配置文件中的motion字段。<br><img src="http://pic.ringoer.com/建站教程-取消页面动画.png" alt="取消页面动画"><br> enable: false即可</li><li>设置头像。修改/themes/next下的配置文件中的avatar字段。<br><img src="http://pic.ringoer.com/建站教程-设置头像.png" alt="设置头像"><br>须确认有/source/images文件夹（如没有则应新建），后在其中添加图片，如图写入路径即可。<br>该路径也可以是来自网络的图片路径。</li><li>设置社交媒体。修改/themes/next下的配置文件中的social字段。<br><img src="http://pic.ringoer.com/建站教程-社交媒体.png" alt="社交媒体"><br>icons_only默认为false，会显示各个图标的名字。若为true则仅有图标。</li><li>顶部加载进度条。修改/themes/next下的配置文件中的pace字段。<br><img src="http://pic.ringoer.com/建站教程-顶部加载进度条.png" alt="顶部加载进度条"></li><li><p>文章结尾标识。分为以下三个步骤。</p><ol><li><p>打开\themes\next\layout_macro文件夹，新建文件passage-end-tag.swig，向其中写入以下片段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------It&apos;s the end.&lt;i class=&quot;fa fa-life-ring&quot;&gt;&lt;/i&gt;Thanks for your read.-------------&lt;/div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>打开\themes\next\layout_macro\post.swig文件，进行如图操作。<br><img src="http://pic.ringoer.com/建站教程-文章结尾标识.png" alt="文章结尾标识"><br>插入的文本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">      &#123;% if not is_index %&#125;</span><br><span class="line">        &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class="line">      &#123;% endif %&#125;</span><br><span class="line">    &lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>在/themes/next下的配置文件中加入以下字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure></li></ol></li><li><p>添加外链网易云音乐。分为以下两个步骤。</p><ol><li>访问网页版网易云，找到合适的歌曲/歌单，生成分享外链，复制html代码。</li><li>找到合适的位置插入这段代码。本博客插入在\source\about\index.md中图片的后面（如图）。<br><img src="http://pic.ringoer.com/建站教程-外链网易云音乐.png" alt="外链网易云音乐"></li></ol></li><li>本地可视化编辑文章。启动git bash，执行以下命令。<br><code>npm i hexo-admin –save</code><br>之后执行hexo s时，访问 localhost:4000/admin 即可进入文章后台。<br>此处文章编辑使用markdown。</li><li>文章置顶。把需要置顶的文章的发布时间改到200年之后（233333333）。</li><li>修改菜单中的选项名称。打开\themes\next\language\zh-Hans.yml，找到menu字段，进行如图配置。<br><img src="http://pic.ringoer.com/建站教程-导航栏项目改名.png" alt="导航栏项目改名"></li></ol><h1 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h1><ol><li>拷贝原有hexo文件夹至新电脑</li><li>重新配置git和node.js</li><li><p>安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure></li><li><p>进入hexo文件夹，执行以下指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></li><li><p>重新配置SSH密钥</p></li><li>正常使用</li></ol><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://blog.csdn.net/qq_27754983/article/details/76143478" target="_blank" rel="noopener">https://blog.csdn.net/qq_27754983/article/details/76143478</a><br><a href="https://www.jianshu.com/p/21c94eb7bcd1" target="_blank" rel="noopener">https://www.jianshu.com/p/21c94eb7bcd1</a><br><a href="https://www.jianshu.com/p/393d067dba8d" target="_blank" rel="noopener">https://www.jianshu.com/p/393d067dba8d</a><br><a href="https://www.jianshu.com/p/9f0e90cc32c2" target="_blank" rel="noopener">https://www.jianshu.com/p/9f0e90cc32c2</a><br><a href="https://blog.csdn.net/eternity1118_/article/details/71194395?ref=myread" target="_blank" rel="noopener">https://blog.csdn.net/eternity1118_/article/details/71194395?ref=myread</a></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 建站指导 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Luogu P2308 添加括号 题解及心得</title>
      <link href="/Answer/luogu-p2308/"/>
      <url>/Answer/luogu-p2308/</url>
      
        <content type="html"><![CDATA[<p>Luogu P2308 添加括号 题解及心得<br><a id="more"></a></p><h1 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h1><p>给定一个正整数序列a(1)，a(2)，…，a(n),(1&lt;=n&lt;=20)<br>不改变序列中每个元素在序列中的位置，把它们相加，并用括号记每次加法所得的和，称为中间和。<br>例如:<br>给出序列是4，1，2，3。<br>第一种添括号方法:<br>((4+1)+(2+3))=((5)+(5))=(10)<br>有三个中间和是5，5，10，它们之和为:5+5+10=20<br>第二种添括号方法<br>(4+((1+2)+3))=(4+((3)+3))=(4+(6))=(10)<br>中间和是3，6，10，它们之和为19。</p><h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>现在要添上n-1对括号，加法运算依括号顺序进行，得到n-1个中间和，求出使中间和之和最小的添括号方法。</p><h1 id="输入输出格式"><a href="#输入输出格式" class="headerlink" title="输入输出格式"></a>输入输出格式</h1><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>共两行。 第一行，为整数n。(1&lt; =n&lt; =20) 第二行，为a(1),a(2),…,a(n)这n个正整数，每个数字不超过100。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出3行。 第一行，为添加括号的方法。 第二行，为最终的中间和之和。 第三行，为n-1个中间和，按照从里到外，从左到右的顺序输出。</p><h1 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h1><p>输入样例#1：<br>4<br>4 1 2 3</p><p>输出样例#1：<br>(4+((1+2)+3))<br>19<br>3 6 10</p><p>显然加括号过程是依赖最小中间和的，而最小中间和势必从一个区间中得出，故不难看出这是一个区间dp。<br>不难得出状态转移方程：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f[i][j]=min(f[i][j],f[i][k]+f[k+<span class="number">1</span>][j]+sum[j]-sum[i<span class="number">-1</span>])</span><br></pre></td></tr></table></figure></p><p>解题思路：</p><ol><li><p>先区间dp，逆向枚举i，正向枚举j，阶段k=i,k&lt;j。由于括号添加时要尽可能靠左，所以当新值&lt;=f[i][j]时即发生更新。<br>//求最小值时i逆序j正序，最大值时都正序</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=n<span class="number">-1</span>;i;i--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(k=i;k&lt;j;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> t=f[i][k]+f[k+<span class="number">1</span>][j]+sum[j]-sum[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">if</span>(t&lt;=f[i][j]) f[i][j]=t,g[i][j]=k;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>为了能解决第二问和第三问，令g[i][j]=k保存从下标i~j之间断点k的位置。</p></li><li><p>对于第二问，递归查找每个点左边有多少个左括号，右边有多少个右括号，然后输出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line">    l[x]++;</span><br><span class="line">    r[y]++;</span><br><span class="line">    search(x,g[x][y]);</span><br><span class="line">    search(g[x][y]+<span class="number">1</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;l[i];j++) <span class="built_in">printf</span>(<span class="string">"("</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line">    <span class="keyword">if</span>(r[i]==<span class="number">0</span>&amp;&amp;i&lt;n) <span class="built_in">printf</span>(<span class="string">"+"</span>);</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;r[i];j++) <span class="built_in">printf</span>(<span class="string">")"</span>);</span><br><span class="line">    <span class="keyword">if</span>(r[i]&gt;<span class="number">0</span>&amp;&amp;i&lt;n) <span class="built_in">printf</span>(<span class="string">"+"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对于第三问，递归求每个中间和，然后输出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line">    dfs(x,g[x][y]);</span><br><span class="line">    dfs(g[x][y]+<span class="number">1</span>,y);</span><br><span class="line">    ans[top++]=sum[y]-sum[x<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>心得：虽然大部分区间dp是在最外层枚举阶段，但是偶尔也要像这题这样最内层枚举阶段吧。//还有可能是我没想到最外层枚举阶段的做法（小声）。<br>总之，終わり！<br>&lt;附送全篇代码&gt;<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn(a,b) (a&gt;b)?a:b</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> minn(a,b) (a&lt;b)?a:b</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxnn(a,b,c) (a&gt;b&amp;&amp;a&gt;c)?a:((b&gt;a&amp;&amp;b&gt;c)?b:c)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">30</span>]=&#123;<span class="number">0</span>&#125;,f[<span class="number">30</span>][<span class="number">30</span>],g[<span class="number">30</span>][<span class="number">30</span>],sum[<span class="number">30</span>]=&#123;<span class="number">0</span>&#125;,l[<span class="number">30</span>],r[<span class="number">30</span>],ans[<span class="number">30</span>],top;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line">    l[x]++;</span><br><span class="line">    r[y]++;</span><br><span class="line">    search(x,g[x][y]);</span><br><span class="line">    search(g[x][y]+<span class="number">1</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span>;</span><br><span class="line">    dfs(x,g[x][y]);</span><br><span class="line">    dfs(g[x][y]+<span class="number">1</span>,y);</span><br><span class="line">    ans[top++]=sum[y]-sum[x<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,i,j,k;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        top=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line">        <span class="built_in">memset</span>(sum,<span class="number">0</span>,<span class="keyword">sizeof</span>(sum));</span><br><span class="line">        <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">        <span class="built_in">memset</span>(l,<span class="number">0</span>,<span class="keyword">sizeof</span>(l));</span><br><span class="line">        <span class="built_in">memset</span>(r,<span class="number">0</span>,<span class="keyword">sizeof</span>(r));</span><br><span class="line">        <span class="built_in">memset</span>(g,<span class="number">0</span>,<span class="keyword">sizeof</span>(g));</span><br><span class="line">        <span class="built_in">memset</span>(f,<span class="number">1</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line">            f[i][i]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) sum[i]=a[i]+sum[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(i=n<span class="number">-1</span>;i;i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(k=i;k&lt;j;k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">int</span> t=f[i][k]+f[k+<span class="number">1</span>][j]+sum[j]-sum[i<span class="number">-1</span>];</span><br><span class="line">                    <span class="keyword">if</span>(t&lt;=f[i][j]) f[i][j]=t,g[i][j]=k;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        search(<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;l[i];j++) <span class="built_in">printf</span>(<span class="string">"("</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>,a[i]);</span><br><span class="line">            <span class="keyword">if</span>(r[i]==<span class="number">0</span>&amp;&amp;i&lt;n) <span class="built_in">printf</span>(<span class="string">"+"</span>);</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;r[i];j++) <span class="built_in">printf</span>(<span class="string">")"</span>);</span><br><span class="line">            <span class="keyword">if</span>(r[i]&gt;<span class="number">0</span>&amp;&amp;i&lt;n) <span class="built_in">printf</span>(<span class="string">"+"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n%d\n"</span>,f[<span class="number">1</span>][n]);</span><br><span class="line">        dfs(<span class="number">1</span>,n);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;top;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;top<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">"%d "</span>,ans[i]);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d"</span>,ans[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Answer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 题解 </tag>
            
            <tag> Luogu </tag>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语言-11-竞赛相关的其余操作及编程时应有的良好习惯</title>
      <link href="/cpp/cpp-11/"/>
      <url>/cpp/cpp-11/</url>
      
        <content type="html"><![CDATA[<p>待更新<br><a id="more"></a><br>缩进<br>高内聚，低耦合<br>freopen<br>inline</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语言-10-指针</title>
      <link href="/cpp/cpp-10/"/>
      <url>/cpp/cpp-10/</url>
      
        <content type="html"><![CDATA[<p>待更新<br><a id="more"></a><br>地址（分配地址，取地址符号，取值符号）<br>(*p)++<br>*p++<br>结构体指针（->）<br>链表</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语言-9-结构体与运算符重载</title>
      <link href="/cpp/cpp-9/"/>
      <url>/cpp/cpp-9/</url>
      
        <content type="html"><![CDATA[<p>本章学习结构体与运算符重载。<br><a id="more"></a><br>在各路题目中，我们有时候会看到，一个主体有很多个属性。比如你是一个学生，你可以被拆分为以下属性的集合体：</p><ol><li>姓名</li><li>性别</li><li>年龄</li><li>年级</li><li>班级<br>……</li></ol><p>而且，其余的学生也都是跟你一样有这些属性。那么，我们现在假设一个年级有1000人，难道我们要针对每个属性都开一个1000单位的数组吗？<br>这时候我们就可以使用结构体，把这些属性整合，产生一个新的类型。<br>比如上文中的属性，我们就可以整合为一个student类型。写法如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span>//<span class="title">struct</span>是必须的，不可更改；后面的<span class="title">student</span>则可以自定义</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;<span class="comment">//用一个名为name的字符串保存姓名</span></span><br><span class="line"><span class="keyword">char</span> sex;<span class="comment">//假设我们用M和W来表示Man和Woman，那么可以用一个字符型来保存</span></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">int</span> grade;</span><br><span class="line"><span class="keyword">int</span> <span class="class"><span class="keyword">class</span>;</span><span class="comment">//分别用三个int类型变量来保存年龄，年级和班级</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;name&lt;&lt;” ”&lt;&lt;sex&lt;&lt;” ”&lt;&lt;age&lt;&lt;” ”&lt;&lt;grade&lt;&lt;” “&lt;&lt;<span class="class"><span class="keyword">class</span>&lt;&lt;endl;</span></span><br><span class="line"><span class="class">&#125;//该函数可以输出5个变量</span></span><br><span class="line"><span class="class">&#125;;//注意这里有个分号，不要漏了</span></span><br></pre></td></tr></table></figure></p><p>通过上文的代码段，我们就建立了一个结构体类型，类型名称为student。其下属有5个变量，我们称之为“成员变量”，又叫“成员表”；还有1个函数，我们称之为“成员函数”。<br>这样，我们就可以总结一个格式：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> 类型名称</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">成员表</span><br><span class="line">成员函数</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>没有严格的顺序，但一般成员函数写在成员表之后，因为变量/数组等必须先定义才能调用。<br>注意结构体的右大括号后必须有个分号，不要漏掉。</p><p>那么，我们如何使用结构体？</p><p>结构体类型，俗称自定义类型。因此，可以效仿其它类型的定义方法。如上文中的student，此时就可以用作数据类型。如，我们称<code>int a;</code>为定义一个名为a的int类型变量。同样的，我们可以<code>student a;</code>来定义一个名为a的student类型变量。</p><p>因此，我们可以写出如下代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">student a,b;<span class="comment">//定义两个student类型的变量，分别名为a和b</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义student类型的变量也可以写在struct student的右大括号后分号前。写法如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;a,b;<span class="comment">//定义两个student类型的变量，分别名为a和b</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果采取上述方法定义结构体变量，还可以不写结构体类型的类型名称。如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;a,b;<span class="comment">//定义两个student类型的变量，分别名为a和b</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时该结构体类型是一次性类型，因为没有填写结构体类型名称，所以不可以被再次使用。</p><p>讲完了结构体类型变量的定义，现在我们来讲一下如何访问结构体变量的成员。</p><p>假设我们有如下结构体及变量定义：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name; </span><br><span class="line"><span class="keyword">int</span> age; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;name&lt;&lt;” ”&lt;&lt;age &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;a;</span><br></pre></td></tr></table></figure></p><p>则我们可以通过“.”，就是跟小数点一样的那个点，来访问结构体变量的成员。<br>示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name; </span><br><span class="line"><span class="keyword">int</span> age; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;name&lt;&lt;” ”&lt;&lt;age &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line">&#125;a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a.name&gt;&gt;a.age;<span class="comment">//分别输入student类型变量a的成员变量name和age</span></span><br><span class="line">a.show();<span class="comment">//调用student类型变量a的成员函数show</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如上示例中，我们可以通过“.”来访问结构体变量的成员。此时“.”叫做“成员访问符”。访问到成员变量或成员数组或成员函数的时候，可以如同一般的变量/数组/函数一般使用。</p><p>对于结构体类型，我们还可以对其进行运算符重载。<br>如，设有以下结构体类型及变量定义：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>//<span class="title">complex</span>表示复数</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b;<span class="comment">//a表示实部，b表示虚部</span></span><br><span class="line">&#125;x,y,z;</span><br></pre></td></tr></table></figure></p><p><a href="https://baike.baidu.com/item/%E5%A4%8D%E6%95%B0/254365" target="_blank" rel="noopener">关于复数</a></p><p>显然，我们不能直接使用+号来做到z=x+y;只能分别写z.a=x.a+y.a;和z.b=x.b+y.b;这样就显得很繁琐。<br>那么，该如何才能用+号直接操作呢？<br>我们可以在struct complex中进行对于+号的重载，格式如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>//<span class="title">complex</span>表示复数</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b;<span class="comment">//a表示实部，b表示虚部</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">complex</span> <span class="keyword">operator</span> +(<span class="keyword">const</span> <span class="keyword">complex</span>&amp; p,<span class="keyword">const</span> <span class="keyword">complex</span>&amp; q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">complex</span> ans;</span><br><span class="line">ans.a=p.a+q.a;</span><br><span class="line">ans.b=p.b+q.b;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;x,y,z;</span><br></pre></td></tr></table></figure></p><p>这样就可以在程序的其余位置，对complex类型的变量使用+号直接操作了。<br>同理，除加号外，“-”，“*”，“/”，“%”也可以采用这样的方式重载，格式为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> 类型名 <span class="keyword">operator</span> 符号(<span class="keyword">const</span> 类型名&amp; a,<span class="keyword">const</span> 类型名&amp; b)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上，是对算术运算符的重载。</p><p>再设有以下结构体类型及变量定义：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">double</span> chinese,math;<span class="comment">//用来表示语文成绩和数学成绩</span></span><br><span class="line">&#125;a,b;</span><br></pre></td></tr></table></figure></p><p>这样虽然可以使用==和!=来判断a和b是否相等（所有成员变量的值完全相同与否），但不能直接使用大于号或小于号来判断a和b谁大谁小，因为它不知道要用哪个来判断。所以我们需要重载一下，告诉程序怎么处理。示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">double</span> chinese,math;<span class="comment">//用来表示语文成绩和数学成绩</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;(<span class="keyword">const</span> student&amp; p,<span class="keyword">const</span> student&amp; q)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(p.chinese!=q.chinese) <span class="keyword">return</span> p.chinese&gt;q.chinese;</span><br><span class="line"><span class="keyword">return</span> p.math&gt;q.math;</span><br><span class="line">&#125;</span><br><span class="line">&#125;a,b;</span><br></pre></td></tr></table></figure></p><p>这样就可以使得大于号能判断a和b的大小（小于号还是不行）：在判断是否a&gt;b时，先判断a的语文成绩是否比b高，若是则a大；若语文成绩相等则判断数学成绩，若a数学成绩较高则a大；数学成绩也相等则a不比b大。<br>同理，可以对其它逻辑符号进行重载，格式为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> 符号(<span class="keyword">const</span> 类型名&amp; a,<span class="keyword">const</span> 类型名&amp; b)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上，是对逻辑运算符的重载。</p><p>再设有以下结构体类型及变量定义：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name; </span><br><span class="line"><span class="keyword">int</span> age; </span><br><span class="line">&#125;a;</span><br></pre></td></tr></table></figure></p><p>这样我们是不能使用cin和cout直接输入和输出的，需要重载流插入符合流输出符才行。示例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name; </span><br><span class="line"><span class="keyword">int</span> age; </span><br><span class="line"><span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span> &gt;&gt;(istream&amp; in,student&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">in&gt;&gt;x.name&gt;&gt;x.age;</span><br><span class="line"><span class="keyword">return</span> in;</span><br><span class="line">&#125;<span class="comment">//对输入的重载，使得可以使用cin直接输入student类型的变量</span></span><br><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt;(ostream&amp; out,student&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">out&lt;&lt;x.name&lt;&lt;<span class="string">" "</span>&lt;&lt;x.age;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;<span class="comment">//对输出的重载，使得可以使用cout直接输出student类型的变量</span></span><br><span class="line"><span class="comment">//为了符合一般的使用习惯，endl一般不写在对&lt;&lt;的重载中</span></span><br><span class="line">&#125;a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上便是对输入和输出的重载。格式为：<br>对输入重载：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span> &gt;&gt;(istream&amp; in,类型名&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">in&gt;&gt;变量<span class="number">1</span>&gt;&gt;变量<span class="number">2</span>;<span class="comment">//可以更多</span></span><br><span class="line"><span class="keyword">return</span> in;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对输出重载：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt;(ostream&amp; out,类型名&amp; x)</span><br><span class="line">&#123;</span><br><span class="line">out&lt;&lt;变量<span class="number">1</span>&lt;&lt;” “&lt;&lt;变量<span class="number">2</span>;<span class="comment">//可以更多</span></span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上，是对输入输出运算符的重载。</p><p>还可以对=,(),[],->四种运算符进行重载，但这已经严重超纲，有兴趣的同学可以自行百度一下。</p><p>第九章到此结束。</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语言-8-递归与递推</title>
      <link href="/cpp/cpp-8/"/>
      <url>/cpp/cpp-8/</url>
      
        <content type="html"><![CDATA[<p>本章学习递归/递推相关知识。<br><a id="more"></a><br>首先，请大家熟悉对于斐波那契数列第n项的定义。<br><a href="https://baike.baidu.com/item/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/99145?fr=aladdin" target="_blank" rel="noopener">斐波那契数列</a><br>接下来，我们将借助斐波那契数列来说明递归和递推。  </p><h1 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h1><p>在上一章中我们学习了自定义函数，知道可以在主函数中，或其它函数中调用自定义函数。但其实，不止不同函数之间可以相互调用，函数自己也可以调用自己。这个过程称之为递归。<br>递归的示例程序如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>||x==<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> f(x<span class="number">-1</span>)+f(x<span class="number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;f(x);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，在函数f中又调用了函数f。函数f内部的运行可以解释为下述过程：</p><ol><li>判断x是否与1相等或x是否与2相等，若是，则函数返回值为1</li><li>若1中的判断失败，则函数返回值为【参数为x-1的函数f的返回值】与【参数为x-2的函数f的返回值】之和。</li></ol><p>如x=4，则调用过程如图所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">                       f(4)</span><br><span class="line"></span><br><span class="line">       f(3)                        f(2)</span><br><span class="line"></span><br><span class="line">f(2)       f(1)                     1</span><br><span class="line"></span><br><span class="line">1            1</span><br></pre></td></tr></table></figure></p><p>也就是说，函数首先发现要计算f(4)，但此时x=4，不满足x与1相等或x与2相等，所以将f(4)展开为f(3)和f(2)，先计算f(3)和f(2)的值，再相加后，作为f(4)的返回值。<br>接下来根据从左往右执行的规则，函数要计算f(3)。计算f(3)的过程仍然与上述过程类似，展开为f(2)和f(1)后求和。<br>接下来求解由f(3)展开而得到的f(2)，发现符合x与2相等，因此f(2)返回1<br>求解由f(3)展开而得的的f(1)也同理返回1，因此f(3)=1+1=2，返回2<br>现在f(3)求解完成，再求解由f(4)展开的f(2)，得1，所以f(4)=f(3)+f(2)=2+1=3，因此f(4)最终返回值为3。<br>需要注意的是，在使用递归的时候，我们一定要给函数一个边界，让它不会在无限的自调用中迷失。该边界称为递归边界，没有边界的递归将如无限循环一般，必然造成超时。<br>以上就是斐波那契数列的递归过程。<br>但是在实际运行的时候我们发现，当求解斐波那契数列的项数较高的时候会卡在运行中很久，造成超时（TLE）。为什么呢？从上文我们对f(4)的分析就可以看出，f(2)被计算了2次。由此可以推断，当求解f(10)甚至f(100)的时候，会产生大量重复的计算过程，无意义地消耗了时间。此时，我们采用递归求解便不再合理，应该换用递推。 </p><h1 id="递推"><a href="#递推" class="headerlink" title="递推"></a>递推</h1><p>在上文中，求斐波那契数列第n项，我们采用的是从f(n)开始，一层层向下展开。而根据斐波那契数列的特点，我们其实可以从第1项开始向上推，直到第n项。代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x,f[<span class="number">1000</span>];</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;x;</span><br><span class="line">f[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">f[<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">3</span>;i&lt;=x;i++)</span><br><span class="line">f[i]=f[i<span class="number">-1</span>]+f[i<span class="number">-2</span>];</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;f[x];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于上述代码，求解f[4]的过程就变为如下描述：</p><ol><li>已知x==1或x==2时，f[x]=1，所以初始化令f[1]=1,f[2]=1。</li><li>因为f[1]和f[2]都已经赋值，所以接下来从f[3]开始计算就可以。枚举f[3]~f[x]的每个单位，根据f[x]=f[x-1]+f[x-2]来求解。此处f[x]=f[x-1]+f[x-2]称为递推式。</li><li>求解完成，输出f[x]。<br>可以发现，递推求解是需要数组配合的。与递归不同的是，递推是采用空间换时间的做法，将每次求出来的f[x]保存下来，避免了重复求解，大大节约了时间。<br>以上，就是对递归和递推的基本描述。</li></ol><p>第八章到此结束。</p><p>本章练习：<br><a href="https://www.luogu.org/problemnew/show/T17548" target="_blank" rel="noopener">T17548 斐波那契数列</a><br><a href="https://www.luogu.org/problemnew/show/T17551" target="_blank" rel="noopener">T17551 Pell数列</a><br><a href="https://www.luogu.org/problemnew/show/P1028" target="_blank" rel="noopener">P1028 数的计算</a><br><a href="https://www.luogu.org/problemnew/show/P1036" target="_blank" rel="noopener">P1036 选数</a><br><a href="https://www.luogu.org/problemnew/show/P1217" target="_blank" rel="noopener">P1217 [USACO1.5]回文质数 Prime Palindromes</a><br><a href="https://www.luogu.org/problemnew/show/P1706" target="_blank" rel="noopener">P1706 全排列问题</a></p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语言-7-函数的自定义与函数的类型</title>
      <link href="/cpp/cpp-7/"/>
      <url>/cpp/cpp-7/</url>
      
        <content type="html"><![CDATA[<p>本章学习函数相关知识。<br><a id="more"></a><br>采用以下程序段进行说明：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=x;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> a;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;f(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>样例输入1：1.1<br>样例输出1：1<br>样例输入2：0.9<br>样例输出2：0</p><p>可以看出，我们在公共域（又称全局）里定义了两个函数，一个是int类型的f（自带一个参数，是double类型的x），另一个就是main。<br>main就不多说了，毕竟int main()是强制要求，不能改动。但是这个f就很有意思了。<br>首先，我们学到过在公共域直接int f的话表示定义一个int类型的名为f的变量，但现在为什么是个函数呢？那就是因为f后面的小括号了。那么就有以下定义及使用规范四点。  </p><ol><li>满足形如【数据类型 名称(参数列表)】的程序段，就是函数。</li><li>自定义函数的函数体只能写在公共域或自定义类型内。其中，当自定义函数的函数体写在公共域内时：<ol><li>若自定义函数的函数体写在main函数之前，则可以不在main函数里写其定义语句，因为其函数体那边就已经定义了。</li><li>若自定义函数的函数体写在main函数之后，则必须在main函数里写其定义语句。总之就是必须满足先定义再使用。</li><li>只要是函数，就必须使用大括号来告诉程序哪些语句属于这个函数。</li><li>小括号里可以放空，也可以不放空，定义若干个参数。 </li></ol></li></ol><p>前3点都是很好懂的，主要是这个第4点了。<br>在文章开头的程序段中，我在f后面的空格里定义了一个double类型的x作为f的自带参数（当然也可以定义多个，中间用逗号隔开就行了），在main里定义了一个double类型的a，在f里int了一个a（根据变量的作用域，这个a属于不同的域，是不算重复的）。并且，在输入a之后，我让程序输出了f(a)的值。过程如下：</p><ol><li>cout检查到要输出f(a)。</li><li>按照填写的先后顺序访问填入f后面的括号中的变量所对应的值，并填入对应的位置（这个过程叫传递参数）。在本例中是访问main中a的值，填入f的括号中，使f的double类型的x等于main的double类型的a，并执行f。</li><li>进入f，定义一个属于f的int类型的a，使这个a等于x。</li><li>使f(x)返回a的值，并且此值重置为int类型。</li><li>返回main，输出f(a)此时的值。  </li></ol><p>关于第2点，举个例子。比如int f(int x,int y,int z)，那么main里如果定义了a，b，c三个变量的话，cout&lt;&lt;f(a,b,c);就是输出当f中的x等于main的a，f中的y等于main的b，f中的z等于main中的c时，f(x,y,z)返回的值。<br>在上述过程中，第二步所提到的那些值里，在main中填入f函数括号内的，称为“实际参数”；而在传递到f函数，开始执行f函数时，f函数中的x称为“形式参数”。</p><p>回到本文的例子，在返回f(x)的值之前，程序中经历了以下3次的数据类型转换：</p><ol><li>获得double类型的待传递参数的值，转换为被传递参数的double类型，并填入被传递参数。</li><li>获得double类型的f里的x的值，转换为int类型的值，并赋值给f里的a。</li><li>因为函数f返回f里a的值，所以获得int类型的f里的a的值，转换为int类型的值，并赋值给整个函数f，然后结束f。<br>（如果你这时return 0的话，函数f一定就返回0，那输出也就是0了）</li></ol><p>简而言之，在return某个值之前，每个自定义函数都和main一样，可以执行程序语句，不过main以外的其它自定义函数需要被某个正在执行的函数调用就是了。而一旦return某个值，函数就相当于变量，产生一个确定的值，但这个值是一次性的，下次函数再被调用时，依然要重新经过一遍语句的执行来得出一个新的结果。</p><p>以上就是函数的自定义了。那么，函数的类型又是什么呢？<br>有的时候，你自定义一个函数，是为了让它执行一段语句，并不是为了让它返回一个值。这时，函数的类型可以都使用int，结尾都写return 0；也可以令函数的类型为void（英文翻译：虚空，此处用作“空类型”之意），结尾不写return 0;<br>需要注意的是，void类型只能用于自定义函数，不可用于main函数，更不可用于一般变量/数组等等。且void类型的函数也可以强制退出，即，使用return;语句。此时return后不能写值，应该直接写分号，当void类型函数在执行中遇到return;时即结束。<br>但是，更多的时候，你是为了让这个自定义函数返回一个值。这时候，函数的类型必须要与你要得到的值相同。如果你想让函数返回一个double类型的值，就必须定义函数为double类型，不可以是float类型，更别说int了。<br>不过，函数后面的括号里的自带参量的类型，就没有特别要求，依你的需要而定。</p><p>那么，又是什么时候要使用自定义函数呢？这就涉及到编程时的一个重要思想：高内聚，低耦合。<br>高内聚，就是相同或相似功能的语句块尽可能集中在一起。<br>低耦合，就是功能差异较大的语句块尽可能不要集中在一起。<br>那么，我们就需要用自定义函数，来表示一个功能。这个把功能实现为自定义函数的过程，叫做“封装”。<br>这大概可以理解为，你手里有一件事情，这件事可以分解为几个不同的步骤，不同的步骤可以起到不同的效果（功能）。然后你把这几件事分配给另外的人（自定义函数），让他们替你去做。再结合上文的话，你要告诉他具体步骤怎么做，这就是他的函数体；还要告诉他应该用什么东西来做，这就是他的参数。大概就是这样了。</p><p>接下来，如何使用自定义函数呢？<br>在之前的学习中，我们已经使用过诸如pow等数学函数。自定义函数也可以如同数学函数一般调用。如同本文开头的程序段，我们在主函数中输出语句处调用了自定义函数f。自然的，我们也可以在主函数其它区域调用自定义函数。这些地方都属于主函数的函数体。<br>那么我们可以给出总结：可以在任意函数体内的任意合理位置调用任意函数（主函数除外）。<br>比如，我们可以在自定义函数中输出helloworld，如下文代码：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pr</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"helloworld"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    pr();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在上述代码段中，我们定义了一个自定义函数pr。因为它不需要返回值，所以可以使用void类型；又因为它只是用来输出一个字符串常量，所以不需要参数，因此参数列表为空。<br>如上，即是自定义函数的使用方法。</p><p>第七章到此结束。</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语言-6-变量和语句的作用域</title>
      <link href="/cpp/cpp-6/"/>
      <url>/cpp/cpp-6/</url>
      
        <content type="html"><![CDATA[<p>本章学习作用域相关知识。<br><a id="more"></a><br>采用以下程序段进行说明：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(a&lt;<span class="number">10</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">3</span>;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="keyword">while</span>(b&lt;<span class="number">5</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> c=<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(c&gt;=<span class="number">4</span>) <span class="keyword">break</span>;</span><br><span class="line">            b++;</span><br><span class="line">            c+=b;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>先说明一下，a++的效果等于a+=1等于a=a+1，不过a++的执行速度比a=a+1快就是了。同理c+=b是等于c=c+b的。<br>我们可以看到，在本程序段中有4个变量，分别是x，a，b，c，定义的位置各不相同，甚至x是定义在int main()之外的。这是什么意思呢？<br>原来，变量不是定义了之后就通用的，而是有所属范围的。<br>定义在int main外的，不属于任何函数的x，是可以在本程序所有函数中调用的。它定义的位置叫做公共域。而定义在int main里的a，是属于main而不是公共域的。它在main结束时就会清空，不能再访问。也就是说，x可以在程序的任何函数中被访问和修改，而a只能在main里被访问和修改。<br>但是b，c去哪了？我们可以看到，在进入第1个while之后，b才被定义，而c更是定义在第2个while里，且这两个while都属于main，第2个while又属于第1个while。<br>所以，变量b只能在第1个while中被访问和修改，变量c只能在第2个while中被修改。<br>又因为第2个while属于第1个while，所以它能访问和修改变量b，而两个while都属于main，所以能访问和修改变量a。但反过来，不在第1个while里的话，main和其它定义在公共域的函数是不能访问和修改变量b的。同理，不是在第2个while里的话，即使是第1个while里的其它语句，也不能访问和修改变量c。<br>至此，我们能得到一个上下级关系：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">程序本体</span><br><span class="line">——main</span><br><span class="line">————while</span><br><span class="line">——————while</span><br></pre></td></tr></table></figure></p><p>下级可以访问和修改上级中已经定义的变量，而上级不可以访问和修改定义在下级中的变量。<br>根据这套理论，你能猜到第2个while里的break作用范围有多大了吗？就是只能跳出第2个while而已，对第1个while半毛钱影响都没有。continue也是一样的。<br>但是return 0不能乱写，这是特例，所有int类型的函数，比如main，在碰到return 0时会直接结束这个函数自身，跳过下面的所有语句。基于这个特性，也可以用return 0来当程序断点，用来检测当编译成功却运行时错误时哪些语句有问题。<br>当然，不止是return 0，事实上自定义函数和main，碰到return时，不管return是什么都会结束函数。只不过main要求一定要return 0罢了。</p><p>第六章到此结束。</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语言-5-字符型，字符数组与字符串</title>
      <link href="/cpp/cpp-5/"/>
      <url>/cpp/cpp-5/</url>
      
        <content type="html"><![CDATA[<p>本章学习字符相关内容。<br><a id="more"></a><br>让我们从介绍字符型（char）开始。</p><h1 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h1><p>字符型，顾名思义，就是可以保存字符的数据类型，与int、double等保存数字的略有区别。什么区别呢？</p><ol><li>表示上的区别<br>比如我们要表示数字1，则int a=1;即可。<br>而若要表示字符1，则需要<code>char a=&#39;1&#39;;</code><br>注意到字符1被单引号所围住。这就是表示字符的方法。<br>若写char a=1;则会令a被赋值为一个与字符1毫无关系的符号。</li><li>使用上的区别<br>首先声明三个概念：数字、数值、字符。<br>毋庸置疑的是，在计算机内部，不论是数字还是字符，都是转化为数值进行处理的。<br>显然，数字1的数值也是1，以此类推。<br>但是字符1的数值就不是1了，而是49。<br>为什么呢？可以查询一下ASCII码，此处不多解释。<br>常见的字符与其数值：<br>‘0’=48,’1’=49，以此类推<br>‘A’=65,’B’=66，以此类推<br>‘a’=97,’b’=98，以此类推<br>但有时候我们还会经常看到’\n’,’\0’之类的。这些是什么呢？这些叫转义字符。其中，’\0’表示空字符，’\n’表示换行符。<br>*<code>printf(“\n”);</code>与<code>cout&lt;&lt;endl;</code>一致。<br>数值匹配如下：<br>‘\0’=0<br>‘\n’=10<br>查看数值匹配的方法：<ol><li>cout&lt;&lt;int(‘0’);可以查看字符0的ascii码（数值）</li><li>printf(“%d”,’0’);也可以实现1的效果</li><li>cout&lt;&lt;char(48);可以查看数值48对应的字符</li><li>printf(“%c”,48);也可以</li></ol></li></ol><p>以上，就是字符型的简单表示。<br>接下来是字符数组。</p><h1 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h1><p>在前几章中，我们已经学习了数组的相关知识。那么很显然，字符数组的声明应该满足下述格式：<br><code>char str[100];</code><br>本语句声明了一个名为str的char类型数组，有100个单位可供使用。<br>我们知道，对于数组，其内部存储的时候是一个个值连续存储的。那么对于字符数组，因为字符型的值是字符，所以字符数组内部就是一个个字符连续存储的。如将“helloworld”保存在上述字符数组str内，则内部表示为’h’,’e’,’l’,’l’,’o’,’w’,’o’,’r’,’l’,’d’，如同一连串的字符，此时便可称之为字符串。<br>对于字符数组的初始化，除了前述的对于数组的通用初始化方法，还可以使用双引号，也就是用字符串常量直接初始化。如：</p><ol><li>采用通用方法：<code>char str[100]={&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39;w&#39;,&#39;o&#39;,&#39;r&#39;,&#39;l&#39;,&#39;d&#39;};</code></li><li>采用双引号：<code>char str[100]=&quot;helloworld&quot;;</code></li></ol><p>注意到采用通用方法时，需要大括号，而采用字符串常量时不需要大括号。</p><p>上面我们为str数组开设了100个单位，并且注意到”helloworld”只有10个字符。那么我们可不可以只开10个单位呢？问题可以转化成，以下两种写法可不可行？</p><ol><li>采用通用方法：<code>char str[10]={&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;,&#39;w&#39;,&#39;o&#39;,&#39;r&#39;,&#39;l&#39;,&#39;d&#39;};</code></li><li>采用双引号：<code>char str[10]=&quot;helloworld&quot;;</code></li></ol><p>答案是，两种都不可行。</p><p>在第一种中，虽然我们显式指定了str数组各个位上的值，但编译时其会在结尾补一个空字符’\0’，导致其最终有11个元素，超出了str数组10个元素的限制，引起访问错误。所以，在使用通用方法进行对字符数组的初始化时，应该预留足够的位置，至少应该是显示指定的字符数+1。</p><p>在第二种中，我们直接使用字符串常量来对字符数组进行初始化，依然会有第一种的问题，所以仍然需要多留一位。但要注意的是，第一种引发的是运行时的紊乱，而第二种引发的是编译错误，相比第一种更加容易发现。<br>特殊的，可以采用这样的写法来对字符数组进行初始化：<code>char str[]=&quot;helloworld&quot;;</code><br>这样的写法可以不指定数组的长度，其内部会自动适配长度。但仅仅在对字符数组使用字符串常量进行初始化时可以不指定数组长度，其它类型/写法均不可以。</p><p>*仅在定义的时候可以用字符串常量对其进行赋值，在之后便不再可行，会引发编译错误。后续要操作的话只能按普通数组的方法。</p><p>对于二维数组，可以采用下述方法进行初始化：<br><code>char a[][10]={&quot;hello&quot;,&quot;hi&quot;};</code><br>第一维可以放空，若填写则不得少于字符串数量。<br>第二维必填，不得少于最长的字符串长度+1。</p><p>一般不需要使用更多维的char数组。</p><p>在cstring头文件中，提供了下列函数来对字符数组进行操作。<br>基本假设：设有<code>char a[20]=&quot;hello&quot;,b[20]=&quot;hi&quot;;</code>  </p><ol><li>strcpy(目标，来源);<br>此函数为复制函数，能将来源的字符串复制给目标。<br>示例：<code>strcpy(a,b);</code><br>运行后a数组和b数组都将等于”hi”。</li><li>strcat(目标，来源);<br>此函数为拼接函数，能将来源的字符串拼接到目标字符串后面。<br>示例：<code>strcat(a,b);</code><br>运行后a数组将等于”hellohi”，b数组不变。</li><li>strlen(数组名称);<br>此函数可以求出字符串长度（直到’\0’）。<br>示例：<code>strlen(a);</code><br>求出来的值是”hello”的长度5。因为a数组内部有赋值的部分是’h’,’e’,’l’,’l’,’o’,’\0’，strlen会从下标0开始往后计算直到第一个’\0’之前。<br>*若令<code>a[2]=&#39;\0&#39;</code>，则a数组内部有赋值的部分变为’h’,’e’,’\0’,’l’,’o’,’\0’，将导致strlen所求得的值变为2。<br>*若令<code>a[0]=&#39;\0&#39;</code>，则a数组内部有赋值的部分变为’\0’,’e’,’l’,’l’,’o’,’\0’，将导致strlen所求得的值变为0。  </li><li>strcmp(数组1名称，数组2名称);<br>此函数可以按字典序比较数组1中的字符串1与数组2中的字符串2的大小。若字符串1大则返回正数，小则返回负数，一样大则返回0。<br>*字典序的比较方法：<br>设有<code>char a[]=&quot;13&quot;,b[]=&quot;120&quot;;</code><br>字典序是逐位比较的。先比较下标0的位置，发现字符串1和2的该位置都是’1’，则继续比较下标1的位置，发现字符串1的该位置是’3’而字符串2的该位置是’2’，因为’3’&gt;’2’，所以字符串1比字符串2大。<br>再设有<code>char a[]=&quot;12&quot;,b[]=&quot;120&quot;;</code><br>先比较下标0的位置，发现字符串1和2的该位置都是’1’，则继续比较下标1的位置，发现字符串1和2的该位置都是’2’，则继续比较下标2的位置，发现字符串1的该位置是’\0’而字符串2的该位置是’0’，因为’\0’&lt;’0’，所以字符串1比字符串2小。</li></ol><p>以上就是对于字符数组的相关描述。对字符串的了解有没有清晰一些呢？现在开始介绍string类型，也即字符串类型。</p><h1 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h1><p>使用string类型需要包含string头文件。</p><p>上面说到，一个一维字符数组可以表示一个字符串。那么对于string类型，该如何表示一个字符串呢？答案是一个变量即可。string在有string头文件的情况下可以如int等类型一般使用。<br>示例：<code>string str=&quot;helloworld&quot;;</code><br>对于string类型，无需指定字符串长度，其内部会自动适配。且string类型可以在任意时候更改其赋值。如，可以在上述已有定义的情况下，令str=”hi”，则str会变成字符串”hi”。<br>尽管我们上述声明的str仅仅是一个变量，不是数组，但因为它是string类型，所以我们也可以使用下标来访问它内部的字符。如在string str=”helloworld”的基础上，我们可以访问str[4]得到其第五个字符’o’，也可以令str[4]=’r’使得str变为”hellrworld”。</p><p>同样的，对于string类型，我们也可以使用数组。如<code>string str[2]={&quot;hi&quot;,&quot;helloworld&quot;};</code>可以通过str[i]来访问在str数组中下标为i的字符串，也可以通过str[i][j]来访问在str数组中下标为i的字符串的下标为j的位置。更多维数组同理。</p><p>在string头文件中，提供了下列成员函数来对string类型变量进行操作。<br>基本假设：设有<code>string a=&quot;hello&quot;,b=&quot;hi&quot;;</code><br>（以下基于与上文中适用于字符数组的函数的对比）</p><ol><li>a=b;<br>可以直接令a的值等于b的值，使用赋值符号即可。</li><li>a=a+b;<br>可以直接令字符串a和字符串b拼接在一起产生一个新的字符串，然后再把这个新的字符串赋值给a。</li><li>length();<br>可以求得字符串a的长度（求值方法与strlen一致）。</li><li>直接使用运算符进行比较。比较方法仍然是根据字典序（详见上文）。</li></ol><p>以上，我们可以显而易见地发现，使用string类型比使用char数组更为方便。故实际使用时，若无特殊要求，一般建议使用string类型。</p><p>第五章到此结束。</p><p>本章练习：<br><a href="https://www.luogu.org/problemnew/show/P1055" target="_blank" rel="noopener">P1055 ISBN号码</a><br><a href="https://www.luogu.org/problemnew/show/P1200" target="_blank" rel="noopener">P1200 [USACO1.1]你的飞碟在这儿Your Ride Is Here</a><br><a href="https://www.luogu.org/problemnew/show/P1308" target="_blank" rel="noopener">P1308 统计单词数</a><br><a href="https://www.luogu.org/problemnew/show/P1914" target="_blank" rel="noopener">P1914 小书童——密码</a><br><a href="https://www.luogu.org/problemnew/show/P1553" target="_blank" rel="noopener">P1553 数字反转（升级版）</a></p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语言-4-数组</title>
      <link href="/cpp/cpp-4/"/>
      <url>/cpp/cpp-4/</url>
      
        <content type="html"><![CDATA[<p>本章学习数组的定义及使用方式。<br><a id="more"></a><br>数组，实际上就是一段连续的存储区间，概念上就是一个变量（元素）的集合。<br>以变量作为例子，每定义一个变量，就相当于为这个变量声明了一个存储空间，用来保存它的值。而当你声明了很多变量时，比如你声明了10个不同变量，那就在内存里占用了10个单位的存储空间。但是，如果你使用数组的话，声明长度为10的数组，也相当于占用了10个单位的存储空间，且是连续的，所以又叫存储区间。<br>语句就是：<br><code>类型　名称[长度];</code><br>如：<br><code>int a[10];</code><br>其中数组名称的命名要求也与变量一致。<br>设名称为a，长度为n，用一张表格来表示的话，就是下面这样。</p><table><thead><tr><th>a0</th><th>a1</th><th>a2</th><th>…</th><th>a(n-2)</th><th>a(n-1)  </th></tr></thead><tbody><tr><td>值1</td><td>值2</td><td>值3</td><td>…</td><td>值n-1</td><td>值n</td></tr></tbody></table><p>这样的一张表格，就表示一个数组。有0~n-1一共n个元素，每个元素对应一个值，并且每个元素都可以完全像变量一样使用。<br>也可以用一个0~n-1的整数坐标轴来表示，每个整数点上有一个值。<br>效果就相当于你定义了a0，a1，a2，…，an-1一共n个变量。<br>简单说，就是：  </p><ol><li>可以当做变量使用。</li><li>是一个有n个不同下标的元素的集合。</li></ol><p>如上，这是一维数组。那么二维数组怎么表示呢？<br><code>int a[n][m];</code><br>这样就是定义了一个n*m个单位的二维数组。表格形式如下。</p><table><thead><tr><th>a</th><th>0</th><th>1</th><th>2</th><th>…</th><th>m-2</th><th>m-1</th></tr></thead><tbody><tr><td>0</td><td></td><td></td><td></td><td>…</td><td></td><td></td></tr><tr><td>1</td><td></td><td></td><td></td><td>…</td><td></td><td></td></tr><tr><td>2</td><td></td><td></td><td></td><td>…</td><td></td><td></td></tr><tr><td>…</td><td></td><td></td><td></td><td>…</td><td></td><td></td></tr><tr><td>n-2</td><td></td><td></td><td></td><td>…</td><td></td><td></td></tr><tr><td>n-1</td><td></td><td></td><td></td><td>…</td><td></td><td></td></tr></tbody></table><p>每个元素属于某一行某一列，设i表示行，j表示列，则当i和j确定时，所对应的元素唯一确定。<br>以此类推，还有三维数组，四维五维……不过常用的就是一维和二维了。  </p><p>当一个数组定义后，我们可以通过“数组下标”来访问数组内的元素。所谓“数组下标”就是数组后中括号里填的东西。如，假设我们现在有一个定义：<code>int a[100];</code>则我们可以使用a[i]来访问a数组中下标为i的元素，i的范围为0-99。<br>发现了吧？假设数组被定义的长度为n，则可以使用的下标范围就是0~n-1，这正是上文中之所以写a0,a1,…,an-1的原因。这不以编程人员的意志为转移。哪怕你不使用下标为0的位置，它还是在那里，你最大可使用下标还是n-1。<br>所以，设有<code>int a[100];</code>则对于每一个a[i]，都可以像普通变量一样使用。a[i]可以参与运算，也可以在等式左边来接受一个值。如<code>int b=a[1];</code>表示定义一个int类型变量b，并令其等于a数组第二个元素的值。同样的，也可以写<code>a[10]=100;</code>表示令a数组的第十一个元素的值等于100。<br>同理，对于二维数组，可以使用a[i][j]来访问a数组中第i行第j列的元素。两个维度的下标范围各自分离。如有<code>int a[n][m];</code>则在a数组中第一维下标范围为0~n-1，第二维的下标范围为0~m-1。二维数组的a[i][j]，就如同一维数组的a[i]，就如同普通变量，可以参与运算或在等式左边来接受一个值。<br>更多维数组可以以此类推。  </p><p>但是数组只是定义的话，依然也是如同定义的变量一样，初始是未赋值状态。已知我们可以<code>int a=0;</code>来定义一个int类型的变量a，并对其赋初始值0。那么我们想对数组也进行每个位都赋初始值，该怎么做呢？可以写成如下形式：<br><code>int a[100]={0};</code><br>如上语句声明了一个int类型的数组a，有100个单位，将其每个单位都赋值为初始值0。<br>但要注意的是，如果想赋初始值1，这样写是不行的：<br><code>int a[100]={1};</code><br>这样将导致只有a[0]的值被初始化为1，其余位仍然都是0。<br>我们称这个1为显式指定的初始值。当使用大括号初始化时，数组会按顺序分配所有显式指定的初始值，而对没有显式指定的其余位置均分配为0。<br>例如，<code>int a[100]={3,1,2,4};</code>这样会按顺序令<code>a[0]=3,a[1]=1,a[2]=2,a[3]=4</code>，之后令其余位置均赋初始值为0。<br>所以，如果想全部初始化为1，则要么手写n个1在大括号里，要么用循环令a[i]=1。<br>而对于多维数组，我们则需要使用嵌套大括号。假设有<code>int a[2][3];</code>则可以以如下方式初始化：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></p><p>因为数组第一维的容量是2，所以在最外层大括号中嵌套两层大括号，表示分别对第一维的每一行的三列进行初始化。而因为数组第二维容量是3，所以在每个第二级大括号里写3个数。<br>上述声明执行过后，会令<code>a[0][0]=3,a[0][1]=4,a[0][2]=5,a[1][0]=1,a[1][1]=2,a[1][2]=3。</code><br>但其实写成这样：<code>int a[2][3]={3,4,5,1,2,3};</code>结果也与上述写法相同，只是对于人类来说没有那么直观。<br>为什么会一样呢？因为数组内部在分配顺序的时候，是从最后一维开始分配的，比如有三维数组<code>a[2][2][2]</code>，则顺序是<code>a[0][0][0],a[0][0][1],a[0][1][0],a[0][1][1],a[1][0][0],a[1][0][1],a[1][1][0],a[1][1][1]</code>。可见，顺序的规则是恒定不变的，需要的是程序员来调整初始化数值的顺序。<br>需要注意的是，如果不采用嵌套大括号，则必然是按顺序初始化。而采用嵌套大括号的话，可以按需求针对不同维度进行初始化。示例如下：<br>假设有二维数组:<br><code>int a[4][4];</code><br>则我可以写:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">4</span>][<span class="number">4</span>]=&#123;&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></p><p>进行初始化。初始化的结果为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>,a[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>,a[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">1</span></span><br><span class="line">a[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>,a[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">2</span></span><br><span class="line">a[<span class="number">2</span>][<span class="number">0</span>]=<span class="number">3</span>,a[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span>,a[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">4</span>,a[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">5</span></span><br><span class="line">a[<span class="number">3</span>][<span class="number">0</span>]=<span class="number">6</span></span><br></pre></td></tr></table></figure></p><p>其余单位因为没有显式指定而均为0。</p><p>第四章到此结束。</p><p>本章练习：<br><a href="https://www.luogu.org/problemnew/show/P1046" target="_blank" rel="noopener">P1046 陶陶摘苹果</a><br><a href="https://www.luogu.org/problemnew/show/P1427" target="_blank" rel="noopener">P1427 小鱼的数字游戏</a><br><a href="https://www.luogu.org/problemnew/show/P1428" target="_blank" rel="noopener">P1428 小鱼比可爱</a><br><a href="https://www.luogu.org/problemnew/show/P1567" target="_blank" rel="noopener">P1567 统计天数</a><br><a href="https://www.luogu.org/problemnew/show/P1047" target="_blank" rel="noopener">P1047 校门外的树</a><br><a href="https://www.luogu.org/problemnew/show/P2141" target="_blank" rel="noopener">P2141 珠心算测验</a></p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语言-3-循环语句及选择语句</title>
      <link href="/cpp/cpp-3/"/>
      <url>/cpp/cpp-3/</url>
      
        <content type="html"><![CDATA[<p>本章学习循环结构和选择结构的基本用法。<br><a id="more"></a></p><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><p><font size="5"><b>while语句</b></font><br>while语句实现”当型”循环，它的一般格式为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (判断条件)</span><br><span class="line">&#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1、当判断条件成立时，循环执行大括号中语句。并且初始化部分和迭代部分是任选的。<br>2、while语句首先检查判断条件，当条件满足时，才去执行循环中的语句。这是”当型”循环的特点。  </p><p><font size="5"><b>do-while语句</b></font><br>do-while语句实现”直到型”循环，它的一般格式为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;<span class="keyword">while</span> (判断条件);</span><br></pre></td></tr></table></figure></p><p>1、do-while语句首先执行循环体，然后检查判断条件，若成立，则循环执行大括号中的语句，直到判断条件不成立。<br>2、与while语句不同的是，do-while语句的循环体至少执行一次，是”直到型”循环的特点。  </p><p><font size="5"><b>for语句</b></font><br>for语句也用来实现”当型”循环，它的一般格式为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化操作;判断条件;迭代部分)</span><br><span class="line">&#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>1、for语句执行时，首先执行初始化操作，然后检查判断条件是否满足，如果满足，则执行循环体中的语句，最后执行迭代部分。完成一次循环后，重新判断终止条件。<br>2、可以在for语句的初始化部分声明一个变量，它的作用域为一个for语句。<br>3、for语句通常用来执行循环次数确定的情况(如对数组元素进行操作)，也可以根据循环结束条件执行循环次数不确定的情况。<br>4、在初始化部分和迭代部分可以使用逗号语句，来进行多个动作。逗号语句是用逗号分隔的语句序列。例如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>,j=<span class="number">10</span>;i&lt;j;i++,j--)</span><br><span class="line">&#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5、初始化、终止以及迭代部分都可以为空语句，且只要判断条件为空，就相当于一个无限循环，如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;;i++)</span><br><span class="line">&#123;</span><br><span class="line">    循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><font size="4"><b>循环语句的控制</b></font><br>1、break<br>跳出当前所在循环，忽略break以下的所有语句。<br>2、continue<br>直接执行下一次循环，忽略continue以下的所有语句。  </p><h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><p><font size="5"><b>if-else语句</b></font><br>一般格式为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件)</span><br><span class="line">&#123;</span><br><span class="line">    语句<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    语句<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当判断条件成立时，执行语句1，否则执行语句2。  </p><p><font size="5"><b>switch语句</b></font><br>一般格式为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(变量)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    语句<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当变量为值1时执行语句1，当为值2时执行语句2，当不为已给出的任何情况时执行default的语句3。<br>case可以无限添加，不只限2个。<br>需要注意的是，当你没有break时，会一直向下执行。如以下程序段，若变量为值1，则语句1,2,3都将被执行。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(变量)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">    语句<span class="number">1</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">    语句<span class="number">2</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    语句<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="逻辑判断符号"><a href="#逻辑判断符号" class="headerlink" title="逻辑判断符号"></a>逻辑判断符号</h1><p>小于：<code>&lt;</code>  大于：<code>&gt;</code>  等于：<code>==（两个等号）</code>  小于等于：<code>&lt;=</code>  大于等于：<code>&gt;=</code>  不等于：<code>!=</code><br>特别的，计算时用的等于只有一个等号，判断时才用两个等号。<br>逻辑联结符号<br>且：<code>&amp;&amp;</code>  或：<code>||</code><br>或的符号由两个竖线组成，竖线可以由回车上方的那个键打出。<br>如：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(((x&gt;<span class="number">1</span>||x&lt;<span class="number">-1</span>)&amp;&amp;y&gt;<span class="number">2</span>)||(x&lt;<span class="number">-9</span>&amp;&amp;y&gt;<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line">    sum=sum+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样表示当满足以下两种情况之一时，sum的值+1。<br>① x大于1且y大于2，或x小于-1且y大于2时。<br>② x小于-9且y大于0时。<br>特别的，使用if(条件1||条件2)的时候，如果条件1成立，则不会判断条件2是否成立，直接进入if的语句块。<br>上述两种符号也属于运算符。<br>使用逻辑符号时的要点<br>*不可以写连等式，如：<br>如果x大于0小于100，不可以写if(0&lt;x&lt;100)，必须拆开，写成if(0&lt;x&amp;&amp;x&lt;100)。其余逻辑符号同理。</p><p>第三章到此结束。</p><p>本章练习：<br>选择语句：<br><a href="https://www.luogu.org/problemnew/show/P1422" target="_blank" rel="noopener">P1422 小玉家的电费</a><br><a href="https://www.luogu.org/problemnew/show/P1085" target="_blank" rel="noopener">P1085 不高兴的津津</a><br><a href="https://www.luogu.org/problemnew/show/P1089" target="_blank" rel="noopener">P1089 津津的储蓄计划</a><br><a href="https://www.luogu.org/problemnew/show/P1909" target="_blank" rel="noopener">P1909 买铅笔</a><br><a href="https://www.luogu.org/problemnew/show/T16594" target="_blank" rel="noopener">T16594 小明的四则运算</a></p><p>循环语句：<br><a href="https://www.luogu.org/problemnew/show/P1008" target="_blank" rel="noopener">P1008 三连击</a><br><a href="https://www.luogu.org/problemnew/show/P1035" target="_blank" rel="noopener">P1035 级数求和</a><br><a href="https://www.luogu.org/problemnew/show/P1423" target="_blank" rel="noopener">P1423 小玉在游泳</a><br><a href="https://www.luogu.org/problemnew/show/P1424" target="_blank" rel="noopener">P1424 小鱼的航程(改进版)</a><br><a href="https://www.luogu.org/problemnew/show/P1980" target="_blank" rel="noopener">P1980 计数问题</a><br><a href="https://www.luogu.org/problemnew/show/T17068" target="_blank" rel="noopener">T17068 有多少平方数</a><br><a href="https://www.luogu.org/problemnew/show/T17072" target="_blank" rel="noopener">T17072 是质数吗？</a><br><a href="https://www.luogu.org/problemnew/show/T17073" target="_blank" rel="noopener">T17073 什么？！n！</a><br><a href="https://www.luogu.org/problemnew/show/T17071" target="_blank" rel="noopener">T17071 四个数的2nd问题</a></p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语言-2-数据类型与输入输出</title>
      <link href="/cpp/cpp-2/"/>
      <url>/cpp/cpp-2/</url>
      
        <content type="html"><![CDATA[<p>本章将学习基本数据类型与输入输出的方法。<br><a id="more"></a><br>首先，请大家先熟悉下面的计算指定的a+b的和并输出的代码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    c=a+b;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;c;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>样例输入：<code>2 3</code><br>样例输出：<code>5</code><br>在前一篇中讲过的部分就不再赘述，直接从第五行开始讲起。  </p><p>第五行：<br><code>int a,b,c;</code><br>定义三个变量，分别叫做a,b,c，返回int类型（整型），句末要有分号。可以在定义里赋值，如<code>int a=1,b=1,c=1;</code>。int后面要有一个空格。  </p><p>常用数据类型：<br>short有符号（即表示有正负，下同）短整型，范围-32768~32767（-2^15~2^15-1），只支持整数。<br>unsigned short无符号短整型，范围0~65535（2^16-1），只支持整数。<br>int有符号整型，范围-2147483648~2147483647（-2^31~2^31-1），只支持整数。<br>unsigned int无符号整型，范围0～4294967295（2^32-1），只支持整数。<br>long long有符号长整型，范围-9223372036854775808~9223372036854775807（-2^63~2^63-1），只支持整数。<br>unsigned long long无符号长整型，范围0~18446744073709551615（2^64-1），只支持整数。<br>float单精度，支持小数，有效数字约8位，范围-3.40<em>(10的38次方)~3.40</em>(10的38次方)。<br>double双精度，支持小数，有效数字约16位，范围-1.79<em>(10的308次方)~1.79</em>(10的308次方)。<br>char有符号字符型，不支持字符串，范围-128~127。<br>unsigned char无符号字符型，不支持字符串，范围0~255。<br>string字符串，在第五章中有具体说明。<br>bool布尔型，范围true或false，即非0或0。<br>*当遇见有的程序只写一个unsigned时，默认是unsigned int。<br>*在没有特殊强调时，整数类型一般用int，超过int的范围时可以使用long long或unsigned long long，别的一般不常用；浮点数类型一般用double，少用float。</p><p>标识符：<br>上文中提到的变量，就是标识符的一种。<br>对于所有的标识符，均需要满足如下名称要求：  </p><ol><li>只能是字母或下划线开头，严格区分大小写。  </li><li>不可以包含数字或字母或下划线以外的其余符号。  </li><li>不可以是系统正在使用的名称。如在linux系统中time是一个系统变量，则不可以使用time作为变量名称。  </li></ol><p>变量定义的写法：  </p><ol><li>定义一个int类型的变量a，写作<code>int a;</code>  </li><li>定义一个long long类型的变量a，写作<code>long long a;</code>  </li><li>定义一个float类型的变量a，写作<code>float a;</code>  </li><li>定义一个double类型的变量a，写作<code>double a;</code>  </li><li>定义一个char类型的变量a，写作<code>char a;</code>  </li><li>定义一个string类型的变量a，写作<code>string a;</code>  </li></ol><p>*string在编程环境中不会变色，但仍是可用类型。<br>*要使用string类型，需要<code>#include&lt;string&gt;</code>。<br>*string的具体用法在第五章中有具体说明。<br>*定义里可以直接赋值，如<code>int a=123;</code><br>*定义里一句可以写多个变量，如<code>int a,b,c;</code><br>*如在定义时直接对变量赋值，需要对每个想赋值的变量都赋值。<br>&ensp;如：<code>int a,b=1;</code>则a是未赋值变量，b被赋值为1<br>&ensp;再如：<code>int a=2,b=1;</code>则a被赋值为2，b被赋值为1  </p><p>第六行：<br><code>cin&gt;&gt;a&gt;&gt;b;</code><br>按顺序输入一个变量a和一个变量b。cin包含在iostream中。句末有分号。<br>*每输入一个变量都需要写两个&gt;符号（该符号是半角大于号），箭头指向要输入的变量。<br>*cin和cout会自动识别输入/输出的值的类型，无需特意说明。<br>*若是使用cstdio头文件的话，需要写成<code>scanf(“%d%d”,&amp;a,&amp;b);</code>句末有分号，在变量前需加<code>&amp;</code>这个符号，相邻变量以逗号隔开。<code>&quot;%d&quot;</code>的意思是按整型来操作，有两个变量所以写两个%d。<br>*scanf会比cin快一些，在输入量很大（大于10万个数据）时建议使用scanf。printf同理。  </p><p>对于scanf和printf，其均满足以下写法：<br>scanf(格式说明字符串,操作数);<br>printf(格式说明字符串,操作数);<br>其中，scanf和printf均可以只写格式说明字符串而不写操作数。当且仅当格式说明字符串中出现格式说明符（又叫占位符）时，才填写操作数。<br>并且，scanf和cin一样，均会自动跳过回车，且在格式说明符不为%c和%s时均会跳过空格。  </p><p>示例：<br>仅格式说明字符串：<br><code>scanf(&quot;a=b=&quot;);</code><br>当输入是a=b=时可以正常执行<br><code>printf(&quot;a=b=&quot;);</code><br>输出字符串a=b=<br>仅占位符：<br><code>scanf(&quot;%d%d&quot;,&amp;a,&amp;b);</code><br>当输入仅有两个数字时可以正常执行，按格式说明符%d来操作变量a和b<br><code>printf(&quot;%d&quot;,c);</code><br>按格式说明符%d来操作变量c<br>混用：<br><code>scanf(&quot;a=%d,b=%d&quot;,&amp;a,&amp;b);</code><br>当输入格式满足例如<code>a=1,b=2</code>时（就连逗号也不能漏掉），输入取得值1和2，分别赋值给a和b<br><code>printf(&quot;c=%d&quot;,c);</code><br>将会原样输出c=，之后将变量c的值按格式说明符%d操作后，输出值  </p><p>又如，本文开头的代码段可以转化为如下代码段，样例也可转化为对应样例：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b,c;</span><br><span class="line">    <span class="built_in">scanf</span>(“a=%d,b=%d”,&amp;a,&amp;b);</span><br><span class="line">    c=a+b;</span><br><span class="line">    <span class="built_in">printf</span>(“c=%d”,c);</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>样例输入：<br><code>a=2,b=3</code><br>样例输出：<br><code>c=5</code></p><p>注意到上文中，scanf的操作数前有加”&amp;”符号，而printf的操作数前没有。关于&amp;，将会在第十章中说明。</p><p>附，常见格式说明符：<br>%d，表示按int类型处理<br>%lld，表示按long long类型处理<br>%ull，表示按unsigned long long类型处理<br>%c，表示按char类型处理<br>%s，表示按char数组来进行处理（关于数组，后续章节会讲到）<br>%f，表示按float类型处理<br>%lf，表示按double类型处理（因为double本质上是long float，所以其格式操作符取long float的缩写）<br>上述格式操作符均会跳过空格和换行符。也就是说，在使用cin、或在scanf中使用上述格式操作符时，输入的不同值可以使用空格或换行符隔开。  </p><p>关于格式操作符的特殊操作（以下仅1可以适用于scanf，其余均仅适用于printf）：<br>1、按照指定宽度保留数字的方法：<br>如对int类型保留4个数字的位宽，格式操作符可选用%4d<br>*当数字的实际宽度大于要保留的位宽时，按照原宽度输出。所以若是%0d，就是按原宽度输出<br>*当数字的实际宽度小于要保留的位宽时，将数字右对齐，并在左边补空格填充<br>2、保留指定位数的小数（直接舍去，并不四舍五入）的方法：<br>如对double类型保留两位小数，格式操作符可选用%0.2lf<br>对其中0的说明，参加第1条；而小数点后的2，就表示保留两位小数<br>此种情况下，0可以省略，如%0.2lf与%.2lf等效<br>*内部操作是先计算保留小数，再计算保留位宽<br>*对于小数，小数点也占一个位宽，所以如对于2.15使用格式说明符%4.1lf的话，会因为先计算保留1位小数而变为2.1，此时位宽为3。再因为保留4个位宽，而在2.1前补一个空格后输出<br>3、可以使用0来代替空格进行填充（填充后需符合保留小数位数的要求，以及不能改变原数字大小）：<br>如对于int类型数字100，使用格式操作符%4d，本来是在左边填充一个空格，如果改用格式操作符%04d的话，就会变成在左边填充一个0，这样执行<code>printf(&quot;%04d&quot;,100);</code>就会输出0100<br>4、可以使用-来实现左对齐<br>如对于int类型数字100，使用格式操作符%-4d，就会在100右边填充一个空格后输出<br>但如果使用格式操作符%-04d，并不会在右边填充一个0，因为这样会改变100原本的值，所以输出会是100和一个空格  </p><p>综上，如果想对一个double类型的变量a，保留5位位宽，保留1位小数，用0填充空位，实现左对齐的话，可以写成：<code>printf(&quot;%-05.1lf&quot;,a);</code></p><p>第七行：<br><code>c=a+b;</code><br>本句的执行过程是，先计算a+b的值，再赋值给c。本语句称之为赋值语句。赋值语句的等号左边必须是一个可以被赋值的对象。<br>其中，对于+号，=号，我们均称之为运算符。<br>常见运算符有：<br><code>+</code>,<code>-</code>,<code>*</code>,<code>\</code>，分别表示加减乘除<br><code>=</code>，表示赋值，先计算等式右边的值，再赋值给左边的对象<br><code>%</code>，表示取模，功能类似于取余数。如<code>int a=100%7;</code>最终c的值将等于100除以7的余数2<br><code>+=</code>，表示自加运算。如<code>i+=2</code>，表示<code>i=i+2</code>。其它的<code>-=</code>，<code>*=</code>，<code>/=</code>，<code>%=</code>同理<br><code>++</code>，表示自加1运算。如i++，表示<code>i=i+1</code>。三个或更多加号则不成立，只有两个+号的++可以表示自加运算。<br>*特别的，++有前置和后置两种写法，如i++和++i，最终都会导致i=i+1。<br>*当i++或++i单独存在时，它们并无区别。但当它们处于赋值语句中时，会引发差别。<br>i++是先取得i的值，再自加；++i是先自加，再取得i的值。<br>如，现在有<code>int i=1,a;</code>然后令<code>a=i++</code>，则先取得i的值1，赋值给a，然后i再自加，i变成2，所以执行完后a=1，i=2。<br>相对的，如现在有<code>int i=1,a;</code>然后令<code>a=++i</code>，则i先自加，i变成2，再取得i的值2，赋值给a，所以执行完后a=,2，i=2。<br>–与++同理。只有加减有这种写法，别的没有。  </p><p>第二章到此结束。<br>感谢PTW对本文的援助。</p><p>本章练习：<br><a href="https://www.luogu.org/problemnew/show/P1001" target="_blank" rel="noopener">P1001 A+B Problem</a><br><a href="https://www.luogu.org/problemnew/show/P1421" target="_blank" rel="noopener">P1421 小玉买文具</a><br><a href="https://www.luogu.org/problemnew/show/P1425" target="_blank" rel="noopener">P1425 小鱼的游泳时间</a></p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++语言-1-入门篇</title>
      <link href="/cpp/cpp-1/"/>
      <url>/cpp/cpp-1/</url>
      
        <content type="html"><![CDATA[<p>本章用以给新手入门。<br><a id="more"></a><br>首先，请大家先熟悉下面的，输出一串字符”helloworld”的代码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;”helloworld”&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是一句注释</span></span><br></pre></td></tr></table></figure></p><p>该代码编译运行后，显示的结果如下面这一行：</p><p><pre>helloworld</pre><br>现在开始逐行解释。<br>1、<br><code>#include&lt;iostream&gt;</code>，这句的意思是程序中包含一个叫做iostream的头文件，格式是<code>#include&lt;&gt;</code>，头文件名称填在单书名号中。单书名号结尾不需要加分号。需要包含多个头文件时换行写即可。<br>例：<br><code>#include&lt;iostream&gt;</code><br><code>#include&lt;cstdio&gt;</code><br>也有用双引号的，如<code>#include&quot;cstdio&quot;</code>，虽然这样也可以，不过建议写单书名号。区别在于双引号的是查找自己编写的类库（头文件），而单书名号是查找编译环境自带的类库。<br>常用头文件有：<br>iostream，这个单词由in/out stream组成，是标准输入输出流。<br>cstdio，这个单词由c++ standard in/out组成，是标准输入输出。<br>cmath，这个单词由c++ math组成，是数学库。<br>cstring，这个单词由c++ string组成，是与字符处理有关的头文件。<br>string，这个单词本身就存在，翻译名为“字符串”，使用string类型时需要包含该头文件。<br>algorithm，这个单词本身就存在，翻译名为“算法”，主要包含一些现成的函数。<br>有时候也会见到如”stdio.h”的头文件，这是C语言的头文件，不用管。请大家按C++写法写头文件。<br>2、<br><code>using namespace std;</code><br>这句话，称为“使用(using)命名空间(namespace)std”，其中namespace就是“姓名”和“空间”两个单词的组合，称为“命名空间”。而std是standard的缩写，表示“标准的”。<br>这句话写在所有include之后，不可修改。这是硬性规定，不做赘述。句末要有分号。不论包含多少头文件，都只需写一次。<br>3、<br><code>int main()</code><br>main()表示主函数，括号不可丢，句末无分号。前面的int表示main函数返回int类型。这句其实也是硬性规定。<br>4、<br>左大括号，与第8行的右大括号匹配，构成一个封闭区域，表示main函数的函数体。<br>大括号是函数的界限，表示这一组大括号里面的所有内容都属于这个函数。括号是一一匹配的，不会重复匹配，且每个左大括号只会匹配到离自己最近的且未被匹配的右大括号。<br>5、<br><code>cout&lt;&lt;&quot;helloworld&quot;&lt;&lt;endl;</code><br>输出一个句子并换行。<br>表示输出的是”cout”，是c++ out的缩写。要使用cout，需要包含iostream头文件。<br>这个“句子”的专业表述为“字符串”，因为每个句子实际上都是由一串字符构成的。输出时，在输出的内容中没有双引号。<br>endl是end line的缩写，表示一个换行符。所谓的换行符，就是通常意义上的回车。在输出换行符后，字符串末尾将如同被按下一个回车，光标会来到下一行。<br>*每输出一个变量都需要写两个单书名号，箭头指向cout。<br>&ensp;如<code>cout&lt;&lt;a&lt;&lt;b&lt;&lt;c;</code>//按先后顺序输出三个变量a，b，c。<br>*直接按此方法输出时三个变量会连在一起，如a=1，b=2，c=3时，输入为123，这时需要手动添加空格作为分隔符，代码更改为<code>cout&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;&quot; &quot;&lt;&lt;c;</code>输出变更为1 2 3。<br>*cout支持两种换行符，endl和”\n”，如<code>cout&lt;&lt;endl;</code>或<code>cout&lt;&lt;&quot;\n&quot;;</code>都可以做到换行。<br>*endl中是小写的L，而不是数字1。  </p><p>既然cout是输出，相对的，就有输入。<br>表示输出的是”cin”，是c++ in的缩写。要使用cin，需要包含iostream头文件。<br>cin的用法，将在下一篇章中说明。<br>6、<br><code>return 0;</code><br>表示正常结束程序。主函数的最后必须有这一句话，句末有分号，写在主函数中时不可改动。<br>不论写在主函数的何处，只要程序执行时遇到这句话，都将使得程序正常结束。<br>7、<br>右大括号，与第4行的左大括号匹配，构成一个封闭区域，表示main函数的函数体。<br>大括号是函数的界限，表示这一组大括号里面的所有内容都属于这个函数。括号是一一匹配的，不会重复匹配，且每个右大括号只会匹配到离自己最近的且未被匹配的左大括号。<br>8、<br>两个除号，<code>//</code>，表示注释，程序将会忽视在<code>//</code>之后的这一行的所有内容<br>如果需要多行注释，可以选择<code>/*内容*/</code>的方式，程序将会忽略<code>/*</code>和<code>*/</code>之间的所有内容。<br>示例：<br><code>这里还没被忽略//这句会被忽略</code>  </p><p><code>这句也没被忽略</code>  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*我们</span></span><br><span class="line"><span class="comment">这几行</span></span><br><span class="line"><span class="comment">全都</span></span><br><span class="line"><span class="comment">被忽略了*/</span></span><br></pre></td></tr></table></figure><p>以上，就是对于本篇开头的代码段的完整解释。<br>至此，可以总结出一个C++程序的基本框架。写程序时可以先打好该框架，然后再继续填充。<br>框架如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到此，第一章结束！<br>感谢PTW对本文的援助。</p>]]></content>
      
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/others/hello-world/"/>
      <url>/others/hello-world/</url>
      
        <content type="html"><![CDATA[<p>这篇文章是Hexo自带的文章，有兴趣的各位可以浏览。<br><a id="more"></a><br>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
